<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sean&#39;s Notes</title>
  <subtitle>Stay hungry, stay foolish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://seanlook.com/"/>
  <updated>2017-10-17T08:32:49.000Z</updated>
  <id>http://seanlook.com/</id>
  
  <author>
    <name>seanlook</name>
    <email>seanlook7@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL实例阻塞分析一例(线程statistics状态)</title>
    <link href="http://seanlook.com/2017/10/17/rds_disk_io_troubleshooting/"/>
    <id>http://seanlook.com/2017/10/17/rds_disk_io_troubleshooting/</id>
    <published>2017-10-17T08:32:49.000Z</published>
    <updated>2017-10-17T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-现象"><a href="#1-现象" class="headerlink" title="1. 现象"></a>1. 现象</h1><p>某日下午下班后低峰期，现网MySQL一个库突然报出大量慢sql，状态是 <code>statistics</code>，但是过后拿这些sql去执行的时候，实际很快。处于 statistics 状态的线程有个特征：查询的都是视图，但看监控那个时间段并没有明显的update/detele/insert。通过我们的快照程序，去分析当时的 innodb status，发现如下信息：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">SEMAPHORES</div><div class="line"><span class="comment">----------</span></div><div class="line">OS WAIT ARRAY INFO: reservation count 17208994</div><div class="line"><span class="comment">--Thread 139964610234112 has waited at srv0srv.cc line 2132 for 14.00 seconds the semaphore:</span></div><div class="line">X-<span class="keyword">lock</span> (wait_ex) <span class="keyword">on</span> RW-latch <span class="keyword">at</span> <span class="number">0x1635a00</span> created <span class="keyword">in</span> <span class="keyword">file</span> dict0dict.cc line <span class="number">900</span></div><div class="line">a writer (<span class="keyword">thread</span> <span class="keyword">id</span> <span class="number">139964610234112</span>) has reserved it <span class="keyword">in</span> <span class="keyword">mode</span> <span class="keyword">wait</span> exclusive</div><div class="line"><span class="built_in">number</span> <span class="keyword">of</span> readers <span class="number">1</span>, waiters flag <span class="number">0</span>, lock_word: ffffffffffffffff</div><div class="line"><span class="keyword">Last</span> <span class="keyword">time</span> <span class="keyword">read</span> <span class="keyword">locked</span> <span class="keyword">in</span> <span class="keyword">file</span> row0purge.cc line <span class="number">720</span></div><div class="line"><span class="keyword">Last</span> <span class="keyword">time</span> write <span class="keyword">locked</span> <span class="keyword">in</span> <span class="keyword">file</span> /home/<span class="keyword">admin</span>/<span class="number">146</span>_20161018140650857_13830810_code/rpm_workspace/<span class="keyword">storage</span>/innobase/srv/srv0srv.cc line <span class="number">2132</span></div><div class="line">OS <span class="keyword">WAIT</span> <span class="built_in">ARRAY</span> INFO: signal <span class="keyword">count</span> <span class="number">256984450</span></div><div class="line"><span class="keyword">Mutex</span> spin waits <span class="number">626367674</span>, rounds <span class="number">2776951802</span>, OS waits <span class="number">1973672</span></div><div class="line">RW-<span class="keyword">shared</span> spins <span class="number">149944457</span>, rounds <span class="number">1650148561</span>, OS waits <span class="number">3972058</span></div><div class="line">RW-excl spins <span class="number">72090467</span>, rounds <span class="number">2017802579</span>, OS waits <span class="number">11148264</span></div><div class="line">Spin rounds per <span class="keyword">wait</span>: <span class="number">4.43</span> <span class="keyword">mutex</span>, <span class="number">11.01</span> RW-<span class="keyword">shared</span>, <span class="number">27.99</span> RW-excl</div><div class="line">...</div><div class="line"><span class="keyword">FILE</span> I/O</div><div class="line"><span class="comment">--------</span></div><div class="line">I/O <span class="keyword">thread</span> <span class="number">0</span> state: waiting <span class="keyword">for</span> i/o request (<span class="keyword">insert</span> buffer <span class="keyword">thread</span>)</div><div class="line">I/O <span class="keyword">thread</span> <span class="number">1</span> state: waiting <span class="keyword">for</span> i/o request (<span class="keyword">log</span> <span class="keyword">thread</span>)</div><div class="line">I/O <span class="keyword">thread</span> <span class="number">2</span> state: waiting <span class="keyword">for</span> i/o request (<span class="keyword">read</span> <span class="keyword">thread</span>)</div><div class="line">I/O <span class="keyword">thread</span> <span class="number">3</span> state: doing <span class="keyword">file</span> i/o (<span class="keyword">read</span> <span class="keyword">thread</span>) ev <span class="keyword">set</span></div><div class="line">I/O <span class="keyword">thread</span> <span class="number">4</span> state: waiting <span class="keyword">for</span> i/o request (<span class="keyword">read</span> <span class="keyword">thread</span>)</div><div class="line">I/O <span class="keyword">thread</span> <span class="number">5</span> state: doing <span class="keyword">file</span> i/o (<span class="keyword">read</span> <span class="keyword">thread</span>) ev <span class="keyword">set</span></div><div class="line">I/O <span class="keyword">thread</span> <span class="number">6</span> state: doing <span class="keyword">file</span> i/o (write <span class="keyword">thread</span>) ev <span class="keyword">set</span></div><div class="line">I/O <span class="keyword">thread</span> <span class="number">7</span> state: waiting <span class="keyword">for</span> i/o request (write <span class="keyword">thread</span>)</div><div class="line">I/O <span class="keyword">thread</span> <span class="number">8</span> state: waiting <span class="keyword">for</span> i/o request (write <span class="keyword">thread</span>)</div><div class="line">I/O <span class="keyword">thread</span> <span class="number">9</span> state: waiting <span class="keyword">for</span> i/o request (write <span class="keyword">thread</span>)</div><div class="line">Pending <span class="keyword">normal</span> aio <span class="keyword">reads</span>: <span class="number">18</span> [<span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">6</span>] , aio writes: <span class="number">1</span> [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>] ,</div><div class="line">ibuf aio <span class="keyword">reads</span>: <span class="number">0</span>, <span class="keyword">log</span> i/o<span class="string">'s: 0, sync i/o'</span>s: <span class="number">0</span></div><div class="line">Pending flushes (fsync) <span class="keyword">log</span>: <span class="number">0</span>; buffer pool: 0</div><div class="line">1346747614 OS file reads, 2869418806 OS file writes, 524616747 OS fsyncs</div><div class="line">22 pending preads, 1 pending pwrites</div><div class="line">6.00 reads/s, 16384 avg bytes/read, 0.00 writes/s, 0.00 fsyncs/s</div><div class="line">...</div><div class="line">ROW OPERATIONS</div><div class="line"><span class="comment">--------------</span></div><div class="line">0 queries inside InnoDB, 0 queries in queue</div><div class="line">38 read views open inside InnoDB</div><div class="line">Main thread process no. 34414, id 139964610234112, state: enforcing dict <span class="keyword">cache</span> <span class="keyword">limit</span></div><div class="line"><span class="built_in">Number</span> <span class="keyword">of</span> <span class="keyword">rows</span> inserted <span class="number">2546811699</span>, <span class="keyword">updated</span> <span class="number">1708150459</span>, deleted <span class="number">1004154696</span>, <span class="keyword">read</span> <span class="number">413168628410</span></div><div class="line"><span class="number">0.00</span> inserts/s, <span class="number">0.00</span> updates/s, <span class="number">0.00</span> deletes/s, <span class="number">54.19</span> <span class="keyword">reads</span>/s</div></pre></td></tr></table></figure></p>
<h1 id="2-分析"><a href="#2-分析" class="headerlink" title="2. 分析"></a>2. 分析</h1><p>从上面的信息知道 Thread 139964610234112 是主线程，在源码 srv0srv.cc:2132 行的地方等待信号14s，这个信号是在 dict0dict.cc:900 地方创建的 RW-latch 排它锁。那么奇怪了，主线程自己在等待自己的互斥锁。<br>由于环境是阿里云的RDS(基于MySQL 5.6.16-log 版本)，拿不到他们的代码，找来 5.6.35 的来看，行号对不上。但好在上段信息的最后面有一个 Main thread state: <code>enforcing dict cache limit</code>，发现在 srv0srv.cc 函数 srv_master_do_active_tasks() 约2137行的位置：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if (cur_time % SRV_MASTER_DICT_LRU_INTERVAL == <span class="number">0</span>) &#123;</div><div class="line">4srv_main_thread_op_info = <span class="string">"enforcing dict cache limit"</span><span class="comment">;</span></div><div class="line">4srv_master_evict_from_table_cache(<span class="number">50</span>)<span class="comment">;</span></div><div class="line">4MONITOR_INC_TIME_IN_MICRO_SECS(</div><div class="line">44MONITOR_SRV_DICT_LRU_MICROSECOND, counter_time)<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>应该是在调用 srv_master_evict_from_table_cache() 从innodb table cache里面清理缓存的地方waiting（这里不是一定会清理，而是先判断空间够不够用，参数50表示只扫描 unused_table list的50%）。<br>srv_master_evict_from_table_cache()：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">srv_master_evict_from_table_cache(</div><div class="line"><span class="comment">/*==============================*/</span></div><div class="line">4ulint	pct_check)	<span class="comment">/*!&lt; in: max percent to check */</span></div><div class="line">&#123;</div><div class="line">4ulint	n_tables_evicted = <span class="number">0</span><span class="comment">;</span></div><div class="line"></div><div class="line">4rw_lock_x_lock(&amp;<span class="keyword">dict_operation_lock);</span></div><div class="line"></div><div class="line">4<span class="keyword">dict_mutex_enter_for_mysql();</span></div><div class="line"></div><div class="line">4n_tables_evicted = <span class="keyword">dict_make_room_in_cache( </span> <span class="comment">/** 在dict0dict.cc里面 **/</span></div><div class="line">44innobase_get_table_cache_size(), pct_check)<span class="comment">;</span></div><div class="line"></div><div class="line">4<span class="keyword">dict_mutex_exit_for_mysql();</span></div><div class="line"></div><div class="line">4rw_lock_x_unlock(&amp;<span class="keyword">dict_operation_lock);</span></div><div class="line"></div><div class="line">4return(n_tables_evicted)<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>就是在 <em>rw_lock_x_lock(&amp;dict_operation_lock)</em> 这个地方获取Latch的时候等待了14s，这个锁就是在数据字典模块 dict0dict.cc:dict_init() 约1065行的地方创建的，与innodb status输出基本一致。<br>关于 <code>dict_operation_lock</code> 直接看注释吧：<br><figure class="highlight mizar"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/** @brief the data dictionary rw-latch protecting dict_sys</div><div class="line"></div><div class="line">table create, drop, etc. <span class="keyword">reserve</span> this <span class="keyword">in</span> X-<span class="keyword">mode</span>; implicit <span class="keyword">or</span></div><div class="line">backround operations purge, rollback, foreign key checks <span class="keyword">reserve</span> this</div><div class="line"><span class="keyword">in</span> S-<span class="keyword">mode</span>; we cannot trust <span class="keyword">that</span> MySQL protects implicit <span class="keyword">or</span> background</div><div class="line">operations a table drop since MySQL does <span class="keyword">not</span> know <span class="keyword">of</span> them; therefore</div><div class="line">we need this; NOTE: a transaction which reserves this must keep book</div><div class="line">on the <span class="keyword">mode</span> <span class="keyword">in</span> trx_t<span class="comment">::dict_operation_lock_mode */</span></div></pre></td></tr></table></figure></p>
<p>在尝试把表定义逐出缓存时获取的是 dict_operation_lock X-mode lock，可是从已有的信息里看不到另一个数据字典锁是什么。<br>之前是怀疑是不是 table_definition_cache, table_open_cache, innodb_open_files 设置小了，视图一般是多表join，更容易消耗打开表的数量，导致不断的逐出cache而导致锁征用。但是检查一番并没发现什么问题，更何况是14s的等待。关于它们的设置和关系，可以参考我的文章 <a href="http://seanlook/2017/10/13/mysql-table_open_cache_file_limits" target="_blank" rel="external">table_open_cache 与 table_definition_cache 对MySQL的影响</a> 。</p>
<p>那么得换个思路了，processlist里面有13个长时间处于 statistics 状态的线程，表示正在计算统计数据，以制定一个查询执行计划。 如果一个线程处于这种状态很长一段时间，可能是磁盘IO性能很差，或者磁盘在执行其他工作。</p>
<p>此时注意到最上面的信息里有 <em>Pending normal aio reads: 18 [0, 12, 0, 6]</em> ，有18个读IO被挂起(实际从监控图 innodb_data_pending_reads看来，有达到过50)，四个read thread有三个处于忙碌状态。再有 innodb_buffer_pool_pages_flushed 在出异常前10s没有任何变化，也就是没有成功的将脏数据刷盘动作。当然这是一个从库，出异常前10s有出现过瞬间20多秒延迟：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/rds_diskio_slave_lag.png" alt=""><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/rds_diskio_bufferpool_flushed.png" alt=""></p>
<p>(这一切关注的都是 18:59:05 之前的数据，之后的时间，一般恢复了都会有瞬间的读行数上涨，这个时候别把它们反当做起因)</p>
<h1 id="3-结论"><a href="#3-结论" class="headerlink" title="3. 结论"></a>3. 结论</h1><p>结合上面的 enforcing dict cache limit 和 statistics IO pending，找到两个有关的bug report:</p>
<ul>
<li><a href="https://bugs.launchpad.net/percona-server/+bug/1500176" target="_blank" rel="external">https://bugs.launchpad.net/percona-server/+bug/1500176</a></li>
<li><a href="https://bugs.mysql.com/bug.php?id=84424" target="_blank" rel="external">https://bugs.mysql.com/bug.php?id=84424</a></li>
</ul>
<p>第一个是使用 pt-online-schema-change 去更改分区表的结构，可能会出现，但目前bug状态是Undecided，我们的环境没有分区表，没外键，也没有改表动作。<br>第二个其实 Not a bug：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Thank you for your bug report. This is, however, not a bug, but a very well known issue.</div><div class="line"></div><div class="line">You have to <span class="keyword">do</span> several things <span class="keyword">in</span> <span class="keyword">order</span> <span class="keyword">to</span> alleviate the problem:</div><div class="line"></div><div class="line">* increase the additional <span class="keyword">memory</span> pool</div><div class="line">（注：这里我认为不应该是additional <span class="keyword">memory</span> pool，而是 <span class="keyword">buffer_pool</span>，因为现在<span class="keyword">innodb</span>内存管理基本是调用系统malloc，即innodb_use_sys_malloc=<span class="keyword">ON</span>，参考https://dev.mysql.com/doc/refman/<span class="number">5.7</span>/en/<span class="keyword">innodb</span>-<span class="keyword">performance</span>-use_sys_malloc.html）</div><div class="line">* increase total <span class="built_in">number</span> <span class="keyword">of</span> <span class="keyword">file</span> handles available <span class="keyword">to</span> MySQL</div><div class="line">* increase <span class="built_in">number</span> <span class="keyword">of</span> <span class="keyword">file</span> handles <span class="keyword">for</span> <span class="keyword">InnoDB</span></div><div class="line">* improve <span class="keyword">performance</span> <span class="keyword">of</span> the I/O <span class="keyword">on</span> your operating <span class="keyword">system</span></div></pre></td></tr></table></figure></p>
<p>说到底就是数据库服务器IO遇到问题了，可以通过增加 buffer_pool 来缓存更多的数据，或者提高服务器IO能力，这个范围就广了： <a href="https://dev.mysql.com/doc/refman/5.6/en/optimizing-innodb-diskio.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/en/optimizing-innodb-diskio.html</a> 。<br>然而生产服务器都运行了1年之久，高峰期都没出现过IO问题，现在何况低峰期，也没有认为数据操作。那这个锅只能交给阿里RDS了：怀疑是实例所在物理机磁盘有抖动。</p>
<p>分析这么久得出这个结论，却不能做什么，因为我们没办法看到服务器级别的IO stats。其实想到去年也有实例出现过类似 statistics 问题，向阿里云提工单确认物理机状态，得到的结论都是：“是的，物理机有抖动。需要申请迁移实例吗”，但是从来拿不到依据。如果自己能看到OS级别的监控，其实都不需要本文这么冗长的分析。</p>
<p><strong>参考</strong></p>
<ul>
<li><a href="https://dba.stackexchange.com/questions/55969/statistics-state-in-mysql-processlist" target="_blank" rel="external">https://dba.stackexchange.com/questions/55969/statistics-state-in-mysql-processlist</a></li>
<li><a href="http://mysqlinternals.blogspot.com/2015/05/list-of-background-operations-performed.html" target="_blank" rel="external">http://mysqlinternals.blogspot.com/2015/05/list-of-background-operations-performed.html</a></li>
<li><a href="http://imysql.com/2015/06/10/mysql-faq-processlist-thread-states.shtml" target="_blank" rel="external">http://imysql.com/2015/06/10/mysql-faq-processlist-thread-states.shtml</a></li>
<li><a href="http://imysql.com/2016/11/20/mysql-faq-what-cause-diskio-so-high.shtml" target="_blank" rel="external">http://imysql.com/2016/11/20/mysql-faq-what-cause-diskio-so-high.shtml</a></li>
</ul>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2017/10/17/rds_disk_io_troubleshooting/">http://seanlook.com/2017/10/17/rds_disk_io_troubleshooting/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-现象&quot;&gt;&lt;a href=&quot;#1-现象&quot; class=&quot;headerlink&quot; title=&quot;1. 现象&quot;&gt;&lt;/a&gt;1. 现象&lt;/h1&gt;&lt;p&gt;某日下午下班后低峰期，现网MySQL一个库突然报出大量慢sql，状态是 &lt;code&gt;statistics&lt;/code&gt;，但是过后拿这些sql去执行的时候，实际很快。处于 statistics 状态的线程有个特征：查询的都是视图，但看监控那个时间段并没有明显的update/detele/insert。通过我们的快照程序，去分析当时的 innodb status，发现如下信息：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;SEMAPHORES&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;----------&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OS WAIT ARRAY INFO: reservation count 17208994&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;--Thread 139964610234112 has waited at srv0srv.cc line 2132 for 14.00 seconds the semaphore:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;X-&lt;span class=&quot;keyword&quot;&gt;lock&lt;/span&gt; (wait_ex) &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; RW-latch &lt;span class=&quot;keyword&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0x1635a00&lt;/span&gt; created &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; dict0dict.cc line &lt;span class=&quot;number&quot;&gt;900&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a writer (&lt;span class=&quot;keyword&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;139964610234112&lt;/span&gt;) has reserved it &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;wait&lt;/span&gt; exclusive&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; readers &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, waiters flag &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, lock_word: ffffffffffffffff&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Last&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;locked&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; row0purge.cc line &lt;span class=&quot;number&quot;&gt;720&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Last&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;time&lt;/span&gt; write &lt;span class=&quot;keyword&quot;&gt;locked&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; /home/&lt;span class=&quot;keyword&quot;&gt;admin&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;146&lt;/span&gt;_20161018140650857_13830810_code/rpm_workspace/&lt;span class=&quot;keyword&quot;&gt;storage&lt;/span&gt;/innobase/srv/srv0srv.cc line &lt;span class=&quot;number&quot;&gt;2132&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OS &lt;span class=&quot;keyword&quot;&gt;WAIT&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;ARRAY&lt;/span&gt; INFO: signal &lt;span class=&quot;keyword&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;256984450&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Mutex&lt;/span&gt; spin waits &lt;span class=&quot;number&quot;&gt;626367674&lt;/span&gt;, rounds &lt;span class=&quot;number&quot;&gt;2776951802&lt;/span&gt;, OS waits &lt;span class=&quot;number&quot;&gt;1973672&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RW-&lt;span class=&quot;keyword&quot;&gt;shared&lt;/span&gt; spins &lt;span class=&quot;number&quot;&gt;149944457&lt;/span&gt;, rounds &lt;span class=&quot;number&quot;&gt;1650148561&lt;/span&gt;, OS waits &lt;span class=&quot;number&quot;&gt;3972058&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RW-excl spins &lt;span class=&quot;number&quot;&gt;72090467&lt;/span&gt;, rounds &lt;span class=&quot;number&quot;&gt;2017802579&lt;/span&gt;, OS waits &lt;span class=&quot;number&quot;&gt;11148264&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Spin rounds per &lt;span class=&quot;keyword&quot;&gt;wait&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;4.43&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;mutex&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11.01&lt;/span&gt; RW-&lt;span class=&quot;keyword&quot;&gt;shared&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;27.99&lt;/span&gt; RW-excl&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FILE&lt;/span&gt; I/O&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;--------&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;I/O &lt;span class=&quot;keyword&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; state: waiting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i/o request (&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; buffer &lt;span class=&quot;keyword&quot;&gt;thread&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;I/O &lt;span class=&quot;keyword&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; state: waiting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i/o request (&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;thread&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;I/O &lt;span class=&quot;keyword&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; state: waiting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i/o request (&lt;span class=&quot;keyword&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;thread&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;I/O &lt;span class=&quot;keyword&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; state: doing &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; i/o (&lt;span class=&quot;keyword&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;thread&lt;/span&gt;) ev &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;I/O &lt;span class=&quot;keyword&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; state: waiting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i/o request (&lt;span class=&quot;keyword&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;thread&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;I/O &lt;span class=&quot;keyword&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; state: doing &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; i/o (&lt;span class=&quot;keyword&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;thread&lt;/span&gt;) ev &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;I/O &lt;span class=&quot;keyword&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; state: doing &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; i/o (write &lt;span class=&quot;keyword&quot;&gt;thread&lt;/span&gt;) ev &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;I/O &lt;span class=&quot;keyword&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; state: waiting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i/o request (write &lt;span class=&quot;keyword&quot;&gt;thread&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;I/O &lt;span class=&quot;keyword&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; state: waiting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i/o request (write &lt;span class=&quot;keyword&quot;&gt;thread&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;I/O &lt;span class=&quot;keyword&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; state: waiting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i/o request (write &lt;span class=&quot;keyword&quot;&gt;thread&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Pending &lt;span class=&quot;keyword&quot;&gt;normal&lt;/span&gt; aio &lt;span class=&quot;keyword&quot;&gt;reads&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;] , aio writes: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] ,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ibuf aio &lt;span class=&quot;keyword&quot;&gt;reads&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt; i/o&lt;span class=&quot;string&quot;&gt;&#39;s: 0, sync i/o&#39;&lt;/span&gt;s: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Pending flushes (fsync) &lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; buffer pool: 0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1346747614 OS file reads, 2869418806 OS file writes, 524616747 OS fsyncs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22 pending preads, 1 pending pwrites&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6.00 reads/s, 16384 avg bytes/read, 0.00 writes/s, 0.00 fsyncs/s&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ROW OPERATIONS&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;--------------&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;0 queries inside InnoDB, 0 queries in queue&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38 read views open inside InnoDB&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Main thread process no. 34414, id 139964610234112, state: enforcing dict &lt;span class=&quot;keyword&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;limit&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;rows&lt;/span&gt; inserted &lt;span class=&quot;number&quot;&gt;2546811699&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;updated&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1708150459&lt;/span&gt;, deleted &lt;span class=&quot;number&quot;&gt;1004154696&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;413168628410&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0.00&lt;/span&gt; inserts/s, &lt;span class=&quot;number&quot;&gt;0.00&lt;/span&gt; updates/s, &lt;span class=&quot;number&quot;&gt;0.00&lt;/span&gt; deletes/s, &lt;span class=&quot;number&quot;&gt;54.19&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;reads&lt;/span&gt;/s&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-分析&quot;&gt;&lt;a href=&quot;#2-分析&quot; class=&quot;headerlink&quot; title=&quot;2. 分析&quot;&gt;&lt;/a&gt;2. 分析&lt;/h1&gt;&lt;p&gt;从上面的信息知道 Thread 139964610234112 是主线程，在源码 srv0srv.cc:2132 行的地方等待信号14s，这个信号是在 dict0dict.cc:900 地方创建的 RW-latch 排它锁。那么奇怪了，主线程自己在等待自己的互斥锁。&lt;br&gt;由于环境是阿里云的RDS(基于MySQL 5.6.16-log 版本)，拿不到他们的代码，找来 5.6.35 的来看，行号对不上。但好在上段信息的最后面有一个 Main thread state: &lt;code&gt;enforcing dict cache limit&lt;/code&gt;，发现在 srv0srv.cc 函数 srv_master_do_active_tasks() 约2137行的位置：&lt;br&gt;&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;if (cur_time % SRV_MASTER_DICT_LRU_INTERVAL == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4srv_main_thread_op_info = &lt;span class=&quot;string&quot;&gt;&quot;enforcing dict cache limit&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4srv_master_evict_from_table_cache(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4MONITOR_INC_TIME_IN_MICRO_SECS(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44MONITOR_SRV_DICT_LRU_MICROSECOND, counter_time)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="table_cache" scheme="http://seanlook.com/tags/table-cache/"/>
    
  </entry>
  
  <entry>
    <title>table_open_cache 与 table_definition_cache 对MySQL(内存)的影响</title>
    <link href="http://seanlook.com/2017/10/13/mysql-table_open_cache_file_limits/"/>
    <id>http://seanlook.com/2017/10/13/mysql-table_open_cache_file_limits/</id>
    <published>2017-10-13T08:32:49.000Z</published>
    <updated>2017-10-13T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-现象，内存使用大"><a href="#1-现象，内存使用大" class="headerlink" title="1. 现象，内存使用大"></a>1. 现象，内存使用大</h1><p>首先说一下最近遇到的一个现象，因为分库的缘故，单实例里面的表的数量增加了20倍，总数将近达到10000个。在开发环境明显感觉到执行简单查询都很慢，在processlist里面看到状态 opening table 达到好几秒但数据库并没有什么负载。本能的想到应该要加大 <code>table_open_cache</code>，可是加大后发现MySQL刚启动 RES 就占用了2.5G内存，之前才500-600M的样子。</p>
<p>只是将 <code>table_open_cache</code> 从默认的2000，增加到10000（先不论这个值合不合理），就独占了2G的内存，这对于生产环境内存浪费是不可接受的。还好，关于这个问题的讨论有不少，感兴趣的话可以阅读 <a href="https://bugs.mysql.com/bug.php?id=68287" target="_blank" rel="external">#bug 68287</a>, <a href="https://bugs.mysql.com/bug.php?id=68514" target="_blank" rel="external">#bug 68514</a>, <a href="https://www.percona.com/forums/questions-discussions/mysql-and-percona-server/percona-server-5-6/12015-percona-5-6-14-56-very-high-memory-usage" target="_blank" rel="external">12015-percona-5-6-14-56-very-high-memory-usage</a>。</p>
<p>Oracle官方工程师并不认为这是个bug，导致初始化分配这么多内存的原因是，<strong>开启了 Performance_Schema</strong> 。P_S测量数据库的性能指标，需要提前一次性分配内存，而不是随着数据库运行逐渐申请内存。</p>
<p>下表是不同参数组合下内存占用的测试结果：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql_table_cache_1.png" alt=""></p>
<p>（注：可以通过这个来查看PFS里面哪些占内存比较多，<code>mysql -hxxxx -Pxxx -uxx -pxx -e &quot;show engine performance_schema status&quot;|grep memory|sort -nr -k3 |head</code> ）</p>
<p>对于 table_open_cache 设置的非常大的情况下，即使还有许多cache多余，但P_S都需要分配这个数量的内存。解决这个内存大的问题有3个方向：</p>
<ol>
<li>table_open_cache, table_definition_cache, max_connections 设置合理</li>
<li>关闭 performance_schema</li>
<li>保持 PFS 开启，关闭测量 max_table_instances和max_table_handles  <ul>
<li>performance_schema_max_table_instances: 最大测量多少个表对象<br>对应 (pfs_table_share).memory，我的环境里固定 277600000 bytes</li>
<li>performance_schema_max_table_handles: 最大打开表的总数<br>对应(pfs_table).memory，随着 table_open_cache 的增大而增大</li>
</ul>
</li>
</ol>
<p>关闭的方法是在my.cnf里面设置以上变量为 0 。默认是 -1 ，表示 autosize，即根据 table_open_cache/table_def_cache/max_connections 的值自动设置，相关代码 <code>pfs_autosize.cc</code>：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">PFS_sizing_data *estimate_hints(PFS_global_param *param)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span> ((param-&gt;m_hints.m_max_connections &lt;= MAX_CONNECTIONS_DEFAULT) &amp;&amp;</div><div class="line">      (param-&gt;m_hints.m_table_definition_cache &lt;= TABLE_DEF_CACHE_DEFAULT) &amp;&amp;</div><div class="line">      (param-&gt;m_hints.m_table_open_cache &lt;= TABLE_OPEN_CACHE_DEFAULT))</div><div class="line">  &#123;</div><div class="line">    <span class="comment">/* The my.cnf used is either unchanged, or lower than factory defaults. */</span></div><div class="line">    <span class="keyword">return</span> &amp; small_data;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> ((param-&gt;m_hints.m_max_connections &lt;= MAX_CONNECTIONS_DEFAULT * <span class="number">2</span>) &amp;&amp;</div><div class="line">      (param-&gt;m_hints.m_table_definition_cache &lt;= TABLE_DEF_CACHE_DEFAULT * <span class="number">2</span>) &amp;&amp;</div><div class="line">      (param-&gt;m_hints.m_table_open_cache &lt;= TABLE_OPEN_CACHE_DEFAULT * <span class="number">2</span>))</div><div class="line">  &#123;</div><div class="line">    <span class="comment">/* Some defaults have been increased, to "moderate" values. */</span></div><div class="line">    <span class="keyword">return</span> &amp; medium_data;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/* Looks like a server in production. */</span></div><div class="line">  <span class="keyword">return</span> &amp; large_data;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在阿里RDS中，performance_schema_max<em>*</em>系列变量不能单独disable，只能全局关闭PFS。这里我们尝试寻求一个合理table_cache的范围。<br><a id="more"></a><br>那么 <code>table_open_cache</code> 与 <code>table_definition_cache</code> 设置一个什么值才算合理呢？</p>
<h1 id="2-理解-table-open-cache-与-table-definition-cache"><a href="#2-理解-table-open-cache-与-table-definition-cache" class="headerlink" title="2. 理解 table_open_cache 与 table_definition_cache"></a>2. 理解 table_open_cache 与 table_definition_cache</h1><p>来理解一下 <code>table_open_cache</code> 到底是来干嘛的，文档里或者网上的文章，通通解释是“用于控制MySQL Server能同时打开表的最大个数”。如果继续问这个个数怎么算呢？</p>
<p>我来尝试解答一下。MySQL是多线程的，多个会话上有可能会同时访问同一个表，mysql是允许这些会话各自独立的打开这个表，而表最终都是磁盘上的数据文件。(默认假设innodb_file_per_table=1)，打开文件需要获取文件描述符(File Descriptor)，为了加快这个open table的速度，MySQL在Server层设计了这个cache：</p>
<blockquote>
<p>The idea behind this cache is that most statements don’t need to go to a central table definition cache to get a TABLE object and therefore don’t need to lock LOCK_open mutex. Instead they only need to go to one Table_cache instance (the specific instance is determined by thread id) and only lock the mutex protecting this cache. DDL statements that need to remove all TABLE objects from all caches need to lock mutexes for all Table_cache instances, but they are rare.</p>
</blockquote>
<p>table_cache 减少了表级别 LOCK_open 这个互斥量的获取，改用获取 表对象缓存实例 列表的mutex。简化成如下过程：</p>
<ol>
<li>假设当前并发200个连接，table_open_cache=200，其中有50连接都在访问同一张表</li>
<li>mysql内部维护了一个 unused_table_list，在a表上的请求结束后，会把这个thread刚才用过的 table object 放入unused_table_list</li>
<li>每个表有个key，可以通过hash快速定位到表a的所有可用object，如果后面一下子100个连接上来访问表a，内部会先从 unused_table_list 去找这个表已经缓存过的对象(get_table)，比如前50个可以直接拿来用(unlink_unused_table)</li>
<li>后50个则需要调用系统内核，拿到文件描述符。</li>
<li>用完之后会，放回到unused_table_list，并将这个表的key放到hash表的前面。</li>
<li>如果缓存的对象个数超过了 table_open_cache，则会通过LRU算法，把认为不用的表对象逐出。</li>
</ol>
<p>从上面的过程应该很容易理解 table_open_cache 与 table_definition_cache 的区别。</p>
<ul>
<li><code>table_def_cache</code> 也是一个key/value形式的hash表，但每个表只有一个值，值/对象的内容就是表的元数据信息(Data Dictionay，frm文件里面的信息)，如表结构、字段、索引，它是一个全局的结构，并且不占用文件描述符。</li>
<li>而<code>table_open_cache</code>的key/value的值是一个列表，表示这个表的多个 Table_cache_element，他们共用这个表的 definition (代码层定义为TABLE_SHARE对象)。</li>
</ul>
<p>(注：我们在row格式的binlog里面看到的 table_map_id 就是在 TABLE_SHARE 里面定义的，表结构变更、缓存被逐出，都会导致 table_map_id 递增。)</p>
<h2 id="2-1-源码说明"><a href="#2-1-源码说明" class="headerlink" title="2.1 源码说明"></a>2.1 源码说明</h2><p>源代码里面关键函数</p>
<ul>
<li><p>sql_base.cc:</p>
<ul>
<li><code>open_table()</code> 打开表的入口<br>打开之前会判断mdl锁条件满不满足，再调用 get_table() 尝试从cache里面获取<br>如果找到，还要判断版本信息，goto table_found<br>如果没找到，注意get_table()接收了一个 table_share 参数，即使没找到table cache，也努力获取table definition，如果拿到table_share则要获取一次LOCK_open互斥量，增加表的引用计数。<br>make a new table: 调用 open_table_from_share() 从磁盘上打开表<br>调用 add_used_table() 将表对象放入缓存，table_open_cache_misses++</li>
<li><code>get_table_share()</code> 从 table definition cache 获取表定义信息<br>如果cache中没有，则调用 table.cc:open_table_def() 从文件系统上读取</li>
</ul>
</li>
<li><p>table_cache.h:Table_cache::  </p>
<ul>
<li><code>m_unused_tables</code><br>该列表内容是table cache中没有被其它线程使用的table object。最近使用过的table object会被添加到列表的尾部，头部就成为最近没被使用的(LRU)</li>
<li><code>m_table_count</code><br>table objects个数，包括正在使用中，以及unused<br>所有table cache instances中这个count加起来，就是 Open_tables 的结果</li>
<li><code>get_table()</code> 根据key(表名)从cache hash里面获取 unused table object<br>得到之后，将这个object从列表unlink掉，并且放入used table list</li>
<li><code>add_used_table()</code> 将新创建的 table object 放入table cache<br>这是说明当前连接要打开的表在cache里面没有，所以要自己打开，并且放入used table list</li>
<li><code>release_table()</code> 用完后将表对象放回table cache的unused列表<br>如果table_share版本比较旧，则直接remove掉</li>
<li><code>remove_table()</code>  </li>
<li><code>free_unused_tables_if_necessary()</code><br>每次 add_used_table() 都会调用，判断是否需要从 table cache object list清除多余的cache，需要锁定LOCK_open。调用remove_table()<br>清除条件：m_table_count &gt; table_cache_size / table_cache_instances  </li>
</ul>
</li>
<li><p>table.cc:</p>
<ul>
<li><code>open_table_from_share()</code><br>根据 table_share 信息来打开表。调用 outparam-&gt;file-&gt;ha_open()，<em>too many files opened</em> 错误在这里抛出</li>
<li><code>open_table_def()</code><br>从 frm 中读取表定义</li>
</ul>
</li>
</ul>
<p>以上过程没有考虑视图、临时表、分区表。table_cache虽然会有额外的内存开销，但简化了对表状态的维护，打开表这个动作因为省去了获取 LOCK_open mutex 以及直接操作打开数据文件，而变得高效。<br>这部分参考taobao数据库内核月报的2篇文章，会比较清晰：</p>
<ol>
<li>open file limits： <a href="http://mysql.taobao.org/monthly/2015/08/07/" target="_blank" rel="external">http://mysql.taobao.org/monthly/2015/08/07/</a></li>
<li>MySQL表定义缓存：<a href="http://mysql.taobao.org/monthly/2015/08/10/" target="_blank" rel="external">http://mysql.taobao.org/monthly/2015/08/10/</a></li>
</ol>
<h1 id="3-设置参考因素"><a href="#3-设置参考因素" class="headerlink" title="3 设置参考因素"></a>3 设置参考因素</h1><h2 id="3-1-table-open-cache"><a href="#3-1-table-open-cache" class="headerlink" title="3.1 table_open_cache"></a>3.1 table_open_cache</h2><p><code>table_open_cache</code> 默认值 Version&lt;=5.6.7: 400, Version&gt;=5.6.8: 2000，设定它的值有3个因素：</p>
<ol>
<li><p><strong>最大并发连接数</strong><br>这是最重要的考量。假设业务高峰期 <strong>活跃并发</strong> 连接是200，60%是单表查询，30%是两个表join，5%是三个表join，5%会创建临时表。那么table_open_cache可以是：<br>200 × (60% × 1 + 30% × 2 + 5% × 3 + 5%  × 2) = 290<br>当然这里不是要如何精确的计算，只是说明有哪些需要考虑的。网上有大部分文章都讲设置 max_connections * N，N是sql里面表的最大个数，我个人觉得如果max_connections值超过2000的话，就不要这样算，因为max_connection一般是不允许达到的，高峰期活跃并发连接数才是比较好的基准。</p>
</li>
<li><p><strong>存储引擎</strong></p>
<ul>
<li><p>MyISAM引擎<br>因为myisam数据文件和索引是分开存放的，所以<strong>第一次</strong>打开表时需要2个描述符，后续如果并发2个会话访问该表，另一个会话只需要多开一个数据文件的描述符。索引文件描述符可被线程共享。因此它所需要的 table_cache 的值并不是简单上面的值的2倍，而是跟表的访问分布有关。当然现在已经几乎不用MyISAM引擎了。<br>Merge引擎也类似，因为Merge表可以有多个底层表，需要多个文件描述符。</p>
</li>
<li><p>InnoDB引擎<br><code>table_open_cache</code>对InnoDB引擎其实作用不大，它是Server层的机制，而InnoDB不依赖server层去管理表空间，它使用自己的内部函数去打开ibd，创建handler来操作表。（handler只是内存对象，不牵涉文件操作。从实验结果看来，innodb每个表最多只有一个File Descriptor打开，myisam表如果并发访问一个表，会打开多个FD并cache起来） </p>
<p>注： <code>flush tables</code> 命令会关闭所有当前打开的表对象缓存/handler，所以状态变量 <code>open_tables</code> 会置0，但<code>opened_tables(_definition)</code>、<code>Table_open_cache_misses(_hits)</code>只会在实例重启后置0。对MyISAM引擎来说，它还会释放MYI/MYD文件描述符，而InnoDB引擎则不会释放ibd文件描述符。</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show variables like <span class="string">"table_%"</span>;</div><div class="line">+----------------------------+-------+</div><div class="line">|<span class="string"> Variable_name              </span>|<span class="string"> Value </span>|</div><div class="line">+----------------------------+-------+</div><div class="line">|<span class="string"> table_definition_cache     </span>|<span class="string"> 1400  </span>|</div><div class="line">|<span class="string"> table_open_cache           </span>|<span class="string"> 2000  </span>|</div><div class="line">|<span class="string"> table_open_cache_instances </span>|<span class="string"> 1     </span>|</div><div class="line">+----------------------------+-------+</div><div class="line">3 rows in set</div><div class="line"></div><div class="line">mysql&gt; show global status like <span class="string">"%open%"</span>;</div><div class="line">+----------------------------+-----------+</div><div class="line">|<span class="string"> Variable_name              </span>|<span class="string"> Value     </span>|</div><div class="line">+----------------------------+-----------+</div><div class="line">|<span class="string"> Com_ha_open                </span>|<span class="string"> 0         </span>|</div><div class="line">|<span class="string"> Com_show_open_tables       </span>|<span class="string"> 0         </span>|</div><div class="line">|<span class="string"> Innodb_num_open_files      </span>|<span class="string"> 364       </span>|<span class="string">  -- 打开的ibd文件的数量，打开后一般不会关闭，除非超过了 innodb_open_files 的设定</span></div><div class="line">|<span class="string"> Open_files                 </span>|<span class="string"> 52        </span>|<span class="string">  -- 打开的常规文件数量，如slow_log,error_log等，不包含socket和具体存储引擎有关的文件，所以一般都无需关注这个，它与innodb_open_files也没关系</span></div><div class="line">|<span class="string"> Open_streams               </span>|<span class="string"> 0         </span>|</div><div class="line">|<span class="string"> Open_table_definitions     </span>|<span class="string"> 470       </span>|<span class="string">  -- 当前缓存了多少.frm文件</span></div><div class="line">|<span class="string"> Open_tables                </span>|<span class="string"> 448       </span>|<span class="string">  -- 当前table_cache里面缓存的table object数量</span></div><div class="line">|<span class="string"> Opened_files               </span>|<span class="string"> 35617170  </span>|</div><div class="line">|<span class="string"> Opened_table_definitions   </span>|<span class="string"> 117134    </span>|</div><div class="line">|<span class="string"> Opened_tables              </span>|<span class="string"> 117409    </span>|<span class="string">  -- 自总MySQL启动以来打开表的总次数，如果在缓存中找到直接使用，不会增加这个值</span></div><div class="line">|<span class="string"> Slave_open_temp_tables     </span>|<span class="string"> 0         </span>|</div><div class="line">|<span class="string"> Table_open_cache_hits      </span>|<span class="string"> 130148442 </span>|</div><div class="line">|<span class="string"> Table_open_cache_misses    </span>|<span class="string"> 117404    </span>|</div><div class="line">|<span class="string"> Table_open_cache_overflows </span>|<span class="string"> 0         </span>|</div><div class="line">+----------------------------+-----------+</div><div class="line">14 rows in set</div><div class="line"></div><div class="line">mysql&gt; flush tables;</div><div class="line">Query OK, 0 rows affected</div><div class="line"></div><div class="line">mysql&gt; show global status like <span class="string">"%open%"</span>;</div><div class="line">+----------------------------+-----------+</div><div class="line">|<span class="string"> Variable_name              </span>|<span class="string"> Value     </span>|</div><div class="line">+----------------------------+-----------+</div><div class="line">|<span class="string"> Com_ha_open                </span>|<span class="string"> 0         </span>|</div><div class="line">|<span class="string"> Com_show_open_tables       </span>|<span class="string"> 0         </span>|</div><div class="line">|<span class="string"> Innodb_num_open_files      </span>|<span class="string"> 364       </span>|</div><div class="line">|<span class="string"> Open_files                 </span>|<span class="string"> 4         </span>|</div><div class="line">|<span class="string"> Open_streams               </span>|<span class="string"> 0         </span>|</div><div class="line">|<span class="string"> Open_table_definitions     </span>|<span class="string"> 6         </span>|</div><div class="line">|<span class="string"> Open_tables                </span>|<span class="string"> 6         </span>|</div><div class="line">|<span class="string"> Opened_files               </span>|<span class="string"> 35617220  </span>|</div><div class="line">|<span class="string"> Opened_table_definitions   </span>|<span class="string"> 117140    </span>|</div><div class="line">|<span class="string"> Opened_tables              </span>|<span class="string"> 117415    </span>|</div><div class="line">|<span class="string"> Slave_open_temp_tables     </span>|<span class="string"> 0         </span>|</div><div class="line">|<span class="string"> Table_open_cache_hits      </span>|<span class="string"> 130148523 </span>|</div><div class="line">|<span class="string"> Table_open_cache_misses    </span>|<span class="string"> 117410    </span>|</div><div class="line">|<span class="string"> Table_open_cache_overflows </span>|<span class="string"> 0         </span>|</div><div class="line">+----------------------------+-----------+</div><div class="line">14 rows in set</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>opened_tables</strong><br>根据第一步的最大并发数设定的值不一定准确，在MySQL运行一段时间后，可以观察 opened_tables 增加的速度，决定是否需要扩大 table_open_cache。如果查询里面有许多要用到temporary table，这个值也会增加的很快，此时也可以比较 Table_open_cache_hits 与 Table_open_cache_misses 的值，正常的话 hits/(hits+misses ) 应该在99.9%以上。</p>
</li>
</ol>
<p>还有一个标准，<code>Open_tanles</code>的值如果与 <code>table_open_cache</code>很接近，那么也要考虑增大 table_open_cache 。</p>
<p>但不要设置的太大，大部分情况不要超过10000，原因一是如第一部分看到，performance_schema会分配过多内存；二是cache的查找速度会因为越来越多而变慢；三是某些情况不缓存也许更好，比如几万张表，他们都很均匀的被使用，如果不全部缓存起来，那么缓存始终会被不断的逐出更新，效率反而更低。</p>
<h1 id="3-2-table-definition-cache-与-innodb-open-files"><a href="#3-2-table-definition-cache-与-innodb-open-files" class="headerlink" title="3.2 table_definition_cache 与 innodb_open_files"></a>3.2 table_definition_cache 与 innodb_open_files</h1><p>至于 table_definition_cache，默认值是 <em>400 + (table_open_cache / 2)</em>，默认最大2000。如果实际表的数据量比较多，最好是能够把元数据全部cache起来，设置与表的总数量差不多大就行。</p>
<p>InnoDB engine层有自己参数 <code>innodb_open_files</code>，限制同时打开 ibd 文件的句柄数，作用与 table_definition_cache 相同，逐出策略也是一样采用LRU算法。innodb读取INNODB_SYS_TABLES,INNODB_SYS_COLUMNS,INNODB_SYS_FIELDS,INNODB_SYS_INDEXES等数据字典，放入 table_dict 。当需要访问这个表的时候，创建 handler 对象。<br>这两个变量本身没啥关系，但是设置不合理的时候mysql会改变它的值：</p>
<p>innodb_open_files的值如果设置大于 open_files_limit，且大于table_open_cache，那么会自动设置为table_def_cache大小。<code>innobase\handler\ha_innodb.cc</code>：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (innobase_open_files &lt; <span class="number">10</span>) &#123;</div><div class="line">  innobase_open_files = <span class="number">300</span>;</div><div class="line">  <span class="keyword">if</span> (srv_file_per_table &amp;&amp; table_cache_size &gt; <span class="number">300</span>) &#123;</div><div class="line">    innobase_open_files = table_cache_size;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (innobase_open_files &gt; (<span class="keyword">long</span>) open_files_limit) &#123;</div><div class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,</div><div class="line">                    <span class="string">"innodb_open_files should not be greater"</span></div><div class="line">                    <span class="string">" than the open_files_limit.\n"</span>);</div><div class="line">  <span class="keyword">if</span> (innobase_open_files &gt; (<span class="keyword">long</span>) table_cache_size) &#123;</div><div class="line">    innobase_open_files = table_cache_size;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>这里顺便提一下 <code>open_file_limit</code>, 它限制的是mysqld进程总共能够打开文件描述符的个数，是个Server层的参数，它的值应该要小于服务器的最大限制，否则OS层报错会比mysql error log报错更惨。<br>关于它的计算公式，网上有很多，不属本文的内容，感兴趣可以参考 <a href="http://www.cnblogs.com/zhoujinyi/archive/2013/01/31/2883433.html" target="_blank" rel="external">http://www.cnblogs.com/zhoujinyi/archive/2013/01/31/2883433.html</a> </p>
<p>参考</p>
<ul>
<li><a href="http://hidba.org/?p=170" target="_blank" rel="external">http://hidba.org/?p=170</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.6/en/table-cache.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/en/table-cache.html</a></li>
<li><a href="http://mysql.taobao.org/monthly/2015/08/07/" target="_blank" rel="external">http://mysql.taobao.org/monthly/2015/08/07/</a></li>
<li><a href="https://dev.mysql.com/doc/dev/mysql-server/8.0.0/classTable__cache.html" target="_blank" rel="external">https://dev.mysql.com/doc/dev/mysql-server/8.0.0/classTable__cache.html</a></li>
<li><a href="http://www.orczhou.com/index.php/2010/10/mysql-open-file-limit/" target="_blank" rel="external">http://www.orczhou.com/index.php/2010/10/mysql-open-file-limit/</a></li>
</ul>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2017/10/13/mysql-table_open_cache_file_limits/">http://seanlook.com/2017/10/13/mysql-table_open_cache_file_limits/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-现象，内存使用大&quot;&gt;&lt;a href=&quot;#1-现象，内存使用大&quot; class=&quot;headerlink&quot; title=&quot;1. 现象，内存使用大&quot;&gt;&lt;/a&gt;1. 现象，内存使用大&lt;/h1&gt;&lt;p&gt;首先说一下最近遇到的一个现象，因为分库的缘故，单实例里面的表的数量增加了20倍，总数将近达到10000个。在开发环境明显感觉到执行简单查询都很慢，在processlist里面看到状态 opening table 达到好几秒但数据库并没有什么负载。本能的想到应该要加大 &lt;code&gt;table_open_cache&lt;/code&gt;，可是加大后发现MySQL刚启动 RES 就占用了2.5G内存，之前才500-600M的样子。&lt;/p&gt;
&lt;p&gt;只是将 &lt;code&gt;table_open_cache&lt;/code&gt; 从默认的2000，增加到10000（先不论这个值合不合理），就独占了2G的内存，这对于生产环境内存浪费是不可接受的。还好，关于这个问题的讨论有不少，感兴趣的话可以阅读 &lt;a href=&quot;https://bugs.mysql.com/bug.php?id=68287&quot;&gt;#bug 68287&lt;/a&gt;, &lt;a href=&quot;https://bugs.mysql.com/bug.php?id=68514&quot;&gt;#bug 68514&lt;/a&gt;, &lt;a href=&quot;https://www.percona.com/forums/questions-discussions/mysql-and-percona-server/percona-server-5-6/12015-percona-5-6-14-56-very-high-memory-usage&quot;&gt;12015-percona-5-6-14-56-very-high-memory-usage&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Oracle官方工程师并不认为这是个bug，导致初始化分配这么多内存的原因是，&lt;strong&gt;开启了 Performance_Schema&lt;/strong&gt; 。P_S测量数据库的性能指标，需要提前一次性分配内存，而不是随着数据库运行逐渐申请内存。&lt;/p&gt;
&lt;p&gt;下表是不同参数组合下内存占用的测试结果：&lt;br&gt;&lt;img src=&quot;http://7q5fot.com1.z0.glb.clouddn.com/mysql_table_cache_1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;（注：可以通过这个来查看PFS里面哪些占内存比较多，&lt;code&gt;mysql -hxxxx -Pxxx -uxx -pxx -e &amp;quot;show engine performance_schema status&amp;quot;|grep memory|sort -nr -k3 |head&lt;/code&gt; ）&lt;/p&gt;
&lt;p&gt;对于 table_open_cache 设置的非常大的情况下，即使还有许多cache多余，但P_S都需要分配这个数量的内存。解决这个内存大的问题有3个方向：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;table_open_cache, table_definition_cache, max_connections 设置合理&lt;/li&gt;
&lt;li&gt;关闭 performance_schema&lt;/li&gt;
&lt;li&gt;保持 PFS 开启，关闭测量 max_table_instances和max_table_handles  &lt;ul&gt;
&lt;li&gt;performance_schema_max_table_instances: 最大测量多少个表对象&lt;br&gt;对应 (pfs_table_share).memory，我的环境里固定 277600000 bytes&lt;/li&gt;
&lt;li&gt;performance_schema_max_table_handles: 最大打开表的总数&lt;br&gt;对应(pfs_table).memory，随着 table_open_cache 的增大而增大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关闭的方法是在my.cnf里面设置以上变量为 0 。默认是 -1 ，表示 autosize，即根据 table_open_cache/table_def_cache/max_connections 的值自动设置，相关代码 &lt;code&gt;pfs_autosize.cc&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;PFS_sizing_data *estimate_hints(PFS_global_param *param)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((param-&amp;gt;m_hints.m_max_connections &amp;lt;= MAX_CONNECTIONS_DEFAULT) &amp;amp;&amp;amp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      (param-&amp;gt;m_hints.m_table_definition_cache &amp;lt;= TABLE_DEF_CACHE_DEFAULT) &amp;amp;&amp;amp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      (param-&amp;gt;m_hints.m_table_open_cache &amp;lt;= TABLE_OPEN_CACHE_DEFAULT))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* The my.cnf used is either unchanged, or lower than factory defaults. */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp; small_data;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((param-&amp;gt;m_hints.m_max_connections &amp;lt;= MAX_CONNECTIONS_DEFAULT * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;amp;&amp;amp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      (param-&amp;gt;m_hints.m_table_definition_cache &amp;lt;= TABLE_DEF_CACHE_DEFAULT * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;amp;&amp;amp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      (param-&amp;gt;m_hints.m_table_open_cache &amp;lt;= TABLE_OPEN_CACHE_DEFAULT * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Some defaults have been increased, to &quot;moderate&quot; values. */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp; medium_data;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/* Looks like a server in production. */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp; large_data;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在阿里RDS中，performance_schema_max&lt;em&gt;*&lt;/em&gt;系列变量不能单独disable，只能全局关闭PFS。这里我们尝试寻求一个合理table_cache的范围。&lt;br&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="table_cache" scheme="http://seanlook.com/tags/table-cache/"/>
    
  </entry>
  
  <entry>
    <title>“大”事务引起的锁等待分析案例</title>
    <link href="http://seanlook.com/2017/09/23/mysql-big-trx-lock-case/"/>
    <id>http://seanlook.com/2017/09/23/mysql-big-trx-lock-case/</id>
    <published>2017-09-23T08:32:49.000Z</published>
    <updated>2017-09-23T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-现象"><a href="#1-现象" class="headerlink" title="1. 现象"></a>1. 现象</h1><p>生产环境数据库在某一刻突然发现大量活跃连接，而且大部分状态是 <code>updating</code> 。问题出现在周六上午，持续了大概三四分钟，得益于我们自己的快照程序，拿到了当时现场的的processlist, 锁等待关系，innodb status 信息：(经过脱敏处理)</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-bigtrx-lockinfo.png" alt="mysql-bigtrx-lockinfo.png"><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-bigtrx-processlist.png" alt="mysql-bigtrx-processlist.png"></p>
<p>innodb_status.txt片段：<br><a href="https://gist.coding.net/u/seanlook/d6ad649f81c64e23a25f3a980c44a1fe" target="_blank" rel="external">var_mydb_snapshot.html</a> （也可以通过 pt-stalk 收集）</p>
<p>首先在 Lock Waits Info 一节，看到每行的trx_id(事务)的role分为 Blocker(引起阻塞的线程) 与 Blockee（被阻塞者）；最后一列 blocking_trx_id 在role是Blockee时才有值，代表谁阻塞了当前事务。<br>根据上面的关系，可以得出以下结论：</p>
<ol>
<li>事务 <strong>19705811640</strong> 运行了231s，阻塞了19706118937、19706124453、19706124752，而这些事务都在做同一个UPDATE语句</li>
<li>被锁定的记录是 mydb.mytable1表的主键索引值为 5317885 行</li>
<li>事务 19706124752 既被阻塞，也阻塞了别人19706125253</li>
<li>不难发现 <strong>19705811640</strong> 应该最先运行的事务，且对其它事务产生了链式阻塞，它的thread_id是 9898630，来源IP</li>
</ol>
<p>但是当你兴冲冲的找到引起阻塞的事务 19705811640 在做什么事情时，发现它没有任何sql的信息，lock info以及processlist里面都是None。那么有哪些情况会导致在会话是活跃的，但sql的内容为空：</p>
<ol>
<li>执行show processlist的时候，刚好在事务里面两个sql的中间</li>
<li>sql已经执行完成，但长时间没有提交</li>
</ol>
<h1 id="2-初步分析"><a href="#2-初步分析" class="headerlink" title="2. 初步分析"></a>2. 初步分析</h1><p>其实这个现象已经遇到过很多次了，第1个原因常发生在 大量单条记录更新 的情况，一个sql在一个事务里循环执行10000次，即使每条都很快，但大部分时间都在网络传输上，（可以改成批量的形式）。在本案例基本上能确定的是第2个原因：事务开启之后，sql也执行了，但中间又做别的事情去了。那么怎样才能知道这个事务是什么内容呢？两个方向去找：</p>
<ol>
<li>从来源ip上的应用程序的日志里分析</li>
<li>binlog里面分析</li>
</ol>
<a id="more"></a>
<p>应用程序日志里可以看 10:21:00 ~ 10:26:00 之间，mydb.mytable1 表上主键id=5317885 在做什么事情。因为我们上了听云，在听云APM里面也可以清楚的看到这个时间点的哪个方法慢：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-bigtrx-tingyun.png" alt="mysql-bigtrx-tingyun"></p>
<p> 响应时间230多秒，从“相关SQL”里面看到操作的记录内容，确定就是它了(根据innodb status快照时间 - ACTIVE 230.874 sec，倒退得到的时间与这里刚好吻合)。从接口名称也清楚的知道是在进行禁用用户的操作，猜想：<br>禁用用户的逻辑上有先挪到回收站，再删资料、删权限、删关系，清理缓存等等一系列操作，放在事务里保证他们的原子性，似乎是合理的。但为什么执行了将近4分钟还没有提交呢，分析相关的sql效率都很高。</p>
<p>有三种情况：</p>
<ol>
<li>这个事务执行到一半，它需要操作的数据被别人锁住，等待了这么久</li>
<li>类似事务要操作5000条数据，但是一条一条的操作，然后一起提交（已出现过类似的例子）</li>
<li>事务务执行完成很快，但调用其它接口迟迟没有返回，导致事务没提交。</li>
</ol>
<p>不会是1和2，因为从一开始的分析看到事务 <strong>19705811640</strong> 都是在阻塞别人，而不是受害者。那么结合上图中有个有两个操作redis的接口执行时间占比96%，可以下定论了：<br>在禁用用户时，开启了一个事务，四五个增删改很快完成，但是操作redis缓存过程比较慢，也包含在了事务代码之间，长时间没有提交。前端用户操作的时候因为迟迟没有响应，进行了多次重复点击操作，因为影响的还是同一行记录，所以只能等待前面的锁释放。</p>
<p>Bingo，跟最初的设想一样。但是，开发检查代码之后告诉我，没有用事务！那前面的猜想和结论都不成立了。</p>
<h1 id="3-论证"><a href="#3-论证" class="headerlink" title="3. 论证"></a>3. 论证</h1><p>于是走另外一个思路，分析binlog。如果binlog里面记录那条记录修改(设置禁用标志)和删除（真正删除）的时间是 10:21:58，说明数据库操作那时候就完成；如果是10:25:xx，说明最后才提交。为了弄明白这个问题，也为了搞情况事务的内容到底是什么，解析当时的binlog。（阿里云rds的数据追踪功能本来挺好用，但这一次用着报内部错误）</p>
<p>还记得前面那个thread_id吗，可以用在这里过滤(也可以用记录值)：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ mysqlbinlog <span class="comment">--base64-output=decode-rows -vv --start-datetime="2017-09-16 10:21:00"  --stop-datetime="2017-09-16 10:27:00" mysql-bin.010743 &gt; mysql-bin.010743.sql</span></div><div class="line">$ grep -B5 -A200 <span class="string">"thread_id=9898630"</span> mysql-bin.<span class="number">010743</span>.sql &gt; mysql-bin.<span class="number">010743</span>.sql.txt</div><div class="line"></div><div class="line">$ ./summarize_binlogs.sh &gt; mysql-bin.<span class="number">010743</span>.sql.xid  # 会比较慢</div><div class="line">$ cat mysql-bin.<span class="number">010743</span>.sql.xid|grep Transaction|awk '&#123;<span class="keyword">if</span>($<span class="number">19</span>&gt;<span class="number">0</span>)print&#125;'</div><div class="line">[Transaction total : 10 <span class="type">Insert</span>(s) : 1 <span class="type">Update</span>(s) : 0 <span class="type">Delete</span>(s) : 9 <span class="type">Xid</span> : 99370218911 <span class="type">period</span> : 190 ] </div><div class="line">[Transaction total : 10 <span class="type">Insert</span>(s) : 1 <span class="type">Update</span>(s) : 0 <span class="type">Delete</span>(s) : 9 <span class="type">Xid</span> : 99370268888 <span class="type">period</span> : 236 ]</div></pre></td></tr></table></figure></p>
<p>上面的 summarize_binlogs.sh 脚本来源于《MySQL运维内参》，可以汇总分析binlog里面事务的执行时间。</p>
<p>mysql-bin.010743.sql.txt:<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"># at <span class="number">112037144</span></div><div class="line">#<span class="number">170916 10:25</span>:<span class="number">54</span> server id <span class="number">1508836346</span>  end_log_pos <span class="number">112037192</span> CRC32 <span class="number">0x25216430</span>    GTID [commit=yes]</div><div class="line">SET @@SESSION.GTID_NEXT= '<span class="number">56506509</span>-b<span class="number">971-11e6</span>-<span class="number">8</span>c19-<span class="number">6</span>c92bf2c8aaf:<span class="number">10306353216</span>'/*!*/<span class="comment">;</span></div><div class="line"># at <span class="number">112037192</span></div><div class="line">#<span class="number">170916 10:21</span>:<span class="number">58</span> server id <span class="number">1508836346</span>  end_log_pos <span class="number">112037268</span> CRC32 <span class="number">0</span>x9cddeec2    Query    thread_id=<span class="number">9898630</span>    exec_time=<span class="number">0</span>    error_code=<span class="number">0</span></div><div class="line">SET TIMESTAMP=<span class="number">1505528518</span>/*!*/<span class="comment">;</span></div><div class="line">SET @@session.sql_mode=<span class="number">2097152</span>/*!*/<span class="comment">;</span></div><div class="line">BEGIN</div><div class="line">/*!*/<span class="comment">;</span></div><div class="line"># at <span class="number">112037268</span></div><div class="line">#<span class="number">170916 10:21</span>:<span class="number">58</span> server id <span class="number">1508836346</span>  end_log_pos <span class="number">112037342</span> CRC32 <span class="number">0</span>x373641db    Table_map: `mydb`.`mytable01_del` mapped to number <span class="number">950163</span></div><div class="line"># at <span class="number">112037342</span></div><div class="line">#<span class="number">170916 10:21</span>:<span class="number">58</span> server id <span class="number">1508836346</span>  end_log_pos <span class="number">112037460</span> CRC32 <span class="number">0</span>x4bba2efb    Write_rows: table id <span class="number">950163</span> flags: STMT_END_F</div><div class="line"></div><div class="line">BINLOG '</div><div class="line">xoq8WRP6A+<span class="number">9</span>ZSgAAAN6NrQYAAJN/DgAAAAEACWRfZWNfdXNlcgAKdF91c2VyX2RlbAAMCAgICBEB</div><div class="line">CAgRCA8IBAAAyAAAAdtBNjc=</div><div class="line">xoq8WRf6A+<span class="number">9</span>ZdgAAAFSOrQYAAJN/DgAAAAEADP//APEL/VAAAAAAAP0kUQAAAAAACKpYGQQAAAAK</div><div class="line">/VAAAAAAAFm8isYAAAAAAAAAAAAAAAAAAAAAADojUQAAAAAADOW+kOaxn+e6oue7hOE3BAAAAAAA</div><div class="line">+y66Sw==</div><div class="line">'/*!*/<span class="comment">;</span></div><div class="line">### INSERT INTO `mydb`.`mytable01_del`</div><div class="line"># at <span class="number">112037460</span></div><div class="line">#<span class="number">170916 10:21</span>:<span class="number">58</span> server id <span class="number">1508836346</span>  end_log_pos <span class="number">112037542</span> CRC32 <span class="number">0</span>x7b55174a    Table_map: `mydb`.`mytable1` mapped to number <span class="number">950159</span></div><div class="line"># at <span class="number">112037542</span></div><div class="line">#<span class="number">170916 10:21</span>:<span class="number">58</span> server id <span class="number">1508836346</span>  end_log_pos <span class="number">112037636</span> CRC32 <span class="number">0</span>x3bdcebf7    Delete_rows: table id <span class="number">950159</span> flags: STMT_END_F</div><div class="line"></div><div class="line">BINLOG '</div><div class="line">xoq8WRP6A+<span class="number">9</span>ZUgAAAKaOrQYAAI9/DgAAAAEACWRfZWNfdXNlcgAOdF91c2VyX2FjY291bnQADAgC</div><div class="line">Dw8BARISAQMBDwiAABAAAADwADgBShdVew==</div><div class="line">xoq8WRn6A+<span class="number">9</span>ZXgAAAASPrQYAAI9/DgAAAAEADP//APD9JFEAAAAAAAAACzE3NjA1MTEwMjgwEDc9</div><div class="line">OokVkE7wcJ6AvWQXyZMEAJmc6TjAmZzs458AAAAAAAAA9+vcOw==</div><div class="line">'/*!*/<span class="comment">;</span></div><div class="line">### DELETE FROM `mydb`.`mytable1`</div><div class="line">......</div><div class="line"># at <span class="number">112038300</span></div><div class="line">#<span class="number">170916 10:25</span>:<span class="number">54</span> server id <span class="number">1508836346</span>  end_log_pos <span class="number">112038331</span> CRC32 <span class="number">0</span>x01b508cf    Xid = <span class="number">99370268888</span></div><div class="line">COMMIT/*!*/<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>binlog格式当中，一个事务最先记录的是GTID事件，而这个GTID的值只有在提交的时候才会生成，binlog里面的GTID时间的时间<code>10:25:54</code>就是事务提交的时间。<br>Xid在最末尾，时间也是<code>10:25:54</code>。但中间该事务的其它binlog事件，像UpdateRows/DeleteRows/InsertRows，前面的时间<code>10:21:58</code>是事务开始的时间。中间有4分钟的空档，与前面redis操作4分钟不谋而合。</p>
<p>这下就更加明朗了：有显式的开启事务。但开发说没有用事务，又该怎么解释呢？</p>
<p>不同的语言，不同的框架，使用事务的方式不一样。数据库里面开启显式事务有两种方式，一是设置 <code>set autocommit=0</code>，二是运行<code>start transaction</code>。两者都要显式调用<code>commit</code>命令提交事务。<br>为了证实程序的确用了事务，在测试环境应用服务器模拟用户的操作，然后抓包：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> sudo tcpdump -s <span class="number">0</span> -l -w - dst your_db_ipaddr <span class="keyword">and</span> port <span class="number">3306</span> -i eth0 &gt; mysql_3306.tcp</div><div class="line"><span class="symbol">$</span> strings mysql_3306.tcp|grep -n commit</div><div class="line"><span class="number">28</span>:<span class="keyword">SET</span> autocommit=0</div><div class="line">123:commit</div><div class="line">124:<span class="keyword">SET</span> <span class="comment">autocommit=1</span></div><div class="line">222:<span class="keyword">SET</span> <span class="comment">autocommit=0</span></div><div class="line">257:commit</div><div class="line">258:<span class="keyword">SET</span> <span class="comment">autocommit=1</span></div><div class="line">268:<span class="keyword">SET</span> <span class="comment">autocommit=0</span></div><div class="line">333:<span class="keyword">SET</span> <span class="comment">autocommit=1</span></div><div class="line">399:commit</div><div class="line">400:<span class="keyword">SET</span> <span class="comment">autocommit=1</span></div></pre></td></tr></table></figure></p>
<p>有发送 <code>set autocommit=0</code>，这下更放心了。开发再次回去检查，发现在Spring框架的时，在类上面用 <code>@Transactional</code> 的方式做了事务，而常规的做法是把注解加在类的方法上，导致忽略了这个因素。</p>
<h1 id="4-解决"><a href="#4-解决" class="headerlink" title="4. 解决"></a>4. 解决</h1><p>解决办法是把需要做事务控制的地方放到Services接口级别，让redis清理缓存的操作在事务之外，或者异步清理。（但也要考虑这样做会有什么负面影响）<br>另外，Redis操作慢，是否是设计上的问题。（听云监控里面显示该事务里面调用了1300次）</p>
<h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p>首先根据但是的现场快照，分析锁等待关系；根据以前的经验，怀疑是“大”事务中有无关的调用；根据程序日志和听云分析出对应的接口；但开发说没有事务，于是进一步通过分析binlog，经过tcp抓包，拿出证据；最后解决。</p>
<p>我们经常说，尽量少用大事务，但由于现在开发都是基于各种框架，使用事务的方式被封装，要理解它们的用法。其次，我们上面的事务并不大，每个sql更新都很快，但是却把其它调用也写在事务里面，就容易阻塞而长时间不提交，也许这样做的初衷是操作db与清理redis缓存放在一个事务里，要么都成功，要么都失败，但是这种分布式设计就不合理（当然有办法是可以做到，这里不展开）。</p>
<p>本文即是一个大事务锁的分析案例，也展示了引用各种工具，确分析论证的过程。特别是对binlog时间戳方面，自己也有了个是清晰的认识。</p>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2017/09/23/mysql-big-trx-lock-case/">http://seanlook.com/2017/09/23/mysql-big-trx-lock-case/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-现象&quot;&gt;&lt;a href=&quot;#1-现象&quot; class=&quot;headerlink&quot; title=&quot;1. 现象&quot;&gt;&lt;/a&gt;1. 现象&lt;/h1&gt;&lt;p&gt;生产环境数据库在某一刻突然发现大量活跃连接，而且大部分状态是 &lt;code&gt;updating&lt;/code&gt; 。问题出现在周六上午，持续了大概三四分钟，得益于我们自己的快照程序，拿到了当时现场的的processlist, 锁等待关系，innodb status 信息：(经过脱敏处理)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7q5fot.com1.z0.glb.clouddn.com/mysql-bigtrx-lockinfo.png&quot; alt=&quot;mysql-bigtrx-lockinfo.png&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7q5fot.com1.z0.glb.clouddn.com/mysql-bigtrx-processlist.png&quot; alt=&quot;mysql-bigtrx-processlist.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;innodb_status.txt片段：&lt;br&gt;&lt;a href=&quot;https://gist.coding.net/u/seanlook/d6ad649f81c64e23a25f3a980c44a1fe&quot;&gt;var_mydb_snapshot.html&lt;/a&gt; （也可以通过 pt-stalk 收集）&lt;/p&gt;
&lt;p&gt;首先在 Lock Waits Info 一节，看到每行的trx_id(事务)的role分为 Blocker(引起阻塞的线程) 与 Blockee（被阻塞者）；最后一列 blocking_trx_id 在role是Blockee时才有值，代表谁阻塞了当前事务。&lt;br&gt;根据上面的关系，可以得出以下结论：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;事务 &lt;strong&gt;19705811640&lt;/strong&gt; 运行了231s，阻塞了19706118937、19706124453、19706124752，而这些事务都在做同一个UPDATE语句&lt;/li&gt;
&lt;li&gt;被锁定的记录是 mydb.mytable1表的主键索引值为 5317885 行&lt;/li&gt;
&lt;li&gt;事务 19706124752 既被阻塞，也阻塞了别人19706125253&lt;/li&gt;
&lt;li&gt;不难发现 &lt;strong&gt;19705811640&lt;/strong&gt; 应该最先运行的事务，且对其它事务产生了链式阻塞，它的thread_id是 9898630，来源IP&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是当你兴冲冲的找到引起阻塞的事务 19705811640 在做什么事情时，发现它没有任何sql的信息，lock info以及processlist里面都是None。那么有哪些情况会导致在会话是活跃的，但sql的内容为空：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行show processlist的时候，刚好在事务里面两个sql的中间&lt;/li&gt;
&lt;li&gt;sql已经执行完成，但长时间没有提交&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;2-初步分析&quot;&gt;&lt;a href=&quot;#2-初步分析&quot; class=&quot;headerlink&quot; title=&quot;2. 初步分析&quot;&gt;&lt;/a&gt;2. 初步分析&lt;/h1&gt;&lt;p&gt;其实这个现象已经遇到过很多次了，第1个原因常发生在 大量单条记录更新 的情况，一个sql在一个事务里循环执行10000次，即使每条都很快，但大部分时间都在网络传输上，（可以改成批量的形式）。在本案例基本上能确定的是第2个原因：事务开启之后，sql也执行了，但中间又做别的事情去了。那么怎样才能知道这个事务是什么内容呢？两个方向去找：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从来源ip上的应用程序的日志里分析&lt;/li&gt;
&lt;li&gt;binlog里面分析&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="lock" scheme="http://seanlook.com/tags/lock/"/>
    
  </entry>
  
  <entry>
    <title>一个简单的数据订阅程序(for DBA)</title>
    <link href="http://seanlook.com/2017/09/05/mysql-binlog-subscribe-simple-for-dba/"/>
    <id>http://seanlook.com/2017/09/05/mysql-binlog-subscribe-simple-for-dba/</id>
    <published>2017-09-05T08:32:49.000Z</published>
    <updated>2017-09-05T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>本程序基于大众点评github项目 <a href="https://github.com/danfengcao/binlog2sql" target="_blank" rel="external">binlog2sql</a> 二次开发而来，可以实现对源库的binlog实时接收，并组装成增量sql。</p>
<p>原项目默认是把sql输出到控制台，二次开发后的版本把sql放入redis队列，根据需要由另一个程序消费到目标库，模拟了一个“从库”。<br>在测试时–stop-never在qa环境没有作用，添加了在 BinLogStreamReader 实例里面加入blocking=True来保证源源不断的接受binlog而不中断。</p>
<p>另外也加入了更改目标库名的功能，比如原库叫d_ec_crm，生成的sql目标库名是 d_ec_contact 。</p>
<p>项目地址：<a href="https://github.com/seanlook/binlog2sql" target="_blank" rel="external">https://github.com/seanlook/binlog2sql</a></p>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>目前想到以下应用场景：</p>
<ul>
<li><p>实时同步部分表到另外一个数据库实例<br>比如在数据库迁库时，将当天表的数据同步到新库，模拟阿里云dms数据传输的功能，相当于在测试环境演练，减少失误。<br>另外还可以从新库反向同步增量数据到老库，解决测试环境多项目测试引起数据库冲突的问题。</p>
</li>
<li><p>正式切库时的回滚措施<br>比如数据库迁移项目，切换期间数据写向新库，但如果切换失败需要回滚到老库，就需要把这段时间新增的数据同步回老库（启动消费程序），这就不需要程序段再考虑复杂的回滚设计。</p>
</li>
<li><p>数据库闪回<br>关于数据库误操作的闪回方案，见 <a href="http://seanlook.com/2017/03/03/mysql-flashback_use_purged-binlog/">文章MySQL根据离线binlog快速闪回</a> 。<code>binlog2sql</code>的 <code>-B</code> 选项可以将sql反向组装，生产回滚sql。如果需要完善的闪回功能，要进一步开发，提高易用性。</p>
</li>
<li><p>binlog搜索功能<br>目前组内一版的binlog搜索功能，是离线任务处理的方式，好处是不会占用太大空间，缺点是处理时间较长。通过实时binlog解析过滤的方式，入ES可以快速搜索。需要进一步开发完善。</p>
</li>
</ul>
<a id="more"></a>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>安装好python2.7虚拟环境，安装必要模块：pymysql, mysql-replication, redis, rq<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> -r requirements.txt</div></pre></td></tr></table></figure></p>
<p>注意：<code>pymysqlreplication</code> 库在处理 ‘0000-00-00 00:00:00’ 时有些不尽人意，可能会导致生产的sql在目标库执行失败，还有对<code>datetime(6)</code>类型有个bug，也对它进行了修复，地址：<a href="https://github.com/seanlook/python-mysql-replication" target="_blank" rel="external">https://github.com/seanlook/python-mysql-replication</a> 。</p>
<p>准备一个redis用于存放sql队列，在环境变量里面设置redis地址<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> REDIS_URL=<span class="string">'redis://localhost:6379'</span></div></pre></td></tr></table></figure></p>
<p>在主库执行 <code>show master status</code> 得到binlog开始的文件名和postion，然后开始订阅：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">binlog2sql原版使用时：</div><div class="line">$ ~/.pyenv/versions/2.7.10/envs/py2_binlog/bin/python binlog2sql.py -h192.168.1.185 -P3306 -uecuser -pecuser \</div><div class="line">-<span class="ruby">d d_ec_contact --tables t_crm_contact_at \</span></div><div class="line">-<span class="ruby">-start-file=<span class="string">'mysql-bin.000001'</span> --start-datetime=<span class="string">'2017-08-30 12:30:00'</span> --start-position=<span class="number">6529058</span> \</span></div><div class="line">-<span class="ruby">-stop-never &gt; contact<span class="number">0</span>.sql</span></div><div class="line"></div><div class="line">加入订阅功能后：</div><div class="line">$ ~/.pyenv/versions/2.7.10/envs/py2_binlog/bin/python binlog2sql.py -h192.168.1.185 -P3306 -uecuser -pecuser \</div><div class="line">-<span class="ruby">d <span class="symbol">d_ec_contact:</span>d_ec_crm --tables t_crm_contact_at t_crm_remark_today \</span></div><div class="line">-<span class="ruby">-start-file=<span class="string">'mysql-bin.000001'</span> --start-datetime=<span class="string">'2017-08-30 12:30:00'</span> --start-position=<span class="number">6529058</span> \</span></div><div class="line">-<span class="ruby">-dest-dsn h=<span class="number">10.0</span>.<span class="number">200.195</span>,P=<span class="number">3307</span>,u=ecuser,p=ecuser</span></div><div class="line">-<span class="ruby">-stop-never &gt; contact<span class="number">0</span>.sql</span></div></pre></td></tr></table></figure></p>
<p><code>-d d_ec_contact:d_ec_crm</code> 表上生成目标sql映射关系，如果不改变库名，就不需要 <code>:</code> 指定，与原版兼容。<br><code>--dest-dsn</code>: 表示目标库的地址和认证信息。</p>
<p>这时在redis里面可以看到sql信息。如果需要在目标库重放，则启动消费程序：（在代码目录下面）<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~<span class="regexp">/.pyenv/</span>versions<span class="regexp">/2.7.10/</span>envs<span class="regexp">/py2_binlog/</span>bin<span class="regexp">/rq worker</span></div></pre></td></tr></table></figure></p>
<p>待数据追上之后，可以看到几乎是实时同步的。</p>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2017/09/05/mysql-binlog-subscribe-simple-for-dba/">http://seanlook.com/2017/09/05/mysql-binlog-subscribe-simple-for-dba/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本程序基于大众点评github项目 &lt;a href=&quot;https://github.com/danfengcao/binlog2sql&quot;&gt;binlog2sql&lt;/a&gt; 二次开发而来，可以实现对源库的binlog实时接收，并组装成增量sql。&lt;/p&gt;
&lt;p&gt;原项目默认是把sql输出到控制台，二次开发后的版本把sql放入redis队列，根据需要由另一个程序消费到目标库，模拟了一个“从库”。&lt;br&gt;在测试时–stop-never在qa环境没有作用，添加了在 BinLogStreamReader 实例里面加入blocking=True来保证源源不断的接受binlog而不中断。&lt;/p&gt;
&lt;p&gt;另外也加入了更改目标库名的功能，比如原库叫d_ec_crm，生成的sql目标库名是 d_ec_contact 。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/seanlook/binlog2sql&quot;&gt;https://github.com/seanlook/binlog2sql&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a&gt;应用场景&lt;/h1&gt;&lt;p&gt;目前想到以下应用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;实时同步部分表到另外一个数据库实例&lt;br&gt;比如在数据库迁库时，将当天表的数据同步到新库，模拟阿里云dms数据传输的功能，相当于在测试环境演练，减少失误。&lt;br&gt;另外还可以从新库反向同步增量数据到老库，解决测试环境多项目测试引起数据库冲突的问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;正式切库时的回滚措施&lt;br&gt;比如数据库迁移项目，切换期间数据写向新库，但如果切换失败需要回滚到老库，就需要把这段时间新增的数据同步回老库（启动消费程序），这就不需要程序段再考虑复杂的回滚设计。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据库闪回&lt;br&gt;关于数据库误操作的闪回方案，见 &lt;a href=&quot;http://seanlook.com/2017/03/03/mysql-flashback_use_purged-binlog/&quot;&gt;文章MySQL根据离线binlog快速闪回&lt;/a&gt; 。&lt;code&gt;binlog2sql&lt;/code&gt;的 &lt;code&gt;-B&lt;/code&gt; 选项可以将sql反向组装，生产回滚sql。如果需要完善的闪回功能，要进一步开发，提高易用性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;binlog搜索功能&lt;br&gt;目前组内一版的binlog搜索功能，是离线任务处理的方式，好处是不会占用太大空间，缺点是处理时间较长。通过实时binlog解析过滤的方式，入ES可以快速搜索。需要进一步开发完善。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="table_cache" scheme="http://seanlook.com/tags/table-cache/"/>
    
  </entry>
  
  <entry>
    <title>ProxySQL PPT分享</title>
    <link href="http://seanlook.com/2017/07/19/proxysql-tutorials-ec/"/>
    <id>http://seanlook.com/2017/07/19/proxysql-tutorials-ec/</id>
    <published>2017-07-19T13:32:49.000Z</published>
    <updated>2017-07-19T13:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>前些天在公司内部进行了一次 ProxySQL主题的介绍 《ProxySQL数据库中间件使用实践》，因为proxysql是我调研并引入公司的，有必要跟本组开发同学，进行一个正式的介绍和使用说明，以及我们当前的应用情况。</p>
<p>分享比较偷懒，直接拿来proxysql作者renecannao在 Percona Live Europe 2016 上的PPT，是一个非常全面又具有点睛作用的演示稿了。</p>


	<div class="row">
	  <iframe src="http://nagland.github.io/viewer/web/viewer.html?val=http://7q5fot.com1.z0.glb.clouddn.com/ProxySQL-Tutorials-PerconaLive.pdf" style="width:100%; height:550px"></iframe>
	</div>



<p>PPT来源：<a href="https://www.percona.com/live/17/sessions/proxysql-tutorial" target="_blank" rel="external">https://www.percona.com/live/17/sessions/proxysql-tutorial</a></p>
<p>另外一个觉得也还不错：<a href="https://www.slideshare.net/MyDBOPS/proxysql-for-mysql" target="_blank" rel="external">https://www.slideshare.net/MyDBOPS/proxysql-for-mysql</a></p>
<p>– 我只是ppt的搬运工</p>
<hr>
<p>原文连接地址：<a href="http://seanlook.com/2017/07/19/proxysql-tutorials-ec/">http://seanlook.com/2017/07/19/proxysql-tutorials-ec/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前些天在公司内部进行了一次 ProxySQL主题的介绍 《ProxySQL数据库中间件使用实践》，因为proxysql是我调研并引入公司的，有必要跟本组开发同学，进行一个正式的介绍和使用说明，以及我们当前的应用情况。&lt;/p&gt;
&lt;p&gt;分享比较偷懒，直接拿来proxysql作者
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="分享" scheme="http://seanlook.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>ProxySQL监控方案</title>
    <link href="http://seanlook.com/2017/07/16/mysql-proxysql-monitor/"/>
    <id>http://seanlook.com/2017/07/16/mysql-proxysql-monitor/</id>
    <published>2017-07-16T13:32:49.000Z</published>
    <updated>2017-07-18T13:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>ProxySQL能监控的信息不多，而且大部分是统计信息，不是性能数据。</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; show tables from stats;</span></div><div class="line">+--------------------------------+</div><div class="line"><span class="section">| tables                         |</span></div><div class="line">+--------------------------------+</div><div class="line">| global<span class="emphasis">_variables               |</span></div><div class="line">| stats_mysql<span class="emphasis">_commands_</span>counters  |</div><div class="line">| stats<span class="emphasis">_mysql_</span>connection<span class="emphasis">_pool    |</span></div><div class="line">| stats_mysql<span class="emphasis">_global             |</span></div><div class="line">| stats_mysql<span class="emphasis">_processlist        |</span></div><div class="line">| stats_mysql<span class="emphasis">_query_</span>digest       |</div><div class="line">| stats<span class="emphasis">_mysql_</span>query<span class="emphasis">_digest_</span>reset |</div><div class="line"><span class="section">| stats_mysql_query_rules        |</span></div><div class="line">+--------------------------------+</div></pre></td></tr></table></figure>
<p>主要关心的指标都在表 <code>stats_mysql_global</code> 里面，源代码 diamond 目录下有个 <em>proxysqlstat.py</em> 脚本，是通过<code>SHOW MYSQL STATUS</code>命令，由diamond收集进程将指标上报到Graphite。有以下几个Metrics：</p>
<ul>
<li>并发数<ul>
<li>Active_Transactions</li>
<li>Questions</li>
</ul>
</li>
<li>连接相关<ul>
<li>Client_Connections_connected</li>
<li>Server_Connections_connected</li>
<li>Server_Connections_aborted</li>
</ul>
</li>
<li>内存相关<ul>
<li>Query_Cache_Entries</li>
<li>Query_Cache_Memory_bytes</li>
<li>SQLite3_memory_bytes</li>
<li>ConnPool_memory_bytes</li>
</ul>
</li>
<li>流量相关<ul>
<li>mysql_backend_buffers_bytes</li>
<li>mysql_frontend_buffers_bytes</li>
<li>mysql_session_internal_bytes</li>
</ul>
</li>
<li>其它<ul>
<li>MySQL_Monitor_Workers</li>
<li>MySQL_Thread_Workers</li>
</ul>
</li>
</ul>
<p>但是这些远远不够，还有以下更值得关心的指标：<br>表 <code>stats_mysql_connection_pool</code>:</p>
<ul>
<li>对后端DB请求的网络延时 Latency</li>
<li>对后端各个DB的请求数 Queries</li>
<li>后端各个DB的当前活跃连接数 ConnUsed</li>
<li>后端DB的状态 status</li>
</ul>
<p>表 <code>stats_mysql_processlist</code>:</p>
<ul>
<li>每个用户的当前的连接数</li>
</ul>
<p>表 <code>stats_mysql_query_digest</code>:</p>
<ul>
<li>各个类型的sql请求量比例、趋势</li>
</ul>
<p>在我们的环境下使用的是 InfluxDB + Grafana，通过telegraf收集上报。上述所有的监控脚本见仓库 <a href="https://github.com/seanlook/proxysql_tools" target="_blank" rel="external">https://github.com/seanlook/proxysql_tools</a> ：</p>
<ul>
<li><p><code>proxysql_stats.py</code>:</p>
<ul>
<li>收集 stats_mysql_global 和 stats_mysql_connection_pool 中的信息，打印出 influxdb 数据上报格式</li>
</ul>
</li>
<li><p><code>proxysql_stats_digest.py</code>:</p>
<ul>
<li>收集 sql digest，收集的信息用于展示每类sql的执行趋势。<br>因为数据是累计值，所以这里做了增量计算，然后一方面上报给influxdb，一方面存入mysql，可以做更多用途。mysql的表结构 proxysql_stats_digest.sql 。<br>建议收集频率不要过高，比如10分钟一次。</li>
</ul>
</li>
<li><p><code>grafana_proxysql_stats.json</code>:</p>
<ul>
<li>Grafana Dashboard，直接导入可用 。</li>
</ul>
</li>
</ul>
<p>除此外，还需要对proxysql进程的监控，如内存占用、CPU使用，这部分通过telegraf的 procstat 插件去做：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="string">[[inputs.procstat]]</span></div><div class="line">    exe = <span class="string">"proxysql"</span></div><div class="line"></div><div class="line"><span class="string">[[inputs.exec]]</span></div><div class="line"></div><div class="line">  # the command to run</div><div class="line">  command = <span class="string">"/etc/telegraf/telegraf.d/proxysql_stats.py"</span></div><div class="line"></div><div class="line">  ## Timeout <span class="keyword">for</span> each command to complete.</div><div class="line">  timeout = <span class="string">"10s"</span></div><div class="line"></div><div class="line">  data_format = <span class="string">"influx"</span></div></pre></td></tr></table></figure></p>
<p>对后端DB status和proxysql端口存活，设置告警。这样就有一个相对完整的ProxySQL监控方案了。<br><a id="more"></a><br>面板示例：</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-monitor-1.png" alt="Geneal"><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-monitor-2.png" alt="Queries"><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-monitor-3.png" alt="Process"></p>
<hr>
<p>原文连接地址：<a href="http://seanlook.com/2017/07/16/mysql-proxysql-monitor/">http://seanlook.com/2017/07/16/mysql-proxysql-monitor/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ProxySQL能监控的信息不多，而且大部分是统计信息，不是性能数据。&lt;/p&gt;
&lt;figure class=&quot;highlight asciidoc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;mysql&amp;gt; show tables from stats;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+--------------------------------+&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;| tables                         |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+--------------------------------+&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;| global&lt;span class=&quot;emphasis&quot;&gt;_variables               |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;| stats_&lt;/span&gt;mysql&lt;span class=&quot;emphasis&quot;&gt;_commands_&lt;/span&gt;counters  |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;| stats&lt;span class=&quot;emphasis&quot;&gt;_mysql_&lt;/span&gt;connection&lt;span class=&quot;emphasis&quot;&gt;_pool    |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;| stats_&lt;/span&gt;mysql&lt;span class=&quot;emphasis&quot;&gt;_global             |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;| stats_&lt;/span&gt;mysql&lt;span class=&quot;emphasis&quot;&gt;_processlist        |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;| stats_&lt;/span&gt;mysql&lt;span class=&quot;emphasis&quot;&gt;_query_&lt;/span&gt;digest       |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;| stats&lt;span class=&quot;emphasis&quot;&gt;_mysql_&lt;/span&gt;query&lt;span class=&quot;emphasis&quot;&gt;_digest_&lt;/span&gt;reset |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;| stats_mysql_query_rules        |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+--------------------------------+&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;主要关心的指标都在表 &lt;code&gt;stats_mysql_global&lt;/code&gt; 里面，源代码 diamond 目录下有个 &lt;em&gt;proxysqlstat.py&lt;/em&gt; 脚本，是通过&lt;code&gt;SHOW MYSQL STATUS&lt;/code&gt;命令，由diamond收集进程将指标上报到Graphite。有以下几个Metrics：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并发数&lt;ul&gt;
&lt;li&gt;Active_Transactions&lt;/li&gt;
&lt;li&gt;Questions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;连接相关&lt;ul&gt;
&lt;li&gt;Client_Connections_connected&lt;/li&gt;
&lt;li&gt;Server_Connections_connected&lt;/li&gt;
&lt;li&gt;Server_Connections_aborted&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存相关&lt;ul&gt;
&lt;li&gt;Query_Cache_Entries&lt;/li&gt;
&lt;li&gt;Query_Cache_Memory_bytes&lt;/li&gt;
&lt;li&gt;SQLite3_memory_bytes&lt;/li&gt;
&lt;li&gt;ConnPool_memory_bytes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;流量相关&lt;ul&gt;
&lt;li&gt;mysql_backend_buffers_bytes&lt;/li&gt;
&lt;li&gt;mysql_frontend_buffers_bytes&lt;/li&gt;
&lt;li&gt;mysql_session_internal_bytes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其它&lt;ul&gt;
&lt;li&gt;MySQL_Monitor_Workers&lt;/li&gt;
&lt;li&gt;MySQL_Thread_Workers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是这些远远不够，还有以下更值得关心的指标：&lt;br&gt;表 &lt;code&gt;stats_mysql_connection_pool&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对后端DB请求的网络延时 Latency&lt;/li&gt;
&lt;li&gt;对后端各个DB的请求数 Queries&lt;/li&gt;
&lt;li&gt;后端各个DB的当前活跃连接数 ConnUsed&lt;/li&gt;
&lt;li&gt;后端DB的状态 status&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;表 &lt;code&gt;stats_mysql_processlist&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个用户的当前的连接数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;表 &lt;code&gt;stats_mysql_query_digest&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各个类型的sql请求量比例、趋势&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在我们的环境下使用的是 InfluxDB + Grafana，通过telegraf收集上报。上述所有的监控脚本见仓库 &lt;a href=&quot;https://github.com/seanlook/proxysql_tools&quot;&gt;https://github.com/seanlook/proxysql_tools&lt;/a&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;proxysql_stats.py&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;收集 stats_mysql_global 和 stats_mysql_connection_pool 中的信息，打印出 influxdb 数据上报格式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;proxysql_stats_digest.py&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;收集 sql digest，收集的信息用于展示每类sql的执行趋势。&lt;br&gt;因为数据是累计值，所以这里做了增量计算，然后一方面上报给influxdb，一方面存入mysql，可以做更多用途。mysql的表结构 proxysql_stats_digest.sql 。&lt;br&gt;建议收集频率不要过高，比如10分钟一次。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;grafana_proxysql_stats.json&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Grafana Dashboard，直接导入可用 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此外，还需要对proxysql进程的监控，如内存占用、CPU使用，这部分通过telegraf的 procstat 插件去做：&lt;br&gt;&lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;[[inputs.procstat]]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    exe = &lt;span class=&quot;string&quot;&gt;&quot;proxysql&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;[[inputs.exec]]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  # the command to run&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  command = &lt;span class=&quot;string&quot;&gt;&quot;/etc/telegraf/telegraf.d/proxysql_stats.py&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ## Timeout &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; each command to complete.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  timeout = &lt;span class=&quot;string&quot;&gt;&quot;10s&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  data_format = &lt;span class=&quot;string&quot;&gt;&quot;influx&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对后端DB status和proxysql端口存活，设置告警。这样就有一个相对完整的ProxySQL监控方案了。&lt;br&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="中间件" scheme="http://seanlook.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="proxysql" scheme="http://seanlook.com/tags/proxysql/"/>
    
  </entry>
  
  <entry>
    <title>ProxySQL高可用方案</title>
    <link href="http://seanlook.com/2017/07/15/mysql-proxysql-ha-consul/"/>
    <id>http://seanlook.com/2017/07/15/mysql-proxysql-ha-consul/</id>
    <published>2017-07-15T13:32:49.000Z</published>
    <updated>2017-07-18T13:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL的高可用方案现在如 MHA, Galera, InnoDB Cluster，一旦在上游使用中间件之后，中间件本身可能成为单点。所以本文要介绍的是对于ProxySQL自身高可用的方案对比。<br>首先ProxySQL自身是通过Angel进程的形式运行，即proxysql如果有崩溃，主进程会自动拉起来。但如果是无响应或者网络故障，则需要另外的机制去做到服务的高可用。本文总结了四种方法。</p>
<p>ProxySQL有关介绍，请参考： <a href="http://seanlook.com/2017/04/10/mysql-proxysql-install-config/">http://seanlook.com/2017/04/10/mysql-proxysql-install-config/</a></p>
<h1 id="1-与应用一起部署"><a href="#1-与应用一起部署" class="headerlink" title="1. 与应用一起部署"></a>1. 与应用一起部署</h1><p>所有部署应用的地方，都会部署proxysql节点，当这个proxysql挂掉之后，只影响本机的应用。而且不需要多经过一层网络。<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-ha-1.png" alt=""><br>但带来的问题是，如果应用节点很多，proxy的数量也会增加：</p>
<ul>
<li>会导致proxysql的配置不容易管理</li>
<li>proxysql对后端db健康检查的请求成倍增加</li>
<li>限制每个用户或后端db的 max_connections 特性用不了</li>
</ul>
<h1 id="2-集中式部署，多ip引用"><a href="#2-集中式部署，多ip引用" class="headerlink" title="2. 集中式部署，多ip引用"></a>2. 集中式部署，多ip引用</h1><p>后端一个db集群，对应中间两个以上的 proxysql 节点，前端应用配置多个ip地址，随机挑选一个使用，完全无状态。仅需要多经过一次网络代理。<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-ha-2.png" alt=""><br>这种方式的好处是，不需要再对数据库这种基础服务，多引入一个软件来实现高可用（如下节的keepalive或consul），由应用端获取数据库连接的代码逻辑处理。</p>
<p>但是因为proxysql访问地址是写在配置文件里面的，如果一个节点挂掉，随机挑选还是会落地这个失败的节点。所以优化方案是，ip列表里面默认取某一个，失败之后再选取下一个重试。</p>
<p>示例代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">proxysql_addr_list = [<span class="string">'192.168.1.175'</span>, <span class="string">'192.168.1.176'</span>, <span class="string">'192.168.1.177'</span>]</div><div class="line">proxysql_addr_list_len = <span class="number">3</span></div><div class="line">hostname = <span class="string">'this_hostname_for_hash_loadbalance'</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dbconnection</span><span class="params">()</span>:</span></div><div class="line">    list_index = hash(hostname) % proxysql_addr_list_len</div><div class="line">    dbconn = <span class="keyword">None</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        dbconn = DBConnect(dbhost=proxysql_addr_list[ list_index ], dbport=<span class="number">3306</span>)  <span class="comment"># timeout 1000ms</span></div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">if</span> (list_index + <span class="number">1</span>) == proxysql_addr_list_len:</div><div class="line">            list_index = <span class="number">-1</span>  <span class="comment"># like Circular Array</span></div><div class="line">        dbconn = DBConnec(dbhost=proxysql_addr_list[ list_index + <span class="number">1</span> ], dbport=<span class="number">3306</span>)  <span class="comment"># if failed again, through exception</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> dbconn</div></pre></td></tr></table></figure>
<p>上述并不完美，比如可以改用环形数组轮巡，允许重试其它更多的ip。<br><a id="more"></a></p>
<h2 id="能不能不进行多IP引用呢？"><a href="#能不能不进行多IP引用呢？" class="headerlink" title="能不能不进行多IP引用呢？"></a>能不能不进行多IP引用呢？</h2><p>为了避免后端引用IP的单点，可以将上面第1种和这里的第2中结合起来，改进的部署方案：（见文后参考链接）<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-ha-1-1.png" alt=""><br>即在原来的基础上，App上的proxysql后端，挂的还是ProxySQL集群。</p>
<p>我个人没有验证这样的方案，如果要用需要充分验证proxysql互连的时候，有没有bug。</p>
<h1 id="3-经典-keepalived"><a href="#3-经典-keepalived" class="headerlink" title="3. 经典 keepalived"></a>3. 经典 keepalived</h1><p>引入keepalived，通过VIP访问两个以上的proxysql节点，既可以减少一次网络传输，又可以实现proxysql自身的高可用，而且甚至不用关心脑裂的问题，因为proxysql配置完全一样，是无状态的，脑裂了也无妨。<br>你也可能意识到，这种方式一次只能一个proxysql提供服务，另一个proxysql节点始终处于备用状态。如果配合LVS或haproxy做负载均衡，部署架构又会多出一层网络请求，而且越发复杂（VIP不在proxysql节点上漂，而是在两个lvs之间）。<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-ha-3.png" alt=""><br>使用keepalived的前提是，局域网允许发组播包。这在阿里云ECS经典网络下是不允许的，如果有其它类似方式，如SLB也是可行的。目前测试环境采用是 haproxy + keepalived 的方式。</p>
<h1 id="4-Consul服务发现"><a href="#4-Consul服务发现" class="headerlink" title="4. Consul服务发现"></a>4. Consul服务发现</h1><p>如果上面的方式都不适用，那么可以进一步考虑使用第三方的服务发现组件。</p>
<h2 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h2><p>Consul用于实现分布式系统的服务发现与配置，我们将所有proxysql节点注册到consul上作为一个服务来提供，由 Consul agent Server 来判断proxysql节点的存活，每个应用节点上都安装 Consul agent Client 来供应用获取可用地址。</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-ha-4.png" alt=""></p>
<p>这样部署架构的好处是：</p>
<ol>
<li>不需要多一层负载均衡，多一层网络链路</li>
<li>不需要部署大量的proxysql节点</li>
<li>App或者ProxySQL节点上的Consul故障，不影响其它节点。Consul Server集群的天生具备高可用</li>
<li>ProxySQL故障会被Consul检查到，踢除故障节点，并通知给所有consul agent</li>
<li>可以利用Consul的DNS接口实现简单的负载均衡</li>
</ol>
<p>其实consul所做的与本文第2节的类似：自动提出不可用的节点，只是一个是被动、手动，一个是主动、自动。<br>下面简单演示一下。</p>
<h2 id="4-2-部署示例"><a href="#4-2-部署示例" class="headerlink" title="4.2 部署示例"></a>4.2 部署示例</h2><p>Consul Server节点的安装在此略过，网上有不少文章，直接进入到在ProxySQL节点安装配置Consul。</p>
<p>Consul agent:</p>
<ul>
<li>apps-1: <code>10.0.201.168</code></li>
<li>apps-2: <code>10.0.201.220</code></li>
<li>apps-3: <code>10.0.201.156</code></li>
</ul>
<p>ProxySQL node:<br>每个节点上运行了两个proxysql进程 <code>7033: crm0</code>, <code>7133: crm1</code></p>
<ul>
<li>proxysql-1 : <code>192.168.1.170</code></li>
<li>proxysql-2 : <code>192.168.1.171</code></li>
</ul>
<h3 id="配置-proxysql-节点上的Consul"><a href="#配置-proxysql-节点上的Consul" class="headerlink" title="配置 proxysql 节点上的Consul"></a>配置 proxysql 节点上的Consul</h3><p>配置 proxysql-1 节点上的Consul：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">$ sudo vim /etc/consul.d/config.json</div><div class="line">&#123;</div><div class="line">    <span class="string">"data_dir"</span>: <span class="string">"/opt/consul"</span>, </div><div class="line">    <span class="string">"datacenter"</span>: <span class="string">"Office_test"</span>, </div><div class="line">    <span class="string">"log_level"</span>: <span class="string">"INFO"</span>, </div><div class="line">    <span class="string">"node_name"</span>: <span class="string">"proxysql-1"</span>, </div><div class="line">    <span class="string">"retry_join"</span>: [</div><div class="line">        <span class="string">"10.0.201.168"</span>, </div><div class="line">        <span class="string">"10.0.201.220"</span>, </div><div class="line">        <span class="string">"10.0.201.156"</span></div><div class="line">    ], </div><div class="line">    <span class="string">"telemetry"</span>: &#123;</div><div class="line">        <span class="string">"statsd_address"</span>: <span class="string">"10.0.201.34:8125"</span>, </div><div class="line">        <span class="string">"statsite_prefix"</span>: <span class="string">"proxysql-1"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"dns_config"</span>: &#123;</div><div class="line">        <span class="string">"only_passing"</span>: true</div><div class="line">    &#125;</div><div class="line">    <span class="string">"acl_datacenter"</span>: <span class="string">"Office_test"</span>, </div><div class="line">    <span class="string">"acl_default_policy"</span>: <span class="string">"deny"</span>, </div><div class="line">    <span class="string">"encrypt"</span>: <span class="string">"XXXXxxxx=="</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">$ sudo vi /etc/consul.d/proxysql.json</div><div class="line">&#123;<span class="string">"services"</span>: [</div><div class="line">    &#123;</div><div class="line">        <span class="string">"id"</span>: <span class="string">"proxysql_crm0"</span>, </div><div class="line">        <span class="string">"name"</span>: <span class="string">"proxysql"</span>, </div><div class="line">        <span class="string">"address"</span>: <span class="string">"192.168.1.170"</span>,</div><div class="line">        <span class="string">"port"</span>: <span class="number">7133</span>, </div><div class="line">        <span class="string">"tags"</span>: [<span class="string">"test"</span>, <span class="string">"crm0"</span>], </div><div class="line">        <span class="string">"check"</span>: &#123;</div><div class="line">            <span class="string">"interval"</span>: <span class="string">"5s"</span>, </div><div class="line">            <span class="string">"tcp"</span>: <span class="string">"192.168.1.170:7033"</span>, </div><div class="line">            <span class="string">"timeout"</span>: <span class="string">"1s"</span></div><div class="line">        &#125;, </div><div class="line">        <span class="string">"enableTagOverride"</span>: false, </div><div class="line">        <span class="string">"token"</span>: <span class="string">"xxxxxxxx-xxxx"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="string">"id"</span>: <span class="string">"proxysql_crm1"</span>, </div><div class="line">        <span class="string">"address"</span>: <span class="string">"192.168.1.170"</span>,</div><div class="line">        <span class="string">"name"</span>: <span class="string">"proxysql"</span>, </div><div class="line">        <span class="string">"port"</span>: <span class="number">7133</span>, </div><div class="line">        <span class="string">"tags"</span>: [<span class="string">"test"</span>, <span class="string">"crm1"</span>], </div><div class="line">        <span class="string">"check"</span>: &#123;</div><div class="line">            <span class="string">"interval"</span>: <span class="string">"5s"</span>, </div><div class="line">            <span class="string">"tcp"</span>: <span class="string">"192.168.1.170:7133"</span>, </div><div class="line">            <span class="string">"timeout"</span>: <span class="string">"1s"</span></div><div class="line">        &#125;, </div><div class="line">        <span class="string">"enableTagOverride"</span>: false, </div><div class="line">        <span class="string">"token"</span>: <span class="string">"xxxxxxxx-xxxx"</span></div><div class="line">    &#125;</div><div class="line">]&#125;</div></pre></td></tr></table></figure></p>
<p>启动consul<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo consul agent -<span class="built_in">config</span>-dir /etc/consul &amp;</div></pre></td></tr></table></figure></p>
<p>查看日志</p>
<p>proxysql-2 节点上的Consul配置根据上面的内容去改。</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-ha-consul.png" alt=""></p>
<h2 id="4-4-使用方式"><a href="#4-4-使用方式" class="headerlink" title="4.4 使用方式"></a>4.4 使用方式</h2><p>先来看下效果：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[root@proxysql-1 ~]</span># <span class="selector-tag">dig</span> @<span class="keyword">127</span>.<span class="keyword">0</span>.<span class="keyword">0</span>.<span class="keyword">1</span> -p <span class="number">8600</span> crm0.proxysql.service.consul SRV</div><div class="line"></div><div class="line">; &lt;&lt;&gt;&gt; <span class="selector-tag">DiG</span> 9<span class="selector-class">.8</span><span class="selector-class">.2rc1-RedHat-9</span><span class="selector-class">.8</span><span class="selector-class">.2-0</span><span class="selector-class">.62</span><span class="selector-class">.rc1</span><span class="selector-class">.el6_9</span><span class="selector-class">.2</span> &lt;&lt;&gt;&gt; @<span class="keyword">127</span>.<span class="keyword">0</span>.<span class="keyword">0</span>.<span class="keyword">1</span> -p <span class="number">8600</span> crm0.proxysql.service.consul SRV</div><div class="line">; (1 <span class="selector-tag">server</span> <span class="selector-tag">found</span>)</div><div class="line">;; <span class="selector-tag">global</span> <span class="selector-tag">options</span>: +<span class="selector-tag">cmd</span></div><div class="line">;; <span class="selector-tag">Got</span> <span class="selector-tag">answer</span>:</div><div class="line">;; <span class="selector-tag">-</span>&gt;&gt;<span class="selector-tag">HEADER</span>&lt;&lt;<span class="selector-tag">-</span> <span class="selector-tag">opcode</span>: <span class="selector-tag">QUERY</span>, <span class="selector-tag">status</span>: <span class="selector-tag">NOERROR</span>, <span class="selector-tag">id</span>: 65293</div><div class="line">;; <span class="selector-tag">flags</span>: <span class="selector-tag">qr</span> <span class="selector-tag">aa</span> <span class="selector-tag">rd</span>; <span class="selector-tag">QUERY</span>: 1, <span class="selector-tag">ANSWER</span>: 2, <span class="selector-tag">AUTHORITY</span>: 0, <span class="selector-tag">ADDITIONAL</span>: 2</div><div class="line">;; <span class="selector-tag">WARNING</span>: <span class="selector-tag">recursion</span> <span class="selector-tag">requested</span> <span class="selector-tag">but</span> <span class="selector-tag">not</span> <span class="selector-tag">available</span></div><div class="line"></div><div class="line">;; <span class="selector-tag">QUESTION</span> <span class="selector-tag">SECTION</span>:</div><div class="line">;<span class="selector-tag">crm0</span><span class="selector-class">.proxysql</span><span class="selector-class">.service</span><span class="selector-class">.consul</span>.	<span class="selector-tag">IN</span>	<span class="selector-tag">SRV</span></div><div class="line"></div><div class="line">;; <span class="selector-tag">ANSWER</span> <span class="selector-tag">SECTION</span>:</div><div class="line"><span class="selector-tag">crm0</span><span class="selector-class">.proxysql</span><span class="selector-class">.service</span><span class="selector-class">.consul</span>. 0	<span class="selector-tag">IN</span>	<span class="selector-tag">SRV</span>	1 1 7033 <span class="selector-tag">proxysql-1</span><span class="selector-class">.node</span><span class="selector-class">.office_test</span><span class="selector-class">.consul</span>.</div><div class="line"><span class="selector-tag">crm0</span><span class="selector-class">.proxysql</span><span class="selector-class">.service</span><span class="selector-class">.consul</span>. 0	<span class="selector-tag">IN</span>	<span class="selector-tag">SRV</span>	1 1 7033 <span class="selector-tag">proxysql-2</span><span class="selector-class">.node</span><span class="selector-class">.office_test</span><span class="selector-class">.consul</span>.</div><div class="line"></div><div class="line">;; <span class="selector-tag">ADDITIONAL</span> <span class="selector-tag">SECTION</span>:</div><div class="line"><span class="selector-tag">proxysql-1</span><span class="selector-class">.node</span><span class="selector-class">.office_test</span><span class="selector-class">.consul</span>. 0 <span class="selector-tag">IN</span> <span class="selector-tag">A</span>	192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.170</span></div><div class="line"><span class="selector-tag">proxysql-2</span><span class="selector-class">.node</span><span class="selector-class">.office_test</span><span class="selector-class">.consul</span>. 0 <span class="selector-tag">IN</span> <span class="selector-tag">A</span>	192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.171</span></div><div class="line"></div><div class="line">;; <span class="selector-tag">Query</span> <span class="selector-tag">time</span>: 3 <span class="selector-tag">msec</span></div><div class="line">;; <span class="selector-tag">SERVER</span>: 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-id">#8600</span>(127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span>)</div><div class="line">;; <span class="selector-tag">WHEN</span>: <span class="selector-tag">Fri</span> <span class="selector-tag">May</span> 26 17<span class="selector-pseudo">:01</span><span class="selector-pseudo">:38</span> 2017</div><div class="line">;; <span class="selector-tag">MSG</span> <span class="selector-tag">SIZE</span>  <span class="selector-tag">rcvd</span>: 157</div></pre></td></tr></table></figure></p>
<p>看到域名 <code>crm0.proxysql.service.consul</code> 解析出来有两个可用地址 192.168.1.170，192.168.1.171，SRV记录还带出了端口信息（其实这里的端口对每个proxysql是固定/已知的，所以可不用SRV记录搜索）。</p>
<p>在应用端想要连接proxysql使用的方式大致有3种：</p>
<h3 id="DNS接口"><a href="#DNS接口" class="headerlink" title="DNS接口"></a>DNS接口</h3><p>需要将各自开发语言的DNS解析库嵌入到项目，指定 127.0.0.1:8600 为dns地址来解析上面的 crm0.proxysql.service.consul 域名。这种方式会增加开发的复杂度。</p>
<p>另一种方式是将应用服务器的默认DNS Server配置成本地consul的内置dns地址，并且consul设置 <code>recursors</code> 选项，来处理解析 consul. 以外的域名。这样对运维改动比较大。<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">"recursors"</span>: [</div><div class="line">    <span class="string">"10.143.22.116"</span>,</div><div class="line">    <span class="string">"10.143.22.118"</span>,</div><div class="line">    <span class="string">"114.114.114.114"</span></div><div class="line">]</div></pre></td></tr></table></figure></p>
<h3 id="HTTP接口"><a href="#HTTP接口" class="headerlink" title="HTTP接口"></a>HTTP接口</h3><p>通过 API 的方式获取services信息：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -X GET <span class="symbol">'http</span>://<span class="number">10.0</span>.<span class="number">201.156</span>:<span class="number">8500</span>/v1/health/service/proxysql?tag=crm1&amp;passing=<span class="literal">true</span>'</div></pre></td></tr></table></figure>
<p>可以获取到 crm1 库的proxysql所有健康的 Node 和 Service 信息，然后任取一个使用。</p>
<p>但并不需要每一次访问proxysql都需要请求api，可以定时（如每隔10s）去请求，缓冲在本地或者变量里；在处理数据库连接的时候发现连接ProxySQL错误，则再主动触发一次向Consul请求新的地址，再重连。</p>
<p>需要考虑的是访问API的地址如果是IP，往往也是单点。另者，java这类jvm语言修改配置后往往需要重启，也不简单。</p>
<h3 id="consul-template直接生成数据库连接的配置文件"><a href="#consul-template直接生成数据库连接的配置文件" class="headerlink" title="consul-template直接生成数据库连接的配置文件"></a>consul-template直接生成数据库连接的配置文件</h3><p>consul-template通过事先定义好的模板，根据发现服务的健康状态，生成最新可用的配置文件，然后下发。</p>
<p>如果大但的想一下，各个服务或者语言的配置文件并不相同，直接生成一份 hosts 文件是最简单的，然后通过配置管理工具统一下发应用。也不需要关心是否需要重启应用。</p>
<h4 id="consul-watch"><a href="#consul-watch" class="headerlink" title="consul watch"></a>consul watch</h4><p>Consul watch 功能，可以检测到service变化之后，主动调用一个脚本，脚本可以去更新数据库配置信息，根据需要决定是否重启，后者生成hosts。与consul-template思想是相同的。</p>
<p>因为 watch 是通过阻塞式HTTP长连接请求的方式，实时获取到service的监控状态，所以有问题时反馈还比较及时。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">"watches"</span>:[&#123;</div><div class="line">  <span class="string">"type"</span>: <span class="string">"service"</span>,</div><div class="line">  <span class="string">"service"</span>: <span class="string">"proxysql"</span>,</div><div class="line">  <span class="string">"tag"</span>: <span class="string">"crm0"</span>,</div><div class="line">  <span class="string">"passingonly"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="string">"handler"</span>: <span class="string">"sh /tmp/consul_watch_test.sh"</span></div><div class="line">&#125;]</div></pre></td></tr></table></figure></p>
<p><code>/tmp/consul_watch_test.sh</code> 脚本里或者python，可以做一些更新数据库配置文件、发送邮件等工作。</p>
<p><strong>参考</strong></p>
<ol>
<li><a href="https://www.percona.com/blog/2016/09/16/consul-proxysql-mysql-ha/" target="_blank" rel="external">https://www.percona.com/blog/2016/09/16/consul-proxysql-mysql-ha/</a></li>
<li><a href="https://www.percona.com/blog/2017/01/19/setup-proxysql-for-high-availability-not-single-point-failure/" target="_blank" rel="external">https://www.percona.com/blog/2017/01/19/setup-proxysql-for-high-availability-not-single-point-failure/</a></li>
<li><a href="https://www.slideshare.net/DerekDowney/proxysql-tutorial-plam-2016" target="_blank" rel="external">https://www.slideshare.net/DerekDowney/proxysql-tutorial-plam-2016</a> (本文部分图片出自该PPT)</li>
</ol>
<hr>
<p>原文连接地址：<a href="http://seanlook.com/2017/07/15/mysql-proxysql-ha-consul/">http://seanlook.com/2017/07/15/mysql-proxysql-ha-consul/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL的高可用方案现在如 MHA, Galera, InnoDB Cluster，一旦在上游使用中间件之后，中间件本身可能成为单点。所以本文要介绍的是对于ProxySQL自身高可用的方案对比。&lt;br&gt;首先ProxySQL自身是通过Angel进程的形式运行，即proxysql如果有崩溃，主进程会自动拉起来。但如果是无响应或者网络故障，则需要另外的机制去做到服务的高可用。本文总结了四种方法。&lt;/p&gt;
&lt;p&gt;ProxySQL有关介绍，请参考： &lt;a href=&quot;http://seanlook.com/2017/04/10/mysql-proxysql-install-config/&quot;&gt;http://seanlook.com/2017/04/10/mysql-proxysql-install-config/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-与应用一起部署&quot;&gt;&lt;a href=&quot;#1-与应用一起部署&quot; class=&quot;headerlink&quot; title=&quot;1. 与应用一起部署&quot;&gt;&lt;/a&gt;1. 与应用一起部署&lt;/h1&gt;&lt;p&gt;所有部署应用的地方，都会部署proxysql节点，当这个proxysql挂掉之后，只影响本机的应用。而且不需要多经过一层网络。&lt;br&gt;&lt;img src=&quot;http://7q5fot.com1.z0.glb.clouddn.com/proxysql-ha-1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;但带来的问题是，如果应用节点很多，proxy的数量也会增加：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;会导致proxysql的配置不容易管理&lt;/li&gt;
&lt;li&gt;proxysql对后端db健康检查的请求成倍增加&lt;/li&gt;
&lt;li&gt;限制每个用户或后端db的 max_connections 特性用不了&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;2-集中式部署，多ip引用&quot;&gt;&lt;a href=&quot;#2-集中式部署，多ip引用&quot; class=&quot;headerlink&quot; title=&quot;2. 集中式部署，多ip引用&quot;&gt;&lt;/a&gt;2. 集中式部署，多ip引用&lt;/h1&gt;&lt;p&gt;后端一个db集群，对应中间两个以上的 proxysql 节点，前端应用配置多个ip地址，随机挑选一个使用，完全无状态。仅需要多经过一次网络代理。&lt;br&gt;&lt;img src=&quot;http://7q5fot.com1.z0.glb.clouddn.com/proxysql-ha-2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;这种方式的好处是，不需要再对数据库这种基础服务，多引入一个软件来实现高可用（如下节的keepalive或consul），由应用端获取数据库连接的代码逻辑处理。&lt;/p&gt;
&lt;p&gt;但是因为proxysql访问地址是写在配置文件里面的，如果一个节点挂掉，随机挑选还是会落地这个失败的节点。所以优化方案是，ip列表里面默认取某一个，失败之后再选取下一个重试。&lt;/p&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;proxysql_addr_list = [&lt;span class=&quot;string&quot;&gt;&#39;192.168.1.175&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;192.168.1.176&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;192.168.1.177&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;proxysql_addr_list_len = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hostname = &lt;span class=&quot;string&quot;&gt;&#39;this_hostname_for_hash_loadbalance&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get_dbconnection&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    list_index = hash(hostname) % proxysql_addr_list_len&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dbconn = &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        dbconn = DBConnect(dbhost=proxysql_addr_list[ list_index ], dbport=&lt;span class=&quot;number&quot;&gt;3306&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;# timeout 1000ms&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (list_index + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) == proxysql_addr_list_len:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            list_index = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# like Circular Array&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        dbconn = DBConnec(dbhost=proxysql_addr_list[ list_index + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ], dbport=&lt;span class=&quot;number&quot;&gt;3306&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;# if failed again, through exception&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dbconn&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述并不完美，比如可以改用环形数组轮巡，允许重试其它更多的ip。&lt;br&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="中间件" scheme="http://seanlook.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="proxysql" scheme="http://seanlook.com/tags/proxysql/"/>
    
  </entry>
  
  <entry>
    <title>ProxySQL之改进patch：记录查询sql完整样例与合并digest多个?</title>
    <link href="http://seanlook.com/2017/04/27/mysql-proxysql-patch-querytext-sample/"/>
    <id>http://seanlook.com/2017/04/27/mysql-proxysql-patch-querytext-sample/</id>
    <published>2017-04-27T07:32:49.000Z</published>
    <updated>2017-04-28T07:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>近期一直在思考sql上线审核该怎么做，刚好接触到 ProxySQL 这个中间件，内置了一个计算sql指纹的功能，但是没有记录原始的sql语句。当前正有个紧急的拆库项目也希望知道库上所有的查询。于是把ProxySQL的代码下了回来研究了几天，改了把，加入了两个功能：</p>
<ol>
<li>在 <code>stats_mysql_query_digest</code> 表上增加 <code>query_text</code> 字段，当第一次出现这个digest_text时，把原始sql记录下来。</li>
<li>修改计算指纹的模块，对 IN或者 VALUES 后面的多个 <code>?</code> 合并。这个是目前 <code>c_tokenizer.c</code> 文件里没有做的，用到底1点上可以避免重复记录。</li>
</ol>
<p>效果：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-querytext-sample-digest.png" alt="proxysql-querytext-sample-digest"></p>
<p>多个 <code>?</code> 被折叠成 <code>?,</code>，有些意外情况时 <code>??</code>，因为后面一些多余空格的缘故，没有像 <em>pt-fingerprint</em> 那样完全模糊化，像这里digest就保留了大小写、去除重复空格、保留 ` 分隔符。但仅有的几种意外情况是可以接受的。</p>
<p>后面的 query_text 列也有些未知情况，就是末尾会加上一些奇怪的字符，还在排除，但大体不影响需求。</p>
<p>代码是基于最新 v1.3.6 稳定版修改的，查看变更 <a href="https://github.com/sysown/proxysql/compare/v1.3.6...seanlook:v1.3.7-querysample_digest" target="_blank" rel="external">https://github.com/sysown/proxysql/compare/v1.3.6...seanlook:v1.3.7-querysample_digest</a> </p>
<p>多个 <code>?</code> 合并只涉及到 <em>c_tokenizer.c</em> 文件，分别在flag=4（处理 <code>&#39;abc&#39;,&#39;def&#39;</code> 的情况）和flag=5（处理 <code>1,2, 3</code> 的情况）加入判断：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// wrap two more ? to one ?,</span></div><div class="line"><span class="keyword">if</span> (*(<span class="keyword">p_r_t</span><span class="number">-2</span>) == <span class="string">'?'</span> &amp;&amp; (*(<span class="keyword">p_r_t</span><span class="number">-1</span>) ==<span class="string">' '</span> || *(<span class="keyword">p_r_t</span><span class="number">-1</span>) == <span class="string">','</span> || *(<span class="keyword">p_r_t</span><span class="number">-1</span>) == <span class="string">'?'</span>))&#123;</div><div class="line">    *(p_r<span class="number">-1</span>) = <span class="string">','</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">    *p_r++ = <span class="string">'?'</span>;</div></pre></td></tr></table></figure></p>
<p>然后在 line:450 左右 COPY CHAR 的时候进行一次过滤：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// COPY CHAR</span></div><div class="line"><span class="comment">// =================================================</span></div><div class="line"><span class="comment">// wrap two more ? to ?,</span></div><div class="line"><span class="keyword">if</span> ((*s == <span class="string">' '</span> || *s == <span class="string">','</span>) &amp;&amp; (*(<span class="keyword">p_r_t</span><span class="number">-1</span>) == <span class="string">'?'</span> || *(<span class="keyword">p_r_t</span><span class="number">-1</span>) == <span class="string">','</span> || *(<span class="keyword">p_r_t</span><span class="number">-1</span>) == <span class="string">' '</span>)) &#123;</div><div class="line">    <span class="keyword">if</span> (*(<span class="keyword">p_r_t</span><span class="number">-1</span>) == <span class="string">' '</span> &amp;&amp; *(<span class="keyword">p_r_t</span><span class="number">-2</span>) == <span class="string">'?'</span>)</div><div class="line">        *(p_r<span class="number">-1</span>) = <span class="string">','</span>;  <span class="comment">// p_r may be changed in line:435:is_digit_string</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div></pre></td></tr></table></figure></p>
<p>这部分代码调试花了不少功夫，一是理清逻辑，而是意外情况处理。变量的用途注释不清晰，几年没写C，不得不动用 gdb 来跟踪调试，怀念大学时用IDE的日子。</p>
<a id="more"></a>
<p>加 query_text 字段，在用 gdb 理清c++函数间调用关系的之后，改起来还是比较容易：</p>
<ol>
<li><em>MySQL_Session.cpp:Query_Info::init</em> 里面会将连接会话的sql信息临时存起来</li>
<li><em>MySQL_Session.cpp:Query_Info::query_parser_init</em> 调用 <em>Qurey_Processor.cpp:Query_Processor::query_parser_init</em>，里面会调用上面 <em>c_tokenizer.c</em> 来处理digest_text并计算得到digest</li>
<li>继而是 Query_Processor 类骨规则路由函数 <em>process_mysql_query</em>，但这与我们的改动无关</li>
<li>路由完成后，调用 <em>query_parser_update_counters</em> 函数来更新统计信息，改动从这里开始。从 sess 里拿到原始的sql，把地址传递给 <em>update_query_digest()</em></li>
<li><em>Query_Processor::update_query_digest</em> 方法会判断当前digest是否已存在 <em>digest_umap.find(qp-&gt;digest_total)</em><ul>
<li>如果不是第一次出现，则更新 <code>last_seen</code> 时间</li>
<li>如果是第一次出现，则 <em>new QP_query_digest_stats</em> 对象，就在这个地方把sql传过去。（Query_Processor.cpp:1026,1028）</li>
</ul>
</li>
<li>在 <code>QP_query_digest_stats</code> 加入 <code>query_text</code> 字段并在析构函数里初始化，同时记得free掉<br>这个地方一度出现 qt 的值在赋给 query_text 的时候，被莫名的吃掉，猜想应该是内存分配的时候被擦掉了，请了公司C++大神涛哥一起调试看了下，是传过来长度截取不对。<br>现在是没有这个问题，但是会随机性出现本文开头所说，sql末尾出现意外字符。还需要进一步排查。</li>
<li>修改操作sqlite的命令<ul>
<li><em>Query_Processor.cpp</em>：<em>SQLite3_result </em> Query_Processor::get_query_digests()*</li>
<li><em>ProxySQL_Admin.cpp</em>：修改 <code>stats_mysql_query_digest</code> 表定义，以及插入sql的模板。<br>这个地方参数漏了一个导致proxysql crash，编译的时候建议把 Makefile中的 <code>-O2</code> 改成 <code>-O0</code>，这样gdb调试的时候不会优化输出，容易跟踪。</li>
</ul>
</li>
</ol>
<p>这些改动对于c++程序员来说，小菜一碟，但对于我一个DBA来说，总算啃下来了。主要是考虑功能急用，提交 issue 等作者renecannao发版也是太慢。<br>现在可以愉快的收集所有sql了，接下来就是新产生的sql进行自动化审核。</p>
<p>以上两点特性对于升级来讲是无障碍的，因为 <code>stats_mysql_query_stats</code> 在内存里，重启之前字段就加上了，无需改动proxysql.db里面的内容。代码在我fork仓库的 <a href="https://github.com/seanlook/proxysql/tree/v1.3.7-querysample_digest" target="_blank" rel="external"><strong>v1.3.7-querysample_digest</strong></a> 分支，我也已提交 <a href="https://github.com/sysown/proxysql/pull/1010" target="_blank" rel="external">pull request</a> 给作者合并。等消息中……</p>
<hr>
<p>原文连接地址：<a href="http://seanlook.com/2017/04/27/mysql-proxysql-patch-querytext-sample/">http://seanlook.com/2017/04/27/mysql-proxysql-patch-querytext-sample/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期一直在思考sql上线审核该怎么做，刚好接触到 ProxySQL 这个中间件，内置了一个计算sql指纹的功能，但是没有记录原始的sql语句。当前正有个紧急的拆库项目也希望知道库上所有的查询。于是把ProxySQL的代码下了回来研究了几天，改了把，加入了两个功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 &lt;code&gt;stats_mysql_query_digest&lt;/code&gt; 表上增加 &lt;code&gt;query_text&lt;/code&gt; 字段，当第一次出现这个digest_text时，把原始sql记录下来。&lt;/li&gt;
&lt;li&gt;修改计算指纹的模块，对 IN或者 VALUES 后面的多个 &lt;code&gt;?&lt;/code&gt; 合并。这个是目前 &lt;code&gt;c_tokenizer.c&lt;/code&gt; 文件里没有做的，用到底1点上可以避免重复记录。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;效果：&lt;br&gt;&lt;img src=&quot;http://7q5fot.com1.z0.glb.clouddn.com/proxysql-querytext-sample-digest.png&quot; alt=&quot;proxysql-querytext-sample-digest&quot;&gt;&lt;/p&gt;
&lt;p&gt;多个 &lt;code&gt;?&lt;/code&gt; 被折叠成 &lt;code&gt;?,&lt;/code&gt;，有些意外情况时 &lt;code&gt;??&lt;/code&gt;，因为后面一些多余空格的缘故，没有像 &lt;em&gt;pt-fingerprint&lt;/em&gt; 那样完全模糊化，像这里digest就保留了大小写、去除重复空格、保留 ` 分隔符。但仅有的几种意外情况是可以接受的。&lt;/p&gt;
&lt;p&gt;后面的 query_text 列也有些未知情况，就是末尾会加上一些奇怪的字符，还在排除，但大体不影响需求。&lt;/p&gt;
&lt;p&gt;代码是基于最新 v1.3.6 稳定版修改的，查看变更 &lt;a href=&quot;https://github.com/sysown/proxysql/compare/v1.3.6...seanlook:v1.3.7-querysample_digest&quot;&gt;https://github.com/sysown/proxysql/compare/v1.3.6...seanlook:v1.3.7-querysample_digest&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;多个 &lt;code&gt;?&lt;/code&gt; 合并只涉及到 &lt;em&gt;c_tokenizer.c&lt;/em&gt; 文件，分别在flag=4（处理 &lt;code&gt;&amp;#39;abc&amp;#39;,&amp;#39;def&amp;#39;&lt;/code&gt; 的情况）和flag=5（处理 &lt;code&gt;1,2, 3&lt;/code&gt; 的情况）加入判断：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// wrap two more ? to one ?,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (*(&lt;span class=&quot;keyword&quot;&gt;p_r_t&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;) == &lt;span class=&quot;string&quot;&gt;&#39;?&#39;&lt;/span&gt; &amp;amp;&amp;amp; (*(&lt;span class=&quot;keyword&quot;&gt;p_r_t&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) ==&lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; || *(&lt;span class=&quot;keyword&quot;&gt;p_r_t&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) == &lt;span class=&quot;string&quot;&gt;&#39;,&#39;&lt;/span&gt; || *(&lt;span class=&quot;keyword&quot;&gt;p_r_t&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) == &lt;span class=&quot;string&quot;&gt;&#39;?&#39;&lt;/span&gt;))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    *(p_r&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) = &lt;span class=&quot;string&quot;&gt;&#39;,&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    *p_r++ = &lt;span class=&quot;string&quot;&gt;&#39;?&#39;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在 line:450 左右 COPY CHAR 的时候进行一次过滤：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// COPY CHAR&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =================================================&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// wrap two more ? to ?,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((*s == &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; || *s == &lt;span class=&quot;string&quot;&gt;&#39;,&#39;&lt;/span&gt;) &amp;amp;&amp;amp; (*(&lt;span class=&quot;keyword&quot;&gt;p_r_t&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) == &lt;span class=&quot;string&quot;&gt;&#39;?&#39;&lt;/span&gt; || *(&lt;span class=&quot;keyword&quot;&gt;p_r_t&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) == &lt;span class=&quot;string&quot;&gt;&#39;,&#39;&lt;/span&gt; || *(&lt;span class=&quot;keyword&quot;&gt;p_r_t&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) == &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (*(&lt;span class=&quot;keyword&quot;&gt;p_r_t&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) == &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; &amp;amp;&amp;amp; *(&lt;span class=&quot;keyword&quot;&gt;p_r_t&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;) == &lt;span class=&quot;string&quot;&gt;&#39;?&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        *(p_r&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) = &lt;span class=&quot;string&quot;&gt;&#39;,&#39;&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;// p_r may be changed in line:435:is_digit_string&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这部分代码调试花了不少功夫，一是理清逻辑，而是意外情况处理。变量的用途注释不清晰，几年没写C，不得不动用 gdb 来跟踪调试，怀念大学时用IDE的日子。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="中间件" scheme="http://seanlook.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="proxysql" scheme="http://seanlook.com/tags/proxysql/"/>
    
  </entry>
  
  <entry>
    <title>ProxySQL之性能测试对比</title>
    <link href="http://seanlook.com/2017/04/20/mysql-proxysql-performance-test/"/>
    <id>http://seanlook.com/2017/04/20/mysql-proxysql-performance-test/</id>
    <published>2017-04-20T13:32:49.000Z</published>
    <updated>2017-04-20T13:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文会通过sysbench对ProxySQL进行基准测试，并与直连的性能进行对比。与此同时也对 Maxscale 和 Qihu360 Atlas 放在一起参考。<br>提示：压测前确保把query cache完全关掉。</p>
<h1 id="1-proxysql-vs-直连"><a href="#1-proxysql-vs-直连" class="headerlink" title="1. proxysql vs 直连"></a>1. proxysql vs 直连</h1><h2 id="1-1-select-nontrx"><a href="#1-1-select-nontrx" class="headerlink" title="1.1 select nontrx"></a>1.1 select nontrx</h2><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">.</span><span class="comment">/bin/sysbench</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">test=/root/sysbench2/sysbench/tests/db/oltp</span><span class="string">.</span><span class="comment">lua</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">host=10</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">100</span><span class="string">.</span><span class="comment">36</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">port=6033</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">user=myuser</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">password=mypass</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">db=db15</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">tables</span><span class="literal">-</span><span class="comment">count=20</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">table</span><span class="literal">-</span><span class="comment">size=5000000</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">report</span><span class="literal">-</span><span class="comment">interval=20</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">dist</span><span class="literal">-</span><span class="comment">type=uniform</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">rand</span><span class="literal">-</span><span class="comment">init=on</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">requests=0</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">test</span><span class="literal">-</span><span class="comment">mode=nontrx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">nontrx</span><span class="literal">-</span><span class="comment">mode=select</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">read</span><span class="literal">-</span><span class="comment">only=on</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">skip</span><span class="literal">-</span><span class="comment">trx=on</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">time=120</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">num</span><span class="literal">-</span><span class="comment">threads=2</span> <span class="comment">run</span></div><div class="line"></div><div class="line"><span class="comment">num</span><span class="literal">-</span><span class="comment">threads依次加大</span> <span class="comment">2</span> <span class="comment">5</span> <span class="comment">10</span> <span class="comment">20</span> <span class="comment">50</span> <span class="comment">100</span> <span class="comment">200</span> <span class="comment">400</span></div></pre></td></tr></table></figure>
<iframe src="http://www.tubiaoxiu.com/p.html?s=106165b0eeca215a&web_mode" width="900" height="700" frameborder="0" allowfullscreen></iframe>
<!--
![QPS Trends for ProxySQL](http://7q5fot.com1.z0.glb.clouddn.com/proxysql-perf-qps.png) 
-->
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-perf-rt.png" alt="Response Time Trends for ProxySQL">  </p>
<p>sysbench线程并发数达到10以下，性能损失在30%以上；达到20，性能损失减少到10%左右。看到proxysql承载的并发数越高，性能损失越少；最好的时候在50线程数，相比直连损失5%。</p>
<h2 id="1-2-oltp-dml"><a href="#1-2-oltp-dml" class="headerlink" title="1.2 oltp dml"></a>1.2 oltp dml</h2><p>混合读写测试。proxysql结果图应该与上面相差无几，因为是主要好在计算 query digest 和规则匹配，与select无异，可参考下节的图示。</p>
<p>sysbench 压测命令：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">./bin/sysbench --test=/root/sysbench2/sysbench/tests/db/oltp.lua --mysql-host=<span class="number">10.0</span><span class="number">.100</span><span class="number">.34</span> --mysql-port=<span class="number">3306</span> --mysql-user=myuser --mysql-password=mypass \</div><div class="line">--mysql-db=db15 --oltp-tables-count=<span class="number">20</span> --oltp-table-size=<span class="number">5000000</span> --report-interval=<span class="number">20</span> --oltp-dist-type=uniform --rand-init=on --max-requests=<span class="number">0</span> --oltp-read-only=off --max-time=<span class="number">120</span> \</div><div class="line">--num-threads=<span class="number">2</span> run</div><div class="line"></div><div class="line">num-threads依次加大 <span class="number">2</span> <span class="number">5</span> <span class="number">10</span> <span class="number">16</span> <span class="number">20</span> <span class="number">50</span> <span class="number">100</span> <span class="number">200</span> <span class="number">400</span></div><div class="line">分别对PrxoySQL, Maxscale, Atlas, 直连，四种情况做基准测试</div></pre></td></tr></table></figure></p>
<h1 id="2-proxysql-vs-maxscale-vs-atlas"><a href="#2-proxysql-vs-maxscale-vs-atlas" class="headerlink" title="2. proxysql vs maxscale vs atlas"></a>2. proxysql vs maxscale vs atlas</h1><p>作者自己也有指出，在客户端并发数不高的情况下，maxscale表现比proxysql要好。这里我也特意对maxscale和atlas一起做了个对比。配置基本是最小化的，没有很复杂的规则，只是中间转发。</p>
<ul>
<li>ProxySQL  (v1.3.5): mysql-threads=4</li>
<li>Atlas 360 (v2.2.1): event-threads=4</li>
<li>maxscale  (v1.4.5): threads=4</li>
</ul>
<p><strong> 2.1 select nontrx </strong><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-perf-qps-maxscale-atlas.png" alt="QPS(select) Trends for ProxySQL/Maxscale/atlas"></p>
<p>oltp混合读写基准测试，没有复杂配置的情况下，ProxySQL与Maxscale神奇般的几乎重合，Qihu360的atlas要弱一些。</p>
<p><strong> 2.2 oltp dml </strong><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-perf-qps-oltp-maxscale-atlas.png" alt="QPS(oltp) Trends for ProxySQL/Maxscale/atlas"></p>
<p>原始数据：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-perf-qps-src-data.png" alt="ProxySQL Performance Test Source Data"></p>
<h1 id="3-rewrite-vs-non-rewrite"><a href="#3-rewrite-vs-non-rewrite" class="headerlink" title="3. rewrite vs non-rewrite"></a>3. rewrite vs non-rewrite</h1><p>下面来测一下 query rewrite 对性能的影响，考虑到将来如果要分表，可以在ProxySQL这一层做，应用端无需改动表名。<br>为了达到效果，这里rewrite只是为表增加了个别名：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- proxysql admin cli</span></div><div class="line"><span class="keyword">update</span> mysql_query_rules <span class="keyword">set</span> match_pattern=<span class="string">"(.*)(sbtest\d+)(.*)"</span>,replace_pattern=<span class="string">"\1\2 as ttt \3"</span> <span class="keyword">where</span> rule_id &gt;=<span class="number">61</span> <span class="keyword">and</span> rule_id &lt;=<span class="number">92</span>;</div><div class="line"><span class="keyword">load</span> mysql <span class="keyword">query</span> <span class="keyword">rules</span> <span class="keyword">to</span> run;</div></pre></td></tr></table></figure></p>
<p>sysbench num-threads=20 的结果：</p>
<table>
<thead>
<tr>
<th style="text-align:left">replace?</th>
<th>qps</th>
<th>response time avg(ms)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">proxysql replace</td>
<td>15734.49</td>
<td>17.79</td>
</tr>
<tr>
<td style="text-align:left">proxysql no-replace</td>
<td>16764.66</td>
<td>16.70</td>
</tr>
<tr>
<td style="text-align:left">直连</td>
<td>18778.43</td>
<td>14.91</td>
</tr>
</tbody>
</table>
<p>在20个并发线程下，有 rewrite 是 no-rewrite 性能的 93.9% 。测试线程数继续加大到 50，差别更小。</p>
<h1 id="4-lots-of-rules"><a href="#4-lots-of-rules" class="headerlink" title="4. lots of rules"></a>4. lots of rules</h1><p>测试ProxySQL定义的 query rules 数量（并匹配但不apply），对性能的影响。</p>
<p>测试的规则时批量插入大量能匹配sysbench查询的规则，但 mysql_query_rules.apply=0 :<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">insert into mysql_query_rules(active,schemaname,apply,flagIN) values</div><div class="line">  (<span class="number">1</span>,'db15',<span class="number">0</span>,<span class="number">0</span>),(<span class="number">1</span>,'db15',<span class="number">0</span>,<span class="number">0</span>),(<span class="number">1</span>,'db15',<span class="number">0</span>,<span class="number">0</span>),(<span class="number">1</span>,'db15',<span class="number">0</span>,<span class="number">0</span>),(<span class="number">1</span>,'db15',<span class="number">0</span>,<span class="number">0</span>), ...</div><div class="line"></div><div class="line"># <span class="number">2</span> <span class="number">100</span> <span class="number">200</span> <span class="number">400</span> <span class="number">800</span> <span class="number">1200</span> <span class="number">2000</span></div></pre></td></tr></table></figure></p>
<p>这里偶然发现一个问题，flagIN=0的规则必须要在 !=0 的规则前面，否则flagOUT找不到下一个新链入口.(经作者回复是参数 <code>mysql-query_processor_iterations</code> 控制的)<br>下面的结果是 sysbench num-threads=20 的几轮数据：（由于结果接近，没作图）</p>
<table>
<thead>
<tr>
<th>matched rules</th>
<th>QPS</th>
<th>RT avg</th>
<th>CPU%</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
<td>16741.54</td>
<td>16.69</td>
<td>151</td>
</tr>
<tr>
<td>100</td>
<td>16743.54</td>
<td>16.69</td>
<td>152</td>
</tr>
<tr>
<td>200</td>
<td>16749.94</td>
<td>16.71</td>
<td>159</td>
</tr>
<tr>
<td>400</td>
<td>16556.09</td>
<td>16.91</td>
<td>176</td>
</tr>
<tr>
<td>800</td>
<td>16522.02</td>
<td>16.94</td>
<td>203</td>
</tr>
<tr>
<td>1200</td>
<td>16477.70</td>
<td>16.99</td>
<td>220</td>
</tr>
<tr>
<td>2000</td>
<td>16333.59</td>
<td>17.14</td>
<td>263</td>
</tr>
</tbody>
</table>
<p>看到匹配到的规则随着增多，QPS变化不大，只是略微下降；平均响应时间增加在3%以内；倒是ProxySQL对CPU的负载增加比较明显，匹配的规则从 2 个增加到 2000，cpu使用增加了 74% 。 </p>
<p>参考：</p>
<ul>
<li><a href="https://www.percona.com/blog/2017/04/10/proxysql-rules-do-i-have-too-many/#comment-10967989" target="_blank" rel="external">https://www.percona.com/blog/2017/04/10/proxysql-rules-do-i-have-too-many/#comment-10967989</a></li>
</ul>
<hr>
<p>原文连接地址：<a href="http://seanlook.com/2017/04/20/mysql-proxysql-performance-test/">http://seanlook.com/2017/04/20/mysql-proxysql-performance-test/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文会通过sysbench对ProxySQL进行基准测试，并与直连的性能进行对比。与此同时也对 Maxscale 和 Qihu360 Atlas 放在一起参考。&lt;br&gt;提示：压测前确保把query cache完全关掉。&lt;/p&gt;
&lt;h1 id=&quot;1-proxysql-vs-直
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="中间件" scheme="http://seanlook.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="proxysql" scheme="http://seanlook.com/tags/proxysql/"/>
    
  </entry>
  
  <entry>
    <title>ProxySQL之连接复用（multiplexing）以及相关问题说明</title>
    <link href="http://seanlook.com/2017/04/17/mysql-proxysql-multiplexing/"/>
    <id>http://seanlook.com/2017/04/17/mysql-proxysql-multiplexing/</id>
    <published>2017-04-17T13:32:49.000Z</published>
    <updated>2017-04-17T13:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>ProxySQL在连接池(<em>persistent connection poll</em>)的基础上，还有一个连接复用的概念 <em>multiplexing connection</em>，官方的wiki里没有很明确的说明，但在作者的一些 blog post 和 issue 里能找到解答： <a href="https://github.com/sysown/proxysql/issues/939#issuecomment-287489317" target="_blank" rel="external">https://github.com/sysown/proxysql/issues/939#issuecomment-287489317</a> </p>
<p>由于SQL可以路由，一个客户端连接上来，可能会到多个 hostgroup 发起连接。复用的意思是，一个后端DB的连接，可以“同时”被多个客户端使用。</p>
<p>传统的连接池，会在客户端<strong>断开连接</strong>（会话）后，把连接放回到池里。在ProxySQL中，由于连接复用，连接会在<strong>sql语句</strong>执行结束后，便将连接放回到池里（客户端会话可能并没有断开），这样便可大大提高后端连接的使用效率，而避免前段请求过大导致后端连接数疯长。</p>
<p>但这样做有时候并不安全，比如应用端连接时指定了 <code>set NAMES xxx</code>，然后执行查询，那么由于multiplexing可能导致两个语句发到不同的DB上执行，继而没有按照预期的字符集执行。proxysql考虑到了这种情况：</p>
<ol>
<li>连接会话里创建了临时表，<code>CREATE TEMPORARY table xxxx...</code></li>
<li>select @开头的变量，如<code>select @@hostname</code></li>
<li>手动开启了事务，<code>start transaction</code>, <code>commit</code>, <code>rollback</code>等等</li>
<li>连接设置了自己的用户变量，比如<code>set names xxx</code>, <code>set autocommit x</code>, <code>set sql_mode=xxx</code>, <code>set v_uservar=xx</code>等等</li>
</ol>
<p>第1,2,3点会根据路由规则，会自动禁用multiplex，发到对应hostgroup后，连接未断开之前不会复用到其它客户端。具体是发到主库还是从库，与匹配的规则有关。<br>issue <a href="https://github.com/sysown/proxysql/issues/941" target="_blank" rel="external">#941</a> 和 <a href="https://github.com/sysown/proxysql/issues/917" target="_blank" rel="external">#917</a> 都有提到临时表丢失的问题，可以用不同的rule来避免</p>
<p>下面对上面几点一一说明。</p>
<h2 id="1-临时表与用户变量（验证-1-2）"><a href="#1-临时表与用户变量（验证-1-2）" class="headerlink" title="1. 临时表与用户变量（验证 1, 2）"></a>1. 临时表与用户变量（验证 1, 2）</h2><p>以下注意连接的会话窗口及执行顺序，admin打头的是在proxysql管理接口上执行。</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">-- [session 1] mysql client proxysql</div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; select 1;</div><div class="line">+---+</div><div class="line">|<span class="string"> 1 </span>|</div><div class="line">+---+</div><div class="line">|<span class="string"> 1 </span>|</div><div class="line">+---+</div><div class="line"></div><div class="line">-- [session 2] proxysql admin cli</div><div class="line">select <span class="symbol">*</span> from stats_mysql_processlist;</div><div class="line">Empty set (0.00 sec)</div><div class="line"></div><div class="line">普通查询，session 1 没断开，但后端连接已放回连接池，所以看不到processlist。下面试验临时表：</div><div class="line"></div><div class="line">-- [session 1] mysql client proxysql</div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; CREATE TEMPORARY TABLE db0.tbl_tmp(id int);</div><div class="line">Query OK, 0 rows affected (0.18 sec)</div><div class="line"></div><div class="line">-- [session 2] proxysql admin cli</div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; select <span class="symbol">*</span> from stats_mysql_processlist;</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+-------------+------------+--------------+----------+---------+---------+------+</div><div class="line">|<span class="string"> ThreadID </span>|<span class="string"> SessionID </span>|<span class="string"> user  </span>|<span class="string"> db                 </span>|<span class="string"> cli_host    </span>|<span class="string"> cli_port </span>|<span class="string"> hostgroup </span>|<span class="string"> l_srv_host  </span>|<span class="string"> l_srv_port </span>|<span class="string"> srv_host     </span>|<span class="string"> srv_port </span>|<span class="string"> command </span>|<span class="string"> time_ms </span>|<span class="string"> info </span>|</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+-------------+------------+--------------+----------+---------+---------+------+</div><div class="line">|<span class="string"> 0        </span>|<span class="string"> 60        </span>|<span class="string"> ecdba </span>|<span class="string"> information_schema </span>|<span class="string"> 10.0.100.34 </span>|<span class="string"> 27058    </span>|<span class="string"> 100       </span>|<span class="string"> 10.0.100.36 </span>|<span class="string"> 41245      </span>|<span class="string"> 10.0.100.100 </span>|<span class="string"> 3307     </span>|<span class="string"> Sleep   </span>|<span class="string"> 4506    </span>|<span class="string">      </span>|</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+-------------+------------+--------------+----------+---------+---------+------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">看到后端的连接没有释放回连接池，但是在 session 1 里select却看不到刚才创建的临时表：</div><div class="line"></div><div class="line">-- [session 1] </div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; select <span class="symbol">*</span> from db0.tbl_tmp;</div><div class="line">ERROR 1146 (42S02): Table 'db0.tbl_tmp' doesn't exist</div><div class="line"></div><div class="line">-- [session 2] </div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; select <span class="symbol">*</span> from stats_mysql_processlist;</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+------------+------------+----------+----------+---------+---------+------+</div><div class="line">|<span class="string"> ThreadID </span>|<span class="string"> SessionID </span>|<span class="string"> user  </span>|<span class="string"> db                 </span>|<span class="string"> cli_host    </span>|<span class="string"> cli_port </span>|<span class="string"> hostgroup </span>|<span class="string"> l_srv_host </span>|<span class="string"> l_srv_port </span>|<span class="string"> srv_host </span>|<span class="string"> srv_port </span>|<span class="string"> command </span>|<span class="string"> time_ms </span>|<span class="string"> info </span>|</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+------------+------------+----------+----------+---------+---------+------+</div><div class="line">|<span class="string"> 0        </span>|<span class="string"> 60        </span>|<span class="string"> ecdba </span>|<span class="string"> information_schema </span>|<span class="string"> 10.0.100.34 </span>|<span class="string"> 27058    </span>|<span class="string"> 1000      </span>|<span class="string">            </span>|<span class="string">            </span>|<span class="string">          </span>|<span class="string">          </span>|<span class="string"> Sleep   </span>|<span class="string"> 2002    </span>|<span class="string">      </span>|</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+------------+------------+----------+----------+---------+---------+------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">select之后，发现上面的srv_host为空。下面往临时表里插数据，正常，且连接被 session 1 客户端持有：</div><div class="line"></div><div class="line">-- [session 1] </div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; insert into db0.tbl_tmp values(1);</div><div class="line">Query OK, 1 row affected (0.01 sec)</div><div class="line"></div><div class="line">-- [session 2] </div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; select <span class="symbol">*</span> from stats_mysql_processlist;</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+-------------+------------+--------------+----------+---------+---------+------+</div><div class="line">|<span class="string"> ThreadID </span>|<span class="string"> SessionID </span>|<span class="string"> user  </span>|<span class="string"> db                 </span>|<span class="string"> cli_host    </span>|<span class="string"> cli_port </span>|<span class="string"> hostgroup </span>|<span class="string"> l_srv_host  </span>|<span class="string"> l_srv_port </span>|<span class="string"> srv_host     </span>|<span class="string"> srv_port </span>|<span class="string"> command </span>|<span class="string"> time_ms </span>|<span class="string"> info </span>|</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+-------------+------------+--------------+----------+---------+---------+------+</div><div class="line">|<span class="string"> 0        </span>|<span class="string"> 60        </span>|<span class="string"> ecdba </span>|<span class="string"> information_schema </span>|<span class="string"> 10.0.100.34 </span>|<span class="string"> 27058    </span>|<span class="string"> 100       </span>|<span class="string"> 10.0.100.36 </span>|<span class="string"> 41245      </span>|<span class="string"> 10.0.100.100 </span>|<span class="string"> 3307     </span>|<span class="string"> Sleep   </span>|<span class="string"> 2996    </span>|<span class="string">      </span>|</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+-------------+------------+--------------+----------+---------+---------+------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">-- [session 1] </div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; select 1;</div><div class="line">+---+</div><div class="line">|<span class="string"> 1 </span>|</div><div class="line">+---+</div><div class="line">|<span class="string"> 1 </span>|</div><div class="line">+---+</div><div class="line"></div><div class="line">-- [session 2] </div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; select <span class="symbol">*</span> from stats_mysql_processlist;</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+------------+------------+----------+----------+---------+---------+------+</div><div class="line">|<span class="string"> ThreadID </span>|<span class="string"> SessionID </span>|<span class="string"> user  </span>|<span class="string"> db                 </span>|<span class="string"> cli_host    </span>|<span class="string"> cli_port </span>|<span class="string"> hostgroup </span>|<span class="string"> l_srv_host </span>|<span class="string"> l_srv_port </span>|<span class="string"> srv_host </span>|<span class="string"> srv_port </span>|<span class="string"> command </span>|<span class="string"> time_ms </span>|<span class="string"> info </span>|</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+------------+------------+----------+----------+---------+---------+------+</div><div class="line">|<span class="string"> 0        </span>|<span class="string"> 60        </span>|<span class="string"> ecdba </span>|<span class="string"> information_schema </span>|<span class="string"> 10.0.100.34 </span>|<span class="string"> 27058    </span>|<span class="string"> 1000      </span>|<span class="string">            </span>|<span class="string">            </span>|<span class="string">          </span>|<span class="string">          </span>|<span class="string"> Sleep   </span>|<span class="string"> 2303    </span>|<span class="string">      </span>|</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+------------+------------+----------+----------+---------+---------+------+</div></pre></td></tr></table></figure>
<p>通过上面的过程可以看见，proxysql在遇到与会话本身相关的变量或操作时，自动禁用了multiplexing，并且针对整个会话有效，直到断开连接。另外，禁用了multiplexing，但<strong>路由规则依然生效</strong>，这就导致了select临时表时路由到了其它实例， Table xxx doesn’t exist。</p>
<h2 id="2-显式start-transaction-验证3"><a href="#2-显式start-transaction-验证3" class="headerlink" title="2. 显式start transaction (验证3)"></a>2. 显式start transaction (验证3)</h2><p>第1,2点根据开发的习惯，都可以避免使用，但显式事务有时却不得不用，也做一个测试。</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">为了效果明显，我将一个不相干的实例，分配同一个hostgroup_id，权重1:1</div><div class="line"></div><div class="line">-- [session 1] </div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; select <span class="symbol">*</span> from db0.tbl_0;</div><div class="line">+-----+----------+--------+</div><div class="line">|<span class="string"> fid </span>|<span class="string"> username </span>|<span class="string"> corpid </span>|</div><div class="line">+-----+----------+--------+</div><div class="line">|<span class="string">   1 </span>|<span class="string"> db0 aa   </span>|<span class="string">      0 </span>|</div><div class="line">|<span class="string">   2 </span>|<span class="string"> db0 aa   </span>|<span class="string">     16 </span>|</div><div class="line">|<span class="string">   3 </span>|<span class="string"> db0 aa   </span>|<span class="string">     32 </span>|</div><div class="line">+-----+----------+--------+</div><div class="line"></div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; select <span class="symbol">*</span> from db0.tbl_0;</div><div class="line">ERROR 1146 (42S02): Table 'db0.tbl_0' doesn't exist</div><div class="line"></div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; begin;  -- 开启一个事务</div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; select <span class="symbol">*</span> from db0.tbl_0;</div><div class="line">+-----+----------+--------+</div><div class="line">|<span class="string"> fid </span>|<span class="string"> username </span>|<span class="string"> corpid </span>|</div><div class="line">+-----+----------+--------+</div><div class="line">|<span class="string">   1 </span>|<span class="string"> db0 aa   </span>|<span class="string">      0 </span>|</div><div class="line">|<span class="string">   2 </span>|<span class="string"> db0 aa   </span>|<span class="string">     16 </span>|</div><div class="line">|<span class="string">   3 </span>|<span class="string"> db0 aa   </span>|<span class="string">     32 </span>|</div><div class="line">+-----+----------+--------+</div><div class="line"></div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; select <span class="symbol">*</span> from db0.tbl_0;</div><div class="line">ERROR 1146 (42S02): Table 'db0.tbl_0' doesn't exist</div><div class="line"></div><div class="line">这就尴尬了，明显是在同一个事务里面，后端依然请求了多个backend。设置 transaction_persistent ：</div><div class="line"></div><div class="line">-- [session 2] </div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; update mysql_users set transaction_persistent=1 where username='ecdba';</div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; load mysql users to run;</div><div class="line"></div><div class="line">-- [session 1] </div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; begin;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; select <span class="symbol">*</span> from db0.tbl_0;</div><div class="line">+-----+----------+--------+</div><div class="line">|<span class="string"> fid </span>|<span class="string"> username </span>|<span class="string"> corpid </span>|</div><div class="line">+-----+----------+--------+</div><div class="line">|<span class="string">   1 </span>|<span class="string"> db0 aa   </span>|<span class="string">      0 </span>|</div><div class="line">|<span class="string">   2 </span>|<span class="string"> db0 aa   </span>|<span class="string">     16 </span>|</div><div class="line">|<span class="string">   3 </span>|<span class="string"> db0 aa   </span>|<span class="string">     32 </span>|</div><div class="line">+-----+----------+--------+</div><div class="line"></div><div class="line">反复执行多次还是上面的结果。 看到到后端连接的情况：</div><div class="line">-- [session 2] </div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; select <span class="symbol">*</span> from stats_mysql_processlist;</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+-------------+------------+--------------+----------+---------+---------+------+</div><div class="line">|<span class="string"> ThreadID </span>|<span class="string"> SessionID </span>|<span class="string"> user  </span>|<span class="string"> db                 </span>|<span class="string"> cli_host    </span>|<span class="string"> cli_port </span>|<span class="string"> hostgroup </span>|<span class="string"> l_srv_host  </span>|<span class="string"> l_srv_port </span>|<span class="string"> srv_host     </span>|<span class="string"> srv_port </span>|<span class="string"> command </span>|<span class="string"> time_ms </span>|<span class="string"> info </span>|</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+-------------+------------+--------------+----------+---------+---------+------+</div><div class="line">|<span class="string"> 3        </span>|<span class="string"> 73        </span>|<span class="string"> ecdba </span>|<span class="string"> information_schema </span>|<span class="string"> 10.0.100.34 </span>|<span class="string"> 45030    </span>|<span class="string"> 100       </span>|<span class="string"> 10.0.100.36 </span>|<span class="string"> 6057       </span>|<span class="string"> 10.0.100.100 </span>|<span class="string"> 3307     </span>|<span class="string"> Sleep   </span>|<span class="string"> 43046   </span>|<span class="string">      </span>|</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+-------------+------------+--------------+----------+---------+---------+------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure>
<p>看到用户的 <code>transaction_persistent</code> 属性可以保证在同一个事务内的所有sql，都发向后端同一个db实例。如果它为0，同时一个hostgroup有多个可用slave，可能由于不同从库的延迟不一样，而查到不一致的数据。</p>
<p><code>transaction_persistent=1</code> 时还注意一下隐藏的一点点细节，begin 开启事务后，事务内所有语句包括select，都路由到了主库，这是因为 begin 匹配规则选择的是主库，后续的查询都跟着走;而 <code>transaction_persistent=0</code> 时 bgein 由于路由规则作用，也发到了主库，但后续的select,update等是不受它约束，继续根据路由规则走。在 非 <em>master-master</em> 模式下，事务还是安全的。</p>
<h2 id="3-1-autocommit-会话变量-验证4"><a href="#3-1-autocommit-会话变量-验证4" class="headerlink" title="3.1 autocommit 会话变量 (验证4)"></a>3.1 autocommit 会话变量 (验证4)</h2><p>第 4 点略微有些复杂，开始之前先引用一段作者针对 issue <a href="https://github.com/sysown/proxysql/issues/653#issuecomment-241828093" target="_blank" rel="external">#653</a> 的回复：（不完全翻译）</p>
<blockquote>
<p><strong>ProxySQL doesn’t track user variable</strong><br>ProxySQL不会记录 用户变量，当proxysql识别到 <code>set @variable1 = 67</code> 语句时，会自动禁用连接复用(disable multiplexing)，并根据路由规则选择后端节点（通常是写节点），执行完成后，连接不会放回连接池，直到disconnect。</p>
<p><strong>ProxySQL tracks some session variables</strong><br>ProxySQL会记录 会话变量，“记录” 的意思是，proxysql接收到这些会话变量后，不会马上从后端连接池去拿连接然后 set xxx （因为还没有足够的信息知道拿哪个用户哪个db的连接），而是在当前连接保存起来，等待下一个查询命令，然后一起发送到到后端。<code>use dbname</code>就是这样处理的。<br>当前，记录的只有 <code>autocommit</code> 和字符集变量、<code>timezone</code>。比如执行sql前发送一个 <code>set autocommit=1</code>，proxysql会马上返回一个 <code>OK</code>，代表它知道应用端设置了自动提交，等真正的dml请求过来时，它将与后端拿到的连接比较autocommit是否匹配，不匹配则先set再执行dml。</p>
<p>当然现实还受到proxysql全局变量 <code>mysql-enforce_autocommit_on_reads</code> 的影响，即是否开启对读操作强制 autocommit。这个变量所解决的问题是，在同一个事务里既有 write 又有 read 且配置了读写分离的情况下，会导致在 读库 和 写库 各自开一个事务 (从库会set autocommit=0)，这就不合理了，所以把它设为 true 可以保证事务始终是一个。默认 false。<br>但是如上节所说，如果开启了 <code>transaction_persistent=1</code>，这个问题就不存在了。</p>
</blockquote>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">-- [session <span class="number">1</span>] </div><div class="line">(ecdba@<span class="number">10.0</span><span class="number">.100</span><span class="number">.36</span>:<span class="number">6033</span>) [(none)]&gt; <span class="built_in">set</span> @variable1 = <span class="number">67</span>;</div><div class="line"></div><div class="line">-- [session <span class="number">2</span>] </div><div class="line">(admin@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6032</span>) [(none)]&gt; show processlist;</div><div class="line">+-----------+-------+--------------------+-----------+---------+---------+------+</div><div class="line">| <span class="type">SessionID</span> | <span class="type">user</span>  | <span class="type">db</span>                 | <span class="type">hostgroup</span> | <span class="type">command</span> | <span class="type">time_ms</span> | <span class="type">info</span> |</div><div class="line"><span class="type">+-----------+-------+--------------------+-----------+---------+---------+------+</span></div><div class="line">| 79        | <span class="type">ecdba</span> | <span class="type">information_schema</span> | <span class="type">100</span>       | <span class="type">Sleep</span>   | <span class="type">8008</span>    |      <span class="type">|</span></div><div class="line">+-----------+-------+--------------------+-----------+---------+---------+------+</div><div class="line">1 row <span class="built_in">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">与后端的连接已建立。但如果没有路由规则匹配到，proxysql会选择该用户 default_hostgroup，一般是<span class="number">0</span>，由于没有 HG <span class="number">0</span> 记录，这个<span class="built_in">set</span> variables会失败：</div><div class="line">-- [session <span class="number">1</span>] </div><div class="line">(ecdba@<span class="number">10.0</span><span class="number">.100</span><span class="number">.36</span>:<span class="number">6033</span>) [(none)]&gt; <span class="built_in">set</span> @variable1 = <span class="number">67</span>;</div><div class="line">ERROR <span class="number">9001</span> (HY000): Max connect <span class="built_in">timeout</span> reached while reaching hostgroup <span class="number">0</span> <span class="built_in">after</span> <span class="number">11462</span>ms</div><div class="line"></div><div class="line"></div><div class="line">同样情况下，<span class="built_in">set</span> autocommit 和 <span class="built_in">set</span> names 就很快返回，并且看不到后端有连接：</div><div class="line">(ecdba@<span class="number">10.0</span><span class="number">.100</span><span class="number">.36</span>:<span class="number">6033</span>) [(none)]&gt; <span class="built_in">set</span> session transaction isolation level read committed;</div><div class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.00</span> sec)</div><div class="line">(ecdba@<span class="number">10.0</span><span class="number">.100</span><span class="number">.36</span>:<span class="number">6033</span>) [(none)]&gt; <span class="built_in">set</span> autocommit=<span class="number">0</span>;</div><div class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">-- [session <span class="number">2</span>] </div><div class="line">(admin@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6032</span>) [(none)]&gt; show processlist;</div><div class="line">Empty <span class="built_in">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">-- [session <span class="number">1</span>] </div><div class="line">begin开启一个事务，验证 transaction_persistent：</div><div class="line">(ecdba@<span class="number">10.0</span><span class="number">.100</span><span class="number">.36</span>:<span class="number">6033</span>) [(none)]&gt; UPDATE db0.tbl_0 <span class="built_in">set</span> username='db0 autocommit' <span class="keyword">where</span> fid=<span class="number">3</span>;</div><div class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.00</span> sec)</div><div class="line">Rows matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></div><div class="line"></div><div class="line">(ecdba@<span class="number">10.0</span><span class="number">.100</span><span class="number">.36</span>:<span class="number">6033</span>) [(none)]&gt; select * from db0.tbl_0;</div><div class="line">+-----+----------------+--------+</div><div class="line">| <span class="type">fid</span> | <span class="type">username</span>       | <span class="type">corpid</span> |</div><div class="line"><span class="type">+-----+----------------+--------+</span></div><div class="line">|   1 | <span class="type">db0</span> aa         |      <span class="type">0</span> |</div><div class="line"><span class="type">|   2</span> | <span class="type">db0</span> aa         |     <span class="type">16</span> |</div><div class="line"><span class="type">|   3</span> | <span class="type">db0</span> autocommit |     <span class="type">32</span> |</div><div class="line"><span class="type">+-----+----------------+--------+</span></div><div class="line">3 rows <span class="built_in">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">(ecdba@<span class="number">10.0</span><span class="number">.100</span><span class="number">.36</span>:<span class="number">6033</span>) [(none)]&gt; commit;</div><div class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">查看后端DB（主库）的 general_log：（都发到了主库）</div><div class="line"></div><div class="line">44<span class="number">9651978</span> Connect	ecdba@<span class="number">10.0</span><span class="number">.100</span><span class="number">.36</span> on information_schema</div><div class="line">44<span class="number">9651978</span> Query	SET autocommit=<span class="number">0</span></div><div class="line">44<span class="number">9651978</span> Query	UPDATE db0.tbl_0 <span class="built_in">set</span> username='db0 autocommit' <span class="keyword">where</span> fid=<span class="number">3</span></div><div class="line">44<span class="number">9651978</span> Query	select * from db0.tbl_0</div><div class="line">44<span class="number">9651978</span> Query	commit</div></pre></td></tr></table></figure>
<p>这也告诉我们，尽量不要在 proxy admin cli 里面执行 show slave status， set global xxx 这样的管理命令，你较难预知到后端在哪里执行的。</p>
<h2 id="3-2-字符集prepared会话变量-验证4"><a href="#3-2-字符集prepared会话变量-验证4" class="headerlink" title="3.2 字符集prepared会话变量 (验证4)"></a>3.2 字符集prepared会话变量 (验证4)</h2><p>对字符集 <code>set NAMES xxx</code>, <code>set character_set_client=xxx</code>，处理方法与上面 set autocommit 是一样的，但是遇到使用 prepared statement 时需要特别提一下。</p>
<p>首先ProxySQL所支持的字符集，在表 <em>mysql_collations</em> 可以看到，它是直接从本地安装的mysql client lib获取的，proxysql默认使用的是utf8，指的是在连接的时候默认认为客户端的字符集是utf8。</p>
<p>根据 issue #780：<a href="https://github.com/sysown/proxysql/issues/780" target="_blank" rel="external">https://github.com/sysown/proxysql/issues/780</a> 的讨论，某些框架比如 Laravel 在通过PDO连接MySQL时，执行 prepared statement时会连同 <code>set NAMES xx</code> 一起发送，导致没有生效。经测试，该问题在 v1.3.5 中已不存在：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">-- </span>[session 1] </div><div class="line">mysql -uecweb -pweber -h10.0.100.34 -P6033 --default-character-set=latin1</div><div class="line"></div><div class="line">(ecweb@10.0.100.34:6033) [(none)]&gt; select * from d<span class="emphasis">_ec_</span>crm.tttt;</div><div class="line"><span class="code">+-----+</span>-------+</div><div class="line"><span class="section">| fid | fname |</span></div><div class="line">+-----+-------+</div><div class="line"><span class="section">|   1 | xx??? |</span></div><div class="line">+-----+-------+</div><div class="line"></div><div class="line"><span class="code"> latin1连接看utf8的数据，所以乱码。下面模拟 prepared statement 设置字符集：</span></div><div class="line">(ecweb@10.0.100.34:6033) [(none)]&gt; PREPARE stmt FROM <span class="emphasis">'SET NAMES utf8'</span>;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line">Statement prepared</div><div class="line"></div><div class="line"><span class="bullet">-- </span>[session 2] </div><div class="line">(admin@127.0.0.1:6032) [(none)]&gt; select * from stats<span class="emphasis">_mysql_</span>processlist;</div><div class="line"><span class="code">+----------+</span>-----------<span class="code">+-------+</span>--------------------<span class="code">+-------------+</span>----------<span class="code">+-----------+</span>-------------<span class="code">+------------+</span>---------------<span class="code">+----------+</span>---------<span class="code">+---------+</span>------+</div><div class="line"><span class="section">| ThreadID | SessionID | user  | db                 | cli_host    | cli_port | hostgroup | l_srv_host  | l_srv_port | srv_host      | srv_port | command | time_ms | info |</span></div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+-------------+------------+---------------+----------+---------+---------+------+</div><div class="line"><span class="section">| 1        | 50        | ecweb | information_schema | 10.0.100.34 | 46389    | 110       | 10.0.100.34 | 31946      | 192.168.1.229 | 3307     | Sleep   | 35649   |      |</span></div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+-------------+------------+---------------+----------+---------+---------+------+</div><div class="line"></div><div class="line">直接执行还是乱码，也要在prepared ：</div><div class="line">(ecweb@10.0.100.34:6033) [(none)]&gt; select * from d<span class="emphasis">_ec_</span>crm.tttt;</div><div class="line"><span class="code">+-----+</span>-------+</div><div class="line"><span class="section">| fid | fname |</span></div><div class="line">+-----+-------+</div><div class="line"><span class="section">|   1 | xx??? |</span></div><div class="line">+-----+-------+</div><div class="line"></div><div class="line">(ecweb@10.0.100.34:6033) [(none)]&gt; PREPARE stmt FROM <span class="emphasis">'select * from d_ec_crm.tttt'</span>;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line">Statement prepared</div><div class="line"></div><div class="line">(ecweb@10.0.100.34:6033) [(none)]&gt; EXECUTE stmt;</div><div class="line"><span class="code">+-----+</span>-------------+</div><div class="line"><span class="section">| fid | fname       |</span></div><div class="line">+-----+-------------+</div><div class="line"><span class="section">|   1 | xx嘻嘻嘻 |</span></div><div class="line">+-----+-------------+</div></pre></td></tr></table></figure></p>
<p>注意到 <code>PREPARE stmt FROM &#39;SET NAMES utf8&#39;</code> 发送之后，马上与后端建立了连接，而不像上节<code>set names xx</code>止步于proxysql。所以是自动禁用了 multiplexing。</p>
<h2 id="3-3-set-sql-mode"><a href="#3-3-set-sql-mode" class="headerlink" title="3.3 set sql_mode"></a>3.3 set sql_mode</h2><p>作者明确表示 <code>sql_mode</code> 在 1.3.x 版本里不会track，也就是它完全按照路由规则走，不会像临时表或用户变量那样 disable multiplexing automaticly，也不像上面的会话变量那样 “记录” 然后一并发送。</p>
<p>如果sql_mode确实对应用使用造成困扰，1.4版本里会修复，在此前估计只好将连接复用的特性全局禁用：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> mysql-multiplexing=<span class="string">'false'</span>;</div><div class="line">LOAD MYSQL <span class="keyword">VARIABLES</span> TO <span class="comment">RUNTIME</span>;</div><div class="line">SAVE MYSQL <span class="keyword">VARIABLES</span> TO <span class="comment">DISK</span>;</div></pre></td></tr></table></figure></p>
<p>参考 <a href="https://github.com/sysown/proxysql/issues/916" target="_blank" rel="external">issue #916</a>。禁用 multiplexing 后，就像一般的中间件连接池一样，维持或者释放连接。</p>
<p>最后，关于 multiplexing 向作者提了一个特性 <a href="https://github.com/sysown/proxysql/issues/594#issuecomment-294703577" target="_blank" rel="external">594#issuecomment-294703577</a> ：前端连接执行完一个查询，后端不马上把它返回连接池（复用），而是等待几秒，如果这个连接后续又有sql进来，就不需要重新从池里获取连接，还有检查一堆变量。renecannao 的回复非常及时，也确认 v1.4 会加上这个功能。</p>
<p>updated at 2017-07-27:<br>关于连接复用与连接池的差别，在后一次与作者的沟通中，更加明确了，见 <a href="https://github.com/sysown/proxysql/issues/1107" target="_blank" rel="external">#issue 1107</a>:<br>问题始于发现环境中的connection pool没有起作用（禁用了multiplexing），因为一开始只是认为禁用了multiplexing，connection pool不会受影响。但实际不是的，在1.3.x版本里，禁用multiplexing，就相当于连接复用和连接池都没有了，前端应用在释放连接后，proxysql也把后端的连接释放了；在1.4.x版本里表现不同，禁用multiplexing后，前端连接释放，proxysql对后端的连接继续保持，并对连接重置以便重复利用。</p>
<p>所以如果测试上没啥问题，建议开启连接复用，或者升级到 1.4.x 版本。</p>
<hr>
<p>原文连接地址：<a href="http://seanlook.com/2017/04/17/mysql-proxysql-multiplexing/">http://seanlook.com/2017/04/17/mysql-proxysql-multiplexing/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ProxySQL在连接池(&lt;em&gt;persistent connection poll&lt;/em&gt;)的基础上，还有一个连接复用的概念 &lt;em&gt;multiplexing connection&lt;/em&gt;，官方的wiki里没有很明确的说明，但在作者的一些 blog post 和 i
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="中间件" scheme="http://seanlook.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="proxysql" scheme="http://seanlook.com/tags/proxysql/"/>
    
  </entry>
  
  <entry>
    <title>ProxySQL之读写分离与分库路由演示</title>
    <link href="http://seanlook.com/2017/04/17/mysql-proxysql-route-rw_split/"/>
    <id>http://seanlook.com/2017/04/17/mysql-proxysql-route-rw_split/</id>
    <published>2017-04-17T07:32:49.000Z</published>
    <updated>2017-04-17T07:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文演示使用ProxySQL来完成读写分离和后端分库的一个实际配置过程，安装及配置项介绍见前文 <a href="http://seanlook.com/2017/04/10/mysql-proxysql-install-config/">ProxySQL之安装及配置详解</a>。</p>
<p>环境<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">instance0</span>: 10<span class="selector-class">.0</span><span class="selector-class">.100</span><span class="selector-class">.100</span> (<span class="selector-tag">db0</span>,<span class="selector-tag">db2</span>,<span class="selector-tag">db4</span>,<span class="selector-tag">db6</span>)</div><div class="line"><span class="selector-tag">instance1</span>: 10<span class="selector-class">.0</span><span class="selector-class">.100</span><span class="selector-class">.101</span> (<span class="selector-tag">db1</span>,<span class="selector-tag">db3</span>,<span class="selector-tag">db5</span>,<span class="selector-tag">db7</span>)</div><div class="line"><span class="selector-tag">instance2</span>: 10<span class="selector-class">.0</span><span class="selector-class">.100</span><span class="selector-class">.102</span> (<span class="selector-tag">db2</span>,<span class="selector-tag">db6</span>,<span class="selector-tag">db10</span>,<span class="selector-tag">db14</span>)</div><div class="line"><span class="selector-tag">instance3</span>: 10<span class="selector-class">.0</span><span class="selector-class">.100</span><span class="selector-class">.103</span> (<span class="selector-tag">db3</span>,<span class="selector-tag">db7</span>,<span class="selector-tag">db11</span>,<span class="selector-tag">db15</span>)</div><div class="line"></div><div class="line"><span class="selector-tag">instance0</span> <span class="selector-tag">slave</span>: 192<span class="selector-class">.168</span><span class="selector-class">.10</span><span class="selector-class">.4</span><span class="selector-pseudo">:3316</span></div><div class="line"><span class="selector-tag">instance1</span> <span class="selector-tag">slave</span>: 192<span class="selector-class">.168</span><span class="selector-class">.10</span><span class="selector-class">.4</span><span class="selector-pseudo">:3326</span></div><div class="line"><span class="selector-tag">instance2</span> <span class="selector-tag">slave</span>: 192<span class="selector-class">.168</span><span class="selector-class">.10</span><span class="selector-class">.4</span><span class="selector-pseudo">:3336</span></div><div class="line"><span class="selector-tag">instance3</span> <span class="selector-tag">slave</span>: 192<span class="selector-class">.168</span><span class="selector-class">.10</span><span class="selector-class">.4</span><span class="selector-pseudo">:3346</span></div><div class="line"></div><div class="line"><span class="selector-tag">proxysql</span> <span class="selector-tag">node0</span>: 10<span class="selector-class">.0</span><span class="selector-class">.100</span><span class="selector-class">.36</span></div></pre></td></tr></table></figure></p>
<p>现在想达到这样一个目的：客户端应用连接上 proxysql 的ip:port，连接时指定分库db名，执行sql时自动路由到对应的实例、对应的库。考虑下面的部署结构：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-rw-lb-deploy.png" alt="ProxySQL Deploy"></p>
<p>任何一个proxysql节点都是对等的，路由请求到后端instance的各个database上。</p>
<h1 id="1-配置后端DB"><a href="#1-配置后端DB" class="headerlink" title="1. 配置后端DB"></a>1. 配置后端DB</h1><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">-- proxysql admin cli</div><div class="line"></div><div class="line">insert into mysql_servers(hostgroup_id,hostname,port,weight,weight,comment) values</div><div class="line">  (<span class="number">100</span>, '<span class="number">10.0</span><span class="number">.100</span><span class="number">.100</span>', <span class="number">3307</span>, <span class="number">1</span>, 'db0,ReadWrite'),</div><div class="line">  (<span class="number">1000</span>, '<span class="number">10.0</span><span class="number">.100</span><span class="number">.100</span>', <span class="number">3307</span>, <span class="number">1</span>, 'db0,ReadWrite'),(<span class="number">1000</span>, '<span class="number">192.168</span><span class="number">.10</span><span class="number">.4</span>', <span class="number">3316</span>, <span class="number">9</span>, 'db0,ReadOnly');</div><div class="line"></div><div class="line">insert into mysql_servers(hostgroup_id,hostname,port,weight,weight,comment) values</div><div class="line">  (<span class="number">101</span>, '<span class="number">10.0</span><span class="number">.100</span><span class="number">.101</span>', <span class="number">3307</span>, <span class="number">1</span>, 'db1,ReadWrite'),</div><div class="line">  (<span class="number">1001</span>, '<span class="number">10.0</span><span class="number">.100</span><span class="number">.101</span>', <span class="number">3307</span>, <span class="number">1</span>, 'db1,ReadWrite'),(<span class="number">1001</span>, '<span class="number">192.168</span><span class="number">.10</span><span class="number">.4</span>', <span class="number">3326</span>, <span class="number">9</span>, 'db1,ReadOnly');</div><div class="line"></div><div class="line">insert into mysql_servers(hostgroup_id,hostname,port,weight,weight,comment) values</div><div class="line">  (<span class="number">102</span>, '<span class="number">10.0</span><span class="number">.100</span><span class="number">.102</span>', <span class="number">3307</span>, <span class="number">1</span>, 'db2,ReadWrite'),</div><div class="line">  (<span class="number">1002</span>, '<span class="number">10.0</span><span class="number">.100</span><span class="number">.102</span>', <span class="number">3307</span>, <span class="number">1</span>, 'db2,ReadWrite'),(<span class="number">1002</span>, '<span class="number">192.168</span><span class="number">.10</span><span class="number">.4</span>', <span class="number">3336</span>, <span class="number">9</span>, 'db2,ReadOnly');</div><div class="line"></div><div class="line">insert into mysql_servers(hostgroup_id,hostname,port,weight,weight,comment) values</div><div class="line">  (<span class="number">103</span>, '<span class="number">10.0</span><span class="number">.100</span><span class="number">.103</span>', <span class="number">3307</span>, <span class="number">1</span>, 'db3,ReadWrite'),</div><div class="line">  (<span class="number">1003</span>, '<span class="number">10.0</span><span class="number">.100</span><span class="number">.103</span>', <span class="number">3307</span>, <span class="number">1</span>, 'db3,ReadWrite'),(<span class="number">1003</span>, '<span class="number">192.168</span><span class="number">.10</span><span class="number">.4</span>', <span class="number">3346</span>, <span class="number">9</span>, 'db3,ReadOnly');</div></pre></td></tr></table></figure>
<p>比如 100 是主库，则 1000 是从库，同时主库也可以处理 1/10 的读请求。</p>
<h1 id="2-配置用户"><a href="#2-配置用户" class="headerlink" title="2. 配置用户"></a>2. 配置用户</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- proxysql admin cli</span></div><div class="line"></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mysql_users(username, <span class="keyword">password</span>,active,transaction_persistent)</div><div class="line">  <span class="keyword">values</span>(<span class="string">'user0'</span>, <span class="string">'password0'</span>, <span class="number">1</span>, <span class="number">1</span>),(<span class="string">'read1'</span>, <span class="string">'password1'</span>, <span class="number">1</span>, <span class="number">1</span>);</div></pre></td></tr></table></figure>
<p>这里将 transaction_persistent 设置为1，如果不知道它的含义，请参考前文。</p>
<p>要确保用户有能够登陆到后端的所有db的权限。</p>
<h1 id="3-修改全局变量"><a href="#3-修改全局变量" class="headerlink" title="3. 修改全局变量"></a>3. 修改全局变量</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- proxysql admin cli</span></div><div class="line"></div><div class="line"><span class="keyword">set</span> mysql-default_charset=<span class="string">'utf8mb4'</span>;</div><div class="line"><span class="keyword">set</span> mysql-query_retries_on_failure=<span class="number">0</span>;</div><div class="line"><span class="keyword">set</span> mysql-max_stmts_per_connection=<span class="number">1000</span>;</div><div class="line"><span class="keyword">set</span> mysql-eventslog_filename=<span class="string">'queries.log'</span>;</div><div class="line"><span class="keyword">set</span> monitor_slave_lag_when_null=<span class="number">7200</span>;</div><div class="line"></div><div class="line"><span class="keyword">set</span> mysql-ping_timeout_server=<span class="number">1500</span>;</div><div class="line"><span class="keyword">set</span> mysql-monitor_connect_timeout=<span class="number">1000</span>;</div><div class="line"><span class="keyword">set</span> mysql-default_max_latency_ms=<span class="number">2000</span>;</div><div class="line"></div><div class="line"><span class="keyword">set</span> mysql-monitor_username=<span class="string">'monitor'</span>;</div><div class="line"><span class="keyword">set</span> mysql-monitor_password=<span class="string">'monitor'</span>;</div><div class="line"><span class="keyword">set</span> mysql-server_version=<span class="string">'5.6.16'</span>;</div></pre></td></tr></table></figure>
<p>需要提前给 monitor 账号开通权限，一般共用监控数据库的权限就足够了。</p>
<p><strong>让上面所有的修改生效</strong>:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- proxysql admin cli</span></div><div class="line"><span class="comment">-- 应用</span></div><div class="line"><span class="keyword">load</span> mysql <span class="keyword">users</span> <span class="keyword">to</span> runtime;</div><div class="line"><span class="keyword">load</span> mysql servers <span class="keyword">to</span> runtime;</div><div class="line"><span class="keyword">load</span> mysql <span class="keyword">variables</span> <span class="keyword">to</span> runtime;</div><div class="line"></div><div class="line"><span class="comment">-- 保存到磁盘</span></div><div class="line">save mysql users to disk;</div><div class="line">save mysql servers to disk;</div><div class="line">save mysql variables to disk;</div><div class="line"></div><div class="line">save mysql users to mem;  <span class="comment">-- 可以屏蔽看到的明文密码</span></div></pre></td></tr></table></figure></p>
<h1 id="4-添加路由规则"><a href="#4-添加路由规则" class="headerlink" title="4. 添加路由规则"></a>4. 添加路由规则</h1><p>一般配置ProxySQL规则步骤是 <a href="https://github.com/sysown/proxysql/issues/653#issuecomment-242122732" target="_blank" rel="external">issues #653</a> :</p>
<ol>
<li>配置proxysql，将所有sql都发到主库</li>
<li>分析表 <code>stats_mysql_query_digest</code> 里面哪几种查询占比高</li>
<li>筛选哪些些占比高的SELECT，可以路由到从库</li>
<li>修改 <code>mysql_query_rules</code> 里面的规则，使其生效。不要一味的把所有查询都路由到主库</li>
</ol>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">-- [<span class="number">1</span>] read&amp;write split</div><div class="line">insert into mysql_query_rules(rule_id, active,match_digest,apply,flagOUT) values(<span class="number">49</span>, <span class="number">1</span>,'^select\s.*\sfor update',<span class="number">0</span>,<span class="number">21</span>);</div><div class="line">insert into mysql_query_rules(rule_id, active,match_digest,apply,flagOUT) values(<span class="number">50</span>, <span class="number">1</span>,'^\(?select',<span class="number">0</span>,<span class="number">20</span>);</div><div class="line">insert into mysql_query_rules(rule_id, active,match_digest,negate_match_pattern,apply,flagOUT) values(<span class="number">60</span>, <span class="number">1</span>,'^select',<span class="number">1</span>,<span class="number">0</span>,<span class="number">21</span>);</div><div class="line"></div><div class="line">-- 下面最好从rule_id <span class="number">70</span>开始，中间留空</div><div class="line"></div><div class="line">-- [<span class="number">2</span>] flag <span class="number">20</span> read</div><div class="line">insert into mysql_query_rules(active,schemaname,destination_hostgroup,apply,flagIN,flagOUT) values</div><div class="line">  (<span class="number">1</span>,'db0',<span class="number">1000</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db1',<span class="number">1001</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db2',<span class="number">1002</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db3',<span class="number">1003</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db4',<span class="number">1000</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db5',<span class="number">1001</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db6',<span class="number">1002</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db7',<span class="number">1003</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>),</div><div class="line">  (<span class="number">1</span>,'db8',<span class="number">1000</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db9',<span class="number">1001</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db10',<span class="number">1002</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db11',<span class="number">1003</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db12',<span class="number">1000</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db13',<span class="number">1001</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db14',<span class="number">1002</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db15',<span class="number">1003</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>);</div><div class="line"></div><div class="line">-- [<span class="number">3</span>] flag <span class="number">21</span> write</div><div class="line">insert into mysql_query_rules(active,schemaname,destination_hostgroup,apply,flagIN,flagOUT) values</div><div class="line">  (<span class="number">1</span>,'db0',<span class="number">100</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db1',<span class="number">101</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db2',<span class="number">102</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db3',<span class="number">103</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db4',<span class="number">100</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db5',<span class="number">101</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db6',<span class="number">102</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db7',<span class="number">103</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), </div><div class="line">  (<span class="number">1</span>,'db8',<span class="number">100</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db9',<span class="number">101</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db10',<span class="number">102</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db11',<span class="number">103</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db12',<span class="number">100</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db13',<span class="number">101</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db14',<span class="number">102</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db15',<span class="number">103</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>);</div><div class="line"></div><div class="line">-- [<span class="number">4</span>] no schema given when connect</div><div class="line">insert into mysql_query_rules(rule_id,active,schemaname,apply,flagOUT) values(<span class="number">20</span>,<span class="number">1</span>,'information_schema',<span class="number">0</span>,<span class="number">302</span>);</div><div class="line"></div><div class="line">-- [<span class="number">5</span>] route according to dbX.</div><div class="line">insert into mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply,flagIN,flagOUT) values(<span class="number">1000</span>,<span class="number">1</span>,'([\s\`])db(<span class="number">0</span>|<span class="number">4</span>|<span class="number">8</span>|<span class="number">12</span>)([\.\`])',<span class="number">100</span>,<span class="number">1</span>,<span class="number">302</span>,<span class="number">302</span>);</div><div class="line">insert into mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply,flagIN,flagOUT) values(<span class="number">1001</span>,<span class="number">1</span>,'([\s\`])db(<span class="number">1</span>|<span class="number">5</span>|<span class="number">9</span>|<span class="number">13</span>)([\.\`])',<span class="number">101</span>,<span class="number">1</span>,<span class="number">302</span>,<span class="number">302</span>);</div><div class="line">insert into mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply,flagIN,flagOUT) values(<span class="number">1002</span>,<span class="number">1</span>,'([\s\`])db(<span class="number">2</span>|<span class="number">6</span>|<span class="number">10</span>|<span class="number">14</span>)([\.\`])',<span class="number">102</span>,<span class="number">1</span>,<span class="number">302</span>,<span class="number">302</span>);</div><div class="line">insert into mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply,flagIN,flagOUT) values(<span class="number">1003</span>,<span class="number">1</span>,'([\s\`])db(<span class="number">3</span>|<span class="number">7</span>|<span class="number">11</span>|<span class="number">15</span>)([\.\`])',<span class="number">103</span>,<span class="number">1</span>,<span class="number">302</span>,<span class="number">302</span>);</div><div class="line"></div><div class="line">-- [<span class="number">6</span>] wrong usage</div><div class="line">insert into mysql_query_rules(rule_id,active,match_digest,apply,flagIN,flagOUT,error_msg,comment) </div><div class="line">  values(<span class="number">1404</span>,<span class="number">1</span>,'^SELECT DATABASE\(\)$',<span class="number">1</span>,<span class="number">302</span>,<span class="number">302</span>,'You should specify schema name first', 'use db0 Take long when no schema given for connection');</div><div class="line"></div><div class="line">-- [<span class="number">7</span>] <span class="section">default</span> route</div><div class="line">insert into mysql_query_rules(rule_id,active,apply, flagIN,flagOUT,error_msg,comment) values(<span class="number">9999</span>,<span class="number">1</span>,<span class="number">1</span>, <span class="number">302</span>,<span class="number">302</span>,'No query rules matched (by ProxySQL)', <span class="string">"Don't define the default hostgroup 0 for ME"</span>);</div><div class="line"></div><div class="line">-- [<span class="number">8</span>]</div><div class="line">LOAD MYSQL QUERY RULES TO RUN;</div><div class="line">SAVE MYSQL QUERY RULES TO DISK;</div></pre></td></tr></table></figure>
<p>逐个解释：</p>
<ol>
<li><p>以 select 开头并且不是 for update 类型的SQL，进入到新的规则链flagOUT=20;<br>其它诸如 insert, delete, update, replace, set, show 等语句，都进入到规则链flagOUT=21。<br>注：’^(?select’ 规则匹配以<code>select</code>或 <code>(select</code> 开头的查询，但目前proxysql(1.3.6, 1.4.1)版本对以 <code>(</code> 开头的查询不记录 stats_mysql_query_digest 表。<a href="https://github.com/sysown/proxysql/issues/1100" target="_blank" rel="external">#issue 1100</a></p>
<p>有个小技巧，mysql_query_rules 表的rule_id有自增，但最好从中间某个数开始，因为一旦后续可能需要紧急在前面插入规则，从1开始就没空位了。</p>
<p>这里大家可能有个顾虑，从库上可以执行 <code>set NAMES xxx</code>, <code>set session sql_mode=xxx</code>, <code>SET autocommit=?</code>, <code>commit</code>, <code>rollback</code>, <code>START TRANSACTION</code>, <code>use dbx</code> 这样的语句，不能全路由到主库吧？对此，另起了一篇文章 <a href="http://seanlook.com/2017/04/17/mysql-proxysql-multiplexing">http://seanlook.com/2017/04/17/mysql-proxysql-multiplexing</a> 。</p>
</li>
<li><p>flagIN=20 是 <em>只读链</em> 的入口<br>根据连接时指定的dbname，路由到对应的分库上。db0, db4, db8, db12 路由到 hostgroup_id=1000 ，db1, db5, db9, db16 路由到 hostgroup_id=1002 ，依次类推。<br>flagIN=flagOUT 则结束匹配。</p>
</li>
<li><p>flagOUT=21 是 <em>读写链</em>的入口<br>与上面的 [2] 类似，但是根据dbname路由到主库。</p>
</li>
<li><p>当建立连接的时候没有指定dbname时，分两种情况</p>
<ul>
<li>使用连接的时候 <code>use db0</code>，因为mysql协议在每次 use dbname 时都会发送一个 <code>SELECT DATABASE()</code> 命令，第一次由于没有连接上后端任何DB，命令会执行超时失败，再次 use db0 是才成功。具体参考我所提的 <a href="https://github.com/sysown/proxysql/issues/988" target="_blank" rel="external">issue #988</a> 。<br>因此这里我为它添加了一个规则 <strong>[6]</strong>，遇到这种情况马上处理，而不用等待失败。</li>
<li>使用连接时从未有默认schema，添加规则 <strong>[5]</strong>，使用 <code>schemaname.tablename</code> 的形式匹配 schemaname，然后路由到对应的 hostgroup 。</li>
</ul>
</li>
<li><p>因为没有定义 hostgroup 0，在意外情况什么规则都没匹配上时也依旧会等待失败，所以默认规则（默认路由）返回一个错误。</p>
</li>
</ol>
<h1 id="5-效果演示"><a href="#5-效果演示" class="headerlink" title="5. 效果演示"></a>5. 效果演示</h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">db0 与 db15 分别在两个实例上：</div><div class="line"></div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; select <span class="symbol">*</span> from db0.tbl_0;</div><div class="line">+-----+----------------+--------+</div><div class="line">|<span class="string"> fid </span>|<span class="string"> username       </span>|<span class="string"> corpid </span>|</div><div class="line">+-----+----------------+--------+</div><div class="line">|<span class="string">   1 </span>|<span class="string"> db0 aa         </span>|<span class="string">      0 </span>|</div><div class="line">|<span class="string">   2 </span>|<span class="string"> db0 aa         </span>|<span class="string">     16 </span>|</div><div class="line">|<span class="string">   3 </span>|<span class="string"> db0 autocommit </span>|<span class="string">     32 </span>|</div><div class="line">+-----+----------------+--------+</div><div class="line">3 rows in set (0.00 sec)</div><div class="line"></div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; select <span class="symbol">*</span> from db15.tbl_0;</div><div class="line">+-----+-----------------------------+--------+</div><div class="line">|<span class="string"> fid </span>|<span class="string"> username                    </span>|<span class="string"> corpid </span>|</div><div class="line">+-----+-----------------------------+--------+</div><div class="line">|<span class="string">   1 </span>|<span class="string"> db15 c2dfdf地方大幅度d      </span>|<span class="string">     15 </span>|</div><div class="line">|<span class="string">   2 </span>|<span class="string"> db15 c2dfdf地方大幅度d      </span>|<span class="string">     47 </span>|</div><div class="line">|<span class="string">   3 </span>|<span class="string"> db15 c2dfdf地方大幅度d      </span>|<span class="string">    111 </span>|</div><div class="line">+-----+-----------------------------+--------+</div><div class="line">3 rows in set (0.00 sec)</div><div class="line"></div><div class="line">无法路由时，报错：</div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; show databases;</div><div class="line">ERROR 1148 (42000): No query rules matched (by ProxySQL)</div><div class="line"></div><div class="line"></div><div class="line">看到 rule 的命中数符合预期：</div><div class="line">-- proxysql admin cli</div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; select active,hits, mysql_query_rules.rule_id, schemaname, match_digest, match_pattern, replace_pattern,destination_hostgroup hostgroup,flagIn,flagOUT </div><div class="line"> FROM mysql_query_rules NATURAL JOIN stats.stats_mysql_query_rules ORDER BY mysql_query_rules.rule_id;</div><div class="line">+--------+------+---------+--------------------+--------------+-------------------------------+-----------------+-----------+--------+---------+</div><div class="line">|<span class="string"> active </span>|<span class="string"> hits </span>|<span class="string"> rule_id </span>|<span class="string"> schemaname         </span>|<span class="string"> match_digest </span>|<span class="string"> match_pattern                 </span>|<span class="string"> replace_pattern </span>|<span class="string"> hostgroup </span>|<span class="string"> flagIN </span>|<span class="string"> flagOUT </span>|</div><div class="line">+--------+------+---------+--------------------+--------------+-------------------------------+-----------------+-----------+--------+---------+</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 3    </span>|<span class="string"> 20      </span>|<span class="string"> information_schema </span>|<span class="string"> NULL         </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> NULL      </span>|<span class="string"> 0      </span>|<span class="string"> 302     </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 50      </span>|<span class="string"> NULL               </span>|<span class="string"> ^\(*select   </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> NULL      </span>|<span class="string"> 0      </span>|<span class="string"> 20      </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 60      </span>|<span class="string"> NULL               </span>|<span class="string"> ^select      </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> NULL      </span>|<span class="string"> 0      </span>|<span class="string"> 21      </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 61      </span>|<span class="string"> db0                </span>|<span class="string"> NULL         </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> 1000      </span>|<span class="string"> 20     </span>|<span class="string"> 20      </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 62      </span>|<span class="string"> db1                </span>|<span class="string"> NULL         </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> 1001      </span>|<span class="string"> 20     </span>|<span class="string"> 20      </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 63      </span>|<span class="string"> db2                </span>|<span class="string"> NULL         </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> 1002      </span>|<span class="string"> 20     </span>|<span class="string"> 20      </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 64      </span>|<span class="string"> db3                </span>|<span class="string"> NULL         </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> 1003      </span>|<span class="string"> 20     </span>|<span class="string"> 20      </span>|</div><div class="line">....</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 77      </span>|<span class="string"> db0                </span>|<span class="string"> NULL         </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> 100       </span>|<span class="string"> 21     </span>|<span class="string"> 21      </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 78      </span>|<span class="string"> db1                </span>|<span class="string"> NULL         </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> 101       </span>|<span class="string"> 21     </span>|<span class="string"> 21      </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 79      </span>|<span class="string"> db2                </span>|<span class="string"> NULL         </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> 102       </span>|<span class="string"> 21     </span>|<span class="string"> 21      </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 80      </span>|<span class="string"> db3                </span>|<span class="string"> NULL         </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> 103       </span>|<span class="string"> 21     </span>|<span class="string"> 21      </span>|</div><div class="line">...</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 92      </span>|<span class="string"> db15               </span>|<span class="string"> NULL         </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> 103       </span>|<span class="string"> 21     </span>|<span class="string"> 21      </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 1    </span>|<span class="string"> 1000    </span>|<span class="string"> NULL               </span>|<span class="string"> NULL         </span>|<span class="string"> ([\s\`])db(0</span>|<span class="string">4</span>|<span class="string">8</span>|<span class="string">12)([\.\`])  </span>|<span class="string"> NULL            </span>|<span class="string"> 100       </span>|<span class="string"> 302    </span>|<span class="string"> 302     </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 1001    </span>|<span class="string"> NULL               </span>|<span class="string"> NULL         </span>|<span class="string"> ([\s\`])db(1</span>|<span class="string">5</span>|<span class="string">9</span>|<span class="string">13)([\.\`])  </span>|<span class="string"> NULL            </span>|<span class="string"> 101       </span>|<span class="string"> 302    </span>|<span class="string"> 302     </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 1002    </span>|<span class="string"> NULL               </span>|<span class="string"> NULL         </span>|<span class="string"> ([\s\`])db(2</span>|<span class="string">6</span>|<span class="string">10</span>|<span class="string">14)([\.\`]) </span>|<span class="string"> NULL            </span>|<span class="string"> 102       </span>|<span class="string"> 302    </span>|<span class="string"> 302     </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 1    </span>|<span class="string"> 1003    </span>|<span class="string"> NULL               </span>|<span class="string"> NULL         </span>|<span class="string"> ([\s\`])db(3</span>|<span class="string">7</span>|<span class="string">11</span>|<span class="string">15)([\.\`]) </span>|<span class="string"> NULL            </span>|<span class="string"> 103       </span>|<span class="string"> 302    </span>|<span class="string"> 302     </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 1404    </span>|<span class="string"> NULL               </span>|<span class="string"> NULL         </span>|<span class="string"> ^SELECT DATABASE\(\)$         </span>|<span class="string"> NULL            </span>|<span class="string"> NULL      </span>|<span class="string"> 302    </span>|<span class="string"> 302     </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 1    </span>|<span class="string"> 9999    </span>|<span class="string"> NULL               </span>|<span class="string"> NULL         </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> NULL      </span>|<span class="string"> 302    </span>|<span class="string"> 302     </span>|</div><div class="line">+--------+------+---------+--------------------+--------------+-------------------------------+-----------------+-----------+--------+---------+</div><div class="line">41 rows in set (0.01 sec)</div><div class="line"></div><div class="line">mysql&gt; select rule_id,schemaname,match_digest,match_pattern,destination_hostgroup,negate_match_pattern,apply,flagIN,flagOUT,error_msg from mysql_query_rules;</div></pre></td></tr></table></figure>
<p>切换数据库继续：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; use db1;</div><div class="line">Database changed</div><div class="line"></div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [db1]&gt; select <span class="symbol">*</span> from tbl_0;</div><div class="line">+-----+----------+--------+</div><div class="line">|<span class="string"> fid </span>|<span class="string"> username </span>|<span class="string"> corpid </span>|</div><div class="line">+-----+----------+--------+</div><div class="line">|<span class="string">   1 </span>|<span class="string"> db1 bb   </span>|<span class="string">      1 </span>|</div><div class="line">|<span class="string">   2 </span>|<span class="string"> db1 bb   </span>|<span class="string">     17 </span>|</div><div class="line">|<span class="string">   3 </span>|<span class="string"> db1 bb   </span>|<span class="string">     33 </span>|</div><div class="line">+-----+----------+--------+</div><div class="line">3 rows in set (0.01 sec)</div><div class="line"></div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [db1]&gt; select <span class="symbol">*</span> from `db5`.tbl_0;</div><div class="line">+-----+--------------------+--------+</div><div class="line">|<span class="string"> fid </span>|<span class="string"> username           </span>|<span class="string"> corpid </span>|</div><div class="line">+-----+--------------------+--------+</div><div class="line">|<span class="string">   1 </span>|<span class="string"> db5 ces测试 kfjd   </span>|<span class="string">      5 </span>|</div><div class="line">+-----+--------------------+--------+</div><div class="line"></div><div class="line">db6并不在当前实例里：</div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [db1]&gt; select <span class="symbol">*</span> from db6.tbl_0;</div><div class="line">ERROR 1146 (42S02): Table 'db6.tbl_0' doesn't exist</div><div class="line"></div><div class="line">现在show databases不会再报错：</div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [db1]&gt; show databases;</div><div class="line">+--------------------+</div><div class="line">|<span class="string"> Database           </span>|</div><div class="line">+--------------------+</div><div class="line">|<span class="string"> information_schema </span>|</div><div class="line">|<span class="string"> db1                </span>|</div><div class="line">|<span class="string"> db13               </span>|</div><div class="line">|<span class="string"> db5                </span>|</div><div class="line">|<span class="string"> db9                </span>|</div><div class="line">|<span class="string"> mysql              </span>|</div><div class="line">|<span class="string"> performance_schema </span>|</div><div class="line">+--------------------+</div><div class="line"></div><div class="line"></div><div class="line">看到 stats 模块的统计信息：</div><div class="line">-- proxysql admin cli</div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; select hostgroup,schemaname,username,digest,substr(digest_text,120,-120),count_star from stats_mysql_query_digest;</div><div class="line">+-----------+--------------------+----------+--------------------+--------------------------------------------+------------+</div><div class="line">|<span class="string"> hostgroup </span>|<span class="string"> schemaname         </span>|<span class="string"> username </span>|<span class="string"> digest             </span>|<span class="string"> substr(digest_text,120,-120)               </span>|<span class="string"> count_star </span>|</div><div class="line">+-----------+--------------------+----------+--------------------+--------------------------------------------+------------+</div><div class="line">|<span class="string"> 1002      </span>|<span class="string"> db2                </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x45033ED34D21EDF5 </span>|<span class="string"> select * from tbl_0                        </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 102       </span>|<span class="string"> db2                </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x02033E45904D3DF0 </span>|<span class="string"> show databases                             </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 102       </span>|<span class="string"> db2                </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x99531AEFF718C501 </span>|<span class="string"> show tables                                </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 1001      </span>|<span class="string"> db1                </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x620B328FE9D6D71A </span>|<span class="string"> SELECT DATABASE()                          </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 1001      </span>|<span class="string"> db1                </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x903E7B5A87B51352 </span>|<span class="string"> select * from db6.tbl_0                    </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 1001      </span>|<span class="string"> db1                </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x0CE250A1C0E2C539 </span>|<span class="string"> select * from `db5`.tbl_0                  </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 1001      </span>|<span class="string"> db1                </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x45033ED34D21EDF5 </span>|<span class="string"> select * from tbl_0                        </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 101       </span>|<span class="string"> db1                </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x02033E45904D3DF0 </span>|<span class="string"> show databases                             </span>|<span class="string"> 2          </span>|</div><div class="line">|<span class="string"> 102       </span>|<span class="string"> db2                </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x6F8289B2913564A0 </span>|<span class="string"> update tbl_0 set username=? where corpid=? </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 0         </span>|<span class="string"> information_schema </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x620B328FE9D6D71A </span>|<span class="string"> SELECT DATABASE()                          </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 101       </span>|<span class="string"> db1                </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x99531AEFF718C501 </span>|<span class="string"> show tables                                </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 0         </span>|<span class="string"> information_schema </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x02033E45904D3DF0 </span>|<span class="string"> show databases                             </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 1001      </span>|<span class="string"> db1                </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x7A3428659E1BFDC2 </span>|<span class="string"> select * from db5.tbl_0                    </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 103       </span>|<span class="string"> information_schema </span>|<span class="string"> ecdba    </span>|<span class="string"> 0xA951EB38FA9ED6A4 </span>|<span class="string"> select * from db15.tbl_0                   </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 100       </span>|<span class="string"> information_schema </span>|<span class="string"> ecdba    </span>|<span class="string"> 0xA132AEDEC5932600 </span>|<span class="string"> select * from db0.tbl_0                    </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 0         </span>|<span class="string"> information_schema </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x594F2C744B698066 </span>|<span class="string"> select USER()                              </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 0         </span>|<span class="string"> information_schema </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x226CD90D52A2BA0B </span>|<span class="string"> select @@version_comment limit ?           </span>|<span class="string"> 1          </span>|</div><div class="line">+-----------+--------------------+----------+--------------------+--------------------------------------------+------------+</div><div class="line">17 rows in set (0.01 sec)</div></pre></td></tr></table></figure></p>
<p>达到了读写分离和分实例分库的目的。</p>
<h1 id="6-另一种规则写法"><a href="#6-另一种规则写法" class="headerlink" title="6. 另一种规则写法"></a>6. 另一种规则写法</h1><p>从上面可以看到，客户端应用在使用的时候，最好都要指定 database name ，上面是因为加了第 5 类规则才避免由于不指定db时所带来的问题，但始终要求对每个 分db 建立自己连接，或者查询之前 use dbname ，当然也可以在获取连接的时候，传递dbname过去，拿到带正确db的连接过来。</p>
<p>那么其实还有一种办法，不需要指定连接db，而是采用注释 hint 的形式，传递给proxysql，然后来自动路由。将第 4 节的规则 [2],[3] 改成下面的形式：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">-- [<span class="number">1</span>] read&amp;write split</div><div class="line">-- instance0，read &amp; write</div><div class="line">INSERT INTO mysql_query_rules (rule_id,active,match_pattern,apply,flagIN,flagOUT) VALUES (<span class="number">40</span>,<span class="number">1</span>,<span class="string">"\/\*\s*shard_corp_mod=(0|4|8|12)\s*\*."</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">20</span>);</div><div class="line">INSERT INTO mysql_query_rules (rule_id,active,match_digest,destination_hostgroup,apply,flagIN,flagOUT) VALUES (<span class="number">50</span>,<span class="number">1</span>,'^select',<span class="number">1000</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>);</div><div class="line">INSERT INTO mysql_query_rules (active,match_digest,negate_match_pattern,destination_hostgroup,apply,flagIN,flagOUT) VALUES (<span class="number">1</span>,<span class="string">"^select"</span>,<span class="number">1</span>,<span class="number">100</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>);</div><div class="line"></div><div class="line">INSERT INTO mysql_query_rules (rule_id,active,match_pattern,apply,flagIN,flagOUT) VALUES (<span class="number">60</span>,<span class="number">1</span>,<span class="string">"\/\*\s*shard_corp_mod=(1|5|9|13)\s*\*."</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">21</span>);</div><div class="line">INSERT INTO mysql_query_rules (active,match_digest,destination_hostgroup,apply,flagIN,flagOUT) VALUES (<span class="number">1</span>,'^select',<span class="number">1001</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>);</div><div class="line">INSERT INTO mysql_query_rules (active,match_digest,negate_match_pattern,destination_hostgroup,apply,flagIN,flagOUT) VALUES (<span class="number">1</span>,<span class="string">"^select"</span>,<span class="number">1</span>,<span class="number">101</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>);</div><div class="line"></div><div class="line">INSERT INTO mysql_query_rules (rule_id,active,match_pattern,apply,flagIN,flagOUT) VALUES (<span class="number">70</span>,<span class="number">1</span>,<span class="string">"\/\*\s*shard_corp_mod=(2|6|10|14)\s*\*."</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">22</span>);</div><div class="line">INSERT INTO mysql_query_rules (active,match_digest,destination_hostgroup,apply,flagIN,flagOUT) VALUES (<span class="number">1</span>,'^select',<span class="number">1002</span>,<span class="number">1</span>,<span class="number">22</span>,<span class="number">22</span>);</div><div class="line">INSERT INTO mysql_query_rules (active,match_digest,negate_match_pattern,destination_hostgroup,apply,flagIN,flagOUT) VALUES (<span class="number">1</span>,<span class="string">"^select"</span>,<span class="number">1</span>,<span class="number">102</span>,<span class="number">1</span>,<span class="number">22</span>,<span class="number">22</span>);</div><div class="line"></div><div class="line">INSERT INTO mysql_query_rules (rule_id,active,match_pattern,apply,flagIN,flagOUT) VALUES (<span class="number">80</span>,<span class="number">1</span>,<span class="string">"\/\*\s*shard_corp_mod=(3|7|11|15)\s*\*."</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">23</span>);</div><div class="line">INSERT INTO mysql_query_rules (active,match_digest,destination_hostgroup,apply,flagIN,flagOUT) VALUES (<span class="number">1</span>,'^select',<span class="number">1003</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">23</span>);</div><div class="line">INSERT INTO mysql_query_rules (active,match_digest,negate_match_pattern,destination_hostgroup,apply,flagIN,flagOUT) VALUES (<span class="number">1</span>,<span class="string">"^select"</span>,<span class="number">1</span>,<span class="number">103</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">23</span>);</div><div class="line"></div><div class="line">-- [<span class="number">2</span>] no <span class="comment">/* shard_corp_mod=? */</span> given</div><div class="line">insert into mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply,flagIN) values(<span class="number">1000</span>,<span class="number">1</span>,'([\s\`])db(<span class="number">0</span>|<span class="number">4</span>|<span class="number">8</span>|<span class="number">12</span>)([\.\`])',<span class="number">100</span>,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">insert into mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply,flagIN) values(<span class="number">1001</span>,<span class="number">1</span>,'([\s\`])db(<span class="number">1</span>|<span class="number">5</span>|<span class="number">9</span>|<span class="number">13</span>)([\.\`])',<span class="number">101</span>,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">insert into mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply,flagIN) values(<span class="number">1002</span>,<span class="number">1</span>,'([\s\`])db(<span class="number">2</span>|<span class="number">6</span>|<span class="number">10</span>|<span class="number">14</span>)([\.\`])',<span class="number">102</span>,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">insert into mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply,flagIN) values(<span class="number">1003</span>,<span class="number">1</span>,'([\s\`])db(<span class="number">3</span>|<span class="number">7</span>|<span class="number">11</span>|<span class="number">15</span>)([\.\`])',<span class="number">103</span>,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line"></div><div class="line">-- [<span class="number">3</span>] wrong usage</div><div class="line">insert into mysql_query_rules(rule_id,active,schemaname,match_digest,apply,flagIN,error_msg,comment) </div><div class="line">  values(<span class="number">1404</span>,<span class="number">1</span>,'information_schema','^SELECT DATABASE\(\)$',<span class="number">1</span>,<span class="number">0</span>,'You should specify schema name first', 'use db0 Take long when no schema given for connection');</div><div class="line"></div><div class="line">-- [<span class="number">7</span>] <span class="section">default</span> route</div><div class="line">insert into mysql_query_rules(rule_id,active,apply, flagIN,error_msg,comment) values(<span class="number">9999</span>,<span class="number">1</span>,<span class="number">1</span>, <span class="number">0</span>,'No query rules matched (by ProxySQL)', <span class="string">"Don't define the default hostgroup 0 for ME"</span>);</div><div class="line"></div><div class="line">-- [<span class="number">8</span>]</div><div class="line">LOAD MYSQL QUERY RULES TO RUN;</div><div class="line">SAVE MYSQL QUERY RULES TO DISK;</div></pre></td></tr></table></figure></p>
<p>注意这里[2][3]用的是 <code>match_pattern</code>，而上节用的是<code>match_digest</code>，因为proxysql在处理fingerprint的时候，会去掉注释。如果在命令行测试，要加 <code>-c</code> 避免 HINT 被过滤掉。</p>
<p>使用时Hint放sql最后面，每个sql都要带mod或者指定实例：<code>select * from db5.tbl_0 /* shard_corp_mod=5 */</code>，真正实施起来，应用端的复杂度以及proxysql的性能，还是有待考虑的。</p>
<p>关于这些路由规则的写法对ProxySQL性能的影响，欢迎继续阅读这边文章 <a href="http://seanlook.com/2017/04/20/mysql-proxysql-performance-test/">ProxySQL之性能测试对比</a></p>
<p>参考：</p>
<ul>
<li><a href="https://severalnines.com/blog/how-proxysql-adds-failover-and-query-control-your-mysql-replication-setup" target="_blank" rel="external">https://severalnines.com/blog/how-proxysql-adds-failover-and-query-control-your-mysql-replication-setup</a></li>
<li><a href="https://www.percona.com/blog/2016/08/30/mysql-sharding-with-proxysql/" target="_blank" rel="external">https://www.percona.com/blog/2016/08/30/mysql-sharding-with-proxysql/</a></li>
</ul>
<hr>
<p>原文连接地址：<a href="http://seanlook.com/2017/04/17/mysql-proxysql-route-rw_split/">http://seanlook.com/2017/04/17/mysql-proxysql-route-rw_split/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文演示使用ProxySQL来完成读写分离和后端分库的一个实际配置过程，安装及配置项介绍见前文 &lt;a href=&quot;http://seanlook.com/2017/04/10/mysql-proxysql-install-config/&quot;&gt;ProxySQL之安装及配置详解&lt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="中间件" scheme="http://seanlook.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="proxysql" scheme="http://seanlook.com/tags/proxysql/"/>
    
  </entry>
  
  <entry>
    <title>ProxySQL之安装及配置详解</title>
    <link href="http://seanlook.com/2017/04/10/mysql-proxysql-install-config/"/>
    <id>http://seanlook.com/2017/04/10/mysql-proxysql-install-config/</id>
    <published>2017-04-10T13:32:49.000Z</published>
    <updated>2017-04-10T13:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>ProxySQL是一个高性能的MySQL中间件，拥有强大的规则引擎。具有以下特性：</p>
<ul>
<li>连接池，而且是 <a href="http://seanlook.com/2017/04/17/mysql-proxysql-multiplexing/">multiplexing</a></li>
<li>主机和用户的最大连接数限制</li>
<li>自动下线后端DB<ul>
<li>延迟超过阀值</li>
<li>ping 延迟超过阀值</li>
<li>网络不通或宕机</li>
</ul>
</li>
<li>强大的规则路由引擎<ul>
<li>实现读写分离</li>
<li>查询重写</li>
<li>sql流量镜像</li>
</ul>
</li>
<li>支持prepared statement</li>
<li>支持Query Cache</li>
<li>支持负载均衡，与gelera结合自动failover</li>
</ul>
<p>集这么多优秀特性于一身，那么缺点呢就是项目不够成熟，好在作者一直在及时更新，并且受到 Percona 官方的支持。</p>
<h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h1><p>从 <a href="https://github.com/sysown/proxysql/releases" target="_blank" rel="external">https://github.com/sysown/proxysql/releases</a> 下载相应的版本。这里我选择 <code>proxysql-1.3.5-1-centos67.x86_64.rpm</code>，也是当前最新稳定版。 </p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">yum</span> <span class="selector-tag">localinstall</span> <span class="selector-tag">proxysql-1</span><span class="selector-class">.3</span><span class="selector-class">.5-1-centos67</span><span class="selector-class">.x86_64</span><span class="selector-class">.rpm</span> <span class="selector-tag">-y</span></div></pre></td></tr></table></figure>
<p>可以马上启动了：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/etc/</span>init.d/proxysql start</div><div class="line">Starting <span class="string">ProxySQL:</span> DONE!</div></pre></td></tr></table></figure></p>
<p>proxysql有个配置文件 <code>/etc/proxysql.cnf</code>，只在第一次启动的时候有用，后续所有的配置修改都是对SQLite数据库操作，并且不会更新到proxysql.cnf文件中。ProxySQL绝大部分配置都可以在线修改，配置存储在  <code>/var/lib/proxysql/proxysql.db</code> 中，后面会介绍它的在线配置的设计方式。</p>
<p>proxysql 启动后会像 mysqld 一样，马上fork一个子进程，真正处理请求，而父进程负责监控子进程运行状况，如果crash了就拉起来。</p>
<h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">安装高版本 gcc<span class="number">-4.8</span></div><div class="line"><span class="meta"># cd /etc/yum.repos.d</span></div><div class="line"><span class="meta"># wget https://copr.fedoraproject.org/coprs/rhscl/devtoolset-3/repo/epel-6/rhscl-devtoolset-3-epel-6.repo  \</span></div><div class="line">  -O /etc/yum.repos.d/rhscl-devtoolset<span class="number">-3</span>-epel<span class="number">-6.</span>repo</div><div class="line"><span class="meta"># yum install -y  scl-utils policycoreutils-python</span></div><div class="line"><span class="meta"># yum --disablerepo='*' --enablerepo='rhscl-devtoolset-3' install devtoolset-3-gcc devtoolset-3-gcc-c++ devtoolset-3-binutils</span></div><div class="line"><span class="meta"># yum --enablerepo=testing-devtools-2-centos-6 install devtoolset-2-gcc devtoolset-2-gcc-c++ devtoolset-2-binutils</span></div><div class="line"></div><div class="line">上一步会把 GCC 安装到以下目录 /opt/rh/devtoolset<span class="number">-3</span>/root/usr/bin</div><div class="line"></div><div class="line">接下来需要修改系统的配置，使默认的 gcc 和 g++ 命令使用的是新安装的版本。启用SCL环境中新版本GCC：</div><div class="line"><span class="meta"># scl enable devtoolset-3 bash</span></div><div class="line"> </div><div class="line">现在查看 g++ 的版本号：</div><div class="line"><span class="meta"># gcc --version</span></div><div class="line"></div><div class="line">编译安装proxysql</div><div class="line"><span class="meta"># cd proxysql-master</span></div><div class="line"><span class="meta"># make</span></div><div class="line"><span class="meta"># make install</span></div></pre></td></tr></table></figure>
<h1 id="2-内置库表介绍"><a href="#2-内置库表介绍" class="headerlink" title="2. 内置库表介绍"></a>2. 内置库表介绍</h1><h3 id="2-1-内置“库”"><a href="#2-1-内置“库”" class="headerlink" title="2.1 内置“库”"></a>2.1 内置“库”</h3><p>首先登陆到 proxysql 之后才能进一步配置：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ export MYSQL_PS1=<span class="string">"(\u@\h:\p) [\d]&gt; "</span></div><div class="line">$ mysql -uadmin -padmin -h127.0.0.1 -P6032</div><div class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</div><div class="line">Your MySQL connection id is 2</div><div class="line">Server version: 5.6.30 (ProxySQL Admin Module)</div><div class="line"></div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; show databases;</div><div class="line">+-----+---------+-------------------------------+</div><div class="line">|<span class="string"> seq </span>|<span class="string"> name    </span>|<span class="string"> file                          </span>|</div><div class="line">+-----+---------+-------------------------------+</div><div class="line">|<span class="string"> 0   </span>|<span class="string"> main    </span>|<span class="string">                               </span>|</div><div class="line">|<span class="string"> 2   </span>|<span class="string"> disk    </span>|<span class="string"> /var/lib/proxysql/proxysql.db </span>|</div><div class="line">|<span class="string"> 3   </span>|<span class="string"> stats   </span>|<span class="string">                               </span>|</div><div class="line">|<span class="string"> 4   </span>|<span class="string"> monitor </span>|<span class="string">                               </span>|</div><div class="line">+-----+---------+-------------------------------+</div></pre></td></tr></table></figure></p>
<p>默认管理端口是6032，客户端服务端口是6033。默认的用户名密码都是 <code>admin</code>。 </p>
<ul>
<li><code>main</code> 是默认的”数据库”名，表里存放后端db实例、用户验证、路由规则等信息。表名以 <code>runtime_</code>开头的表示proxysql当前运行的配置内容，不能通过dml语句修改，只能修改对应的不以 runtime_ 开头的（在内存）里的表，然后 <code>LOAD</code> 使其生效， <code>SAVE</code> 使其存到硬盘以供下次重启加载。</li>
<li><code>disk</code> 是持久化到硬盘的配置，sqlite数据文件。</li>
<li><code>stats</code> 是proxysql运行抓取的统计信息，包括到后端各命令的执行次数、流量、processlist、查询种类汇总/执行时间，等等。</li>
<li><code>monitor</code> 库存储 monitor 模块收集的信息，主要是对后端db的健康/延迟检查。</li>
</ul>
<p><code>global_variables</code> 有80多个变量可以设置，其中就包括监听的端口、管理账号、禁用monitor等，详细可参考 <a href="https://github.com/sysown/proxysql/wiki/Global-variables" target="_blank" rel="external">https://github.com/sysown/proxysql/wiki/Global-variables</a> 。</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; show tables;</div><div class="line">+--------------------------------------+</div><div class="line">|<span class="string"> tables                               </span>|</div><div class="line">+--------------------------------------+</div><div class="line">|<span class="string"> global_variables                     </span>|</div><div class="line">|<span class="string"> mysql_collations                     </span>|</div><div class="line">|<span class="string"> mysql_query_rules                    </span>|</div><div class="line">|<span class="string"> mysql_replication_hostgroups         </span>|</div><div class="line">|<span class="string"> mysql_servers                        </span>|</div><div class="line">|<span class="string"> mysql_users                          </span>|</div><div class="line">|<span class="string"> runtime_global_variables             </span>|</div><div class="line">|<span class="string"> runtime_mysql_query_rules            </span>|</div><div class="line">|<span class="string"> runtime_mysql_replication_hostgroups </span>|</div><div class="line">|<span class="string"> runtime_mysql_servers                </span>|</div><div class="line">|<span class="string"> runtime_mysql_users                  </span>|</div><div class="line">|<span class="string"> runtime_scheduler                    </span>|</div><div class="line">|<span class="string"> scheduler                            </span>|</div><div class="line">+--------------------------------------+</div><div class="line">13 rows in set (0.00 sec)</div><div class="line"></div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; show tables from stats;</div><div class="line">+--------------------------------+</div><div class="line">|<span class="string"> tables                         </span>|</div><div class="line">+--------------------------------+</div><div class="line">|<span class="string"> global_variables               </span>|</div><div class="line">|<span class="string"> stats_mysql_commands_counters  </span>|</div><div class="line">|<span class="string"> stats_mysql_connection_pool    </span>|</div><div class="line">|<span class="string"> stats_mysql_global             </span>|</div><div class="line">|<span class="string"> stats_mysql_processlist        </span>|</div><div class="line">|<span class="string"> stats_mysql_query_digest       </span>|</div><div class="line">|<span class="string"> stats_mysql_query_digest_reset </span>|</div><div class="line">|<span class="string"> stats_mysql_query_rules        </span>|</div><div class="line">+--------------------------------+</div><div class="line">8 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
<h3 id="2-2-表-mysql-servers"><a href="#2-2-表-mysql-servers" class="headerlink" title="2.2 表 mysql_servers"></a>2.2 表 <code>mysql_servers</code></h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; show create table mysql_servers\G</div><div class="line"><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span> 1. row <span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span></div><div class="line">       table: mysql_servers</div><div class="line">Create Table: CREATE TABLE mysql_servers (</div><div class="line">    hostgroup_id INT NOT NULL DEFAULT 0,</div><div class="line">    hostname VARCHAR NOT NULL,</div><div class="line">    port INT NOT NULL DEFAULT 3306,</div><div class="line">    status VARCHAR CHECK (UPPER(status) IN ('ONLINE','SHUNNED','OFFLINE_SOFT', 'OFFLINE_HARD')) NOT NULL DEFAULT 'ONLINE',</div><div class="line">    weight INT CHECK (weight &gt;= 0) NOT NULL DEFAULT 1,</div><div class="line">    compression INT CHECK (compression &gt;=0 AND compression <span class="variable">&lt;= 102400) NOT NULL DEFAULT 0,</span></div><div class="line">    max_connections INT CHECK (max_connections &gt;=0) NOT NULL DEFAULT 1000,</div><div class="line">    max_replication_lag INT CHECK (max_replication_lag &gt;= 0 AND max_replication_lag <span class="variable">&lt;= 126144000) NOT NULL DEFAULT 0,</span></div><div class="line">    use_ssl INT CHECK (use_ssl IN(0,1)) NOT NULL DEFAULT 0,</div><div class="line">    max_latency_ms INT UNSIGNED CHECK (max_latency_ms&gt;=0) NOT NULL DEFAULT 0,</div><div class="line">    comment VARCHAR NOT NULL DEFAULT '',</div><div class="line">    PRIMARY KEY (hostgroup_id, hostname, port) )</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; select <span class="symbol">*</span> from mysql_servers;</div><div class="line">+--------------+--------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------------+</div><div class="line">|<span class="string"> hostgroup_id </span>|<span class="string"> hostname     </span>|<span class="string"> port </span>|<span class="string"> status </span>|<span class="string"> weight </span>|<span class="string"> compression </span>|<span class="string"> max_connections </span>|<span class="string"> max_replication_lag </span>|<span class="string"> use_ssl </span>|<span class="string"> max_latency_ms </span>|<span class="string"> comment       </span>|</div><div class="line">+--------------+--------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------------+</div><div class="line">|<span class="string"> 100          </span>|<span class="string"> 10.0.100.100 </span>|<span class="string"> 3307 </span>|<span class="string"> ONLINE </span>|<span class="string"> 1      </span>|<span class="string"> 0           </span>|<span class="string"> 1000            </span>|<span class="string"> 0                   </span>|<span class="string"> 0       </span>|<span class="string"> 0              </span>|<span class="string"> db0,ReadWrite </span>|</div><div class="line">|<span class="string"> 1000         </span>|<span class="string"> 10.0.100.100 </span>|<span class="string"> 3307 </span>|<span class="string"> ONLINE </span>|<span class="string"> 1      </span>|<span class="string"> 0           </span>|<span class="string"> 1000            </span>|<span class="string"> 0                   </span>|<span class="string"> 0       </span>|<span class="string"> 0              </span>|<span class="string"> db0,ReadWrite </span>|</div><div class="line">|<span class="string"> 1000         </span>|<span class="string"> 192.168.10.4 </span>|<span class="string"> 3316 </span>|<span class="string"> ONLINE </span>|<span class="string"> 4      </span>|<span class="string"> 0           </span>|<span class="string"> 1000            </span>|<span class="string"> 0                   </span>|<span class="string"> 0       </span>|<span class="string"> 0              </span>|<span class="string"> db0,ReadOnly  </span>|</div><div class="line">|<span class="string"> 101          </span>|<span class="string"> 10.0.100.101 </span>|<span class="string"> 3307 </span>|<span class="string"> ONLINE </span>|<span class="string"> 1      </span>|<span class="string"> 0           </span>|<span class="string"> 1000            </span>|<span class="string"> 0                   </span>|<span class="string"> 0       </span>|<span class="string"> 0              </span>|<span class="string"> db1,ReadWrite </span>|</div><div class="line">|<span class="string"> 1001         </span>|<span class="string"> 192.168.10.4 </span>|<span class="string"> 3326 </span>|<span class="string"> ONLINE </span>|<span class="string"> 1      </span>|<span class="string"> 0           </span>|<span class="string"> 1000            </span>|<span class="string"> 0                   </span>|<span class="string"> 0       </span>|<span class="string"> 0              </span>|<span class="string"> db1,ReadOnly  </span>|</div><div class="line">+--------------+--------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------------+</div></pre></td></tr></table></figure>
<ul>
<li><code>hostgroup_id</code>: ProxySQL通过 hostgroup (下称HG) 的形式组织后端db实例。一个 HG 代表同属于一个角色<ul>
<li>该表的主键是 <code>(hostgroup_id, hostname, port)</code>，可以看到一个 hostname:port 可以在多个hostgroup里面，如上面的 10.0.100.100:3307，这样可以避免 HG 1000 的从库全都不可用时，依然可以把读请求发到主库上。</li>
<li>一个 HG 可以有多个实例，即多个从库，可以通过 <code>weight</code> 分配权重</li>
<li>hostgroup_id 0 是一个特殊的HG，路由查询的时候，没有匹配到规则则默认选择 HG 0</li>
</ul>
</li>
<li><code>status</code>: <ul>
<li><code>ONLINE</code>: 当前后端实例状态正常</li>
<li><code>SHUNNED</code>: 临时被剔除，可能因为后端 too many connections error，或者超过了可容忍延迟阀值 <code>max_replication_lag</code></li>
<li><code>OFFLINE_SOFT</code>: “软离线”状态，不再接受新的连接，但已建立的连接会等待活跃事务完成。</li>
<li><code>OFFLINE_HARD</code>: “硬离线”状态，不再接受新的连接，已建立的连接或被强制中断。当后端实例宕机或网络不可达，会出现。</li>
</ul>
</li>
<li><code>max_connections</code>: 允许连接到该后端实例的最大连接数。不要大于MySQL设置的 max_connections<br>如果后端实例 hostname:port 在多个 hostgroup 里，以较大者为准，而不是各自独立允许的最大连接数。</li>
<li><code>max_replication_lag</code>: 允许的最大延迟，主库不受这个影响，默认0。如果 &gt; 0， monitor 模块监控主从延迟大于阀值时，会临时把它变为 SHUNNED 。</li>
<li><code>max_latency_ms</code>: mysql_ping 响应时间，大于这个阀值会把它从连接池剔除（即使是ONLINE）</li>
<li><code>comment</code>: 备注，不建议留空。这有什么好讲呢，但是你可以通过它的内容如json格式的数据，配合自己写的check脚本，完成一些自动化的工作。</li>
</ul>
<p><code>compression</code> 和 <code>use_ssl</code> 顾名思义。</p>
<h3 id="2-3-表-mysql-users"><a href="#2-3-表-mysql-users" class="headerlink" title="2.3 表 mysql_users"></a>2.3 表 <code>mysql_users</code></h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; show create table mysql_users\G</div><div class="line"><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span> 1. row <span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span></div><div class="line">       table: mysql_users</div><div class="line">Create Table: CREATE TABLE mysql_users (</div><div class="line">    username VARCHAR NOT NULL,</div><div class="line">    password VARCHAR,</div><div class="line">    active INT CHECK (active IN (0,1)) NOT NULL DEFAULT 1,</div><div class="line">    use_ssl INT CHECK (use_ssl IN (0,1)) NOT NULL DEFAULT 0,</div><div class="line">    default_hostgroup INT NOT NULL DEFAULT 0,</div><div class="line">    default_schema VARCHAR,</div><div class="line">    schema_locked INT CHECK (schema_locked IN (0,1)) NOT NULL DEFAULT 0,</div><div class="line">    transaction_persistent INT CHECK (transaction_persistent IN (0,1)) NOT NULL DEFAULT 0,</div><div class="line">    fast_forward INT CHECK (fast_forward IN (0,1)) NOT NULL DEFAULT 0,</div><div class="line">    backend INT CHECK (backend IN (0,1)) NOT NULL DEFAULT 1,</div><div class="line">    frontend INT CHECK (frontend IN (0,1)) NOT NULL DEFAULT 1,</div><div class="line">    max_connections INT CHECK (max_connections &gt;=0) NOT NULL DEFAULT 10000,</div><div class="line">    PRIMARY KEY (username, backend),</div><div class="line">    UNIQUE (username, frontend))</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; select <span class="symbol">*</span> from mysql_users;</div><div class="line">+----------+-----------+--------+---------+-------------------+----------------+---------------+------------------------+--------------+---------+----------+-----------------+</div><div class="line">|<span class="string"> username </span>|<span class="string"> password  </span>|<span class="string"> active </span>|<span class="string"> use_ssl </span>|<span class="string"> default_hostgroup </span>|<span class="string"> default_schema </span>|<span class="string"> schema_locked </span>|<span class="string"> transaction_persistent </span>|<span class="string"> fast_forward </span>|<span class="string"> backend </span>|<span class="string"> frontend </span>|<span class="string"> max_connections </span>|</div><div class="line">+----------+-----------+--------+---------+-------------------+----------------+---------------+------------------------+--------------+---------+----------+-----------------+</div><div class="line">|<span class="string"> user0    </span>|<span class="string"> password0 </span>|<span class="string"> 1      </span>|<span class="string"> 0       </span>|<span class="string"> 0                 </span>|<span class="string"> NULL           </span>|<span class="string"> 0             </span>|<span class="string"> 1                      </span>|<span class="string"> 0            </span>|<span class="string"> 1       </span>|<span class="string"> 1        </span>|<span class="string"> 10000           </span>|</div><div class="line">|<span class="string"> read1    </span>|<span class="string"> password1 </span>|<span class="string"> 1      </span>|<span class="string"> 0       </span>|<span class="string"> 0                 </span>|<span class="string"> NULL           </span>|<span class="string"> 0             </span>|<span class="string"> 1                      </span>|<span class="string"> 0            </span>|<span class="string"> 1       </span>|<span class="string"> 1        </span>|<span class="string"> 10000           </span>|</div><div class="line">+----------+-----------+--------+---------+-------------------+----------------+---------------+------------------------+--------------+---------+----------+-----------------+</div><div class="line">2 rows in set (0.00 sec)</div><div class="line"></div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; select username,password,transaction_persistent,active,backend,frontend,max_connections from runtime_mysql_users;</div><div class="line">+----------+------------------------------+------------------------+--------+---------+----------+-----------------+</div><div class="line">|<span class="string"> username </span>|<span class="string"> password                     </span>|<span class="string"> transaction_persistent </span>|<span class="string"> active </span>|<span class="string"> backend </span>|<span class="string"> frontend </span>|<span class="string"> max_connections </span>|</div><div class="line">+----------+------------------------------+------------------------+--------+---------+----------+-----------------+</div><div class="line">|<span class="string"> user0    </span>|<span class="string"> *FAB0955B2CE7AE2DAFEE46C3... </span>|<span class="string"> 1                      </span>|<span class="string"> 1      </span>|<span class="string"> 0       </span>|<span class="string"> 1        </span>|<span class="string"> 10000           </span>|</div><div class="line">|<span class="string"> read1    </span>|<span class="string"> *88A287979B45658C6CE41FB9... </span>|<span class="string"> 1                      </span>|<span class="string"> 1      </span>|<span class="string"> 0       </span>|<span class="string"> 1        </span>|<span class="string"> 10000           </span>|</div><div class="line">|<span class="string"> user0    </span>|<span class="string"> *FAB0955B2CE7AE2DAFEE46C3... </span>|<span class="string"> 1                      </span>|<span class="string"> 1      </span>|<span class="string"> 1       </span>|<span class="string"> 0        </span>|<span class="string"> 10000           </span>|</div><div class="line">|<span class="string"> read1    </span>|<span class="string"> *88A287979B45658C6CE41FB9... </span>|<span class="string"> 1                      </span>|<span class="string"> 1      </span>|<span class="string"> 1       </span>|<span class="string"> 0        </span>|<span class="string"> 10000           </span>|</div><div class="line">+----------+------------------------------+------------------------+--------+---------+----------+-----------------+</div><div class="line">4 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
<ul>
<li><code>username</code>, <code>password</code>: 连接后端db的用户密码。<br>这个密码你可以插入明文，也可以插入hash加密后的密文，proxysql会检查你插入的时候密码是否以  <code>*</code> 开头来判断，而且密文要在其它地方使用 <code>PASSWORD()</code>生成。<br>但到 <em>runtime_mysql_users</em> 里，都统一变成了密文，所以可以明文插入，再 <code>SAVE MYSQL USERS TO MEM</code>，此时看到的也是HASH密文。</li>
<li><code>active</code>: 是否生效该用户。</li>
<li><code>default_hostgroup</code>: 这个用户的请求没有匹配到规则时，默认发到这个 hostgroup，默认0</li>
<li><code>default_schema</code>: 这个用户连接时没有指定 database name 时，默认使用的schema<br>注意表面上看默认为NULL，但实际上受到变量 <code>mysql-default_schema</code> 的影响，默认为 information_schema。关于这个参考我所提的 issue <a href="https://github.com/sysown/proxysql/issues/988#issuecomment-293876759" target="_blank" rel="external">#988</a></li>
<li><code>transaction_persistent</code>: 如果设置为1，连接上ProxySQL的会话后，如果在一个hostgroup上开启了事务，那么后续的sql都继续维持在这个hostgroup上，不伦是否会匹配上其它路由规则，直到事务结束。<br>虽然默认是0，但我建议还是设成1，虽然一般来说由于前段应用的空值，为0出问题的情况几乎很小。作者也在考虑默认设成 1，<a href="https://github.com/sysown/proxysql/issues/793" target="_blank" rel="external">refer this issue #793</a></li>
<li><code>frontend</code>, <code>backend</code>: 目前版本这两个都需要使用默认的1，将来有可能会把 <em> Client -&gt; ProxySQL </em> (frontend) 与 <em> ProxySQL -&gt; BackendDB </em> (backend)的认证分开。<br>从 <em>runtime_mysql_users</em> 表内容看到，记录数比 <em>mysql_users</em> 多了一倍，就是把前端认证与后端认证独立出来的结果。</li>
<li><code>fast_forward</code>: 忽略查询重写/缓存层，直接把这个用户的请求透传到后端DB。相当于只用它的连接池功能，一般不用，路由规则 <code>.*</code> 就行了。</li>
</ul>
<h3 id="2-4-表-mysql-replication-hostgroups"><a href="#2-4-表-mysql-replication-hostgroups" class="headerlink" title="2.4 表 mysql_replication_hostgroups"></a>2.4 表 <code>mysql_replication_hostgroups</code></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mysql_replication_hostgroups (</div><div class="line">    writer_hostgroup <span class="built_in">INT</span> <span class="keyword">CHECK</span> (writer_hostgroup&gt;=<span class="number">0</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</div><div class="line">    reader_hostgroup <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">CHECK</span> (reader_hostgroup&lt;&gt;writer_hostgroup <span class="keyword">AND</span> reader_hostgroup&gt;<span class="number">0</span>),</div><div class="line">    <span class="keyword">comment</span> <span class="built_in">VARCHAR</span>,</div><div class="line">    <span class="keyword">UNIQUE</span> (reader_hostgroup))</div></pre></td></tr></table></figure>
<p>定义 hostgroup 的主从关系。ProxySQL monitor 模块会监控 HG 后端所有servers 的 <code>read_only</code> 变量，如果发现从库的 read_only 变为0、主库变为1，则认为角色互换了，自动改写 mysql_servers 表里面 hostgroup 关系，达到自动 Failover 效果。</p>
<p>目前这个表我是留空的，它与Gelera或PXC结合起来用比较合适。</p>
<h3 id="2-5-表-mysql-query-rules"><a href="#2-5-表-mysql-query-rules" class="headerlink" title="2.5 表 mysql_query_rules"></a>2.5 表 <code>mysql_query_rules</code></h3><p>ProxySQL非常核心一个表，定义查询路由规则，参考 <a href="https://github.com/sysown/proxysql/wiki/MySQL-Query-Rules" target="_blank" rel="external">https://github.com/sysown/proxysql/wiki/MySQL-Query-Rules</a> ：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">(admin<span class="symbol">@127</span><span class="number">.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6032</span>) [(none)]&gt; show create table mysql_query_rules\G</div><div class="line">*************************** <span class="number">1.</span> row ***************************</div><div class="line">       table: mysql_query_rules</div><div class="line">Create Table: CREATE TABLE mysql_query_rules (</div><div class="line">    rule_id INTEGER PRIMARY KEY AUTOINCREMENT <span class="literal">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    active <span class="built_in">INT</span> CHECK (active <span class="keyword">IN</span> (<span class="number">0</span>,<span class="number">1</span>)) <span class="literal">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</div><div class="line">    username VARCHAR,</div><div class="line">    schemaname VARCHAR,</div><div class="line">    flagIN <span class="built_in">INT</span> <span class="literal">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</div><div class="line">    client_addr VARCHAR,</div><div class="line">    proxy_addr VARCHAR,</div><div class="line">    proxy_port <span class="built_in">INT</span>,</div><div class="line">    digest VARCHAR,</div><div class="line">    match_digest VARCHAR,</div><div class="line">    match_pattern VARCHAR,</div><div class="line">    negate_match_pattern <span class="built_in">INT</span> CHECK (negate_match_pattern <span class="keyword">IN</span> (<span class="number">0</span>,<span class="number">1</span>)) <span class="literal">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</div><div class="line">    flagOUT <span class="built_in">INT</span>,</div><div class="line">    replace_pattern VARCHAR,</div><div class="line">    destination_hostgroup <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">    cache_ttl <span class="built_in">INT</span> CHECK(cache_ttl &gt; <span class="number">0</span>),</div><div class="line">    reconnect <span class="built_in">INT</span> CHECK (reconnect <span class="keyword">IN</span> (<span class="number">0</span>,<span class="number">1</span>)) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">    timeout <span class="built_in">INT</span> UNSIGNED,</div><div class="line">    retries <span class="built_in">INT</span> CHECK (retries&gt;=<span class="number">0</span> <span class="literal">AND</span> retries &lt;=<span class="number">1000</span>),</div><div class="line">    delay <span class="built_in">INT</span> UNSIGNED,</div><div class="line">    mirror_flagOUT <span class="built_in">INT</span> UNSIGNED,</div><div class="line">    mirror_hostgroup <span class="built_in">INT</span> UNSIGNED,</div><div class="line">    error_msg VARCHAR,</div><div class="line">    <span class="built_in">log</span> <span class="built_in">INT</span> CHECK (<span class="built_in">log</span> <span class="keyword">IN</span> (<span class="number">0</span>,<span class="number">1</span>)),</div><div class="line">    apply <span class="built_in">INT</span> CHECK(apply <span class="keyword">IN</span> (<span class="number">0</span>,<span class="number">1</span>)) <span class="literal">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</div><div class="line">    comment VARCHAR)</div><div class="line"><span class="number">1</span> row <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure></p>
<ul>
<li><code>rule_id</code>: 表主键，自增。规则处理是以 rule_id 的顺序进行。</li>
<li><code>active</code>: 只有 active=1 的规则才会参与匹配。</li>
<li><code>username</code>: 如果非 NULL，只有连接用户是 username 的值才会匹配</li>
<li><code>schemaname</code>: 如果非 NULL，只有查询连接使用的db是 schemaname 的值才会匹配。<br>注意如果是 NULL，不代表连接没有使用schema，而是不伦任何schema都进一步匹配。</li>
<li><code>flagIN</code>, <code>flagOUT</code>, <code>apply</code>: 用来定义路由链 chains of rules<ul>
<li>首先会检查 flagIN=0 的规则，以rule_id的顺序；如果都没匹配上，则走这个用户的 default_hostgroup </li>
<li>当匹配一条规则后，会检查 <code>flagOUT</code><ul>
<li>如果不为NULL，并且 flagIN != flagOUT ，则进入以flagIN为上一个flagOUT值的新规则链</li>
<li>如果不为NULL，并且 flagIN = flagOUT，则应用这条规则</li>
<li>如果为NULL，或者 apply=1，则结束，应用这条规则</li>
<li>如果最终没有匹配到，则找到这个用户的 default_hostgroup<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-route-rule-flag.png" alt="proxysql route chain"></li>
</ul>
</li>
</ul>
</li>
<li><code>client_addr</code>: 匹配客户端来源IP</li>
<li><code>proxy_addr</code>, <code>proxy_port</code>: 匹配本地proxysql的IP、端口。我目前没有想到它的应用场景，可能是把proxysql监听在多个接口上，分发到不同的业务？</li>
<li><code>digest</code>: 精确的匹配一类查询。</li>
<li><code>match_digest</code>: 正则匹配一类查询。query digest 是指对查询去掉具体值后进行“模糊化”后的查询，类似 <em>pt-fingerprint</em> / <em>pt-query-digest</em> 的效果。</li>
<li><code>match_pattern</code>: 正则匹配查询。<br>以上都是匹配查询的规则，目前1.3.5使用的正则引擎只有 RE2 ，1.4版本可以通过变量 <a href="https://github.com/sysown/proxysql/wiki/Global-variables#mysql-query_processor_regex" target="_blank" rel="external"><code>mysql-query_processor_regex</code></a> 设置 RE2 或者 PCRE，且1.4开始默认是PCRE。<br>ProxySQL的作者 renecannao 自己推荐用 match_digest 。关于每条查询都会计算digest对性能的影响，我提出疑问后，作者在这篇文章<a href="https://www.percona.com/blog/2017/04/10/proxysql-rules-do-i-have-too-many/#comment-10967989" target="_blank" rel="external">ProxySQL Rules: Do I Have Too Many?</a>的评论里做出了解释。大意是说计算query digest确实会有性能损失，但是确实proxysql里面非常重要特性，主要是两点：<ol>
<li>proxysql无法知道连接复用(multipexing)是否必须被自动禁用，比如连接里面有variables/tmp tables/lock table等特殊命令，是不能复用的。</li>
<li>完整的查询去匹配正则的效率，一般没有参数化后的查询匹配效率高，因为有很长的字符串内容需要处理。再者，<code>SELECT * FROM randomtable WHERE comment LIKE ‘%INTO sbtest1 % FROM sbtest2 %’</code>字符串里有类似这样的语句，很难排除误匹配。</li>
</ol>
</li>
<li><code>negate_match_pattern</code>: 反向匹配，相当于对 match_digest/match_pattern 的匹配取反。</li>
<li><code>re_modifiers</code>: 修改正则匹配的参数，比如默认的：忽略大小写<code>CASELESS</code>、禁用<code>GLOBAL</code></li>
</ul>
<p>上面都是匹配规则，下面是匹配后的行为：</p>
<ul>
<li><code>replace_pattern</code>: 查询重写，默认为空，不rewrite。<br>rewrite规则要遵守  <a href="https://github.com/google/re2/wiki/Syntax" target="_blank" rel="external">RE2::Replace</a> 。</li>
<li><code>destination_hostgroup</code>: 路由查询到这个 hostgroup。当然如果用户显式 start transaction 且 transaction_persistent=1，那么即使匹配到了，也依然按照事务里第一条sql的路由规则去走。</li>
<li><code>cache_ttl</code>: 查询结果缓存的毫秒数。<br>proxysql这个 Query Cache 与 MySQL 自带的query cache不是同一个。proxysql query cache也不会关心后端数据是否被修改，它所做的就是针对某些特定种类的查询结果进行缓存，比如一些历史数据的count结果。一般不设。</li>
<li><code>timeout</code>: 这一类查询执行的最大时间（毫秒），超时则自动kill。<br>这是对后端DB的保护机制，相当于阿里云RDS <code>loose_max_statement_time</code> 变量的功能，但是注意不同的是，阿里云这个变量的时间时不包括DML操作出现InnoDB行锁等待的时间，而ProxySQL的这个 timeout 是计算从发送sql到等待响应的时间。默认<code>mysql-default_query_timeout</code>给的是 10h .</li>
<li><code>retries</code>: 语句在执行时失败时，重试次数。默认由 <code>mysql-query_retries_on_failure</code>变量指定，为1 。<br>我个人建议把它设成0，即不重试。因为执行失败，对select而言很少见，主要是dml，但自己重试对数据不放心。</li>
<li><code>delay</code>: 查询延迟执行，这是ProxySQL提供的限流机制，会让其它的查询优先执行。<br>默认值 <code>mysql-default_query_delay</code>，为0。我们一般不用，其实还是要配合应用端使用，比如这边延迟执行，但上层等待你返回，那前端不就堵住了，没准出现雪崩效应。</li>
<li><code>mirror_flagOUT</code>,<code>mirror_hostgroup</code><br>这两个高级了，目前这部分文档不全，功能是SQL镜像。顾名思义，就是把匹配到的SQL除了发送到 destination_hostgroup，同时镜像一份到这里的hostgroup，比如我们的测试库。比如这种场景，数据库要从5.6升级到5.7，要验证现有查询语句对5.7的适用情况，就可以把生产流量镜像到5.7新库上验证。</li>
<li><code>error_msg</code>: 默认为NULL，如果指定了则这个查询直接被 block 掉，马上返回这个错误信息。<br>这个功能也很实用，比如线上突然冒出一个 “坏查询”，应用端不方便马上发版解决，我们就可以在这配置一个规则，把查询屏蔽掉，想正常的mysql报错那样抛异常。下一篇文章有演示。</li>
<li><code>multiplex</code>: 连接是否复用。<br>关于这个，单独起一篇文章来写，传送门：<a href="http://seanlook.com/2017/04/17/mysql-proxysql-multiplexing/">http://seanlook.com/2017/04/17/mysql-proxysql-multiplexing/</a></li>
<li><code>log</code>: 是否记录查询日志。可以看到log是否记录的对象是根据规则。<br>要开启日志记录，需要设置变量 <code>mysql-eventslog_filename</code> 来指定文件名，然后这个 log 标记为1。但是目前proxysql记录的日志是二进制格式，需要特定的工具才能读取： eventslog_reader_sample 。这个工具在源码目录 tools下面，我下载的1.3.5版本rpm表竟然还没有编译它。<br>参考 issue <a href="https://github.com/sysown/proxysql/issues/561" target="_blank" rel="external">#561 Logging all queries</a></li>
</ul>
<p>照 <a href="https://github.com/sysown/proxysql/wiki/Multi-layer-configuration-system#modifying-config-at-runtime" target="_blank" rel="external">wiki Multi-layer-configuration-system</a> 所说，在debug版本里应该有个 debug_levels 表来定义日志级别，但我没找到。据作者回复，上面的方式已过时，推荐 <code>mysql-eventslog_filename</code>。</p>
<h1 id="3-proxysql的多层配置设计"><a href="#3-proxysql的多层配置设计" class="headerlink" title="3. proxysql的多层配置设计"></a>3. proxysql的多层配置设计</h1><p>ProxySQL采用多层配置的设计来达到以下目的：</p>
<ul>
<li>允许在线应用配置项，而不需要重启proxysql</li>
<li>使用MySQL接口风格，来操作配置项，自定更新</li>
<li>如果配置有误，可以轻易回滚</li>
</ul>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-config-multi-layer.png" alt="ProxySQL Multi layer configuration system"></p>
<p><strong>RUNTIME</strong> 代表的是ProxySQL当前生效的配置，包括 global_variables, mysql_servers, mysql_users, mysql_query_rules。无法直接修改这里的配置，必须要从下一层load进来。<br><strong>MEMORY</strong> 是平时在mysql命令行修改的 main 里头配置，可以认为是SQLite数据库在内存的镜像<br><strong>DISK / CONFIG FILE</strong> 持久存储的那份配置，一般在<code>$(DATADIR)/proxysql.db</code>，在重启的时候会从硬盘里加载。 <code>/etc/proxysql.cnf</code>文件只在第一次初始化的时候用到，完了后，如果要修改监听端口，还是需要在管理命令行里修改，再 save 到硬盘。</p>
<p>需要修改配置时，直接操作的是 MEMORAY，以下命令可用于加载或保存 <code>users</code>： （序号对应上图）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[1]: <span class="keyword">LOAD</span> MYSQL <span class="keyword">USERS</span> <span class="keyword">TO</span> RUNTIME / <span class="keyword">LOAD</span> MYSQL <span class="keyword">USERS</span> <span class="keyword">FROM</span> <span class="keyword">MEMORY</span>  <span class="comment">-- 常用</span></div><div class="line">[<span class="number">2</span>]: <span class="keyword">SAVE</span> MYSQL <span class="keyword">USERS</span> <span class="keyword">TO</span> <span class="keyword">MEMORY</span> / <span class="keyword">SAVE</span> MYSQL <span class="keyword">USERS</span> <span class="keyword">FROM</span> RUNTIME</div><div class="line">[<span class="number">3</span>]: <span class="keyword">LOAD</span> MYSQL <span class="keyword">USERS</span> <span class="keyword">TO</span> <span class="keyword">MEMORY</span> / <span class="keyword">LOAD</span> MYSQL <span class="keyword">USERS</span> <span class="keyword">FROM</span> DISK</div><div class="line">[<span class="number">4</span>]: <span class="keyword">SAVE</span> MYSQL <span class="keyword">USERS</span> <span class="keyword">TO</span> DISK /  <span class="keyword">SAVE</span> MYSQL <span class="keyword">USERS</span> <span class="keyword">FROM</span> <span class="keyword">MEMORY</span>    <span class="comment">-- 常用</span></div><div class="line">[<span class="number">5</span>]: <span class="keyword">LOAD</span> MYSQL <span class="keyword">USERS</span> <span class="keyword">FROM</span> CONFIG</div></pre></td></tr></table></figure></p>
<p>我比较习惯用 <code>TO</code>，记住往上层是 LOAD，往下层是 SAVE。</p>
<p>以下命令加载或保存<code>servers</code>:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">1</span>]: <span class="link">LOAD MYSQL SERVERS TO RUNTIME  -- 常用，让修改的配置生效</span></div><div class="line">[<span class="symbol">2</span>]: <span class="link">SAVE MYSQL SERVERS TO MEMORY</span></div><div class="line">[<span class="symbol">3</span>]: <span class="link">LOAD MYSQL SERVERS TO MEMORY</span></div><div class="line">[<span class="symbol">4</span>]: <span class="link">SAVE MYSQL SERVERS TO DISK     -- 常用，将修改的配置持久化</span></div><div class="line">[<span class="symbol">5</span>]: <span class="link">LOAD MYSQL SERVERS FROM CONFIG</span></div></pre></td></tr></table></figure></p>
<p>后面的使用方法也基本相同，一并列出。<br>以下命令加载或保存<code>query rules</code>:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[1]: <span class="keyword">load</span> mysql <span class="keyword">query</span> <span class="keyword">rules</span> <span class="keyword">to</span> run    <span class="comment">-- 常用</span></div><div class="line">[<span class="number">2</span>]: <span class="keyword">save</span> mysql <span class="keyword">query</span> <span class="keyword">rules</span> <span class="keyword">to</span> mem</div><div class="line">[<span class="number">3</span>]: <span class="keyword">load</span> mysql <span class="keyword">query</span> <span class="keyword">rules</span> <span class="keyword">to</span> mem</div><div class="line">[<span class="number">4</span>]: <span class="keyword">save</span> mysql <span class="keyword">query</span> <span class="keyword">rules</span> <span class="keyword">to</span> disk   <span class="comment">-- 常用</span></div><div class="line">[<span class="number">5</span>]: <span class="keyword">load</span> mysql <span class="keyword">query</span> <span class="keyword">rules</span> <span class="keyword">from</span> config</div></pre></td></tr></table></figure></p>
<p>以下命令加载或保存 <code>mysql variables</code>:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[1]: <span class="keyword">load</span> mysql <span class="keyword">variables</span> <span class="keyword">to</span> runtime</div><div class="line">[<span class="number">2</span>]: <span class="keyword">save</span> mysql <span class="keyword">variables</span> <span class="keyword">to</span> <span class="keyword">memory</span></div><div class="line">[<span class="number">3</span>]: <span class="keyword">load</span> mysql <span class="keyword">variables</span> <span class="keyword">to</span> <span class="keyword">memory</span></div><div class="line">[<span class="number">4</span>]: <span class="keyword">save</span> mysql <span class="keyword">variables</span> <span class="keyword">to</span> disk</div><div class="line">[<span class="number">5</span>]: <span class="keyword">load</span> mysql <span class="keyword">variables</span> <span class="keyword">from</span> config</div></pre></td></tr></table></figure></p>
<p>以下命令加载或保存<code>admin variables</code>:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[1]: <span class="keyword">load</span> <span class="keyword">admin</span> <span class="keyword">variables</span> <span class="keyword">to</span> runtime</div><div class="line">[<span class="number">2</span>]: <span class="keyword">save</span> <span class="keyword">admin</span> <span class="keyword">variables</span> <span class="keyword">to</span> <span class="keyword">memory</span></div><div class="line">[<span class="number">3</span>]: <span class="keyword">load</span> <span class="keyword">admin</span> <span class="keyword">variables</span> <span class="keyword">to</span> <span class="keyword">memory</span></div><div class="line">[<span class="number">4</span>]: <span class="keyword">save</span> <span class="keyword">admin</span> <span class="keyword">variables</span> <span class="keyword">to</span> disk</div><div class="line">[<span class="number">5</span>]: <span class="keyword">load</span> <span class="keyword">admin</span> <span class="keyword">variables</span> <span class="keyword">from</span> config</div></pre></td></tr></table></figure></p>
<p>下一篇文章将演示ProxySQL读写分离与分库的路由规则编写：<a href="http://seanlook.com/2017/04/17/mysql-proxysql-route-rw_split/">http://seanlook.com/2017/04/17/mysql-proxysql-route-rw_split/</a> </p>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ul>
<li><a href="https://severalnines.com/blog/mysql-load-balancing-proxysql-overview" target="_blank" rel="external">https://severalnines.com/blog/mysql-load-balancing-proxysql-overview</a></li>
<li><a href="https://github.com/sysown/proxysql/wiki" target="_blank" rel="external">https://github.com/sysown/proxysql/wiki</a></li>
<li><a href="http://www.techietown.info/2017/01/mysql-readwrite-splitting-proxysql/" target="_blank" rel="external">http://www.techietown.info/2017/01/mysql-readwrite-splitting-proxysql/</a></li>
</ul>
<hr>
<p>原文连接地址：<a href="http://seanlook.com/2017/04/10/mysql-proxysql-install-config/">http://seanlook.com/2017/04/10/mysql-proxysql-install-config/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ProxySQL是一个高性能的MySQL中间件，拥有强大的规则引擎。具有以下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连接池，而且是 &lt;a href=&quot;http://seanlook.com/2017/04/17/mysql-proxysql-multiplexing/&quot;&gt;mult
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="中间件" scheme="http://seanlook.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="proxysql" scheme="http://seanlook.com/tags/proxysql/"/>
    
  </entry>
  
  <entry>
    <title>清明闲扯</title>
    <link href="http://seanlook.com/2017/04/02/qingming-2017/"/>
    <id>http://seanlook.com/2017/04/02/qingming-2017/</id>
    <published>2017-04-02T08:32:49.000Z</published>
    <updated>2017-04-28T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个清明假期，没有做特意的安排，4月1日晚上的时候冒出个想法——去爬七娘山。后来考虑天太热，便作罢了，正好抽一点时间整理些近来的事情。</p>
<h2 id="关于博客"><a href="#关于博客" class="headerlink" title="** 关于博客"></a>** 关于博客</h2><p>很早在朋友圈看到 多说 要关闭的消息，不久后也收到了邮件。全国第一的评论系统，说倒就倒，到底是没有好的营收模式，看到网上一堆评论说挺惋惜的，但那么多用户评论数据在上面，价值可想而知，不应遭此地步。在2014年刚用 多说 的时候，就感觉到它后台基本上没有人在维护了，自身管理后台都有不少问题，提反馈也没响应。</p>
<p>选择网易云跟帖，把它替换掉了，并把以前的评论数据迁移了过来，就是人和人对不上号，以前那些网友找不到自己的评论，抱歉了。不过能用就行，还是多添点内容，也已经过了纠结样式主题的年纪了。有时候看到后台的评论，或者通过其它途径辛苦找到我的，给我了继续写博的动力。</p>
<p>再一个就是搜索功能，以前用的 swiftype 是在去年的时候，不免费了，只提供企业版。它提供的站内搜索引擎功能，十分强大，也很美观，后台管理能看到许多的分析数据，可是它偏偏就突然收费了，而且298$/m，不能接受。也是秉着能用的原则，装上了 hexo-generator-search 模块。</p>
<p>网站统计，现在是cnzz和百度站长的都在用，看了下每天还是有个400-600的独立访客，想想要整一个稍微过得去的 about 页面了。见这里 <a href="http://seanlook.com/about/">http://seanlook.com/about/</a> 。同时也才最近才加上leancloud访问量显示功能。</p>
<p>噢，对了，新加了个打赏的功能，孰知坚持写博不易，意思意思。<br> -- updated 2017-04-28 --<br> 把微信打赏改成了支付宝，这样方便知道对方是谁。</p>
<h2 id="关于职业"><a href="#关于职业" class="headerlink" title="** 关于职业"></a>** 关于职业</h2><p>本职工作呢，是一名 DBA 。上周末听香港MySQL用户组主席 Ivan Ma 讲，他们那么没有很清楚的把职位分为是 MySQL DBA 还是 Oracle DBA，他们许多都是不论什么类型的数据库，包括nosql，都得上。我对自身的定位也是，MySQL可以是看家本领，必须深入理解，熟悉它的周边生态圈，积累优化经验。但是像Redis,Mongo,HBase甚至ES这些都必须要有一定的了解，还有像python/go一两门拿得出手的开发语言。</p>
<p>相继前后有好几位同行通过微博、QQ、微信，找到我，请教些问题。有些可能我也并不能马上明确的回答，但是要么自己做个验证，也能很快有结论，要么提供一些建议、方向，或者一些风险点，总之尽我所能。一对一讨论，是能快速学习和加深理解非常有效的途径。</p>
<p>在叶老师知数堂的优化班里，进去之前自己还是有一定基础的，主要是查一查知识的盲点，认识一些行业内的圈子。所以在群里，基本上不参与无关话题的讨论，偶尔回复技术相关的，再者也真没那个闲工夫。</p>
<p>最近一直在处理一个矛盾——职业与工作。个人花工作时间来学习研究，与外部群体讨论，短时间内在工作上可能看不到效果。我们不像开发人员，开发有项目推动，我们基本上都是问题驱动，为了解决这个问题（无论是具体的，还是平台的，甚至架构的），当我们并没有处理经验的时候，往往需要了解和对比大量资料。但最后能有多少应用在工作中的，很难说。能解决一个问题，叫工作；解决好一个问题，叫职业。同样是解决，而且一般在任期内不会复发，显然后者对个人的投入和收获，都更大。</p>
<p>我们的DBA工作充斥了许多的表结构审核、修改线上业务数据，以及慢sql优化、隐患问题追踪等等，也一直在思考一种好的工具平台，但是这样一个数据库运维体系的建立，前期要投入的精力和时间可想而知，而另一边，日常有源源不断的琐事或者问题要处理，到底何为紧急？虽然现在大部分工作，组内几个人好像都做得过来，但说实在的，人肉运维以及效率，都有许多可以改进的地方。然而就是需要在众多繁琐运维事务中，找个时间把该做的平台先做好。</p>
<p>目前还是在摸索，并有些眉目了，开发工作看来也只能靠自己了……</p>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2017/04/02/qingming-2017/">http://seanlook.com/2017/04/02/qingming-2017/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个清明假期，没有做特意的安排，4月1日晚上的时候冒出个想法——去爬七娘山。后来考虑天太热，便作罢了，正好抽一点时间整理些近来的事情。&lt;/p&gt;
&lt;h2 id=&quot;关于博客&quot;&gt;&lt;a href=&quot;#关于博客&quot; class=&quot;headerlink&quot; title=&quot;** 关于博客&quot;&gt;
    
    </summary>
    
      <category term="Feel" scheme="http://seanlook.com/categories/Feel/"/>
    
    
      <category term="杂说" scheme="http://seanlook.com/tags/%E6%9D%82%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>一次艰辛的字符集转换历程 ACMUG分享</title>
    <link href="http://seanlook.com/2017/03/27/mysql-ppt-charset-conversion-acmug/"/>
    <id>http://seanlook.com/2017/03/27/mysql-ppt-charset-conversion-acmug/</id>
    <published>2017-03-27T13:32:49.000Z</published>
    <updated>2017-03-28T13:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文的ppt是3月25日在中国MySQL用户组2017深圳活动上，我所做的一个主题分享，关于实际生产使用mysql过程中与字符集有关的一些坑。</p>
<p>这个总结其实自己去年一直也想去做，前后花了2个多月的时间，最后所有库无痛完成迁移转化。在2017年二月中下旬的时候微信上请教周董（去哪儿周彦韦大师）一个问题，因为以前也聊过一些，所以他突然问我要不要在3月份的活动上做个主题分享。当时有点不敢想，毕竟之前2次有关培训都是在公司内部的，而这次对外的分享，且不说台下听众有牛人存在，演讲嘉宾里面可各个都是大师级别的，所以当时没有马上答应。过了两天，偶然想到关于字符集这个经历可以讲一讲，不是为了展示自己有多牛B，只是分享下整个问题的处理经验，放低姿态。列了个提纲发给了周董，10分钟不到周董说定了。向经理请示了下没问题，这下赶着鸭子都得上了……</p>
<p>毕竟第一次公开在这样的场合演讲，说不紧张肯定是假的，所以早早的就在准备ppt，一边回顾，一边画图。上阵前一天晚上还在对演示稿微调，并尽量控制时间。</p>
<p>闲话不多说，PPT奉上：</p>


	<div class="row">
	  <iframe src="http://nagland.github.io/viewer/web/viewer.html?val=http://7q5fot.com1.z0.glb.clouddn.com/mysql-ppt-charset-conversion-acmug-sean.pdf" style="width:100%; height:550px"></iframe>
	</div>



<p>IT大咖说有录视频：</p>
<ul>
<li><a href="http://www.itdks.com/dakashuo/detail/700" target="_blank" rel="external">http://www.itdks.com/dakashuo/detail/700</a></li>
</ul>
<p>后来自己复看了一下，没啥大毛病，内容都交代清楚了，就是感觉确实舞台经验，表述上还有待加强。</p>
<p>同时这里是当天的活动掠影，阅读原文可看视频：</p>
<ul>
<li>ACMUG 2017 Tech Tour 深圳站掠影 <a href="http://mp.weixin.qq.com/s/-QNRhnN0kBtLkiWVIUS-QQ" target="_blank" rel="external">http://mp.weixin.qq.com/s/-QNRhnN0kBtLkiWVIUS-QQ</a></li>
</ul>
<p>下方是中国MySQL用户组(ACMUG)的公众号，欢迎关注：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-acmug-wechat.jpg" alt="ACMUG"></p>
<hr>
<p>原文连接地址：<a href="http://seanlook.com/2017/03/27/mysql-ppt-charset-conversion-acmug/">http://seanlook.com/2017/03/27/mysql-ppt-charset-conversion-acmug/</a></p>
<hr>
<!--
<iframe src="https://www.slideshare.net/slideshow/embed_code/key/3HLJJcJmM9KLGT" width="900" height="512" frameborder="0" allowfullscreen></iframe>
<p>–&gt;</p>
-->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文的ppt是3月25日在中国MySQL用户组2017深圳活动上，我所做的一个主题分享，关于实际生产使用mysql过程中与字符集有关的一些坑。&lt;/p&gt;
&lt;p&gt;这个总结其实自己去年一直也想去做，前后花了2个多月的时间，最后所有库无痛完成迁移转化。在2017年二月中下旬的时候微
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="分享" scheme="http://seanlook.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>index merge 引起的死锁分析</title>
    <link href="http://seanlook.com/2017/03/11/mysql-index_merge-deadlock/"/>
    <id>http://seanlook.com/2017/03/11/mysql-index_merge-deadlock/</id>
    <published>2017-03-11T08:32:49.000Z</published>
    <updated>2017-03-11T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>在看线上一个 MySQL innodb status 时，发现有死锁信息，而且出现的频率还不低。于是分析了一下，把过程记录下来。</p>
<h2 id="1-概要"><a href="#1-概要" class="headerlink" title="1. 概要"></a>1. 概要</h2><p>表结构脱敏处理：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_mytb1 (</div><div class="line">  f_id <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  f_fid <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line">  f_sid <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line">  f_mode <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</div><div class="line">  f_read <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line">  f_xxx1 <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line">  f_xxx2 <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line">  f_wx_zone <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (f_id),</div><div class="line">  <span class="keyword">KEY</span> idx_sid (f_sid),</div><div class="line">  <span class="keyword">KEY</span> idx_fid (f_fid)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</div></pre></td></tr></table></figure></p>
<p>死锁信息：<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">LATEST DETECTED DEADLOCK</div><div class="line">------------------------</div><div class="line"><span class="number">2017</span><span class="number">-02</span><span class="number">-28</span> <span class="number">13</span>:<span class="number">58</span>:<span class="number">29</span> <span class="number">7</span>f25a3efd700</div><div class="line">*** (<span class="number">1</span>) TRANSACTION:</div><div class="line">TRANSACTION <span class="number">4907718431</span>, ACTIVE <span class="number">0.010</span> sec fetching rows</div><div class="line">mysql tables <span class="keyword">in</span> use <span class="number">3</span>, locked <span class="number">3</span></div><div class="line">LOCK WAIT <span class="number">154</span> lock struct(s), heap size <span class="number">30248</span>, <span class="number">10</span> row lock(s)</div><div class="line">LOCK BLOCKING MySQL thread id: <span class="number">13589250</span> block <span class="number">13589247</span></div><div class="line">MySQL thread id <span class="number">13589247</span>, OS thread handle <span class="number">0x7f25a17e3700</span>, query id <span class="number">27061926722</span> <span class="number">11.</span>xx<span class="number">.52</span>.xx ecweb Searching rows <span class="keyword">for</span> update</div><div class="line">UPDATE `d_db1`.`t_mytb1` <span class="keyword">SET</span> `f_read` = f_read+<span class="number">1</span> WHERE (f_fid=<span class="number">91243</span>) <span class="keyword">AND</span> (f_sid=<span class="number">100</span>) <span class="keyword">AND</span> (f_mode=<span class="comment">'浏览器')</span></div><div class="line">*** (<span class="number">1</span>) WAITING <span class="keyword">FOR</span> THIS LOCK <span class="keyword">TO</span> BE GRANTED:</div><div class="line">RECORD LOCKS <span class="built_in">space</span> id <span class="number">13288</span> page no <span class="number">375</span> n bits <span class="number">352</span> index `PRIMARY` of table `d_db1`.`t_mytb1` trx id <span class="number">4907718431</span> lock_mode X locks rec but <span class="keyword">not</span> gap waiting</div><div class="line">Record lock, heap no <span class="number">245</span> PHYSICAL RECORD: n_fields <span class="number">10</span>; compact format; info bits <span class="number">0</span></div><div class="line"> <span class="number">0</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">0000</span>a63b; <span class="built_in">asc</span>    ;;;</div><div class="line"> <span class="number">1</span>: <span class="built_in">len</span> <span class="number">6</span>; <span class="built_in">hex</span> <span class="number">0001246304</span>a7; <span class="built_in">asc</span>   $c  ;;</div><div class="line"> <span class="number">2</span>: <span class="built_in">len</span> <span class="number">7</span>; <span class="built_in">hex</span> <span class="number">7</span>f000ac0162428; <span class="built_in">asc</span>      $(;;</div><div class="line"> <span class="number">3</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">00016470</span>; <span class="built_in">asc</span>   dp;;</div><div class="line"> <span class="number">4</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">00000064</span>; <span class="built_in">asc</span>    d;;</div><div class="line"> <span class="number">5</span>: <span class="built_in">len</span> <span class="number">9</span>; <span class="built_in">hex</span> e6b58fe8a788e599a8; <span class="built_in">asc</span>          ;;</div><div class="line"> <span class="number">6</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">0000244</span>f; <span class="built_in">asc</span>   $O;;</div><div class="line"> <span class="number">7</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">0000007</span>c; <span class="built_in">asc</span>    |;;</div><div class="line"> <span class="number">8</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">00000000</span>; <span class="built_in">asc</span>     ;;</div><div class="line"> <span class="number">9</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">00000000</span>; <span class="built_in">asc</span>     ;;</div><div class="line"></div><div class="line">*** (<span class="number">2</span>) TRANSACTION:</div><div class="line">TRANSACTION <span class="number">4907718435</span>, ACTIVE <span class="number">0.007</span> sec fetching rows</div><div class="line">mysql tables <span class="keyword">in</span> use <span class="number">3</span>, locked <span class="number">3</span></div><div class="line"><span class="number">154</span> lock struct(s), heap size <span class="number">30248</span>, <span class="number">3</span> row lock(s)</div><div class="line">MySQL thread id <span class="number">13589250</span>, OS thread handle <span class="number">0x7f25a3efd700</span>, query id <span class="number">27061926757</span> <span class="number">11.</span>xx<span class="number">.104</span>.xxx ecweb Searching rows <span class="keyword">for</span> update</div><div class="line">UPDATE `d_db1`.`t_mytb1` <span class="keyword">SET</span> `f_read` = f_read+<span class="number">1</span> WHERE (f_fid=<span class="number">91248</span>) <span class="keyword">AND</span> (f_sid=<span class="number">100</span>) <span class="keyword">AND</span> (f_mode=<span class="comment">'浏览器')</span></div><div class="line">*** (<span class="number">2</span>) HOLDS THE LOCK(S):</div><div class="line">RECORD LOCKS <span class="built_in">space</span> id <span class="number">13288</span> page no <span class="number">375</span> n bits <span class="number">352</span> index `PRIMARY` of table `d_db1`.`t_mytb1` trx id <span class="number">4907718435</span> lock_mode X locks rec but <span class="keyword">not</span> gap</div><div class="line">Record lock, heap no <span class="number">245</span> PHYSICAL RECORD: n_fields <span class="number">10</span>; compact format; info bits <span class="number">0</span></div><div class="line"> <span class="number">0</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">0000</span>a63b; <span class="built_in">asc</span>    ;;;  -- <span class="number">42555</span></div><div class="line"> <span class="number">1</span>: <span class="built_in">len</span> <span class="number">6</span>; <span class="built_in">hex</span> <span class="number">0001246304</span>a7; <span class="built_in">asc</span>   $c  ;;  -- <span class="number">4905436327</span></div><div class="line"> <span class="number">2</span>: <span class="built_in">len</span> <span class="number">7</span>; <span class="built_in">hex</span> <span class="number">7</span>f000ac0162428; <span class="built_in">asc</span>      $(;;</div><div class="line"> <span class="number">3</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">00016470</span>; <span class="built_in">asc</span>   dp;;  -- <span class="number">91248</span></div><div class="line"> <span class="number">4</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">00000064</span>; <span class="built_in">asc</span>    d;;  -- <span class="number">100</span></div><div class="line"> <span class="number">5</span>: <span class="built_in">len</span> <span class="number">9</span>; <span class="built_in">hex</span> e6b58fe8a788e599a8; <span class="built_in">asc</span>          ;;</div><div class="line"> <span class="number">6</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">0000244</span>f; <span class="built_in">asc</span>   $O;;  -- <span class="number">9295</span></div><div class="line"> <span class="number">7</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">0000007</span>c; <span class="built_in">asc</span>    |;;  -- <span class="number">124</span></div><div class="line"> <span class="number">8</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">00000000</span>; <span class="built_in">asc</span>     ;;</div><div class="line"> <span class="number">9</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">00000000</span>; <span class="built_in">asc</span>     ;;</div><div class="line"></div><div class="line">*** (<span class="number">2</span>) WAITING <span class="keyword">FOR</span> THIS LOCK <span class="keyword">TO</span> BE GRANTED:</div><div class="line">RECORD LOCKS <span class="built_in">space</span> id <span class="number">13288</span> page no <span class="number">202</span> n bits <span class="number">1272</span> index `idx_sid` of table `d_db1`.`t_mytb1` trx id <span class="number">4907718435</span> lock_mode X locks rec but <span class="keyword">not</span> gap waiting</div><div class="line">Record lock, heap no <span class="number">705</span> PHYSICAL RECORD: n_fields <span class="number">2</span>; compact format; info bits <span class="number">0</span></div><div class="line"> <span class="number">0</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">00000064</span>; <span class="built_in">asc</span>    d;;  -- <span class="number">100</span></div><div class="line"> <span class="number">1</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">0000</span>a633; <span class="built_in">asc</span>    <span class="number">3</span>;;  -- <span class="number">42547</span></div><div class="line"></div><div class="line">*** WE ROLL BACK TRANSACTION (<span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<p>乍一看很奇怪，tx1和tx2 两个 UPDATE 各自以 f_fid 为条件更新的记录互不影响才对，即使 91243，91248 两个值有可能出现在同一条数据上（因为f_fid上是二级索引），那顶多也就是个更新锁等待，谁后来谁等待，怎么会出现互相争用对方已持有的锁，被死锁检测机制捕获？</p>
<p>当然,把 update 语句拿到数据库中 EXPLAIN 一下就可以看出端倪。这里不妨先分析一下输出的锁情况：</p>
<p><strong>先看 Tx2 (对应trx id 4907718435)</strong> :  </p>
<ol>
<li><p><code>RECORD LOCKS space id 13288 page no 375 n bits 352</code> 告诉我们是表空间id 13288 (可从 <code>information_schema.INNODB_SYS_DATAFILES</code> 查到对应ibd文件) 即 t_mytb1 表，第 375 号页面的 245 位置的记录被锁，并且是 idx PRIMARY 上的记录锁（注：本实例隔离级别为RC）。 Tx2正持有这把记录锁。<br>因为是聚集索引，显示了完整记录</p>
<figure class="highlight ldif"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">0</span>: 主键f_id=42555</div><div class="line"><span class="attribute">1</span>: DB_TRX_ID = 4905436327</div><div class="line"><span class="attribute">2</span>: DB_ROLL_PTR指向undo记录的地址</div><div class="line"><span class="attribute">3</span>: f_fid=91248</div><div class="line"><span class="attribute">4</span>: f_sid=100</div><div class="line">   ...</div></pre></td></tr></table></figure>
</li>
<li><p>然而Tx2还在等待一个记录锁（lock_mode X locks rec but not gap waiting），但这把锁来自二级索引 <code>idx_sid</code> 索引上的记录锁。在 RC 级别下没有GAP lock，行锁除了加在符合条件的二级索引 f_sid=100 上外，还会对主键加record lock。<br>二级索引值：</p>
<a id="more"></a>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">0</span>: f_sid=100</div><div class="line"><span class="attribute">1</span>: 主键f_id=42547</div></pre></td></tr></table></figure>
</li>
</ol>
<p>明显它们是两条不同的记录。</p>
<p><strong>再看 Tx1（对应trx id 4907718431）</strong><br>Tx1 事务等待的锁，就是上面 Tx2 已持有的记录锁 f_id=42555 。但是由于输出的关系，没有看到它持有的锁。既然这里出现死锁，可以推断，Tx1执行update时，已获得 f_id=42547 的记录锁，这样才导致死锁，否则的话只会出现一方等待。示意图如下：</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-secondary-index-merge.png" alt=""></p>
<p>InnoDB最终选择回滚 Tx2 是可以理解的 —— 它只获得了一个记录锁，资源占用最少。目前还无法解释的是关于锁数量这一部分：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql tables in <span class="keyword">use</span> <span class="number">3</span>, <span class="keyword">locked</span> <span class="number">3</span></div><div class="line"><span class="number">154</span> <span class="keyword">lock</span> <span class="keyword">struct</span>(s), <span class="keyword">heap</span> <span class="keyword">size</span> <span class="number">30248</span>, <span class="number">3</span> <span class="keyword">row</span> <span class="keyword">lock</span>(s)</div></pre></td></tr></table></figure></p>
<h2 id="2-死锁产生的原因-——-index-merge"><a href="#2-死锁产生的原因-——-index-merge" class="headerlink" title="2. 死锁产生的原因 —— index merge"></a>2. 死锁产生的原因 —— index merge</h2><p>上面任何一个 update 的explain结果：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-index_merge-deadlock.png" alt=""></p>
<p>可以看到 EXTRA 列 <code>Using intersect(idx_sid, idx_fid)</code>。</p>
<p>索引合并是 5.0 就引入的一种优化手段，意指在查询语句里，可以在一个表上使用多个索引，同时扫描，最后进行结果合并。上面的例子里，条件 <code>f_fid=xxx and f_sid=xxx</code>，因为表上有 <em>f_fid</em> 和 <em>f_sid</em> 两个单列索引，优化器在成本模型里进行估算，认为一边使用 f_fid=91243 索引扫描，一边使用 f_sid=100 索引扫描，然后对两个结果集取交集，会更快。结果在高并发更新情况下：</p>
<ul>
<li>Tx2通过 f_fid 索引锁住了记录 42555，欲通过 f_sid 锁定另一条记录 42547</li>
<li>Tx1 已通过 f_sid 锁定 42547，欲通过 f_fid 锁住记录42555</li>
<li>死锁发生</li>
</ul>
<h3 id="关于索引合并"><a href="#关于索引合并" class="headerlink" title="关于索引合并"></a>关于索引合并</h3><p>intersection 只是 索引合并中的一种，还有 union, sort_union 。可以用到  index_merge 是有比较苛刻的条件。</p>
<ol>
<li>首先是 Range 优先(&gt;5.6.7)。比如 key1=1 or (key1=2 and key2=3)，其中key1是可以转化成 range scan 的，不会使用 index merge union</li>
<li>其次，Intersect和Union要符合 ROR，即 Rowid-Ordered-Retrival：<blockquote>
<p>Intersect和Union都需要使用的索引是ROR的，也就时ROWID ORDERED，即针对不同的索引扫描出来的数据必须是同时按照ROWID排序的，这里的 ROWID其实也就是InnoDB的主键(如果不定义主键，InnoDB会隐式添加ROWID列作为主键)。只有每个索引是ROR的，才能进行归并排序，你懂的。 当然你可能会有疑惑，查不记录后内部进行一次sort不一样么，何必必须要ROR呢，不错，所以有了SORT-UNION。SORT-UNION就是每个非ROR的索引 排序后再进行Merge<br> – 来自 <a href="http://www.cnblogs.com/nocode/archive/2013/01/28/2880654.html" target="_blank" rel="external">http://www.cnblogs.com/nocode/archive/2013/01/28/2880654.html</a></p>
</blockquote>
</li>
</ol>
<p>像 <em>key1=v1 or key2=v2</em> ， key1与key2是单列索引，并且无其它索引可用，就有可能看到 Using Union(xx,xxx) 。更多内容可见参考链接。</p>
<h2 id="3-解决-——-加联合索引"><a href="#3-解决-——-加联合索引" class="headerlink" title="3. 解决 —— 加联合索引"></a>3. 解决 —— 加联合索引</h2><p>解决这个死锁可能你也想到了，添加联合索引 <code>idx_fid_sid(f_fid, f_sid)</code>，这样一来查询会选择这一个索引，至于 idx_sid 这个单列索引还需不需要，看业务场景。</p>
<p>另外，如果懂点业务的话，会发现这个更新之所以这么频繁，实际上是一个阅读量计数的功能，放到redis里可极大的提高并发能力，定时持久化到mysql表。</p>
<p>最后提一句 index_merge 是有选项可以关闭的：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select @@optimizer_switch;</div><div class="line">index_merge=<span class="keyword">on</span>,index_merge_union=<span class="keyword">on</span>,index_merge_sort_union=<span class="keyword">on</span>,index_merge_intersection=<span class="keyword">on</span> ...</div></pre></td></tr></table></figure></p>
<p>如果优化器选择了index_merge，一般是索引没建好，我看不让它使用比较更好。</p>
<p><strong> 参考文章 </strong>  </p>
<ol>
<li><a href="http://www.orczhou.com/index.php/2013/01/mysql-source-code-query-optimization-index-merge/" target="_blank" rel="external">MySQL优化器：index merge介绍</a></li>
<li><a href="http://hidba.org/?p=1065" target="_blank" rel="external">MySQL update use index merge(Using intersect) increase chances for deadlock</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.6/en/index-merge-optimization.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/en/index-merge-optimization.html</a></li>
</ol>
<hr>
<p>  原文链接地址：<a href="http://seanlook.com/2017/03/11/mysql-index_merge-deadlock/">http://seanlook.com/2017/03/11/mysql-index_merge-deadlock/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在看线上一个 MySQL innodb status 时，发现有死锁信息，而且出现的频率还不低。于是分析了一下，把过程记录下来。&lt;/p&gt;
&lt;h2 id=&quot;1-概要&quot;&gt;&lt;a href=&quot;#1-概要&quot; class=&quot;headerlink&quot; title=&quot;1. 概要&quot;&gt;&lt;/a&gt;1. 概要&lt;/h2&gt;&lt;p&gt;表结构脱敏处理：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; t_mytb1 (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  f_id &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  f_fid &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  f_sid &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  f_mode &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  f_read &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  f_xxx1 &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  f_xxx2 &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  f_wx_zone &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  PRIMARY &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; (f_id),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; idx_sid (f_sid),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; idx_fid (f_fid)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;) &lt;span class=&quot;keyword&quot;&gt;ENGINE&lt;/span&gt;=&lt;span class=&quot;keyword&quot;&gt;InnoDB&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;CHARSET&lt;/span&gt;=utf8mb4;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;死锁信息：&lt;br&gt;&lt;figure class=&quot;highlight vbscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;LATEST DETECTED DEADLOCK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;------------------------&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2017&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-02&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-28&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;58&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;f25a3efd700&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*** (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) TRANSACTION:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;TRANSACTION &lt;span class=&quot;number&quot;&gt;4907718431&lt;/span&gt;, ACTIVE &lt;span class=&quot;number&quot;&gt;0.010&lt;/span&gt; sec fetching rows&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mysql tables &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; use &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, locked &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;LOCK WAIT &lt;span class=&quot;number&quot;&gt;154&lt;/span&gt; lock struct(s), heap size &lt;span class=&quot;number&quot;&gt;30248&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; row lock(s)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;LOCK BLOCKING MySQL thread id: &lt;span class=&quot;number&quot;&gt;13589250&lt;/span&gt; block &lt;span class=&quot;number&quot;&gt;13589247&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;MySQL thread id &lt;span class=&quot;number&quot;&gt;13589247&lt;/span&gt;, OS thread handle &lt;span class=&quot;number&quot;&gt;0x7f25a17e3700&lt;/span&gt;, query id &lt;span class=&quot;number&quot;&gt;27061926722&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11.&lt;/span&gt;xx&lt;span class=&quot;number&quot;&gt;.52&lt;/span&gt;.xx ecweb Searching rows &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; update&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;UPDATE `d_db1`.`t_mytb1` &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; `f_read` = f_read+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; WHERE (f_fid=&lt;span class=&quot;number&quot;&gt;91243&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; (f_sid=&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; (f_mode=&lt;span class=&quot;comment&quot;&gt;&#39;浏览器&#39;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*** (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) WAITING &lt;span class=&quot;keyword&quot;&gt;FOR&lt;/span&gt; THIS LOCK &lt;span class=&quot;keyword&quot;&gt;TO&lt;/span&gt; BE GRANTED:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RECORD LOCKS &lt;span class=&quot;built_in&quot;&gt;space&lt;/span&gt; id &lt;span class=&quot;number&quot;&gt;13288&lt;/span&gt; page no &lt;span class=&quot;number&quot;&gt;375&lt;/span&gt; n bits &lt;span class=&quot;number&quot;&gt;352&lt;/span&gt; index `PRIMARY` of table `d_db1`.`t_mytb1` trx id &lt;span class=&quot;number&quot;&gt;4907718431&lt;/span&gt; lock_mode X locks rec but &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; gap waiting&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Record lock, heap no &lt;span class=&quot;number&quot;&gt;245&lt;/span&gt; PHYSICAL RECORD: n_fields &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; compact format; info bits &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0000&lt;/span&gt;a63b; &lt;span class=&quot;built_in&quot;&gt;asc&lt;/span&gt;    ;;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0001246304&lt;/span&gt;a7; &lt;span class=&quot;built_in&quot;&gt;asc&lt;/span&gt;   $c  ;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;f000ac0162428; &lt;span class=&quot;built_in&quot;&gt;asc&lt;/span&gt;      $(;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00016470&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;asc&lt;/span&gt;   dp;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00000064&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;asc&lt;/span&gt;    d;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;hex&lt;/span&gt; e6b58fe8a788e599a8; &lt;span class=&quot;built_in&quot;&gt;asc&lt;/span&gt;          ;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0000244&lt;/span&gt;f; &lt;span class=&quot;built_in&quot;&gt;asc&lt;/span&gt;   $O;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0000007&lt;/span&gt;c; &lt;span class=&quot;built_in&quot;&gt;asc&lt;/span&gt;    |;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00000000&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;asc&lt;/span&gt;     ;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00000000&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;asc&lt;/span&gt;     ;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*** (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) TRANSACTION:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;TRANSACTION &lt;span class=&quot;number&quot;&gt;4907718435&lt;/span&gt;, ACTIVE &lt;span class=&quot;number&quot;&gt;0.007&lt;/span&gt; sec fetching rows&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mysql tables &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; use &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, locked &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;154&lt;/span&gt; lock struct(s), heap size &lt;span class=&quot;number&quot;&gt;30248&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; row lock(s)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;MySQL thread id &lt;span class=&quot;number&quot;&gt;13589250&lt;/span&gt;, OS thread handle &lt;span class=&quot;number&quot;&gt;0x7f25a3efd700&lt;/span&gt;, query id &lt;span class=&quot;number&quot;&gt;27061926757&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11.&lt;/span&gt;xx&lt;span class=&quot;number&quot;&gt;.104&lt;/span&gt;.xxx ecweb Searching rows &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; update&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;UPDATE `d_db1`.`t_mytb1` &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; `f_read` = f_read+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; WHERE (f_fid=&lt;span class=&quot;number&quot;&gt;91248&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; (f_sid=&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; (f_mode=&lt;span class=&quot;comment&quot;&gt;&#39;浏览器&#39;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*** (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) HOLDS THE LOCK(S):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RECORD LOCKS &lt;span class=&quot;built_in&quot;&gt;space&lt;/span&gt; id &lt;span class=&quot;number&quot;&gt;13288&lt;/span&gt; page no &lt;span class=&quot;number&quot;&gt;375&lt;/span&gt; n bits &lt;span class=&quot;number&quot;&gt;352&lt;/span&gt; index `PRIMARY` of table `d_db1`.`t_mytb1` trx id &lt;span class=&quot;number&quot;&gt;4907718435&lt;/span&gt; lock_mode X locks rec but &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; gap&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Record lock, heap no &lt;span class=&quot;number&quot;&gt;245&lt;/span&gt; PHYSICAL RECORD: n_fields &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; compact format; info bits &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0000&lt;/span&gt;a63b; &lt;span class=&quot;built_in&quot;&gt;asc&lt;/span&gt;    ;;;  -- &lt;span class=&quot;number&quot;&gt;42555&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0001246304&lt;/span&gt;a7; &lt;span class=&quot;built_in&quot;&gt;asc&lt;/span&gt;   $c  ;;  -- &lt;span class=&quot;number&quot;&gt;4905436327&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;f000ac0162428; &lt;span class=&quot;built_in&quot;&gt;asc&lt;/span&gt;      $(;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00016470&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;asc&lt;/span&gt;   dp;;  -- &lt;span class=&quot;number&quot;&gt;91248&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00000064&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;asc&lt;/span&gt;    d;;  -- &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;hex&lt;/span&gt; e6b58fe8a788e599a8; &lt;span class=&quot;built_in&quot;&gt;asc&lt;/span&gt;          ;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0000244&lt;/span&gt;f; &lt;span class=&quot;built_in&quot;&gt;asc&lt;/span&gt;   $O;;  -- &lt;span class=&quot;number&quot;&gt;9295&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0000007&lt;/span&gt;c; &lt;span class=&quot;built_in&quot;&gt;asc&lt;/span&gt;    |;;  -- &lt;span class=&quot;number&quot;&gt;124&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00000000&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;asc&lt;/span&gt;     ;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00000000&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;asc&lt;/span&gt;     ;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*** (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) WAITING &lt;span class=&quot;keyword&quot;&gt;FOR&lt;/span&gt; THIS LOCK &lt;span class=&quot;keyword&quot;&gt;TO&lt;/span&gt; BE GRANTED:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RECORD LOCKS &lt;span class=&quot;built_in&quot;&gt;space&lt;/span&gt; id &lt;span class=&quot;number&quot;&gt;13288&lt;/span&gt; page no &lt;span class=&quot;number&quot;&gt;202&lt;/span&gt; n bits &lt;span class=&quot;number&quot;&gt;1272&lt;/span&gt; index `idx_sid` of table `d_db1`.`t_mytb1` trx id &lt;span class=&quot;number&quot;&gt;4907718435&lt;/span&gt; lock_mode X locks rec but &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; gap waiting&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Record lock, heap no &lt;span class=&quot;number&quot;&gt;705&lt;/span&gt; PHYSICAL RECORD: n_fields &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; compact format; info bits &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00000064&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;asc&lt;/span&gt;    d;;  -- &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0000&lt;/span&gt;a633; &lt;span class=&quot;built_in&quot;&gt;asc&lt;/span&gt;    &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;;  -- &lt;span class=&quot;number&quot;&gt;42547&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*** WE ROLL BACK TRANSACTION (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;乍一看很奇怪，tx1和tx2 两个 UPDATE 各自以 f_fid 为条件更新的记录互不影响才对，即使 91243，91248 两个值有可能出现在同一条数据上（因为f_fid上是二级索引），那顶多也就是个更新锁等待，谁后来谁等待，怎么会出现互相争用对方已持有的锁，被死锁检测机制捕获？&lt;/p&gt;
&lt;p&gt;当然,把 update 语句拿到数据库中 EXPLAIN 一下就可以看出端倪。这里不妨先分析一下输出的锁情况：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;先看 Tx2 (对应trx id 4907718435)&lt;/strong&gt; :  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;RECORD LOCKS space id 13288 page no 375 n bits 352&lt;/code&gt; 告诉我们是表空间id 13288 (可从 &lt;code&gt;information_schema.INNODB_SYS_DATAFILES&lt;/code&gt; 查到对应ibd文件) 即 t_mytb1 表，第 375 号页面的 245 位置的记录被锁，并且是 idx PRIMARY 上的记录锁（注：本实例隔离级别为RC）。 Tx2正持有这把记录锁。&lt;br&gt;因为是聚集索引，显示了完整记录&lt;/p&gt;
&lt;figure class=&quot;highlight ldif&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;0&lt;/span&gt;: 主键f_id=42555&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;1&lt;/span&gt;: DB_TRX_ID = 4905436327&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;2&lt;/span&gt;: DB_ROLL_PTR指向undo记录的地址&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;3&lt;/span&gt;: f_fid=91248&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;4&lt;/span&gt;: f_sid=100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   ...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然而Tx2还在等待一个记录锁（lock_mode X locks rec but not gap waiting），但这把锁来自二级索引 &lt;code&gt;idx_sid&lt;/code&gt; 索引上的记录锁。在 RC 级别下没有GAP lock，行锁除了加在符合条件的二级索引 f_sid=100 上外，还会对主键加record lock。&lt;br&gt;二级索引值：&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="mysql优化" scheme="http://seanlook.com/tags/mysql%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>MySQL根据离线binlog快速“闪回”</title>
    <link href="http://seanlook.com/2017/03/03/mysql-flashback_use_purged-binlog/"/>
    <id>http://seanlook.com/2017/03/03/mysql-flashback_use_purged-binlog/</id>
    <published>2017-03-03T08:32:49.000Z</published>
    <updated>2017-03-03T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天突然有个客户说误操作，自己删除了大量数据，CTO直接将我拉到一个讨论组里，说要帮他们恢复数据。他们自己挖的坑，打算让开发那边根据业务日志去恢复，被告知只记录的删除主键这样的信息，物理删除，无能为力。</p>
<p>上服务器看了下记录的日志，发现好几台上面都有被误删的记录输出。阿里RDS虽然可以克隆一个恢复到删除时间点前的实例，但这散落的几万个id找起来费力，还有就是几个表之间关联的数据也要恢复，觉得麻烦。</p>
<p>想到 MySQL 的闪回方案。以前看过好几篇相关文章，甚至差点自己用python撸一个来解析binlog，反转得到回滚sql，实在没空，这下要急用了。赶紧找了下网上“现成的方案”。</p>
<p>正文开始</p>
<hr>
<p>MySQL（含阿里RDS）快速闪回可以说是对数据库误操作的后悔药，flashback功能可以将数据库返回到误操作之前。但是即使oracle数据库也只支持短时间内的闪回。</p>
<p>网上现有开源的MySQL闪回实现，原理都是解析binlog，生成反向sql: (必须为row模式)</p>
<ol>
<li>对于 delete 操作，生成insert （DELETE_ROWS_EVENT）</li>
<li>对于 update 操作，交换binlog里面值的顺序 （UPDATE_ROWS_EVENT）</li>
<li>对于 insert 操作，反向生成delete （WRITE_ROWS_EVENT）</li>
<li>对于多个event，要逆向生成sql</li>
</ol>
<p>开源实现：</p>
<ul>
<li><a href="https://github.com/58daojia-dba/mysqlbinlog_flashback" target="_blank" rel="external">https://github.com/58daojia-dba/mysqlbinlog_flashback</a></li>
<li><a href="https://github.com/danfengcao/binlog2sql/" target="_blank" rel="external">https://github.com/danfengcao/binlog2sql/</a></li>
</ul>
<p>上面两种实现方式，都是通过 python-mysql-replication 包，模拟出原库的一个从库，然后 <code>show binary logs</code> 来获取binlog，发起同步binlog的请求，再解析EVENT。但是阿里云 RDS 的binlog在同步给从库之后，<strong> 很快就被 purge 掉了 </strong>。如果要恢复 <strong> 昨天</strong> 的 <strong> 部分数据 </strong>，两种方案都是拿不到binlog的。也就是闪回的时间有限。</p>
<p>还有一些比较简单的实现，就是解析 binlog 物理文件，实现回滚，如 <code>binlog-rollback.pl</code> ，试过，但是速度太慢。</p>
<p>为了不影响速度，又想使用比较成熟的闪回方案，我们可以这样做：</p>
<ol>
<li>借助一个自建的 mysqld 实例，将已purge掉的binlog拷贝到该实例的目录下</li>
<li>在自建实例里，提前创建好需要恢复的表（结构），因为工具需要连接上来从 <code>information_schema.columns</code> 获取元数据信息</li>
<li>拷贝的时候，可以替换掉mysql实例自己的binlog文件名，保持连续</li>
<li>可能要修改 <code>mysql-bin.index</code>，确保文件名还能被mysqld识别到</li>
<li>重启mysql实例，<code>show binary logs</code> 看一下是否在列表里面</li>
<li>接下来就可以使用上面任何一种工具，模拟从库，指定一个binlog文件，开始时间，结束时间，得到回滚SQL</li>
<li>再根据业务逻辑，筛选出需要的sql</li>
</ol>
<a id="more"></a>
<p>总之就是借助另外一个mysql，把binlog event传输过来。温馨提示：</p>
<ol>
<li>两个实例间版本不要跨度太大</li>
<li>注意文件权限</li>
<li>如果原库开启了gtid，这个自建实例也要开启gtid</li>
</ol>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">python mysqlbinlog_back.py --host=<span class="string">"localhost"</span> --username=<span class="string">"ecuser"</span> --password=<span class="string">"ecuser"</span> --port=<span class="number">3306</span> \</div><div class="line">--schema=dbname --tables=<span class="string">"t_xx1,t_xx2,t_xx3"</span> -S <span class="string">"mysql-bin.000019"</span> -E <span class="string">"2017-03-02 13:00:00"</span> -N <span class="string">"2017-03-02 14:09:00"</span> -I -U</div><div class="line"></div><div class="line">===log will also  write to .//mysqlbinlog_flashback.log===</div><div class="line">parameter=&#123;<span class="string">'start_binlog_file'</span>: <span class="string">'mysql-bin.000019'</span>, <span class="string">'stream'</span>: <span class="keyword">None</span>, <span class="string">'keep_data'</span>: <span class="keyword">True</span>,</div><div class="line"> <span class="string">'file'</span>: &#123;<span class="string">'data_create'</span>: <span class="keyword">None</span>, <span class="string">'flashback'</span>: <span class="keyword">None</span>, <span class="string">'data'</span>: <span class="keyword">None</span>&#125;, <span class="string">'add_schema_name'</span>: <span class="keyword">False</span>, <span class="string">'start_time'</span>: <span class="keyword">None</span>, <span class="string">'keep_current_data'</span>: <span class="keyword">False</span>, <span class="string">'start_to_timestamp'</span>: <span class="number">1488430800</span>,</div><div class="line"> <span class="string">'mysql_setting'</span>: &#123;<span class="string">'passwd'</span>: <span class="string">'ecuser'</span>, <span class="string">'host'</span>: <span class="string">'localhost'</span>, <span class="string">'charset'</span>: <span class="string">'utf8'</span>, <span class="string">'port'</span>: <span class="number">3306</span>, <span class="string">'user'</span>: <span class="string">'ecuser'</span>&#125;,</div><div class="line"> <span class="string">'table_name'</span>: <span class="string">'t_xx1,t_xx2,t_xx3'</span>, <span class="string">'skip_delete'</span>: <span class="keyword">False</span>, <span class="string">'schema'</span>: <span class="string">'dbname'</span>, <span class="string">'stat'</span>: &#123;<span class="string">'flash_sql'</span>: &#123;&#125;&#125;,</div><div class="line"> <span class="string">'table_name_array'</span>: [<span class="string">'t_xx1'</span>, <span class="string">'t_xx2'</span>, <span class="string">'t_xx3'</span>],</div><div class="line"> <span class="string">'one_binlog_file'</span>: <span class="keyword">False</span>, <span class="string">'output_file_path'</span>: <span class="string">'./log'</span>, <span class="string">'start_position'</span>: <span class="number">4</span>, <span class="string">'skip_update'</span>: <span class="keyword">True</span>,</div><div class="line"> <span class="string">'dump_event'</span>: <span class="keyword">False</span>, <span class="string">'end_to_timestamp'</span>: <span class="number">1488434940</span>, <span class="string">'skip_insert'</span>: <span class="keyword">True</span>, <span class="string">'schema_array'</span>: [<span class="string">'dbname'</span>]</div><div class="line">&#125;</div><div class="line">scan <span class="number">10000</span> events ....<span class="keyword">from</span> binlogfile=mysql-bin<span class="number">.000019</span>,timestamp=<span class="number">2017</span><span class="number">-03</span><span class="number">-02</span>T11:<span class="number">42</span>:<span class="number">14</span></div><div class="line">scan <span class="number">20000</span> events ....<span class="keyword">from</span> binlogfile=mysql-bin<span class="number">.000019</span>,timestamp=<span class="number">2017</span><span class="number">-03</span><span class="number">-02</span>T11:<span class="number">42</span>:<span class="number">29</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>提示：<br>binlog为ROW格式，dml影响的每一行都会记录两个event：Table_map和Row_log。而table_map里面的table_id并不会影响它在哪个实例上应用，这个id可以认为是逻辑上，记录表结构版本的机制 —— 当它在 table_definition_cache 没有找到表定义时，id自增1，分配给要记录到binlog的表。</p>
<p><strong>mysqlbinlog_back.py 使用经验</strong> ：</p>
<ul>
<li>务必指定库名、表明，开始的binlog文件名，起始时间，结束时间。可以加快scan的速度。</li>
<li>根据恢复的需要，选择 -I, -U, -D，指定回滚哪些类型的操作。</li>
<li>如果只是恢复部分表数据（非完全闪回），做不到关联表的正确恢复。比如需要恢复delete数据，但无法恢复业务里因为delete引起其它表更新的数据，除非完全闪回。</li>
<li>不支持表字段是 enum 类型的，比如 t_xx3 的f_do_type字段。可以把自建实例上的enum定义改成int。</li>
</ul>
<p><strong>参考</strong></p>
<ol>
<li><a href="http://dinglin.iteye.com/blog/1539167" target="_blank" rel="external">http://dinglin.iteye.com/blog/1539167</a></li>
<li><a href="http://www.penglixun.com/tech/database/mysql_flashback_feature.html/comment-page-1#comment-1207998" target="_blank" rel="external">http://www.penglixun.com/tech/database/mysql_flashback_feature.html/comment-page-1#comment-1207998</a></li>
<li><a href="http://www.cnblogs.com/yuyue2014/p/3721172.html" target="_blank" rel="external">http://www.cnblogs.com/yuyue2014/p/3721172.html</a></li>
</ol>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2017/03/03/mysql-flashback_use_purged-binlog/">http://seanlook.com/2017/03/03/mysql-flashback_use_purged-binlog/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天突然有个客户说误操作，自己删除了大量数据，CTO直接将我拉到一个讨论组里，说要帮他们恢复数据。他们自己挖的坑，打算让开发那边根据业务日志去恢复，被告知只记录的删除主键这样的信息，物理删除，无能为力。&lt;/p&gt;
&lt;p&gt;上服务器看了下记录的日志，发现好几台上面都有被误删的记录输出。阿里RDS虽然可以克隆一个恢复到删除时间点前的实例，但这散落的几万个id找起来费力，还有就是几个表之间关联的数据也要恢复，觉得麻烦。&lt;/p&gt;
&lt;p&gt;想到 MySQL 的闪回方案。以前看过好几篇相关文章，甚至差点自己用python撸一个来解析binlog，反转得到回滚sql，实在没空，这下要急用了。赶紧找了下网上“现成的方案”。&lt;/p&gt;
&lt;p&gt;正文开始&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;MySQL（含阿里RDS）快速闪回可以说是对数据库误操作的后悔药，flashback功能可以将数据库返回到误操作之前。但是即使oracle数据库也只支持短时间内的闪回。&lt;/p&gt;
&lt;p&gt;网上现有开源的MySQL闪回实现，原理都是解析binlog，生成反向sql: (必须为row模式)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于 delete 操作，生成insert （DELETE_ROWS_EVENT）&lt;/li&gt;
&lt;li&gt;对于 update 操作，交换binlog里面值的顺序 （UPDATE_ROWS_EVENT）&lt;/li&gt;
&lt;li&gt;对于 insert 操作，反向生成delete （WRITE_ROWS_EVENT）&lt;/li&gt;
&lt;li&gt;对于多个event，要逆向生成sql&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;开源实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/58daojia-dba/mysqlbinlog_flashback&quot;&gt;https://github.com/58daojia-dba/mysqlbinlog_flashback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/danfengcao/binlog2sql/&quot;&gt;https://github.com/danfengcao/binlog2sql/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面两种实现方式，都是通过 python-mysql-replication 包，模拟出原库的一个从库，然后 &lt;code&gt;show binary logs&lt;/code&gt; 来获取binlog，发起同步binlog的请求，再解析EVENT。但是阿里云 RDS 的binlog在同步给从库之后，&lt;strong&gt; 很快就被 purge 掉了 &lt;/strong&gt;。如果要恢复 &lt;strong&gt; 昨天&lt;/strong&gt; 的 &lt;strong&gt; 部分数据 &lt;/strong&gt;，两种方案都是拿不到binlog的。也就是闪回的时间有限。&lt;/p&gt;
&lt;p&gt;还有一些比较简单的实现，就是解析 binlog 物理文件，实现回滚，如 &lt;code&gt;binlog-rollback.pl&lt;/code&gt; ，试过，但是速度太慢。&lt;/p&gt;
&lt;p&gt;为了不影响速度，又想使用比较成熟的闪回方案，我们可以这样做：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;借助一个自建的 mysqld 实例，将已purge掉的binlog拷贝到该实例的目录下&lt;/li&gt;
&lt;li&gt;在自建实例里，提前创建好需要恢复的表（结构），因为工具需要连接上来从 &lt;code&gt;information_schema.columns&lt;/code&gt; 获取元数据信息&lt;/li&gt;
&lt;li&gt;拷贝的时候，可以替换掉mysql实例自己的binlog文件名，保持连续&lt;/li&gt;
&lt;li&gt;可能要修改 &lt;code&gt;mysql-bin.index&lt;/code&gt;，确保文件名还能被mysqld识别到&lt;/li&gt;
&lt;li&gt;重启mysql实例，&lt;code&gt;show binary logs&lt;/code&gt; 看一下是否在列表里面&lt;/li&gt;
&lt;li&gt;接下来就可以使用上面任何一种工具，模拟从库，指定一个binlog文件，开始时间，结束时间，得到回滚SQL&lt;/li&gt;
&lt;li&gt;再根据业务逻辑，筛选出需要的sql&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>关于MySQL自增主键的几点问题（下）</title>
    <link href="http://seanlook.com/2017/02/17/mysql-autoincrement_2/"/>
    <id>http://seanlook.com/2017/02/17/mysql-autoincrement_2/</id>
    <published>2017-02-17T08:32:49.000Z</published>
    <updated>2017-02-17T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="AUTO-INC-waiting-锁等待"><a href="#AUTO-INC-waiting-锁等待" class="headerlink" title="AUTO-INC waiting 锁等待"></a>AUTO-INC waiting 锁等待</h3><p>这是生产环境出现的现象，某日下午5点业务高峰期，我们的 <a href="http://seanlook.com/2016/09/27/python-mysql-querykill/">慢查询快照抓取程序</a> 报出大量线程阻塞，但是1分钟以后就好了。于是分析了当时的 processlist 和 innodb status 现场记录，发现有大量的 <code>AUTO-INC waiting</code>：</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-autoinc-1.png" alt="auto-inc-lock-wait"></p>
<p>当时想这是得多大的并发量，才会导致 AUTO_INCREMENT 列的自增id分配出现性能问题，不太愿意相信这个事实（后面就再也没出现过）。了解一番之后（见 <a href="http://seanlook.com/2017/02/16/mysql-autoincrement/">关于MySQLz自增主键问题（上篇）</a>），发现这个表级别的 AUTO-INC lock 就不应该在业务中存在，因为 <code>innodb_autoinc_lock_mode</code>为1，普通业务都是 simple inserts，获取自增id是靠内存里维护的一个互斥量（mutex counter）。</p>
<p>问题拿到知数堂优化班上课群里讨论过，也只是猜测是不是慢查询多了导致负载高，或者当时磁盘遇到什么物理故障阿里云那边自动恢复了。再后来怀疑是不是因为插入时带了 auto_increment 列的值（我们有个redis incr实现的自增id服务，虽然这一列有 AAUTO_INCREMENT 定义，但实际已经从发号器取id了），会导致锁的性质会变？</p>
<p>为了弄清这个疑问，特意去看了下mysql源码，发现如果插入的自增值比表当前AUTOINC值要大，是直接update mutex counter：</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-autoinc-mutex-update.png" alt=""></p>
<p>看源码的时候也打消了另一个疑虑：<code>show engine innodb status</code> 看到的 <code>AUTO-INC</code> 有没有可能不区分 表级自增锁和互斥量计数器 两种自增方案，只是告诉你自增id获取忙不过来？ 实际不是的，代码里面有明确的定义是 <code>autoinc_lock</code>还是<code>autoinc_mutex</code>：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// dict0dict.cc :</span></div><div class="line">#ifndef UNIV_HOTBACKUP</div><div class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span><span class="comment"><span class="markdown">/**</span></span></div><div class="line">Acquire the<span class="markdown"> autoinc lock. */</span></div><div class="line">UNIV_INTERN</div><div class="line"><span class="keyword">void</span></div><div class="line">dict_table_autoinc_lock(</div><div class="line"><span class="comment">/*====================*/</span></div><div class="line">4dict_table_t*	table)	<span class="comment">/*!&lt; in/out: table */</span></div><div class="line">&#123;</div><div class="line">4mutex_enter(&amp;table-&gt;autoinc_mutex);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span><span class="comment"><span class="markdown">/**</span></span></div><div class="line">Unconditionally set the<span class="markdown"> autoinc counter. */</span></div><div class="line">UNIV_INTERN</div><div class="line"><span class="keyword">void</span></div><div class="line">dict_table_autoinc_initialize(</div><div class="line"><span class="comment">/*==========================*/</span></div><div class="line">4dict_table_t*	table,	<span class="comment">/*!&lt; in/out: table */</span></div><div class="line">4ib_uint64_t	value)	<span class="comment">/*!&lt; in: next value to assign to a row */</span></div><div class="line">&#123;</div><div class="line">4ut_ad(mutex_own(&amp;table-&gt;autoinc_mutex));</div><div class="line"></div><div class="line">4table-&gt;autoinc = value;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>最后在微信上找周彦伟大神问问，在快要放弃的时候，从 innodb_lock_waits 中锁等待之间关系，一层一层挖，终于找到了一条这样的sql:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">"<span class="keyword">INSERT</span> <span class="keyword">INTO</span> mydb1.t_mytable_inc ( f_log_id, f_fff_id, ..., f_from, f_sendmsg )</div><div class="line">    <span class="keyword">SELECT</span> <span class="number">2021712366</span>, <span class="number">507019984</span>, ..., <span class="number">10</span>, <span class="number">0</span> <span class="keyword">from</span> dual<span class="string">"</span></div></pre></td></tr></table></figure></p>
<p>瞬间就明(ma)白(niang)了。典型的 <code>INSERT ... SELECT ...</code>， 但是 select 子句带的全是常量，但是对 innodb 来说它还是认为“这是 bulk inserts，我无法预估插入行数”，所以使用表级锁的自增方式。当时同时有 22 个这样的插入，可能负载也确实比较高导致活跃事务里主键最小的那一条一直处于 <em>query end</em> 状态，后面简单insert也需要等这个 语句 结束，直到释放 AUTO-INC table lock，以致引起雪崩效应。</p>
<p>之所以一直没发现这条语句，是因为 processlist 太长了，而且格式不友好。快照抓取程序这块还可以优化。</p>
<p>最后解决其实非常容易：</p>
<ol>
<li>既然已经有自增id服务，直接把把主键上的 AUTO_INCREMENT 定义去掉</li>
<li>整改这种 insert … select … 的sql。维护时可以，但开发账号要杜绝</li>
<li>周大神说他们用的是 mode 2 模式。也不失为一种方法</li>
</ol>
<h3 id="load-data-为什么没阻塞其它事务"><a href="#load-data-为什么没阻塞其它事务" class="headerlink" title="load data 为什么没阻塞其它事务"></a>load data 为什么没阻塞其它事务</h3><p>这是一个同行网友请教我的：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-autoinc-loaddata.png" alt=""></p>
<p>上篇讲到，load data infile 由于innodb无法提前知道插入的行数，所以归为 bulk inserts —— 表自增方式升级为表级锁，这样一来其它会话里的 insert岂不应该是会被阻塞，为什么实验结果却没有阻塞。</p>
<p>当然一开始我也觉得奇怪，但是仔细想一下就知道，这个表级锁是一个特殊的表锁，为了提高并发性，它是在 <strong>语句</strong> 结束就释放了（而不是事务结束），那么只要验证 LOAD DATA 是把文件里面的行记录，拼装成单个insert就行了，这样其它会话的插入就可以在交错获得表级自增锁，实现不阻塞插入：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-autoinc-loaddata-binlog.png" alt=""></p>
<p><del>~上图我是为了看效果，临时设置 <code>log_bin=&#39;statement&#39;</code>，看到 <code>LOAD DATA INFILE</code> 会把文件转换成 <em>一个</em> 事务包含的 <em>多行</em> insert，于是就说得通了。</del>~ @jin 多谢指正。</p>
<p>上图 row 模式下 的binlog，看到 BEGIN … COMMIT 之间包含了 多行 insert。（注：在 statement 模式下，binlog里面记录的是 LOAD DATA 语句，从库会把文件从主库传输过来，再执行）</p>
<p>温馨提示：  </p>
<ol>
<li>如果load data 的文件自带主键值，那么另一个会话获取的自增值很容易产生重复。</li>
<li>stackexchange上有个关于 <a href="http://dba.stackexchange.com/questions/40400/loading-data-in-mysql-using-load-data-infile-replication-safe" target="_blank" rel="external">load data infile 对复制安全性的讨论</a> ，同意二楼的观点，官方文档里说的 unsafe，并不是说执行这样的语句会导致安全问题，而是 considered unsafe，在 row-based 可用的情况下，优化器会自动把binlog记录为 row ，依然是安全的。</li>
</ol>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2017/02/17/mysql-autoincrement_2/">http://seanlook.com/2017/02/17/mysql-autoincrement_2/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;AUTO-INC-waiting-锁等待&quot;&gt;&lt;a href=&quot;#AUTO-INC-waiting-锁等待&quot; class=&quot;headerlink&quot; title=&quot;AUTO-INC waiting 锁等待&quot;&gt;&lt;/a&gt;AUTO-INC waiting 锁等待&lt;/h3&gt;&lt;p&gt;这是生产环境出现的现象，某日下午5点业务高峰期，我们的 &lt;a href=&quot;http://seanlook.com/2016/09/27/python-mysql-querykill/&quot;&gt;慢查询快照抓取程序&lt;/a&gt; 报出大量线程阻塞，但是1分钟以后就好了。于是分析了当时的 processlist 和 innodb status 现场记录，发现有大量的 &lt;code&gt;AUTO-INC waiting&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7q5fot.com1.z0.glb.clouddn.com/mysql-autoinc-1.png&quot; alt=&quot;auto-inc-lock-wait&quot;&gt;&lt;/p&gt;
&lt;p&gt;当时想这是得多大的并发量，才会导致 AUTO_INCREMENT 列的自增id分配出现性能问题，不太愿意相信这个事实（后面就再也没出现过）。了解一番之后（见 &lt;a href=&quot;http://seanlook.com/2017/02/16/mysql-autoincrement/&quot;&gt;关于MySQLz自增主键问题（上篇）&lt;/a&gt;），发现这个表级别的 AUTO-INC lock 就不应该在业务中存在，因为 &lt;code&gt;innodb_autoinc_lock_mode&lt;/code&gt;为1，普通业务都是 simple inserts，获取自增id是靠内存里维护的一个互斥量（mutex counter）。&lt;/p&gt;
&lt;p&gt;问题拿到知数堂优化班上课群里讨论过，也只是猜测是不是慢查询多了导致负载高，或者当时磁盘遇到什么物理故障阿里云那边自动恢复了。再后来怀疑是不是因为插入时带了 auto_increment 列的值（我们有个redis incr实现的自增id服务，虽然这一列有 AAUTO_INCREMENT 定义，但实际已经从发号器取id了），会导致锁的性质会变？&lt;/p&gt;
&lt;p&gt;为了弄清这个疑问，特意去看了下mysql源码，发现如果插入的自增值比表当前AUTOINC值要大，是直接update mutex counter：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7q5fot.com1.z0.glb.clouddn.com/mysql-autoinc-mutex-update.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;看源码的时候也打消了另一个疑虑：&lt;code&gt;show engine innodb status&lt;/code&gt; 看到的 &lt;code&gt;AUTO-INC&lt;/code&gt; 有没有可能不区分 表级自增锁和互斥量计数器 两种自增方案，只是告诉你自增id获取忙不过来？ 实际不是的，代码里面有明确的定义是 &lt;code&gt;autoinc_lock&lt;/code&gt;还是&lt;code&gt;autoinc_mutex&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// dict0dict.cc :&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#ifndef UNIV_HOTBACKUP&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;markdown&quot;&gt;/&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;emphasis&quot;&gt;***&lt;/span&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;markdown&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Acquire &lt;/span&gt;the&lt;span class=&quot;markdown&quot;&gt; autoinc lock. */&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;UNIV_INTERN&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dict_table_autoinc_lock(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*====================*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4dict_table_t*	table)	&lt;span class=&quot;comment&quot;&gt;/*!&amp;lt; in/out: table */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4mutex_enter(&amp;amp;table-&amp;gt;autoinc_mutex);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;markdown&quot;&gt;/&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;strong&quot;&gt;*****&lt;/span&gt;&lt;span class=&quot;emphasis&quot;&gt;***&lt;/span&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;markdown&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Unconditionally set &lt;/span&gt;the&lt;span class=&quot;markdown&quot;&gt; autoinc counter. */&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;UNIV_INTERN&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dict_table_autoinc_initialize(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*==========================*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4dict_table_t*	table,	&lt;span class=&quot;comment&quot;&gt;/*!&amp;lt; in/out: table */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4ib_uint64_t	value)	&lt;span class=&quot;comment&quot;&gt;/*!&amp;lt; in: next value to assign to a row */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4ut_ad(mutex_own(&amp;amp;table-&amp;gt;autoinc_mutex));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4table-&amp;gt;autoinc = value;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="schema设计" scheme="http://seanlook.com/tags/schema%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>关于MySQL自增主键的几点问题（上）</title>
    <link href="http://seanlook.com/2017/02/16/mysql-autoincrement/"/>
    <id>http://seanlook.com/2017/02/16/mysql-autoincrement/</id>
    <published>2017-02-16T08:32:49.000Z</published>
    <updated>2017-02-16T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间遇到一个InnoDB表自增锁导致的问题，最近刚好有一个同行网友也问到自增锁的疑问，所以抽空系统的总结一下，这两个问题下篇会有阐述。</p>
<h2 id="1-划分三种插入类型"><a href="#1-划分三种插入类型" class="headerlink" title="1. 划分三种插入类型"></a>1. 划分三种插入类型</h2><p>这里区分一下几种插入数据行的类型，便于后面描述：（纯逻辑上的划分）</p>
<ol>
<li><p>“Simple inserts”<br>简单插入，就是在处理sql语句的时候，能够提前预估到插入的行数，包括 <code>INSERT</code> / <code>REPLACE</code> 的单行、多行插入，但不含嵌套子查询以及 <code>INSERT ... ON DUPLICATE KEY UPDATE</code>。</p>
</li>
<li><p>“Bulk inserts”<br>本文暂且叫做 大块插入，不能提前预知语句要插入的行数，也就无法知道分配多少个自增值，包括 <code>INSERT ... SELECT</code>, <code>REPLACE ... SELECT</code>, 以及 <code>LOAD DATA</code> 导入语句。InnoDB会每处理一行记录就为 AUTO_INCREMENT 列分配一个值。</p>
</li>
<li><p>“Mixed-mode inserts”<br>混合插入，比如在 “简单插入” 多行记录的时候，有的新行有指定自增值，有的没有，所以获得最坏情况下需要插入的数量，然后一次性分配足够的auto_increment id。比如:</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># <span class="selector-tag">c1</span> 是 <span class="selector-tag">t1</span> 的 <span class="selector-tag">AUTO_INCREMENT</span> 列</div><div class="line"><span class="selector-tag">INSERT</span> <span class="selector-tag">INTO</span> <span class="selector-tag">t1</span> (c1,c2) <span class="selector-tag">VALUES</span> (<span class="number">1</span>,<span class="string">'a'</span>), (NULL,<span class="string">'b'</span>), (<span class="number">5</span>,<span class="string">'c'</span>), (NULL,<span class="string">'d'</span>);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>又比如 <code>INSERT ... ON DUPLICATE KEY UPDATE</code>，它在 update 阶段有可能分配新的自增id，也可能不会。</p>
<h2 id="2-三种自增模式：innodb-autoinc-lock-mode"><a href="#2-三种自增模式：innodb-autoinc-lock-mode" class="headerlink" title="2. 三种自增模式：innodb_autoinc_lock_mode"></a>2. 三种自增模式：<code>innodb_autoinc_lock_mode</code></h2><p>在以 5.6 版本，自增id累加模式分为：</p>
<ul>
<li><p><strong> 传统模式</strong><br>traditional，<code>innodb_autoinc_lock_mode = 0</code><br>在具有 AUTO_INCREMENT 的表上，所有插入语句会获取一个特殊的表级锁 <em>AUTO-INC</em> ，这个表锁是在语句结束之后立即释放（无需等到事务结束），它可以保证在一个insert里面的多行记录连续递增，也能保证多个insert并发情况下自增值是连续的（不会有空洞）。</p>
</li>
<li><p><strong> 连续模式 </strong><br>consecutive，<code>innodb_autoinc_lock_mode = 1</code><br>MySQL 5.1.22开始，InnoDB提供了一种轻量级互斥的自增实现机制，在内存中会有一个互斥量（mutex），每次分配自增长ID时，就通过估算插入的数量（前提是必须能够估算到插入的数量，否则还是使用传统模式），然后更新mutex，下一个线程过来时从新 mutex 开始继续计算，这样就能避免传统模式非要等待每个都插入之后才能获取下一个，把“锁”降级到 只在分配id的时候 锁定互斥量。<br>在 <code>innodb_autoinc_lock_mode = 1</code>（默认） 模式下，“简单插入”采用上面的 mutex 方式，“大块插入”（insert/replace … select … 、load data…）依旧采用 AUTO-INC 表级锁方式。当然如果一个事务里已经持有表 AUTO-INC 锁，那么后续的简单插入也需要等待这个 AUTO-INC 锁释放。这能够保证任意insert并发情况下自增值是连续的。</p>
<a id="more"></a></li>
<li><p><strong> 交叉模式 </strong><br>interleaved，<code>innodb_autoinc_lock_mode = 2</code><br>该模式下所有 INSERT SQL 都不会有表级 AUTO-INC 锁，多个 <strong>语句</strong> 可以同时执行，所以在高并发插入场景下性能会好一些。但是当 binlog 采用 SBR 格式时，对于从库重放日志或者主库实例恢复时，并不可靠。<br>另者，它只能保证自增值在 insert语句级别 （单调）递增，所以多个insert可能会交叉着分配id，最终可能导致多个语句之间的id值不连续，这种情况出现在 混合插入：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 (c1,c2) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">'a'</span>), (<span class="literal">NULL</span>,<span class="string">'b'</span>), (<span class="number">5</span>,<span class="string">'c'</span>), (<span class="literal">NULL</span>,<span class="string">'d'</span>);</div></pre></td></tr></table></figure>
<p>mutex 会按行分配4个id，但实际只用到2个，因此出现空洞。</p>
</li>
</ul>
<h2 id="3-自增空洞（auto-increment-sequence-gap）"><a href="#3-自增空洞（auto-increment-sequence-gap）" class="headerlink" title="3. 自增空洞（auto-increment sequence gap）"></a>3. 自增空洞（auto-increment sequence gap）</h2><p>关于 AUTO_INCREMENT 自增出现空洞的问题，有必要再说明一下。</p>
<ol>
<li><p>在 0, 1, 2 三种任何模式下，如果事务回滚，那么里面获得自增值的sql回滚，但产生的自增值会一起丢失，不可能重新分配给其它insert语句。这也会产生空洞。</p>
</li>
<li><p>在大块插入情景下</p>
<ul>
<li><code>innodb_autoinc_lock_mode</code>为 0 或 1 时，因为 AUTO-INC 锁会持续到语句结束，同一时间只有一个 语句 在表上执行，所以自增值是连续的（其它事务需要等待），不会有空洞；</li>
<li><code>innodb_autoinc_lock_mode</code>为 2 时，两个 “大块插入” 之间可能会有空洞，因为每条语句事先无法预知精确的数量而导致分配过多的id，可能有空洞。</li>
</ul>
</li>
</ol>
<h2 id="4-混合插入对-AUTO-INCREMENT-的影响"><a href="#4-混合插入对-AUTO-INCREMENT-的影响" class="headerlink" title="4. 混合插入对 AUTO_INCREMENT 的影响"></a>4. 混合插入对 AUTO_INCREMENT 的影响</h2><p>混合插入在 innodb_autoinc_lock_mode 不同模式下会有对 表自增值有不同的表现。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE t1 (</div><div class="line">  c1 INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,</div><div class="line">  c2 CHAR(1)</div><div class="line">  ) ENGINE=INNODB;</div><div class="line"></div><div class="line">ALTER TABLE t1 AUTO_INCREMENT 101;</div><div class="line"></div><div class="line"></div><div class="line">mysql&gt; SHOW CREATE TABLE t1\G</div><div class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">** 1. row **</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span></div><div class="line"><span class="code">       Table: t1</span></div><div class="line">Create Table: CREATE TABLE <span class="code">`t1`</span> (</div><div class="line">  <span class="code">`c1`</span> int(10) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  <span class="code">`c2`</span> char(1) DEFAULT NULL,</div><div class="line">  PRIMARY KEY (<span class="code">`c1`</span>)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=101 DEFAULT CHARSET=utf8</div></pre></td></tr></table></figure></p>
<h3 id="1-mode-0"><a href="#1-mode-0" class="headerlink" title="1. mode 0"></a>1. mode 0</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; select @@innodb_autoinc_lock_mode;</span></div><div class="line">+----------------------------+</div><div class="line"><span class="section">| @@innodb_autoinc_lock_mode |</span></div><div class="line">+----------------------------+</div><div class="line"><span class="section">|                          0 |</span></div><div class="line">+----------------------------+</div><div class="line"></div><div class="line">mysql&gt; INSERT INTO t1 (c1,c2) VALUES (1,<span class="emphasis">'a'</span>), (NULL,<span class="emphasis">'b'</span>), (5,<span class="emphasis">'c'</span>), (NULL,<span class="emphasis">'d'</span>);</div><div class="line"><span class="section">mysql&gt; select * from t1;</span></div><div class="line">+-----+------+</div><div class="line"><span class="section">| c1  | c2   |</span></div><div class="line">+-----+------+</div><div class="line">|   1 | a    |</div><div class="line">|   5 | c    |</div><div class="line">| 101 | b    |</div><div class="line"><span class="section">| 102 | d    |</span></div><div class="line">+-----+------+</div><div class="line"></div><div class="line">mysql&gt; show create table t1\G</div><div class="line"><span class="bullet">...</span></div><div class="line">) ENGINE=InnoDB AUTO<span class="emphasis">_INCREMENT=103 DEFAULT CHARSET=utf8</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>可以看到下一个自增值是 103 ，因为即使这是 <strong> 一条 </strong> insert语句（多行记录），自增值还是每次分配一个，不会在语句开始前一次分配全。</p>
<h3 id="2-mode-1"><a href="#2-mode-1" class="headerlink" title="2. mode 1"></a>2. mode 1</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">mysql&gt; truncate table t1; ALTER TABLE t1 AUTO<span class="emphasis">_INCREMENT 101;  -- 复原</span></div><div class="line">mysql&gt; select @@innodb_autoinc<span class="emphasis">_lock_</span>mode;</div><div class="line"><span class="code">+----------------------------+</span></div><div class="line"><span class="section">| @@innodb_autoinc_lock_mode |</span></div><div class="line">+----------------------------+</div><div class="line"><span class="section">|                          1 |</span></div><div class="line">+----------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; INSERT INTO t1 (c1,c2) VALUES (1,<span class="emphasis">'a'</span>), (NULL,<span class="emphasis">'b'</span>), (5,<span class="emphasis">'c'</span>), (NULL,<span class="emphasis">'d'</span>);</div><div class="line">Query OK, 4 rows affected (0.00 sec)</div><div class="line">Records: 4  Duplicates: 0  Warnings: 0</div><div class="line"></div><div class="line"><span class="section">mysql&gt; select * from t1;</span></div><div class="line">+-----+------+</div><div class="line"><span class="section">| c1  | c2   |</span></div><div class="line">+-----+------+</div><div class="line">|   1 | a    |</div><div class="line">|   5 | c    |</div><div class="line">| 101 | b    |</div><div class="line"><span class="section">| 102 | d    |</span></div><div class="line">+-----+------+</div><div class="line"></div><div class="line">mysql&gt; show create table t1\G</div><div class="line"><span class="bullet">...</span></div><div class="line">) ENGINE=InnoDB AUTO<span class="emphasis">_INCREMENT=105 DEFAULT CHARSET=utf8</span></div></pre></td></tr></table></figure>
<p>可以看到最终插入的值是一样的，但下一个自增值变成了 105，因为该模式下insert语句处理的时候，提前分配了 4 个自增值，但实际只有了两个。</p>
<p>注：如果你的insert自增列全都有带值，那么处理的时候是不会分配自增值的，经过下面这个实验，可以知道 <strong> 分配自增值，是在遇到第一个没有带自增列的行时，一次性分配的 </strong> ：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">-- </span>Tx1，先运行。 -- 插入第2行的时候 sleep 5s</div><div class="line">INSERT INTO t1 (c1,c2) VALUES (2,<span class="emphasis">'e'</span>),(sleep(5)+6,<span class="emphasis">'g'</span>),(NULL,<span class="emphasis">'f'</span>), (NULL,<span class="emphasis">'h'</span>);</div><div class="line"></div><div class="line"><span class="bullet">-- </span>Tx2，后运行。 -- 第一行没有给自增列值，马上分配 4 个</div><div class="line">INSERT INTO t1 (c1,c2) VALUES  (NULL,<span class="emphasis">'b'</span>), (1,<span class="emphasis">'a'</span>), (sleep(5)+5,<span class="emphasis">'c'</span>), (NULL,<span class="emphasis">'d'</span>);</div><div class="line"></div><div class="line"><span class="section">-- 得到的结果是</span></div><div class="line">+-----+------+</div><div class="line"><span class="section">| c1  | c2   |</span></div><div class="line">+-----+------+</div><div class="line">|   1 | a    |</div><div class="line">|   2 | e    |</div><div class="line">|   5 | c    |</div><div class="line">|   6 | g    |</div><div class="line">| 101 | b    |</div><div class="line">| 102 | d    |</div><div class="line">| 105 | f    |</div><div class="line"><span class="section">| 106 | h    |</span></div><div class="line">+-----+------+</div></pre></td></tr></table></figure></p>
<h3 id="3-mode-2"><a href="#3-mode-2" class="headerlink" title="3. mode 2"></a>3. mode 2</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">mysql&gt; truncate table t1; ALTER TABLE t1 AUTO<span class="emphasis">_INCREMENT 101;  -- 复原</span></div><div class="line">mysql&gt; select @@innodb_autoinc<span class="emphasis">_lock_</span>mode;</div><div class="line"><span class="code">+----------------------------+</span></div><div class="line"><span class="section">| @@innodb_autoinc_lock_mode |</span></div><div class="line">+----------------------------+</div><div class="line"><span class="section">|                          2 |</span></div><div class="line">+----------------------------+</div><div class="line"></div><div class="line">mysql&gt; INSERT INTO t1 (c1,c2) VALUES (1,<span class="emphasis">'a'</span>), (NULL,<span class="emphasis">'b'</span>), (5,<span class="emphasis">'c'</span>), (NULL,<span class="emphasis">'d'</span>);</div><div class="line"><span class="section">mysql&gt; select * from t1;</span></div><div class="line">+-----+------+</div><div class="line"><span class="section">| c1  | c2   |</span></div><div class="line">+-----+------+</div><div class="line">|   1 | a    |</div><div class="line">|   5 | c    |</div><div class="line">| 101 | b    |</div><div class="line"><span class="section">| 102 | d    |</span></div><div class="line">+-----+------+</div><div class="line"></div><div class="line">mysql&gt; show create table t1\G</div><div class="line"><span class="bullet">...</span></div><div class="line">) ENGINE=InnoDB AUTO<span class="emphasis">_INCREMENT=105 DEFAULT CHARSET=utf8</span></div></pre></td></tr></table></figure>
<p>结果看起来与 连续模式 一样，其实不然！该模式下，如果另外一个 大块插入 并发执行时，可能会出现以下现象：</p>
<ol>
<li>大块插入的的自增值有间断</li>
<li>其它并发执行的事务插入出现 duplicate-key error</li>
</ol>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">第<span class="number">1</span>点 (create t2 select * <span class="keyword">from</span> t1)</div><div class="line">Tx1: insert <span class="keyword">into</span> t1(c2) select c2 <span class="keyword">from</span> t2；  -- 先执行</div><div class="line">Tx2: INSERT <span class="keyword">INTO</span> t1 (c1,c2) VALUES (<span class="number">1</span>,<span class="string">'a'</span>), (<span class="keyword">NULL</span>,<span class="string">'b'</span>), (<span class="number">5</span>,<span class="string">'c'</span>), (<span class="keyword">NULL</span>,<span class="string">'d'</span>);  -- 后 并发执行</div><div class="line"></div><div class="line">在交叉模式下，Tx1事务插入的数据行会与 Tx1 交叉出现。</div><div class="line">注：如果 Tx1 改成 insert <span class="keyword">into</span> t1 select * <span class="keyword">from</span> t2 ，那么 Tx2 执行极有可能会报 duplicate-key error，与下面第<span class="number">2</span>点所说的重复键是不一样的</div><div class="line"></div><div class="line">第<span class="number">2</span>点</div><div class="line">mysql&gt; truncate table t1; ALTER TABLE t1 AUTO_INCREMENT <span class="number">5</span>;  -- 复原</div><div class="line">mysql&gt; INSERT <span class="keyword">INTO</span> t1 (c1,c2) VALUES (<span class="number">1</span>,<span class="string">'a'</span>), (<span class="keyword">NULL</span>,<span class="string">'b'</span>), (<span class="number">5</span>,<span class="string">'c'</span>), (<span class="keyword">NULL</span>,<span class="string">'d'</span>);</div><div class="line">ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">'5'</span> <span class="keyword">for</span> key <span class="string">'PRIMARY'</span></div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面说了这么多，那么自增模式到底该怎么选择呢？其实很简单，目前数据库默认的 traditional 即 <code>innodb_autoinc_lock_mode=1</code> 就是最好的模式，一般业务生产库不会有 <code>insert into ... select ...</code>或者 load data infile 这样的维护动作。（提示：即使晚上有数据迁移任务，也不要通过这样的形式进行）</p>
<p><code>innodb_autoinc_lock_mode=2</code> 可以提高获取表自增id的并发能力（性能），但是除非出现上面演示的 duplicate-key 特殊用法情形，不会像网上所说的获取到相同key导致重复的问题。但是如果binlog在 RBR 格式下不建议使用，可能出现主从数据不一致。还有就是能够容忍gap的存在，以及多个语句insert的自增值交叉。</p>
<p>参考： <a href="https://dev.mysql.com/doc/refman/5.6/en/innodb-auto-increment-handling.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/en/innodb-auto-increment-handling.html</a></p>
<p>下篇分析遇到过的 MySQL 自增主键相关的具体问题。</p>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2017/02/16/mysql-autoincrement/">http://seanlook.com/2017/02/16/mysql-autoincrement/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间遇到一个InnoDB表自增锁导致的问题，最近刚好有一个同行网友也问到自增锁的疑问，所以抽空系统的总结一下，这两个问题下篇会有阐述。&lt;/p&gt;
&lt;h2 id=&quot;1-划分三种插入类型&quot;&gt;&lt;a href=&quot;#1-划分三种插入类型&quot; class=&quot;headerlink&quot; title=&quot;1. 划分三种插入类型&quot;&gt;&lt;/a&gt;1. 划分三种插入类型&lt;/h2&gt;&lt;p&gt;这里区分一下几种插入数据行的类型，便于后面描述：（纯逻辑上的划分）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;“Simple inserts”&lt;br&gt;简单插入，就是在处理sql语句的时候，能够提前预估到插入的行数，包括 &lt;code&gt;INSERT&lt;/code&gt; / &lt;code&gt;REPLACE&lt;/code&gt; 的单行、多行插入，但不含嵌套子查询以及 &lt;code&gt;INSERT ... ON DUPLICATE KEY UPDATE&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“Bulk inserts”&lt;br&gt;本文暂且叫做 大块插入，不能提前预知语句要插入的行数，也就无法知道分配多少个自增值，包括 &lt;code&gt;INSERT ... SELECT&lt;/code&gt;, &lt;code&gt;REPLACE ... SELECT&lt;/code&gt;, 以及 &lt;code&gt;LOAD DATA&lt;/code&gt; 导入语句。InnoDB会每处理一行记录就为 AUTO_INCREMENT 列分配一个值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“Mixed-mode inserts”&lt;br&gt;混合插入，比如在 “简单插入” 多行记录的时候，有的新行有指定自增值，有的没有，所以获得最坏情况下需要插入的数量，然后一次性分配足够的auto_increment id。比如:&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# &lt;span class=&quot;selector-tag&quot;&gt;c1&lt;/span&gt; 是 &lt;span class=&quot;selector-tag&quot;&gt;t1&lt;/span&gt; 的 &lt;span class=&quot;selector-tag&quot;&gt;AUTO_INCREMENT&lt;/span&gt; 列&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;t1&lt;/span&gt; (c1,c2) &lt;span class=&quot;selector-tag&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;), (NULL,&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;), (&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;), (NULL,&lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;又比如 &lt;code&gt;INSERT ... ON DUPLICATE KEY UPDATE&lt;/code&gt;，它在 update 阶段有可能分配新的自增id，也可能不会。&lt;/p&gt;
&lt;h2 id=&quot;2-三种自增模式：innodb-autoinc-lock-mode&quot;&gt;&lt;a href=&quot;#2-三种自增模式：innodb-autoinc-lock-mode&quot; class=&quot;headerlink&quot; title=&quot;2. 三种自增模式：innodb_autoinc_lock_mode&quot;&gt;&lt;/a&gt;2. 三种自增模式：&lt;code&gt;innodb_autoinc_lock_mode&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;在以 5.6 版本，自增id累加模式分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt; 传统模式&lt;/strong&gt;&lt;br&gt;traditional，&lt;code&gt;innodb_autoinc_lock_mode = 0&lt;/code&gt;&lt;br&gt;在具有 AUTO_INCREMENT 的表上，所有插入语句会获取一个特殊的表级锁 &lt;em&gt;AUTO-INC&lt;/em&gt; ，这个表锁是在语句结束之后立即释放（无需等到事务结束），它可以保证在一个insert里面的多行记录连续递增，也能保证多个insert并发情况下自增值是连续的（不会有空洞）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt; 连续模式 &lt;/strong&gt;&lt;br&gt;consecutive，&lt;code&gt;innodb_autoinc_lock_mode = 1&lt;/code&gt;&lt;br&gt;MySQL 5.1.22开始，InnoDB提供了一种轻量级互斥的自增实现机制，在内存中会有一个互斥量（mutex），每次分配自增长ID时，就通过估算插入的数量（前提是必须能够估算到插入的数量，否则还是使用传统模式），然后更新mutex，下一个线程过来时从新 mutex 开始继续计算，这样就能避免传统模式非要等待每个都插入之后才能获取下一个，把“锁”降级到 只在分配id的时候 锁定互斥量。&lt;br&gt;在 &lt;code&gt;innodb_autoinc_lock_mode = 1&lt;/code&gt;（默认） 模式下，“简单插入”采用上面的 mutex 方式，“大块插入”（insert/replace … select … 、load data…）依旧采用 AUTO-INC 表级锁方式。当然如果一个事务里已经持有表 AUTO-INC 锁，那么后续的简单插入也需要等待这个 AUTO-INC 锁释放。这能够保证任意insert并发情况下自增值是连续的。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="schema设计" scheme="http://seanlook.com/tags/schema%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>监控MySQL你还应该收集表信息</title>
    <link href="http://seanlook.com/2016/12/04/mysql-schema-gather-statistics/"/>
    <id>http://seanlook.com/2016/12/04/mysql-schema-gather-statistics/</id>
    <published>2016-12-04T08:32:49.000Z</published>
    <updated>2016-12-04T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Story"><a href="#1-Story" class="headerlink" title="1. Story"></a>1. Story</h2><p>也许你经常会被问到，库里某个表最近一年的内每个月的数据量增长情况。当然如果你有按月分表比较好办，挨个 <code>show table status</code>，如果只有一个大表，那估计要在大家都休息的时候，寂寞的夜里去跑sql统计了，因为你只能获取当前的表信息，历史信息追查不到了。</p>
<p>除此以外，作为DBA本身也要对数据库空间增长情况进行预估，用以规划容量。我们说的表信息主要包括：</p>
<ol>
<li>表数据大小（DATA_LENGTH）</li>
<li>索引大小(INDEX_LENGTH)</li>
<li>行数（ROWS）</li>
<li>当前自增值（AUTO_INCREMENT，如果有）</li>
</ol>
<p>目前是没有看到哪个mysql监控工具上提供这样的指标。这些信息不需要采集的太频繁，而且结果也只是个预估值，不一定准确，所以这是站在一个全局、长远的角度去监控(采集)表的。</p>
<p>本文要介绍的自己写的采集工具，是基于组内现有的一套监控体系：</p>
<ul>
<li><code>InfluxDB</code>：时间序列数据库，存储监控数据</li>
<li><code>Grafana</code>：数据展示面板</li>
<li><code>Telegraf</code>：收集信息的agent<br>看了下 telegraf 的最新的 <a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/mysql" target="_blank" rel="external">mysql 插件</a>，一开始很欣慰：支持收集 Table schema statistics 和 Info schema auto increment columns。试用了一下，有数据，但是如前面所说，除了自增值外其他都是预估值，telegraf收集频率过高没啥意义，也许一天2次就足够了，它提供的 <code>IntervalSlow</code>选项固定写死在代码里，只能是放缓 global status 监控频率。不过倒是可以与其它监控指标分开成两份配置文件，各自定义收集间隔来实现。<br>最后打算自己用python撸一个，上报到influxdb里 :)</li>
</ul>
<h2 id="2-Concept"><a href="#2-Concept" class="headerlink" title="2. Concept"></a>2. Concept</h2><p>完整代码见 GitHub项目地址：<a href="https://github.com/seanlook/DBschema_gather" target="_blank" rel="external">DBschema_gather</a><br>实现也特别简单，就是查询 <code>information_schema</code> 库的 <code>COLUMNS</code>、<code>TABLES</code> 两个表：<br><a id="more"></a><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">    <span class="keyword">IFNULL</span>(@@hostname, @@server_id) SERVER_NAME,</div><div class="line">    %s <span class="keyword">as</span> HOST,</div><div class="line">    t.TABLE_SCHEMA,</div><div class="line">    t.TABLE_NAME,</div><div class="line">    t.TABLE_ROWS,</div><div class="line">    t.DATA_LENGTH,</div><div class="line">    t.INDEX_LENGTH,</div><div class="line">    t.AUTO_INCREMENT,</div><div class="line">  c.COLUMN_NAME,</div><div class="line">  c.DATA_TYPE,</div><div class="line">  <span class="keyword">LOCATE</span>(<span class="string">'unsigned'</span>, c.COLUMN_TYPE) COL_UNSIGNED</div><div class="line">  # <span class="keyword">CONCAT</span>(c.DATA_TYPE, <span class="keyword">IF</span>(<span class="keyword">LOCATE</span>(<span class="string">'unsigned'</span>, c.COLUMN_TYPE)=<span class="number">0</span>, <span class="string">''</span>, <span class="string">'_unsigned'</span>))</div><div class="line"><span class="keyword">FROM</span></div><div class="line">    information_schema.<span class="string">`TABLES`</span> t</div><div class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> information_schema.<span class="string">`COLUMNS`</span> c <span class="keyword">ON</span> t.TABLE_SCHEMA = c.TABLE_SCHEMA</div><div class="line"><span class="keyword">AND</span> t.TABLE_NAME = c.TABLE_NAME</div><div class="line"><span class="keyword">AND</span> c.EXTRA = <span class="string">'auto_increment'</span></div><div class="line"><span class="keyword">WHERE</span></div><div class="line">    t.TABLE_SCHEMA <span class="keyword">NOT</span> <span class="keyword">IN</span> (</div><div class="line">        <span class="string">'mysql'</span>,</div><div class="line">        <span class="string">'information_schema'</span>,</div><div class="line">        <span class="string">'performance_schema'</span>,</div><div class="line">        <span class="string">'sys'</span></div><div class="line">    )</div><div class="line"><span class="keyword">AND</span> t.TABLE_TYPE = <span class="string">'BASE TABLE'</span></div></pre></td></tr></table></figure></p>
<p>关于 <code>auto_increment</code>，我们除了关注当前增长到哪了，还会在意相比 <code>int / bigint</code> 的最大值，还有多少可用空间。于是计算了 <code>autoIncrUsage</code> 这一列，用于保存当前已使用的比例。</p>
<p>然后使用 InfluxDB 的python客户端，批量存入influxdb。如果没有InfluxDB，结果会打印出json —— 这是Zabbix、Open-Falcon这些监控工具普遍支持的格式。</p>
<p>最后就是使用 Grafana 从 influxdb 数据源画图。</p>
<h2 id="3-Usage"><a href="#3-Usage" class="headerlink" title="3. Usage"></a>3. Usage</h2><ol>
<li><p>环境<br>在 python 2.7 环境下编写的，2.6，3.x没测。<br>运行需要<code>MySQLdb</code>、<code>influxdb</code>两个库：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo pip <span class="keyword">install</span> mysql-python influxdb</div></pre></td></tr></table></figure>
</li>
<li><p>配置<br><code>settings_dbs.py</code> 配置文件</p>
<ul>
<li><code>DBLIST_INFO</code>：列表存放需要采集的哪些MySQL实例表信息，元组内分别是连接地址、端口、用户名、密码<br>用户需要select表的权限，否则看不到对应的信息.</li>
<li><code>InfluxDB_INFO</code>：influxdb的连接信息，注意提前创建好数据库名 <code>mysql_info</code><br>设置为 <code>None</code> 可输出结果为json.</li>
</ul>
</li>
<li><p>创建influxdb上的数据库和存储策略<br>存放2年，1个复制集：（按需调整）</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="string">"mysql_info"</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">RETENTION</span> <span class="keyword">POLICY</span> <span class="string">"mysql_info_schema"</span> <span class="keyword">ON</span> <span class="string">"mysql_info"</span> <span class="keyword">DURATION</span> <span class="number">730</span>d <span class="keyword">REPLICATION</span> <span class="number">1</span> <span class="keyword">DEFAULT</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>看大的信息类似于：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-schema-statistics.png" alt="schema-influxdb-data"></p>
<ol>
<li><p>放crontab跑<br>可以单独放在用于监控的服务器上，不过建议在生产环境可以运行在mysql实例所在主机上，安全起见。<br>一般库在晚上会有数据迁移的动作，可以在迁移前后分别运行 <code>mysql_schema_info.py</code> 来收集一次。不建议太频繁。</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">40 </span><span class="number">23</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">18</span> * * * /opt/DBschema_info/mysql_schema_info.py &gt;&gt; /tmp/collect_DBschema_info.<span class="keyword">log</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span></div></pre></td></tr></table></figure>
</li>
<li><p>生成图表</p>
</li>
</ol>
<p>导入项目下的 <code>grafana_table_stats.json</code> 到 Grafana面板中。效果如下：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-schema-statistics2.png" alt="表数据大小和行数"><br><em>表数据大小和行数</em></p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-schema-statistics3.png" alt="每天行数变化增量,auto_increment使用率"><br><em>每天行数变化增量,auto_increment使用率</em></p>
<h2 id="4-More"><a href="#4-More" class="headerlink" title="4. More"></a>4. More</h2><ol>
<li>分库分表情况下，全局唯一ID在表里无法计算 autoIncrUsage  </li>
<li>实现上其实很简单，更主要的是唤醒收集这些信息的意识  </li>
<li>可以增加 Graphite 输出格式  </li>
</ol>
<hr>
<p>  原文链接地址：<a href="http://seanlook.com/2016/12/04/mysql-schema-gather-statistics/">http://seanlook.com/2016/12/04/mysql-schema-gather-statistics/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Story&quot;&gt;&lt;a href=&quot;#1-Story&quot; class=&quot;headerlink&quot; title=&quot;1. Story&quot;&gt;&lt;/a&gt;1. Story&lt;/h2&gt;&lt;p&gt;也许你经常会被问到，库里某个表最近一年的内每个月的数据量增长情况。当然如果你有按月分表比较好办，挨个 &lt;code&gt;show table status&lt;/code&gt;，如果只有一个大表，那估计要在大家都休息的时候，寂寞的夜里去跑sql统计了，因为你只能获取当前的表信息，历史信息追查不到了。&lt;/p&gt;
&lt;p&gt;除此以外，作为DBA本身也要对数据库空间增长情况进行预估，用以规划容量。我们说的表信息主要包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;表数据大小（DATA_LENGTH）&lt;/li&gt;
&lt;li&gt;索引大小(INDEX_LENGTH)&lt;/li&gt;
&lt;li&gt;行数（ROWS）&lt;/li&gt;
&lt;li&gt;当前自增值（AUTO_INCREMENT，如果有）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;目前是没有看到哪个mysql监控工具上提供这样的指标。这些信息不需要采集的太频繁，而且结果也只是个预估值，不一定准确，所以这是站在一个全局、长远的角度去监控(采集)表的。&lt;/p&gt;
&lt;p&gt;本文要介绍的自己写的采集工具，是基于组内现有的一套监控体系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;InfluxDB&lt;/code&gt;：时间序列数据库，存储监控数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Grafana&lt;/code&gt;：数据展示面板&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Telegraf&lt;/code&gt;：收集信息的agent&lt;br&gt;看了下 telegraf 的最新的 &lt;a href=&quot;https://github.com/influxdata/telegraf/tree/master/plugins/inputs/mysql&quot;&gt;mysql 插件&lt;/a&gt;，一开始很欣慰：支持收集 Table schema statistics 和 Info schema auto increment columns。试用了一下，有数据，但是如前面所说，除了自增值外其他都是预估值，telegraf收集频率过高没啥意义，也许一天2次就足够了，它提供的 &lt;code&gt;IntervalSlow&lt;/code&gt;选项固定写死在代码里，只能是放缓 global status 监控频率。不过倒是可以与其它监控指标分开成两份配置文件，各自定义收集间隔来实现。&lt;br&gt;最后打算自己用python撸一个，上报到influxdb里 :)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-Concept&quot;&gt;&lt;a href=&quot;#2-Concept&quot; class=&quot;headerlink&quot; title=&quot;2. Concept&quot;&gt;&lt;/a&gt;2. Concept&lt;/h2&gt;&lt;p&gt;完整代码见 GitHub项目地址：&lt;a href=&quot;https://github.com/seanlook/DBschema_gather&quot;&gt;DBschema_gather&lt;/a&gt;&lt;br&gt;实现也特别简单，就是查询 &lt;code&gt;information_schema&lt;/code&gt; 库的 &lt;code&gt;COLUMNS&lt;/code&gt;、&lt;code&gt;TABLES&lt;/code&gt; 两个表：&lt;br&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="监控" scheme="http://seanlook.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>一种直观记录表结构变更历史的方法</title>
    <link href="http://seanlook.com/2016/11/28/mysql-schema-gather-structure/"/>
    <id>http://seanlook.com/2016/11/28/mysql-schema-gather-structure/</id>
    <published>2016-11-28T08:32:49.000Z</published>
    <updated>2016-11-28T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Story"><a href="#1-Story" class="headerlink" title="1. Story"></a>1. Story</h2><p>在没有形成自己的数据库管理平台以前，数据库实例一多（包括生产和测试环境），许多表要执行DDL会变得异常繁杂。</p>
<p>说个自己的经历，需要改现网的一个索引来看优化的效果，因为存在风险，不会一次全改，先只改1个库，然后逐步放开。前后验证效果可能花上一两周的时间，除非实现完整的记录了当时的ddl语句和对应的库，否则根本难以记得。这就完全依赖于个人的习惯及能力。</p>
<p>又比如现网出了个问题，开发追查到一个时间点，想确认那个时候有没有对库表进行过更改操作，如果没有记录表结构变更的历史，也就难以提供需要的信息。</p>
<p>记录差异，很早就思考过能不能用git来做。终于花了一天时间来实现，并验证、修改达到预期的效果，还算满意。</p>
<p>github项目地址在文后。</p>
<h2 id="2-Concept"><a href="#2-Concept" class="headerlink" title="2. Concept"></a>2. Concept</h2><p>思路很简单，就是利用 <code>mydumper</code> 导出表时会把各表（结构）单独导成一个文件的特性，每天低峰期导出所有对象元数据：表、视图、存储过程、事件、触发器。需要过滤掉 <code>AUTO_INCREMENT</code> 值。</p>
<p>结构内容存放在一个git仓库下，通过shell脚本提交到 gitlab。所有DDL更改由原来依赖于DBA的主动记录，变成被动采集。</p>
<p>测试环境和生产环境表结构总会有些差异，为了兼顾同时收集两个环境的数据，设置了 <code>environment</code> 选项，根据当前所在运行的机器，自动判断采集哪些实例信息。</p>
<h2 id="3-Usage"><a href="#3-Usage" class="headerlink" title="3. Usage"></a>3. Usage</h2><p>首先你需要能够存放表结构信息的git仓库，如gitlab，而且建议设置为私有。<br><a id="more"></a></p>
<ol>
<li><p>安装 git 和 mydumper<br>mydumper 0.9.1 版本需要编译安装，可以参考这里 <a href="https://gist.github.com/nicksantamaria/66726bca586d152a3a01#file-mydumper-install-ubuntu14-04-sh" target="_blank" rel="external">file-mydumper-install-ubuntu14-04-sh</a>。当然 yum 或 apt-get 安装其他版本也是一样的。<br>脚本会尝试自动获取 <code>mydumper</code> 命令的路径。<br>注意配置git权限的时候，最好不允许其它用户手动提交修改仓库内容。</p>
</li>
<li><p>配置db实例地址<br><code>settings.ini</code>示例：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="section">[environment]</span></div><div class="line"><span class="attr">production</span>=puppetmaster</div><div class="line"><span class="attr">test</span>=puppettestmaster</div><div class="line"><span class="section"></span></div><div class="line">[production]</div><div class="line"><span class="attr">production_auth</span>=your_defaultuser:yourpassword</div><div class="line"></div><div class="line"><span class="attr">db_name1</span>=<span class="number">192.168</span>.<span class="number">1.100</span>:<span class="number">3306</span></div><div class="line"><span class="attr">db_name2</span>=<span class="number">192.168</span>.<span class="number">1.101</span>:<span class="number">3306</span></div><div class="line"><span class="attr">db_name3</span>=name3.dbhost.com:<span class="number">3306</span></div><div class="line"><span class="attr">db_name4</span>=<span class="number">192.168</span>.<span class="number">1.100</span>:<span class="number">3306</span>:myuser:mypassword</div><div class="line"><span class="section"></span></div><div class="line">[test]</div><div class="line"><span class="attr">test_auth</span>=user1:password1</div><div class="line"></div><div class="line"><span class="attr">db_name1</span>=<span class="number">10.0</span>.<span class="number">100.1</span>:<span class="number">3306</span></div><div class="line"><span class="attr">db_name2</span>=<span class="number">10.0</span>.<span class="number">100.1</span>:<span class="number">3307</span></div><div class="line"><span class="attr">db_name3</span>=<span class="number">10.0</span>.<span class="number">100.2</span>:<span class="number">3306</span></div><div class="line"></div><div class="line"><span class="attr">db_name4</span>=<span class="number">10.0</span>.<span class="number">100.3</span>:<span class="number">3306</span>:myuser1:mypassword1</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>上面的配置采集 <code>production</code>和<code>test</code>两个环境的表结构，识别两个环境是根据 hostname 来决定的。这样做的好吃就是这个脚本在两个环境下运行不需要做任何修改。  </li>
<li><code>[production]</code>节的名字就是 <code>[environment]</code>节指定的名字 <em>production=xx</em>  </li>
<li><code>dbname1=</code>就是配置各个db，地址+端口的形式。用户名和密码可以继续用 <code>:</code> 跟上</li>
<li><code>production_auth=</code>表示 production 环境下，如 <code>dbname1</code>没有配置用户名时，默认采用这个用户名和密码。这样设计主要是简化配置。<br>该数据库用户需要 select,show view,event,trigger,procedure 权限。<br><code>settings_parser.py</code> 用于解析上面的配置文件，输出<code>collect_tableMeta.sh</code>易处理的格式。</li>
</ul>
<ol>
<li><p>每天运行<br>可使用 <code>python settings_parser.py</code> 测试解析配置是否正常。<br>在配置文件里两个环境下（一般网络不互通）分别加上定时任务：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># Puppet Name: collect_DBschema</span></div><div class="line"><span class="number">5</span> <span class="number">5</span> * * * <span class="meta-keyword">/opt/</span>DBschema/collect_tableMeta.sh &gt;&gt; <span class="meta-keyword">/tmp/</span>collect_DBschema.log <span class="number">2</span>&gt;<span class="variable">&amp;1</span></div></pre></td></tr></table></figure>
</li>
<li><p>展示效果<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-schema-structure1.png" alt="mysql_schema_info"><br><code>A</code> 是新增，<code>M</code> 是修改，<code>D</code> 是删除，一目了然。点开可以前后对比。</p>
</li>
</ol>
<h2 id="4-More"><a href="#4-More" class="headerlink" title="4. More"></a>4. More</h2><p>思路和实现都不难，主要是意识，和如何快速找到解决当前需求的办法。一切都是为了效率 :)</p>
<p>目前所能想到更多的：  </p>
<ol>
<li>有内容push到git仓库后，使用 web hook 发出邮件。  </li>
<li>根据A,B两个表的结构，快速得到A修改成B的样子的DDL。  </li>
<li>event 权限问题。event权限没有所谓的读和修改之分，阿里云RDS就把它从 <em>只读</em> 账号里拿除了，导致收集不到事件定义。所以它的高权限账号管理模式还是很有作用的。  </li>
<li>密码明文。<br>最近公司邀请了一个安全公司给做培训，数据库安全里面，密码明文配置在文件里面是广泛存在的，难搞。</li>
</ol>
<p>GitHub地址：<a href="https://github.com/seanlook/DBschema_gather" target="_blank" rel="external">https://github.com/seanlook/DBschema_gather</a></p>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/11/28/mysql-schema-gather-structure/">http://seanlook.com/2016/11/28/mysql-schema-gather-structure/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Story&quot;&gt;&lt;a href=&quot;#1-Story&quot; class=&quot;headerlink&quot; title=&quot;1. Story&quot;&gt;&lt;/a&gt;1. Story&lt;/h2&gt;&lt;p&gt;在没有形成自己的数据库管理平台以前，数据库实例一多（包括生产和测试环境），许多表要执行DDL会变得异常繁杂。&lt;/p&gt;
&lt;p&gt;说个自己的经历，需要改现网的一个索引来看优化的效果，因为存在风险，不会一次全改，先只改1个库，然后逐步放开。前后验证效果可能花上一两周的时间，除非实现完整的记录了当时的ddl语句和对应的库，否则根本难以记得。这就完全依赖于个人的习惯及能力。&lt;/p&gt;
&lt;p&gt;又比如现网出了个问题，开发追查到一个时间点，想确认那个时候有没有对库表进行过更改操作，如果没有记录表结构变更的历史，也就难以提供需要的信息。&lt;/p&gt;
&lt;p&gt;记录差异，很早就思考过能不能用git来做。终于花了一天时间来实现，并验证、修改达到预期的效果，还算满意。&lt;/p&gt;
&lt;p&gt;github项目地址在文后。&lt;/p&gt;
&lt;h2 id=&quot;2-Concept&quot;&gt;&lt;a href=&quot;#2-Concept&quot; class=&quot;headerlink&quot; title=&quot;2. Concept&quot;&gt;&lt;/a&gt;2. Concept&lt;/h2&gt;&lt;p&gt;思路很简单，就是利用 &lt;code&gt;mydumper&lt;/code&gt; 导出表时会把各表（结构）单独导成一个文件的特性，每天低峰期导出所有对象元数据：表、视图、存储过程、事件、触发器。需要过滤掉 &lt;code&gt;AUTO_INCREMENT&lt;/code&gt; 值。&lt;/p&gt;
&lt;p&gt;结构内容存放在一个git仓库下，通过shell脚本提交到 gitlab。所有DDL更改由原来依赖于DBA的主动记录，变成被动采集。&lt;/p&gt;
&lt;p&gt;测试环境和生产环境表结构总会有些差异，为了兼顾同时收集两个环境的数据，设置了 &lt;code&gt;environment&lt;/code&gt; 选项，根据当前所在运行的机器，自动判断采集哪些实例信息。&lt;/p&gt;
&lt;h2 id=&quot;3-Usage&quot;&gt;&lt;a href=&quot;#3-Usage&quot; class=&quot;headerlink&quot; title=&quot;3. Usage&quot;&gt;&lt;/a&gt;3. Usage&lt;/h2&gt;&lt;p&gt;首先你需要能够存放表结构信息的git仓库，如gitlab，而且建议设置为私有。&lt;br&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="监控" scheme="http://seanlook.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
</feed>
