<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[MySQL实例阻塞分析一例(线程statistics状态)]]></title>
      <url>http://seanlook.com/2017/10/17/rds_disk_io_troubleshooting/</url>
      <content type="html"><![CDATA[<h1 id="1-现象"><a href="#1-现象" class="headerlink" title="1. 现象"></a>1. 现象</h1><p>某日下午下班后低峰期，现网MySQL一个库突然报出大量慢sql，状态是 <code>statistics</code>，但是过后拿这些sql去执行的时候，实际很快。处于 statistics 状态的线程有个特征：查询的都是视图，但看监控那个时间段并没有明显的update/detele/insert。通过我们的快照程序，去分析当时的 innodb status，发现如下信息：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">SEMAPHORES</div><div class="line"><span class="comment">----------</span></div><div class="line">OS WAIT ARRAY INFO: reservation count 17208994</div><div class="line"><span class="comment">--Thread 139964610234112 has waited at srv0srv.cc line 2132 for 14.00 seconds the semaphore:</span></div><div class="line">X-<span class="keyword">lock</span> (wait_ex) <span class="keyword">on</span> RW-latch <span class="keyword">at</span> <span class="number">0x1635a00</span> created <span class="keyword">in</span> <span class="keyword">file</span> dict0dict.cc line <span class="number">900</span></div><div class="line">a writer (<span class="keyword">thread</span> <span class="keyword">id</span> <span class="number">139964610234112</span>) has reserved it <span class="keyword">in</span> <span class="keyword">mode</span> <span class="keyword">wait</span> exclusive</div><div class="line"><span class="built_in">number</span> <span class="keyword">of</span> readers <span class="number">1</span>, waiters flag <span class="number">0</span>, lock_word: ffffffffffffffff</div><div class="line"><span class="keyword">Last</span> <span class="keyword">time</span> <span class="keyword">read</span> <span class="keyword">locked</span> <span class="keyword">in</span> <span class="keyword">file</span> row0purge.cc line <span class="number">720</span></div><div class="line"><span class="keyword">Last</span> <span class="keyword">time</span> write <span class="keyword">locked</span> <span class="keyword">in</span> <span class="keyword">file</span> /home/<span class="keyword">admin</span>/<span class="number">146</span>_20161018140650857_13830810_code/rpm_workspace/<span class="keyword">storage</span>/innobase/srv/srv0srv.cc line <span class="number">2132</span></div><div class="line">OS <span class="keyword">WAIT</span> <span class="built_in">ARRAY</span> INFO: signal <span class="keyword">count</span> <span class="number">256984450</span></div><div class="line"><span class="keyword">Mutex</span> spin waits <span class="number">626367674</span>, rounds <span class="number">2776951802</span>, OS waits <span class="number">1973672</span></div><div class="line">RW-<span class="keyword">shared</span> spins <span class="number">149944457</span>, rounds <span class="number">1650148561</span>, OS waits <span class="number">3972058</span></div><div class="line">RW-excl spins <span class="number">72090467</span>, rounds <span class="number">2017802579</span>, OS waits <span class="number">11148264</span></div><div class="line">Spin rounds per <span class="keyword">wait</span>: <span class="number">4.43</span> <span class="keyword">mutex</span>, <span class="number">11.01</span> RW-<span class="keyword">shared</span>, <span class="number">27.99</span> RW-excl</div><div class="line">...</div><div class="line"><span class="keyword">FILE</span> I/O</div><div class="line"><span class="comment">--------</span></div><div class="line">I/O <span class="keyword">thread</span> <span class="number">0</span> state: waiting <span class="keyword">for</span> i/o request (<span class="keyword">insert</span> buffer <span class="keyword">thread</span>)</div><div class="line">I/O <span class="keyword">thread</span> <span class="number">1</span> state: waiting <span class="keyword">for</span> i/o request (<span class="keyword">log</span> <span class="keyword">thread</span>)</div><div class="line">I/O <span class="keyword">thread</span> <span class="number">2</span> state: waiting <span class="keyword">for</span> i/o request (<span class="keyword">read</span> <span class="keyword">thread</span>)</div><div class="line">I/O <span class="keyword">thread</span> <span class="number">3</span> state: doing <span class="keyword">file</span> i/o (<span class="keyword">read</span> <span class="keyword">thread</span>) ev <span class="keyword">set</span></div><div class="line">I/O <span class="keyword">thread</span> <span class="number">4</span> state: waiting <span class="keyword">for</span> i/o request (<span class="keyword">read</span> <span class="keyword">thread</span>)</div><div class="line">I/O <span class="keyword">thread</span> <span class="number">5</span> state: doing <span class="keyword">file</span> i/o (<span class="keyword">read</span> <span class="keyword">thread</span>) ev <span class="keyword">set</span></div><div class="line">I/O <span class="keyword">thread</span> <span class="number">6</span> state: doing <span class="keyword">file</span> i/o (write <span class="keyword">thread</span>) ev <span class="keyword">set</span></div><div class="line">I/O <span class="keyword">thread</span> <span class="number">7</span> state: waiting <span class="keyword">for</span> i/o request (write <span class="keyword">thread</span>)</div><div class="line">I/O <span class="keyword">thread</span> <span class="number">8</span> state: waiting <span class="keyword">for</span> i/o request (write <span class="keyword">thread</span>)</div><div class="line">I/O <span class="keyword">thread</span> <span class="number">9</span> state: waiting <span class="keyword">for</span> i/o request (write <span class="keyword">thread</span>)</div><div class="line">Pending <span class="keyword">normal</span> aio <span class="keyword">reads</span>: <span class="number">18</span> [<span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">6</span>] , aio writes: <span class="number">1</span> [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>] ,</div><div class="line">ibuf aio <span class="keyword">reads</span>: <span class="number">0</span>, <span class="keyword">log</span> i/o<span class="string">'s: 0, sync i/o'</span>s: <span class="number">0</span></div><div class="line">Pending flushes (fsync) <span class="keyword">log</span>: <span class="number">0</span>; buffer pool: 0</div><div class="line">1346747614 OS file reads, 2869418806 OS file writes, 524616747 OS fsyncs</div><div class="line">22 pending preads, 1 pending pwrites</div><div class="line">6.00 reads/s, 16384 avg bytes/read, 0.00 writes/s, 0.00 fsyncs/s</div><div class="line">...</div><div class="line">ROW OPERATIONS</div><div class="line"><span class="comment">--------------</span></div><div class="line">0 queries inside InnoDB, 0 queries in queue</div><div class="line">38 read views open inside InnoDB</div><div class="line">Main thread process no. 34414, id 139964610234112, state: enforcing dict <span class="keyword">cache</span> <span class="keyword">limit</span></div><div class="line"><span class="built_in">Number</span> <span class="keyword">of</span> <span class="keyword">rows</span> inserted <span class="number">2546811699</span>, <span class="keyword">updated</span> <span class="number">1708150459</span>, deleted <span class="number">1004154696</span>, <span class="keyword">read</span> <span class="number">413168628410</span></div><div class="line"><span class="number">0.00</span> inserts/s, <span class="number">0.00</span> updates/s, <span class="number">0.00</span> deletes/s, <span class="number">54.19</span> <span class="keyword">reads</span>/s</div></pre></td></tr></table></figure></p>
<h1 id="2-分析"><a href="#2-分析" class="headerlink" title="2. 分析"></a>2. 分析</h1><p>从上面的信息知道 Thread 139964610234112 是主线程，在源码 srv0srv.cc:2132 行的地方等待信号14s，这个信号是在 dict0dict.cc:900 地方创建的 RW-latch 排它锁。那么奇怪了，主线程自己在等待自己的互斥锁。<br>由于环境是阿里云的RDS(基于MySQL 5.6.16-log 版本)，拿不到他们的代码，找来 5.6.35 的来看，行号对不上。但好在上段信息的最后面有一个 Main thread state: <code>enforcing dict cache limit</code>，发现在 srv0srv.cc 函数 srv_master_do_active_tasks() 约2137行的位置：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if (cur_time % SRV_MASTER_DICT_LRU_INTERVAL == <span class="number">0</span>) &#123;</div><div class="line">4srv_main_thread_op_info = <span class="string">"enforcing dict cache limit"</span><span class="comment">;</span></div><div class="line">4srv_master_evict_from_table_cache(<span class="number">50</span>)<span class="comment">;</span></div><div class="line">4MONITOR_INC_TIME_IN_MICRO_SECS(</div><div class="line">44MONITOR_SRV_DICT_LRU_MICROSECOND, counter_time)<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>应该是在调用 srv_master_evict_from_table_cache() 从innodb table cache里面清理缓存的地方waiting（这里不是一定会清理，而是先判断空间够不够用，参数50表示只扫描 unused_table list的50%）。<br>srv_master_evict_from_table_cache()：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">srv_master_evict_from_table_cache(</div><div class="line"><span class="comment">/*==============================*/</span></div><div class="line">4ulint	pct_check)	<span class="comment">/*!&lt; in: max percent to check */</span></div><div class="line">&#123;</div><div class="line">4ulint	n_tables_evicted = <span class="number">0</span><span class="comment">;</span></div><div class="line"></div><div class="line">4rw_lock_x_lock(&amp;<span class="keyword">dict_operation_lock);</span></div><div class="line"></div><div class="line">4<span class="keyword">dict_mutex_enter_for_mysql();</span></div><div class="line"></div><div class="line">4n_tables_evicted = <span class="keyword">dict_make_room_in_cache( </span> <span class="comment">/** 在dict0dict.cc里面 **/</span></div><div class="line">44innobase_get_table_cache_size(), pct_check)<span class="comment">;</span></div><div class="line"></div><div class="line">4<span class="keyword">dict_mutex_exit_for_mysql();</span></div><div class="line"></div><div class="line">4rw_lock_x_unlock(&amp;<span class="keyword">dict_operation_lock);</span></div><div class="line"></div><div class="line">4return(n_tables_evicted)<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>就是在 <em>rw_lock_x_lock(&amp;dict_operation_lock)</em> 这个地方获取Latch的时候等待了14s，这个锁就是在数据字典模块 dict0dict.cc:dict_init() 约1065行的地方创建的，与innodb status输出基本一致。<br>关于 <code>dict_operation_lock</code> 直接看注释吧：<br><figure class="highlight mizar"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/** @brief the data dictionary rw-latch protecting dict_sys</div><div class="line"></div><div class="line">table create, drop, etc. <span class="keyword">reserve</span> this <span class="keyword">in</span> X-<span class="keyword">mode</span>; implicit <span class="keyword">or</span></div><div class="line">backround operations purge, rollback, foreign key checks <span class="keyword">reserve</span> this</div><div class="line"><span class="keyword">in</span> S-<span class="keyword">mode</span>; we cannot trust <span class="keyword">that</span> MySQL protects implicit <span class="keyword">or</span> background</div><div class="line">operations a table drop since MySQL does <span class="keyword">not</span> know <span class="keyword">of</span> them; therefore</div><div class="line">we need this; NOTE: a transaction which reserves this must keep book</div><div class="line">on the <span class="keyword">mode</span> <span class="keyword">in</span> trx_t<span class="comment">::dict_operation_lock_mode */</span></div></pre></td></tr></table></figure></p>
<p>在尝试把表定义逐出缓存时获取的是 dict_operation_lock X-mode lock，可是从已有的信息里看不到另一个数据字典锁是什么。<br>之前是怀疑是不是 table_definition_cache, table_open_cache, innodb_open_files 设置小了，视图一般是多表join，更容易消耗打开表的数量，导致不断的逐出cache而导致锁征用。但是检查一番并没发现什么问题，更何况是14s的等待。关于它们的设置和关系，可以参考我的文章 <a href="http://seanlook/2017/10/13/mysql-table_open_cache_file_limits" target="_blank" rel="external">table_open_cache 与 table_definition_cache 对MySQL的影响</a> 。</p>
<p>那么得换个思路了，processlist里面有13个长时间处于 statistics 状态的线程，表示正在计算统计数据，以制定一个查询执行计划。 如果一个线程处于这种状态很长一段时间，可能是磁盘IO性能很差，或者磁盘在执行其他工作。</p>
<p>此时注意到最上面的信息里有 <em>Pending normal aio reads: 18 [0, 12, 0, 6]</em> ，有18个读IO被挂起(实际从监控图 innodb_data_pending_reads看来，有达到过50)，四个read thread有三个处于忙碌状态。再有 innodb_buffer_pool_pages_flushed 在出异常前10s没有任何变化，也就是没有成功的将脏数据刷盘动作。当然这是一个从库，出异常前10s有出现过瞬间20多秒延迟：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/rds_diskio_slave_lag.png" alt=""><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/rds_diskio_bufferpool_flushed.png" alt=""></p>
<p>(这一切关注的都是 18:59:05 之前的数据，之后的时间，一般恢复了都会有瞬间的读行数上涨，这个时候别把它们反当做起因)</p>
<h1 id="3-结论"><a href="#3-结论" class="headerlink" title="3. 结论"></a>3. 结论</h1><p>结合上面的 enforcing dict cache limit 和 statistics IO pending，找到两个有关的bug report:</p>
<ul>
<li><a href="https://bugs.launchpad.net/percona-server/+bug/1500176" target="_blank" rel="external">https://bugs.launchpad.net/percona-server/+bug/1500176</a></li>
<li><a href="https://bugs.mysql.com/bug.php?id=84424" target="_blank" rel="external">https://bugs.mysql.com/bug.php?id=84424</a></li>
</ul>
<p>第一个是使用 pt-online-schema-change 去更改分区表的结构，可能会出现，但目前bug状态是Undecided，我们的环境没有分区表，没外键，也没有改表动作。<br>第二个其实 Not a bug：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Thank you for your bug report. This is, however, not a bug, but a very well known issue.</div><div class="line"></div><div class="line">You have to <span class="keyword">do</span> several things <span class="keyword">in</span> <span class="keyword">order</span> <span class="keyword">to</span> alleviate the problem:</div><div class="line"></div><div class="line">* increase the additional <span class="keyword">memory</span> pool</div><div class="line">（注：这里我认为不应该是additional <span class="keyword">memory</span> pool，而是 <span class="keyword">buffer_pool</span>，因为现在<span class="keyword">innodb</span>内存管理基本是调用系统malloc，即innodb_use_sys_malloc=<span class="keyword">ON</span>，参考https://dev.mysql.com/doc/refman/<span class="number">5.7</span>/en/<span class="keyword">innodb</span>-<span class="keyword">performance</span>-use_sys_malloc.html）</div><div class="line">* increase total <span class="built_in">number</span> <span class="keyword">of</span> <span class="keyword">file</span> handles available <span class="keyword">to</span> MySQL</div><div class="line">* increase <span class="built_in">number</span> <span class="keyword">of</span> <span class="keyword">file</span> handles <span class="keyword">for</span> <span class="keyword">InnoDB</span></div><div class="line">* improve <span class="keyword">performance</span> <span class="keyword">of</span> the I/O <span class="keyword">on</span> your operating <span class="keyword">system</span></div></pre></td></tr></table></figure></p>
<p>说到底就是数据库服务器IO遇到问题了，可以通过增加 buffer_pool 来缓存更多的数据，或者提高服务器IO能力，这个范围就广了： <a href="https://dev.mysql.com/doc/refman/5.6/en/optimizing-innodb-diskio.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/en/optimizing-innodb-diskio.html</a> 。<br>然而生产服务器都运行了1年之久，高峰期都没出现过IO问题，现在何况低峰期，也没有认为数据操作。那这个锅只能交给阿里RDS了：怀疑是实例所在物理机磁盘有抖动。</p>
<p>分析这么久得出这个结论，却不能做什么，因为我们没办法看到服务器级别的IO stats。其实想到去年也有实例出现过类似 statistics 问题，向阿里云提工单确认物理机状态，得到的结论都是：“是的，物理机有抖动。需要申请迁移实例吗”，但是从来拿不到依据。如果自己能看到OS级别的监控，其实都不需要本文这么冗长的分析。</p>
<p><strong>参考</strong></p>
<ul>
<li><a href="https://dba.stackexchange.com/questions/55969/statistics-state-in-mysql-processlist" target="_blank" rel="external">https://dba.stackexchange.com/questions/55969/statistics-state-in-mysql-processlist</a></li>
<li><a href="http://mysqlinternals.blogspot.com/2015/05/list-of-background-operations-performed.html" target="_blank" rel="external">http://mysqlinternals.blogspot.com/2015/05/list-of-background-operations-performed.html</a></li>
<li><a href="http://imysql.com/2015/06/10/mysql-faq-processlist-thread-states.shtml" target="_blank" rel="external">http://imysql.com/2015/06/10/mysql-faq-processlist-thread-states.shtml</a></li>
<li><a href="http://imysql.com/2016/11/20/mysql-faq-what-cause-diskio-so-high.shtml" target="_blank" rel="external">http://imysql.com/2016/11/20/mysql-faq-what-cause-diskio-so-high.shtml</a></li>
</ul>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2017/10/17/rds_disk_io_troubleshooting/">http://seanlook.com/2017/10/17/rds_disk_io_troubleshooting/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[table_open_cache 与 table_definition_cache 对MySQL(内存)的影响]]></title>
      <url>http://seanlook.com/2017/10/13/mysql-table_open_cache_file_limits/</url>
      <content type="html"><![CDATA[<h1 id="1-现象，内存使用大"><a href="#1-现象，内存使用大" class="headerlink" title="1. 现象，内存使用大"></a>1. 现象，内存使用大</h1><p>首先说一下最近遇到的一个现象，因为分库的缘故，单实例里面的表的数量增加了20倍，总数将近达到10000个。在开发环境明显感觉到执行简单查询都很慢，在processlist里面看到状态 opening table 达到好几秒但数据库并没有什么负载。本能的想到应该要加大 <code>table_open_cache</code>，可是加大后发现MySQL刚启动 RES 就占用了2.5G内存，之前才500-600M的样子。</p>
<p>只是将 <code>table_open_cache</code> 从默认的2000，增加到10000（先不论这个值合不合理），就独占了2G的内存，这对于生产环境内存浪费是不可接受的。还好，关于这个问题的讨论有不少，感兴趣的话可以阅读 <a href="https://bugs.mysql.com/bug.php?id=68287" target="_blank" rel="external">#bug 68287</a>, <a href="https://bugs.mysql.com/bug.php?id=68514" target="_blank" rel="external">#bug 68514</a>, <a href="https://www.percona.com/forums/questions-discussions/mysql-and-percona-server/percona-server-5-6/12015-percona-5-6-14-56-very-high-memory-usage" target="_blank" rel="external">12015-percona-5-6-14-56-very-high-memory-usage</a>。</p>
<p>Oracle官方工程师并不认为这是个bug，导致初始化分配这么多内存的原因是，<strong>开启了 Performance_Schema</strong> 。P_S测量数据库的性能指标，需要提前一次性分配内存，而不是随着数据库运行逐渐申请内存。</p>
<p>下表是不同参数组合下内存占用的测试结果：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql_table_cache_1.png" alt=""></p>
<p>（注：可以通过这个来查看PFS里面哪些占内存比较多，<code>mysql -hxxxx -Pxxx -uxx -pxx -e &quot;show engine performance_schema status&quot;|grep memory|sort -nr -k3 |head</code> ）</p>
<p>对于 table_open_cache 设置的非常大的情况下，即使还有许多cache多余，但P_S都需要分配这个数量的内存。解决这个内存大的问题有3个方向：</p>
<ol>
<li>table_open_cache, table_definition_cache, max_connections 设置合理</li>
<li>关闭 performance_schema</li>
<li>保持 PFS 开启，关闭测量 max_table_instances和max_table_handles  <ul>
<li>performance_schema_max_table_instances: 最大测量多少个表对象<br>对应 (pfs_table_share).memory，我的环境里固定 277600000 bytes</li>
<li>performance_schema_max_table_handles: 最大打开表的总数<br>对应(pfs_table).memory，随着 table_open_cache 的增大而增大</li>
</ul>
</li>
</ol>
<p>关闭的方法是在my.cnf里面设置以上变量为 0 。默认是 -1 ，表示 autosize，即根据 table_open_cache/table_def_cache/max_connections 的值自动设置，相关代码 <code>pfs_autosize.cc</code>：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">PFS_sizing_data *estimate_hints(PFS_global_param *param)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span> ((param-&gt;m_hints.m_max_connections &lt;= MAX_CONNECTIONS_DEFAULT) &amp;&amp;</div><div class="line">      (param-&gt;m_hints.m_table_definition_cache &lt;= TABLE_DEF_CACHE_DEFAULT) &amp;&amp;</div><div class="line">      (param-&gt;m_hints.m_table_open_cache &lt;= TABLE_OPEN_CACHE_DEFAULT))</div><div class="line">  &#123;</div><div class="line">    <span class="comment">/* The my.cnf used is either unchanged, or lower than factory defaults. */</span></div><div class="line">    <span class="keyword">return</span> &amp; small_data;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> ((param-&gt;m_hints.m_max_connections &lt;= MAX_CONNECTIONS_DEFAULT * <span class="number">2</span>) &amp;&amp;</div><div class="line">      (param-&gt;m_hints.m_table_definition_cache &lt;= TABLE_DEF_CACHE_DEFAULT * <span class="number">2</span>) &amp;&amp;</div><div class="line">      (param-&gt;m_hints.m_table_open_cache &lt;= TABLE_OPEN_CACHE_DEFAULT * <span class="number">2</span>))</div><div class="line">  &#123;</div><div class="line">    <span class="comment">/* Some defaults have been increased, to "moderate" values. */</span></div><div class="line">    <span class="keyword">return</span> &amp; medium_data;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/* Looks like a server in production. */</span></div><div class="line">  <span class="keyword">return</span> &amp; large_data;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在阿里RDS中，performance_schema_max<em>*</em>系列变量不能单独disable，只能全局关闭PFS。这里我们尝试寻求一个合理table_cache的范围。<br><a id="more"></a><br>那么 <code>table_open_cache</code> 与 <code>table_definition_cache</code> 设置一个什么值才算合理呢？</p>
<h1 id="2-理解-table-open-cache-与-table-definition-cache"><a href="#2-理解-table-open-cache-与-table-definition-cache" class="headerlink" title="2. 理解 table_open_cache 与 table_definition_cache"></a>2. 理解 table_open_cache 与 table_definition_cache</h1><p>来理解一下 <code>table_open_cache</code> 到底是来干嘛的，文档里或者网上的文章，通通解释是“用于控制MySQL Server能同时打开表的最大个数”。如果继续问这个个数怎么算呢？</p>
<p>我来尝试解答一下。MySQL是多线程的，多个会话上有可能会同时访问同一个表，mysql是允许这些会话各自独立的打开这个表，而表最终都是磁盘上的数据文件。(默认假设innodb_file_per_table=1)，打开文件需要获取文件描述符(File Descriptor)，为了加快这个open table的速度，MySQL在Server层设计了这个cache：</p>
<blockquote>
<p>The idea behind this cache is that most statements don’t need to go to a central table definition cache to get a TABLE object and therefore don’t need to lock LOCK_open mutex. Instead they only need to go to one Table_cache instance (the specific instance is determined by thread id) and only lock the mutex protecting this cache. DDL statements that need to remove all TABLE objects from all caches need to lock mutexes for all Table_cache instances, but they are rare.</p>
</blockquote>
<p>table_cache 减少了表级别 LOCK_open 这个互斥量的获取，改用获取 表对象缓存实例 列表的mutex。简化成如下过程：</p>
<ol>
<li>假设当前并发200个连接，table_open_cache=200，其中有50连接都在访问同一张表</li>
<li>mysql内部维护了一个 unused_table_list，在a表上的请求结束后，会把这个thread刚才用过的 table object 放入unused_table_list</li>
<li>每个表有个key，可以通过hash快速定位到表a的所有可用object，如果后面一下子100个连接上来访问表a，内部会先从 unused_table_list 去找这个表已经缓存过的对象(get_table)，比如前50个可以直接拿来用(unlink_unused_table)</li>
<li>后50个则需要调用系统内核，拿到文件描述符。</li>
<li>用完之后会，放回到unused_table_list，并将这个表的key放到hash表的前面。</li>
<li>如果缓存的对象个数超过了 table_open_cache，则会通过LRU算法，把认为不用的表对象逐出。</li>
</ol>
<p>从上面的过程应该很容易理解 table_open_cache 与 table_definition_cache 的区别。</p>
<ul>
<li><code>table_def_cache</code> 也是一个key/value形式的hash表，但每个表只有一个值，值/对象的内容就是表的元数据信息(Data Dictionay，frm文件里面的信息)，如表结构、字段、索引，它是一个全局的结构，并且不占用文件描述符。</li>
<li>而<code>table_open_cache</code>的key/value的值是一个列表，表示这个表的多个 Table_cache_element，他们共用这个表的 definition (代码层定义为TABLE_SHARE对象)。</li>
</ul>
<p>(注：我们在row格式的binlog里面看到的 table_map_id 就是在 TABLE_SHARE 里面定义的，表结构变更、缓存被逐出，都会导致 table_map_id 递增。)</p>
<h2 id="2-1-源码说明"><a href="#2-1-源码说明" class="headerlink" title="2.1 源码说明"></a>2.1 源码说明</h2><p>源代码里面关键函数</p>
<ul>
<li><p>sql_base.cc:</p>
<ul>
<li><code>open_table()</code> 打开表的入口<br>打开之前会判断mdl锁条件满不满足，再调用 get_table() 尝试从cache里面获取<br>如果找到，还要判断版本信息，goto table_found<br>如果没找到，注意get_table()接收了一个 table_share 参数，即使没找到table cache，也努力获取table definition，如果拿到table_share则要获取一次LOCK_open互斥量，增加表的引用计数。<br>make a new table: 调用 open_table_from_share() 从磁盘上打开表<br>调用 add_used_table() 将表对象放入缓存，table_open_cache_misses++</li>
<li><code>get_table_share()</code> 从 table definition cache 获取表定义信息<br>如果cache中没有，则调用 table.cc:open_table_def() 从文件系统上读取</li>
</ul>
</li>
<li><p>table_cache.h:Table_cache::  </p>
<ul>
<li><code>m_unused_tables</code><br>该列表内容是table cache中没有被其它线程使用的table object。最近使用过的table object会被添加到列表的尾部，头部就成为最近没被使用的(LRU)</li>
<li><code>m_table_count</code><br>table objects个数，包括正在使用中，以及unused<br>所有table cache instances中这个count加起来，就是 Open_tables 的结果</li>
<li><code>get_table()</code> 根据key(表名)从cache hash里面获取 unused table object<br>得到之后，将这个object从列表unlink掉，并且放入used table list</li>
<li><code>add_used_table()</code> 将新创建的 table object 放入table cache<br>这是说明当前连接要打开的表在cache里面没有，所以要自己打开，并且放入used table list</li>
<li><code>release_table()</code> 用完后将表对象放回table cache的unused列表<br>如果table_share版本比较旧，则直接remove掉</li>
<li><code>remove_table()</code>  </li>
<li><code>free_unused_tables_if_necessary()</code><br>每次 add_used_table() 都会调用，判断是否需要从 table cache object list清除多余的cache，需要锁定LOCK_open。调用remove_table()<br>清除条件：m_table_count &gt; table_cache_size / table_cache_instances  </li>
</ul>
</li>
<li><p>table.cc:</p>
<ul>
<li><code>open_table_from_share()</code><br>根据 table_share 信息来打开表。调用 outparam-&gt;file-&gt;ha_open()，<em>too many files opened</em> 错误在这里抛出</li>
<li><code>open_table_def()</code><br>从 frm 中读取表定义</li>
</ul>
</li>
</ul>
<p>以上过程没有考虑视图、临时表、分区表。table_cache虽然会有额外的内存开销，但简化了对表状态的维护，打开表这个动作因为省去了获取 LOCK_open mutex 以及直接操作打开数据文件，而变得高效。<br>这部分参考taobao数据库内核月报的2篇文章，会比较清晰：</p>
<ol>
<li>open file limits： <a href="http://mysql.taobao.org/monthly/2015/08/07/" target="_blank" rel="external">http://mysql.taobao.org/monthly/2015/08/07/</a></li>
<li>MySQL表定义缓存：<a href="http://mysql.taobao.org/monthly/2015/08/10/" target="_blank" rel="external">http://mysql.taobao.org/monthly/2015/08/10/</a></li>
</ol>
<h1 id="3-设置参考因素"><a href="#3-设置参考因素" class="headerlink" title="3 设置参考因素"></a>3 设置参考因素</h1><h2 id="3-1-table-open-cache"><a href="#3-1-table-open-cache" class="headerlink" title="3.1 table_open_cache"></a>3.1 table_open_cache</h2><p><code>table_open_cache</code> 默认值 Version&lt;=5.6.7: 400, Version&gt;=5.6.8: 2000，设定它的值有3个因素：</p>
<ol>
<li><p><strong>最大并发连接数</strong><br>这是最重要的考量。假设业务高峰期 <strong>活跃并发</strong> 连接是200，60%是单表查询，30%是两个表join，5%是三个表join，5%会创建临时表。那么table_open_cache可以是：<br>200 × (60% × 1 + 30% × 2 + 5% × 3 + 5%  × 2) = 290<br>当然这里不是要如何精确的计算，只是说明有哪些需要考虑的。网上有大部分文章都讲设置 max_connections * N，N是sql里面表的最大个数，我个人觉得如果max_connections值超过2000的话，就不要这样算，因为max_connection一般是不允许达到的，高峰期活跃并发连接数才是比较好的基准。</p>
</li>
<li><p><strong>存储引擎</strong></p>
<ul>
<li><p>MyISAM引擎<br>因为myisam数据文件和索引是分开存放的，所以<strong>第一次</strong>打开表时需要2个描述符，后续如果并发2个会话访问该表，另一个会话只需要多开一个数据文件的描述符。索引文件描述符可被线程共享。因此它所需要的 table_cache 的值并不是简单上面的值的2倍，而是跟表的访问分布有关。当然现在已经几乎不用MyISAM引擎了。<br>Merge引擎也类似，因为Merge表可以有多个底层表，需要多个文件描述符。</p>
</li>
<li><p>InnoDB引擎<br><code>table_open_cache</code>对InnoDB引擎其实作用不大，它是Server层的机制，而InnoDB不依赖server层去管理表空间，它使用自己的内部函数去打开ibd，创建handler来操作表。（handler只是内存对象，不牵涉文件操作。从实验结果看来，innodb每个表最多只有一个File Descriptor打开，myisam表如果并发访问一个表，会打开多个FD并cache起来） </p>
<p>注： <code>flush tables</code> 命令会关闭所有当前打开的表对象缓存/handler，所以状态变量 <code>open_tables</code> 会置0，但<code>opened_tables(_definition)</code>、<code>Table_open_cache_misses(_hits)</code>只会在实例重启后置0。对MyISAM引擎来说，它还会释放MYI/MYD文件描述符，而InnoDB引擎则不会释放ibd文件描述符。</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show variables like <span class="string">"table_%"</span>;</div><div class="line">+----------------------------+-------+</div><div class="line">|<span class="string"> Variable_name              </span>|<span class="string"> Value </span>|</div><div class="line">+----------------------------+-------+</div><div class="line">|<span class="string"> table_definition_cache     </span>|<span class="string"> 1400  </span>|</div><div class="line">|<span class="string"> table_open_cache           </span>|<span class="string"> 2000  </span>|</div><div class="line">|<span class="string"> table_open_cache_instances </span>|<span class="string"> 1     </span>|</div><div class="line">+----------------------------+-------+</div><div class="line">3 rows in set</div><div class="line"></div><div class="line">mysql&gt; show global status like <span class="string">"%open%"</span>;</div><div class="line">+----------------------------+-----------+</div><div class="line">|<span class="string"> Variable_name              </span>|<span class="string"> Value     </span>|</div><div class="line">+----------------------------+-----------+</div><div class="line">|<span class="string"> Com_ha_open                </span>|<span class="string"> 0         </span>|</div><div class="line">|<span class="string"> Com_show_open_tables       </span>|<span class="string"> 0         </span>|</div><div class="line">|<span class="string"> Innodb_num_open_files      </span>|<span class="string"> 364       </span>|<span class="string">  -- 打开的ibd文件的数量，打开后一般不会关闭，除非超过了 innodb_open_files 的设定</span></div><div class="line">|<span class="string"> Open_files                 </span>|<span class="string"> 52        </span>|<span class="string">  -- 打开的常规文件数量，如slow_log,error_log等，不包含socket和具体存储引擎有关的文件，所以一般都无需关注这个，它与innodb_open_files也没关系</span></div><div class="line">|<span class="string"> Open_streams               </span>|<span class="string"> 0         </span>|</div><div class="line">|<span class="string"> Open_table_definitions     </span>|<span class="string"> 470       </span>|<span class="string">  -- 当前缓存了多少.frm文件</span></div><div class="line">|<span class="string"> Open_tables                </span>|<span class="string"> 448       </span>|<span class="string">  -- 当前table_cache里面缓存的table object数量</span></div><div class="line">|<span class="string"> Opened_files               </span>|<span class="string"> 35617170  </span>|</div><div class="line">|<span class="string"> Opened_table_definitions   </span>|<span class="string"> 117134    </span>|</div><div class="line">|<span class="string"> Opened_tables              </span>|<span class="string"> 117409    </span>|<span class="string">  -- 自总MySQL启动以来打开表的总次数，如果在缓存中找到直接使用，不会增加这个值</span></div><div class="line">|<span class="string"> Slave_open_temp_tables     </span>|<span class="string"> 0         </span>|</div><div class="line">|<span class="string"> Table_open_cache_hits      </span>|<span class="string"> 130148442 </span>|</div><div class="line">|<span class="string"> Table_open_cache_misses    </span>|<span class="string"> 117404    </span>|</div><div class="line">|<span class="string"> Table_open_cache_overflows </span>|<span class="string"> 0         </span>|</div><div class="line">+----------------------------+-----------+</div><div class="line">14 rows in set</div><div class="line"></div><div class="line">mysql&gt; flush tables;</div><div class="line">Query OK, 0 rows affected</div><div class="line"></div><div class="line">mysql&gt; show global status like <span class="string">"%open%"</span>;</div><div class="line">+----------------------------+-----------+</div><div class="line">|<span class="string"> Variable_name              </span>|<span class="string"> Value     </span>|</div><div class="line">+----------------------------+-----------+</div><div class="line">|<span class="string"> Com_ha_open                </span>|<span class="string"> 0         </span>|</div><div class="line">|<span class="string"> Com_show_open_tables       </span>|<span class="string"> 0         </span>|</div><div class="line">|<span class="string"> Innodb_num_open_files      </span>|<span class="string"> 364       </span>|</div><div class="line">|<span class="string"> Open_files                 </span>|<span class="string"> 4         </span>|</div><div class="line">|<span class="string"> Open_streams               </span>|<span class="string"> 0         </span>|</div><div class="line">|<span class="string"> Open_table_definitions     </span>|<span class="string"> 6         </span>|</div><div class="line">|<span class="string"> Open_tables                </span>|<span class="string"> 6         </span>|</div><div class="line">|<span class="string"> Opened_files               </span>|<span class="string"> 35617220  </span>|</div><div class="line">|<span class="string"> Opened_table_definitions   </span>|<span class="string"> 117140    </span>|</div><div class="line">|<span class="string"> Opened_tables              </span>|<span class="string"> 117415    </span>|</div><div class="line">|<span class="string"> Slave_open_temp_tables     </span>|<span class="string"> 0         </span>|</div><div class="line">|<span class="string"> Table_open_cache_hits      </span>|<span class="string"> 130148523 </span>|</div><div class="line">|<span class="string"> Table_open_cache_misses    </span>|<span class="string"> 117410    </span>|</div><div class="line">|<span class="string"> Table_open_cache_overflows </span>|<span class="string"> 0         </span>|</div><div class="line">+----------------------------+-----------+</div><div class="line">14 rows in set</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>opened_tables</strong><br>根据第一步的最大并发数设定的值不一定准确，在MySQL运行一段时间后，可以观察 opened_tables 增加的速度，决定是否需要扩大 table_open_cache。如果查询里面有许多要用到temporary table，这个值也会增加的很快，此时也可以比较 Table_open_cache_hits 与 Table_open_cache_misses 的值，正常的话 hits/(hits+misses ) 应该在99.9%以上。</p>
</li>
</ol>
<p>还有一个标准，<code>Open_tanles</code>的值如果与 <code>table_open_cache</code>很接近，那么也要考虑增大 table_open_cache 。</p>
<p>但不要设置的太大，大部分情况不要超过10000，原因一是如第一部分看到，performance_schema会分配过多内存；二是cache的查找速度会因为越来越多而变慢；三是某些情况不缓存也许更好，比如几万张表，他们都很均匀的被使用，如果不全部缓存起来，那么缓存始终会被不断的逐出更新，效率反而更低。</p>
<h1 id="3-2-table-definition-cache-与-innodb-open-files"><a href="#3-2-table-definition-cache-与-innodb-open-files" class="headerlink" title="3.2 table_definition_cache 与 innodb_open_files"></a>3.2 table_definition_cache 与 innodb_open_files</h1><p>至于 table_definition_cache，默认值是 <em>400 + (table_open_cache / 2)</em>，默认最大2000。如果实际表的数据量比较多，最好是能够把元数据全部cache起来，设置与表的总数量差不多大就行。</p>
<p>InnoDB engine层有自己参数 <code>innodb_open_files</code>，限制同时打开 ibd 文件的句柄数，作用与 table_definition_cache 相同，逐出策略也是一样采用LRU算法。innodb读取INNODB_SYS_TABLES,INNODB_SYS_COLUMNS,INNODB_SYS_FIELDS,INNODB_SYS_INDEXES等数据字典，放入 table_dict 。当需要访问这个表的时候，创建 handler 对象。<br>这两个变量本身没啥关系，但是设置不合理的时候mysql会改变它的值：</p>
<p>innodb_open_files的值如果设置大于 open_files_limit，且大于table_open_cache，那么会自动设置为table_def_cache大小。<code>innobase\handler\ha_innodb.cc</code>：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (innobase_open_files &lt; <span class="number">10</span>) &#123;</div><div class="line">  innobase_open_files = <span class="number">300</span>;</div><div class="line">  <span class="keyword">if</span> (srv_file_per_table &amp;&amp; table_cache_size &gt; <span class="number">300</span>) &#123;</div><div class="line">    innobase_open_files = table_cache_size;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (innobase_open_files &gt; (<span class="keyword">long</span>) open_files_limit) &#123;</div><div class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,</div><div class="line">                    <span class="string">"innodb_open_files should not be greater"</span></div><div class="line">                    <span class="string">" than the open_files_limit.\n"</span>);</div><div class="line">  <span class="keyword">if</span> (innobase_open_files &gt; (<span class="keyword">long</span>) table_cache_size) &#123;</div><div class="line">    innobase_open_files = table_cache_size;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>这里顺便提一下 <code>open_file_limit</code>, 它限制的是mysqld进程总共能够打开文件描述符的个数，是个Server层的参数，它的值应该要小于服务器的最大限制，否则OS层报错会比mysql error log报错更惨。<br>关于它的计算公式，网上有很多，不属本文的内容，感兴趣可以参考 <a href="http://www.cnblogs.com/zhoujinyi/archive/2013/01/31/2883433.html" target="_blank" rel="external">http://www.cnblogs.com/zhoujinyi/archive/2013/01/31/2883433.html</a> </p>
<p>参考</p>
<ul>
<li><a href="http://hidba.org/?p=170" target="_blank" rel="external">http://hidba.org/?p=170</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.6/en/table-cache.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/en/table-cache.html</a></li>
<li><a href="http://mysql.taobao.org/monthly/2015/08/07/" target="_blank" rel="external">http://mysql.taobao.org/monthly/2015/08/07/</a></li>
<li><a href="https://dev.mysql.com/doc/dev/mysql-server/8.0.0/classTable__cache.html" target="_blank" rel="external">https://dev.mysql.com/doc/dev/mysql-server/8.0.0/classTable__cache.html</a></li>
<li><a href="http://www.orczhou.com/index.php/2010/10/mysql-open-file-limit/" target="_blank" rel="external">http://www.orczhou.com/index.php/2010/10/mysql-open-file-limit/</a></li>
</ul>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2017/10/13/mysql-table_open_cache_file_limits/">http://seanlook.com/2017/10/13/mysql-table_open_cache_file_limits/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[“大”事务引起的锁等待分析案例]]></title>
      <url>http://seanlook.com/2017/09/23/mysql-big-trx-lock-case/</url>
      <content type="html"><![CDATA[<h1 id="1-现象"><a href="#1-现象" class="headerlink" title="1. 现象"></a>1. 现象</h1><p>生产环境数据库在某一刻突然发现大量活跃连接，而且大部分状态是 <code>updating</code> 。问题出现在周六上午，持续了大概三四分钟，得益于我们自己的快照程序，拿到了当时现场的的processlist, 锁等待关系，innodb status 信息：(经过过滤处理)</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-bigtrx-lockinfo.png" alt="mysql-bigtrx-lockinfo.png"><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-bigtrx-processlist.png" alt="mysql-bigtrx-processlist.png"></p>
<p>innodb_status.txt片段：<br><a href="https://gist.coding.net/u/seanlook/d6ad649f81c64e23a25f3a980c44a1fe" target="_blank" rel="external">var_mydb_snapshot.html</a></p>
<p>首先在 Lock Waits Info 一节，看到每行的trx_id(事务)的role分为 Blocker(引起阻塞的线程) 与 Blockee（被阻塞者）；最后一列 blocking_trx_id 在role是Blockee时才有值，代表谁阻塞了当前事务。<br>根据上面的关系，可以得出以下结论：</p>
<ol>
<li>事务 <strong>19705811640</strong> 运行了231s，阻塞了19706118937、19706124453、19706124752，而这些事务都在做同一个UPDATE语句</li>
<li>被锁定的记录是 mydb.mytable1表的主键索引值为 5317885 行</li>
<li>事务 19706124752 既被阻塞，也阻塞了别人19706125253</li>
<li>不难发现 <strong>19705811640</strong> 应该最先运行的事务，且对其它事务产生了链式阻塞，它的thread_id是 9898630，来源IP</li>
</ol>
<p>但是当你兴冲冲的找到引起阻塞的事务 19705811640 在做什么事情时，发现它没有任何sql的信息，lock info以及processlist里面都是None。那么有哪些情况会导致在会话是活跃的，但sql的内容为空：</p>
<ol>
<li>执行show processlist的时候，刚好在事务里面两个sql的中间</li>
<li>sql已经执行完成，但长时间没有提交</li>
</ol>
<h1 id="2-初步分析"><a href="#2-初步分析" class="headerlink" title="2. 初步分析"></a>2. 初步分析</h1><p>其实这个现象已经遇到过很多次了，第1个原因常发生在 大量单条记录更新 的情况，一个sql在一个事务里循环执行10000次，即使每条都很快，但大部分时间都在网络传输上，（可以改成批量的形式）。在本案例基本上能确定的是第2个原因：事务开启之后，sql也执行了，但中间又做别的事情去了。那么怎样才能知道这个事务是什么内容呢？两个方向去找：</p>
<ol>
<li>从来源ip上的应用程序的日志里分析</li>
<li>binlog里面分析</li>
</ol>
<a id="more"></a>
<p>应用程序日志里可以看 10:21:00 ~ 10:26:00 之间，mydb.mytable1 表上主键id=5317885 在做什么事情。因为我们上了听云，在听云APM里面也可以清楚的看到这个时间点的哪个方法慢：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-bigtrx-tingyun.png" alt="mysql-bigtrx-tingyun"></p>
<p> 响应时间230多秒，从“相关SQL”里面看到操作的记录内容，确定就是它了(根据innodb status快照时间 - ACTIVE 230.874 sec，倒退得到的时间与这里刚好吻合)。从接口名称也清楚的知道是在进行禁用用户的操作，猜想：<br>禁用用户的逻辑上有先挪到回收站，再删资料、删权限、删关系，清理缓存等等一系列操作，放在事务里保证他们的原子性，似乎是合理的。但为什么执行了将近4分钟还没有提交呢，分析相关的sql效率都很高。</p>
<p>有三种情况：</p>
<ol>
<li>这个事务执行到一半，它需要操作的数据被别人锁住，等待了这么久</li>
<li>类似事务要操作5000条数据，但是一条一条的操作，然后一起提交（已出现过类似的例子）</li>
<li>事务务执行完成很快，但调用其它接口迟迟没有返回，导致事务没提交。</li>
</ol>
<p>不会是1和2，因为从一开始的分析看到事务 <strong>19705811640</strong> 都是在阻塞别人，而不是受害者。那么结合上图中有个有两个操作redis的接口执行时间占比96%，可以下定论了：<br>在禁用用户时，开启了一个事务，四五个增删改很快完成，但是操作redis缓存过程比较慢，也包含在了事务代码之间，长时间没有提交。前端用户操作的时候因为迟迟没有响应，进行了多次重复点击操作，因为影响的还是同一行记录，所以只能等待前面的锁释放。</p>
<p>Bingo，跟最初的设想一样。但是，开发检查代码之后告诉我，没有用事务！那前面的猜想和结论都不成立了。</p>
<h1 id="3-论证"><a href="#3-论证" class="headerlink" title="3. 论证"></a>3. 论证</h1><p>于是走另外一个思路，分析binlog。如果binlog里面记录那条记录修改(设置禁用标志)和删除（真正删除）的时间是 10:21:58，说明数据库操作那时候就完成；如果是10:25:xx，说明最后才提交。为了弄明白这个问题，也为了搞情况事务的内容到底是什么，解析当时的binlog。（阿里云rds的数据追踪功能本来挺好用，但这一次用着报内部错误）</p>
<p>还记得前面那个thread_id吗，可以用在这里过滤(也可以用记录值)：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ mysqlbinlog <span class="comment">--base64-output=decode-rows -vv --start-datetime="2017-09-16 10:21:00"  --stop-datetime="2017-09-16 10:27:00" mysql-bin.010743 &gt; mysql-bin.010743.sql</span></div><div class="line">$ grep -B5 -A200 <span class="string">"thread_id=9898630"</span> mysql-bin.<span class="number">010743</span>.sql &gt; mysql-bin.<span class="number">010743</span>.sql.txt</div><div class="line"></div><div class="line">$ ./summarize_binlogs.sh &gt; mysql-bin.<span class="number">010743</span>.sql.xid  # 会比较慢</div><div class="line">$ cat mysql-bin.<span class="number">010743</span>.sql.xid|grep Transaction|awk '&#123;<span class="keyword">if</span>($<span class="number">19</span>&gt;<span class="number">0</span>)print&#125;'</div><div class="line">[Transaction total : 10 <span class="type">Insert</span>(s) : 1 <span class="type">Update</span>(s) : 0 <span class="type">Delete</span>(s) : 9 <span class="type">Xid</span> : 99370218911 <span class="type">period</span> : 190 ] </div><div class="line">[Transaction total : 10 <span class="type">Insert</span>(s) : 1 <span class="type">Update</span>(s) : 0 <span class="type">Delete</span>(s) : 9 <span class="type">Xid</span> : 99370268888 <span class="type">period</span> : 236 ]</div></pre></td></tr></table></figure></p>
<p>上面的 summarize_binlogs.sh 脚本来源于《MySQL运维内参》，可以汇总分析binlog里面事务的执行时间。</p>
<p>mysql-bin.010743.sql.txt:<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"># at <span class="number">112037144</span></div><div class="line">#<span class="number">170916 10:25</span>:<span class="number">54</span> server id <span class="number">1508836346</span>  end_log_pos <span class="number">112037192</span> CRC32 <span class="number">0x25216430</span>    GTID [commit=yes]</div><div class="line">SET @@SESSION.GTID_NEXT= '<span class="number">56506509</span>-b<span class="number">971-11e6</span>-<span class="number">8</span>c19-<span class="number">6</span>c92bf2c8aaf:<span class="number">10306353216</span>'/*!*/<span class="comment">;</span></div><div class="line"># at <span class="number">112037192</span></div><div class="line">#<span class="number">170916 10:21</span>:<span class="number">58</span> server id <span class="number">1508836346</span>  end_log_pos <span class="number">112037268</span> CRC32 <span class="number">0</span>x9cddeec2    Query    thread_id=<span class="number">9898630</span>    exec_time=<span class="number">0</span>    error_code=<span class="number">0</span></div><div class="line">SET TIMESTAMP=<span class="number">1505528518</span>/*!*/<span class="comment">;</span></div><div class="line">SET @@session.sql_mode=<span class="number">2097152</span>/*!*/<span class="comment">;</span></div><div class="line">BEGIN</div><div class="line">/*!*/<span class="comment">;</span></div><div class="line"># at <span class="number">112037268</span></div><div class="line">#<span class="number">170916 10:21</span>:<span class="number">58</span> server id <span class="number">1508836346</span>  end_log_pos <span class="number">112037342</span> CRC32 <span class="number">0</span>x373641db    Table_map: `mydb`.`mytable01_del` mapped to number <span class="number">950163</span></div><div class="line"># at <span class="number">112037342</span></div><div class="line">#<span class="number">170916 10:21</span>:<span class="number">58</span> server id <span class="number">1508836346</span>  end_log_pos <span class="number">112037460</span> CRC32 <span class="number">0</span>x4bba2efb    Write_rows: table id <span class="number">950163</span> flags: STMT_END_F</div><div class="line"></div><div class="line">BINLOG '</div><div class="line">xoq8WRP6A+<span class="number">9</span>ZSgAAAN6NrQYAAJN/DgAAAAEACWRfZWNfdXNlcgAKdF91c2VyX2RlbAAMCAgICBEB</div><div class="line">CAgRCA8IBAAAyAAAAdtBNjc=</div><div class="line">xoq8WRf6A+<span class="number">9</span>ZdgAAAFSOrQYAAJN/DgAAAAEADP//APEL/VAAAAAAAP0kUQAAAAAACKpYGQQAAAAK</div><div class="line">/VAAAAAAAFm8isYAAAAAAAAAAAAAAAAAAAAAADojUQAAAAAADOW+kOaxn+e6oue7hOE3BAAAAAAA</div><div class="line">+y66Sw==</div><div class="line">'/*!*/<span class="comment">;</span></div><div class="line">### INSERT INTO `mydb`.`mytable01_del`</div><div class="line"># at <span class="number">112037460</span></div><div class="line">#<span class="number">170916 10:21</span>:<span class="number">58</span> server id <span class="number">1508836346</span>  end_log_pos <span class="number">112037542</span> CRC32 <span class="number">0</span>x7b55174a    Table_map: `mydb`.`mytable1` mapped to number <span class="number">950159</span></div><div class="line"># at <span class="number">112037542</span></div><div class="line">#<span class="number">170916 10:21</span>:<span class="number">58</span> server id <span class="number">1508836346</span>  end_log_pos <span class="number">112037636</span> CRC32 <span class="number">0</span>x3bdcebf7    Delete_rows: table id <span class="number">950159</span> flags: STMT_END_F</div><div class="line"></div><div class="line">BINLOG '</div><div class="line">xoq8WRP6A+<span class="number">9</span>ZUgAAAKaOrQYAAI9/DgAAAAEACWRfZWNfdXNlcgAOdF91c2VyX2FjY291bnQADAgC</div><div class="line">Dw8BARISAQMBDwiAABAAAADwADgBShdVew==</div><div class="line">xoq8WRn6A+<span class="number">9</span>ZXgAAAASPrQYAAI9/DgAAAAEADP//APD9JFEAAAAAAAAACzE3NjA1MTEwMjgwEDc9</div><div class="line">OokVkE7wcJ6AvWQXyZMEAJmc6TjAmZzs458AAAAAAAAA9+vcOw==</div><div class="line">'/*!*/<span class="comment">;</span></div><div class="line">### DELETE FROM `mydb`.`mytable1`</div><div class="line">......</div><div class="line"># at <span class="number">112038300</span></div><div class="line">#<span class="number">170916 10:25</span>:<span class="number">54</span> server id <span class="number">1508836346</span>  end_log_pos <span class="number">112038331</span> CRC32 <span class="number">0</span>x01b508cf    Xid = <span class="number">99370268888</span></div><div class="line">COMMIT/*!*/<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>binlog格式当中，一个事务最先记录的是GTID事件，而这个GTID的值只有在提交的时候才会生成，binlog里面的GTID时间的时间<code>10:25:54</code>就是事务提交的时间。<br>Xid在最末尾，时间也是<code>10:25:54</code>。但中间该事务的其它binlog事件，像UpdateRows/DeleteRows/InsertRows，前面的时间<code>10:21:58</code>是事务开始的时间。中间有4分钟的空档，与前面redis操作4分钟不谋而合。</p>
<p>这下就更加明朗了：有显式的开启事务。但开发说没有用事务，又该怎么解释呢？</p>
<p>不同的语言，不同的框架，使用事务的方式不一样。数据库里面开启显式事务有两种方式，一是设置 <code>set autocommit=0</code>，二是运行<code>start transaction</code>。两者都要显式调用<code>commit</code>命令提交事务。<br>为了证实程序的确用了事务，在测试环境应用服务器模拟用户的操作，然后抓包：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> sudo tcpdump -s <span class="number">0</span> -l -w - dst your_db_ipaddr <span class="keyword">and</span> port <span class="number">3306</span> -i eth0 &gt; mysql_3306.tcp</div><div class="line"><span class="symbol">$</span> strings mysql_3306.tcp|grep -n commit</div><div class="line"><span class="number">28</span>:<span class="keyword">SET</span> autocommit=0</div><div class="line">123:commit</div><div class="line">124:<span class="keyword">SET</span> <span class="comment">autocommit=1</span></div><div class="line">222:<span class="keyword">SET</span> <span class="comment">autocommit=0</span></div><div class="line">257:commit</div><div class="line">258:<span class="keyword">SET</span> <span class="comment">autocommit=1</span></div><div class="line">268:<span class="keyword">SET</span> <span class="comment">autocommit=0</span></div><div class="line">333:<span class="keyword">SET</span> <span class="comment">autocommit=1</span></div><div class="line">399:commit</div><div class="line">400:<span class="keyword">SET</span> <span class="comment">autocommit=1</span></div></pre></td></tr></table></figure></p>
<p>有发送 <code>set autocommit=0</code>，这下更放心了。开发再次回去检查，发现在Spring框架的时，在类上面用 <code>@Transactional</code> 的方式做了事务，而常规的做法是把注解加在类的方法上，导致忽略了这个因素。</p>
<h1 id="4-解决"><a href="#4-解决" class="headerlink" title="4. 解决"></a>4. 解决</h1><p>解决办法是把需要做事务控制的地方放到Services接口级别，让redis清理缓存的操作在事务之外，或者异步清理。（但也要考虑这样做会有什么负面影响）<br>另外，Redis操作慢，是否是设计上的问题。（听云监控里面显示该事务里面调用了1300次）</p>
<h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p>首先根据但是的现场快照，分析锁等待关系；根据以前的经验，怀疑是“大”事务中有无关的调用；根据程序日志和听云分析出对应的接口；但开发说没有事务，于是进一步通过分析binlog，经过tcp抓包，拿出证据；最后解决。</p>
<p>我们经常说，尽量少用大事务，但由于现在开发都是基于各种框架，使用事务的方式被封装，要理解它们的用法。其次，我们上面的事务并不大，每个sql更新都很快，但是却把其它调用也写在事务里面，就容易阻塞而长时间不提交，也许这样做的初衷是操作db与清理redis缓存放在一个事务里，要么都成功，要么都失败，但是这种分布式设计就不合理（当然有办法是可以做到，这里不展开）。</p>
<p>本文即是一个大事务锁的分析案例，也展示了引用各种工具，确分析论证的过程。特别是对binlog时间戳方面，自己也有了个是清晰的认识。</p>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2017/09/23/mysql-big-trx-lock-case/">http://seanlook.com/2017/09/23/mysql-big-trx-lock-case/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一个简单的数据订阅程序(for DBA)]]></title>
      <url>http://seanlook.com/2017/09/05/mysql-binlog-subscribe-simple-for-dba/</url>
      <content type="html"><![CDATA[<p>本程序基于大众点评github项目 <a href="https://github.com/danfengcao/binlog2sql" target="_blank" rel="external">binlog2sql</a> 二次开发而来，可以实现对源库的binlog实时接收，并组装成增量sql。</p>
<p>原项目默认是把sql输出到控制台，二次开发后的版本把sql放入redis队列，根据需要由另一个程序消费到目标库，模拟了一个“从库”。<br>在测试时–stop-never在qa环境没有作用，添加了在 BinLogStreamReader 实例里面加入blocking=True来保证源源不断的接受binlog而不中断。</p>
<p>另外也加入了更改目标库名的功能，比如原库叫d_ec_crm，生成的sql目标库名是 d_ec_contact 。</p>
<p>项目地址：<a href="https://github.com/seanlook/binlog2sql" target="_blank" rel="external">https://github.com/seanlook/binlog2sql</a></p>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>目前想到以下应用场景：</p>
<ul>
<li><p>实时同步部分表到另外一个数据库实例<br>比如在数据库迁库时，将当天表的数据同步到新库，模拟阿里云dms数据传输的功能，相当于在测试环境演练，减少失误。<br>另外还可以从新库反向同步增量数据到老库，解决测试环境多项目测试引起数据库冲突的问题。</p>
</li>
<li><p>正式切库时的回滚措施<br>比如数据库迁移项目，切换期间数据写向新库，但如果切换失败需要回滚到老库，就需要把这段时间新增的数据同步回老库（启动消费程序），这就不需要程序段再考虑复杂的回滚设计。</p>
</li>
<li><p>数据库闪回<br>关于数据库误操作的闪回方案，见 <a href="http://seanlook.com/2017/03/03/mysql-flashback_use_purged-binlog/">文章MySQL根据离线binlog快速闪回</a> 。<code>binlog2sql</code>的 <code>-B</code> 选项可以将sql反向组装，生产回滚sql。如果需要完善的闪回功能，要进一步开发，提高易用性。</p>
</li>
<li><p>binlog搜索功能<br>目前组内一版的binlog搜索功能，是离线任务处理的方式，好处是不会占用太大空间，缺点是处理时间较长。通过实时binlog解析过滤的方式，入ES可以快速搜索。需要进一步开发完善。</p>
</li>
</ul>
<a id="more"></a>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>安装好python2.7虚拟环境，安装必要模块：pymysql, mysql-replication, redis, rq<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> -r requirements.txt</div></pre></td></tr></table></figure></p>
<p>注意：<code>pymysqlreplication</code> 库在处理 ‘0000-00-00 00:00:00’ 时有些不尽人意，可能会导致生产的sql在目标库执行失败，还有对<code>datetime(6)</code>类型有个bug，也对它进行了修复，地址：<a href="https://github.com/seanlook/python-mysql-replication" target="_blank" rel="external">https://github.com/seanlook/python-mysql-replication</a> 。</p>
<p>准备一个redis用于存放sql队列，在环境变量里面设置redis地址<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> REDIS_URL=<span class="string">'redis://localhost:6379'</span></div></pre></td></tr></table></figure></p>
<p>在主库执行 <code>show master status</code> 得到binlog开始的文件名和postion，然后开始订阅：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">binlog2sql原版使用时：</div><div class="line">$ ~/.pyenv/versions/2.7.10/envs/py2_binlog/bin/python binlog2sql.py -h192.168.1.185 -P3306 -uecuser -pecuser \</div><div class="line">-<span class="ruby">d d_ec_contact --tables t_crm_contact_at \</span></div><div class="line">-<span class="ruby">-start-file=<span class="string">'mysql-bin.000001'</span> --start-datetime=<span class="string">'2017-08-30 12:30:00'</span> --start-position=<span class="number">6529058</span> \</span></div><div class="line">-<span class="ruby">-stop-never &gt; contact<span class="number">0</span>.sql</span></div><div class="line"></div><div class="line">加入订阅功能后：</div><div class="line">$ ~/.pyenv/versions/2.7.10/envs/py2_binlog/bin/python binlog2sql.py -h192.168.1.185 -P3306 -uecuser -pecuser \</div><div class="line">-<span class="ruby">d <span class="symbol">d_ec_contact:</span>d_ec_crm --tables t_crm_contact_at t_crm_remark_today \</span></div><div class="line">-<span class="ruby">-start-file=<span class="string">'mysql-bin.000001'</span> --start-datetime=<span class="string">'2017-08-30 12:30:00'</span> --start-position=<span class="number">6529058</span> \</span></div><div class="line">-<span class="ruby">-dest-dsn h=<span class="number">10.0</span>.<span class="number">200.195</span>,P=<span class="number">3307</span>,u=ecuser,p=ecuser</span></div><div class="line">-<span class="ruby">-stop-never &gt; contact<span class="number">0</span>.sql</span></div></pre></td></tr></table></figure></p>
<p><code>-d d_ec_contact:d_ec_crm</code> 表上生成目标sql映射关系，如果不改变库名，就不需要 <code>:</code> 指定，与原版兼容。<br><code>--dest-dsn</code>: 表示目标库的地址和认证信息。</p>
<p>这时在redis里面可以看到sql信息。如果需要在目标库重放，则启动消费程序：（在代码目录下面）<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~<span class="regexp">/.pyenv/</span>versions<span class="regexp">/2.7.10/</span>envs<span class="regexp">/py2_binlog/</span>bin<span class="regexp">/rq worker</span></div></pre></td></tr></table></figure></p>
<p>待数据追上之后，可以看到几乎是实时同步的。</p>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2017/09/05/mysql-binlog-subscribe-simple-for-dba/">http://seanlook.com/2017/09/05/mysql-binlog-subscribe-simple-for-dba/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ProxySQL PPT分享]]></title>
      <url>http://seanlook.com/2017/07/19/proxysql-tutorials-ec/</url>
      <content type="html"><![CDATA[<p>前些天在公司内部进行了一次 ProxySQL主题的介绍 《ProxySQL数据库中间件使用实践》，因为proxysql是我调研并引入公司的，有必要跟本组开发同学，进行一个正式的介绍和使用说明，以及我们当前的应用情况。</p>
<p>分享比较偷懒，直接拿来proxysql作者renecannao在 Percona Live Europe 2016 上的PPT，是一个非常全面又具有点睛作用的演示稿了。</p>


	<div class="row">
	  <iframe src="http://nagland.github.io/viewer/web/viewer.html?val=http://7q5fot.com1.z0.glb.clouddn.com/ProxySQL-Tutorials-PerconaLive.pdf" style="width:100%; height:550px"></iframe>
	</div>



<p>PPT来源：<a href="https://www.percona.com/live/17/sessions/proxysql-tutorial" target="_blank" rel="external">https://www.percona.com/live/17/sessions/proxysql-tutorial</a></p>
<p>另外一个觉得也还不错：<a href="https://www.slideshare.net/MyDBOPS/proxysql-for-mysql" target="_blank" rel="external">https://www.slideshare.net/MyDBOPS/proxysql-for-mysql</a></p>
<p>– 我只是ppt的搬运工</p>
<hr>
<p>原文连接地址：<a href="http://seanlook.com/2017/07/19/proxysql-tutorials-ec/">http://seanlook.com/2017/07/19/proxysql-tutorials-ec/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ProxySQL监控方案]]></title>
      <url>http://seanlook.com/2017/07/16/mysql-proxysql-monitor/</url>
      <content type="html"><![CDATA[<p>ProxySQL能监控的信息不多，而且大部分是统计信息，不是性能数据。</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; show tables from stats;</span></div><div class="line">+--------------------------------+</div><div class="line"><span class="section">| tables                         |</span></div><div class="line">+--------------------------------+</div><div class="line">| global<span class="emphasis">_variables               |</span></div><div class="line">| stats_mysql<span class="emphasis">_commands_</span>counters  |</div><div class="line">| stats<span class="emphasis">_mysql_</span>connection<span class="emphasis">_pool    |</span></div><div class="line">| stats_mysql<span class="emphasis">_global             |</span></div><div class="line">| stats_mysql<span class="emphasis">_processlist        |</span></div><div class="line">| stats_mysql<span class="emphasis">_query_</span>digest       |</div><div class="line">| stats<span class="emphasis">_mysql_</span>query<span class="emphasis">_digest_</span>reset |</div><div class="line"><span class="section">| stats_mysql_query_rules        |</span></div><div class="line">+--------------------------------+</div></pre></td></tr></table></figure>
<p>主要关心的指标都在表 <code>stats_mysql_global</code> 里面，源代码 diamond 目录下有个 <em>proxysqlstat.py</em> 脚本，是通过<code>SHOW MYSQL STATUS</code>命令，由diamond收集进程将指标上报到Graphite。有以下几个Metrics：</p>
<ul>
<li>并发数<ul>
<li>Active_Transactions</li>
<li>Questions</li>
</ul>
</li>
<li>连接相关<ul>
<li>Client_Connections_connected</li>
<li>Server_Connections_connected</li>
<li>Server_Connections_aborted</li>
</ul>
</li>
<li>内存相关<ul>
<li>Query_Cache_Entries</li>
<li>Query_Cache_Memory_bytes</li>
<li>SQLite3_memory_bytes</li>
<li>ConnPool_memory_bytes</li>
</ul>
</li>
<li>流量相关<ul>
<li>mysql_backend_buffers_bytes</li>
<li>mysql_frontend_buffers_bytes</li>
<li>mysql_session_internal_bytes</li>
</ul>
</li>
<li>其它<ul>
<li>MySQL_Monitor_Workers</li>
<li>MySQL_Thread_Workers</li>
</ul>
</li>
</ul>
<p>但是这些远远不够，还有以下更值得关心的指标：<br>表 <code>stats_mysql_connection_pool</code>:</p>
<ul>
<li>对后端DB请求的网络延时 Latency</li>
<li>对后端各个DB的请求数 Queries</li>
<li>后端各个DB的当前活跃连接数 ConnUsed</li>
<li>后端DB的状态 status</li>
</ul>
<p>表 <code>stats_mysql_processlist</code>:</p>
<ul>
<li>每个用户的当前的连接数</li>
</ul>
<p>表 <code>stats_mysql_query_digest</code>:</p>
<ul>
<li>各个类型的sql请求量比例、趋势</li>
</ul>
<p>在我们的环境下使用的是 InfluxDB + Grafana，通过telegraf收集上报。上述所有的监控脚本见仓库 <a href="https://github.com/seanlook/proxysql_tools" target="_blank" rel="external">https://github.com/seanlook/proxysql_tools</a> ：</p>
<ul>
<li><p><code>proxysql_stats.py</code>:</p>
<ul>
<li>收集 stats_mysql_global 和 stats_mysql_connection_pool 中的信息，打印出 influxdb 数据上报格式</li>
</ul>
</li>
<li><p><code>proxysql_stats_digest.py</code>:</p>
<ul>
<li>收集 sql digest，收集的信息用于展示每类sql的执行趋势。<br>因为数据是累计值，所以这里做了增量计算，然后一方面上报给influxdb，一方面存入mysql，可以做更多用途。mysql的表结构 proxysql_stats_digest.sql 。<br>建议收集频率不要过高，比如10分钟一次。</li>
</ul>
</li>
<li><p><code>grafana_proxysql_stats.json</code>:</p>
<ul>
<li>Grafana Dashboard，直接导入可用 。</li>
</ul>
</li>
</ul>
<p>除此外，还需要对proxysql进程的监控，如内存占用、CPU使用，这部分通过telegraf的 procstat 插件去做：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="string">[[inputs.procstat]]</span></div><div class="line">    exe = <span class="string">"proxysql"</span></div><div class="line"></div><div class="line"><span class="string">[[inputs.exec]]</span></div><div class="line"></div><div class="line">  # the command to run</div><div class="line">  command = <span class="string">"/etc/telegraf/telegraf.d/proxysql_stats.py"</span></div><div class="line"></div><div class="line">  ## Timeout <span class="keyword">for</span> each command to complete.</div><div class="line">  timeout = <span class="string">"10s"</span></div><div class="line"></div><div class="line">  data_format = <span class="string">"influx"</span></div></pre></td></tr></table></figure></p>
<p>对后端DB status和proxysql端口存活，设置告警。这样就有一个相对完整的ProxySQL监控方案了。<br><a id="more"></a><br>面板示例：</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-monitor-1.png" alt="Geneal"><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-monitor-2.png" alt="Queries"><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-monitor-3.png" alt="Process"></p>
<hr>
<p>原文连接地址：<a href="http://seanlook.com/2017/07/16/mysql-proxysql-monitor/">http://seanlook.com/2017/07/16/mysql-proxysql-monitor/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ProxySQL高可用方案]]></title>
      <url>http://seanlook.com/2017/07/15/mysql-proxysql-ha-consul/</url>
      <content type="html"><![CDATA[<p>MySQL的高可用方案现在如 MHA, Galera, InnoDB Cluster，一旦在上游使用中间件之后，中间件本身可能成为单点。所以本文要介绍的是对于ProxySQL自身高可用的方案对比。<br>首先ProxySQL自身是通过Angel进程的形式运行，即proxysql如果有崩溃，主进程会自动拉起来。但如果是无响应或者网络故障，则需要另外的机制去做到服务的高可用。本文总结了四种方法。</p>
<p>ProxySQL有关介绍，请参考： <a href="http://seanlook.com/2017/04/10/mysql-proxysql-install-config/">http://seanlook.com/2017/04/10/mysql-proxysql-install-config/</a></p>
<h1 id="1-与应用一起部署"><a href="#1-与应用一起部署" class="headerlink" title="1. 与应用一起部署"></a>1. 与应用一起部署</h1><p>所有部署应用的地方，都会部署proxysql节点，当这个proxysql挂掉之后，只影响本机的应用。而且不需要多经过一层网络。<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-ha-1.png" alt=""><br>但带来的问题是，如果应用节点很多，proxy的数量也会增加：</p>
<ul>
<li>会导致proxysql的配置不容易管理</li>
<li>proxysql对后端db健康检查的请求成倍增加</li>
<li>限制每个用户或后端db的 max_connections 特性用不了</li>
</ul>
<h1 id="2-集中式部署，多ip引用"><a href="#2-集中式部署，多ip引用" class="headerlink" title="2. 集中式部署，多ip引用"></a>2. 集中式部署，多ip引用</h1><p>后端一个db集群，对应中间两个以上的 proxysql 节点，前端应用配置多个ip地址，随机挑选一个使用，完全无状态。仅需要多经过一次网络代理。<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-ha-2.png" alt=""><br>这种方式的好处是，不需要再对数据库这种基础服务，多引入一个软件来实现高可用（如下节的keepalive或consul），由应用端获取数据库连接的代码逻辑处理。</p>
<p>但是因为proxysql访问地址是写在配置文件里面的，如果一个节点挂掉，随机挑选还是会落地这个失败的节点。所以优化方案是，ip列表里面默认取某一个，失败之后再选取下一个重试。</p>
<p>示例代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">proxysql_addr_list = [<span class="string">'192.168.1.175'</span>, <span class="string">'192.168.1.176'</span>, <span class="string">'192.168.1.177'</span>]</div><div class="line">proxysql_addr_list_len = <span class="number">3</span></div><div class="line">hostname = <span class="string">'this_hostname_for_hash_loadbalance'</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dbconnection</span><span class="params">()</span>:</span></div><div class="line">    list_index = hash(hostname) % proxysql_addr_list_len</div><div class="line">    dbconn = <span class="keyword">None</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        dbconn = DBConnect(dbhost=proxysql_addr_list[ list_index ], dbport=<span class="number">3306</span>)  <span class="comment"># timeout 1000ms</span></div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">if</span> (list_index + <span class="number">1</span>) == proxysql_addr_list_len:</div><div class="line">            list_index = <span class="number">-1</span>  <span class="comment"># like Circular Array</span></div><div class="line">        dbconn = DBConnec(dbhost=proxysql_addr_list[ list_index + <span class="number">1</span> ], dbport=<span class="number">3306</span>)  <span class="comment"># if failed again, through exception</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> dbconn</div></pre></td></tr></table></figure>
<p>上述并不完美，比如可以改用环形数组轮巡，允许重试其它更多的ip。<br><a id="more"></a></p>
<h2 id="能不能不进行多IP引用呢？"><a href="#能不能不进行多IP引用呢？" class="headerlink" title="能不能不进行多IP引用呢？"></a>能不能不进行多IP引用呢？</h2><p>为了避免后端引用IP的单点，可以将上面第1种和这里的第2中结合起来，改进的部署方案：（见文后参考链接）<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-ha-1-1.png" alt=""><br>即在原来的基础上，App上的proxysql后端，挂的还是ProxySQL集群。</p>
<p>我个人没有验证这样的方案，如果要用需要充分验证proxysql互连的时候，有没有bug。</p>
<h1 id="3-经典-keepalived"><a href="#3-经典-keepalived" class="headerlink" title="3. 经典 keepalived"></a>3. 经典 keepalived</h1><p>引入keepalived，通过VIP访问两个以上的proxysql节点，既可以减少一次网络传输，又可以实现proxysql自身的高可用，而且甚至不用关心脑裂的问题，因为proxysql配置完全一样，是无状态的，脑裂了也无妨。<br>你也可能意识到，这种方式一次只能一个proxysql提供服务，另一个proxysql节点始终处于备用状态。如果配合LVS或haproxy做负载均衡，部署架构又会多出一层网络请求，而且越发复杂（VIP不在proxysql节点上漂，而是在两个lvs之间）。<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-ha-3.png" alt=""><br>使用keepalived的前提是，局域网允许发组播包。这在阿里云ECS经典网络下是不允许的，如果有其它类似方式，如SLB也是可行的。目前测试环境采用是 haproxy + keepalived 的方式。</p>
<h1 id="4-Consul服务发现"><a href="#4-Consul服务发现" class="headerlink" title="4. Consul服务发现"></a>4. Consul服务发现</h1><p>如果上面的方式都不适用，那么可以进一步考虑使用第三方的服务发现组件。</p>
<h2 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h2><p>Consul用于实现分布式系统的服务发现与配置，我们将所有proxysql节点注册到consul上作为一个服务来提供，由 Consul agent Server 来判断proxysql节点的存活，每个应用节点上都安装 Consul agent Client 来供应用获取可用地址。</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-ha-4.png" alt=""></p>
<p>这样部署架构的好处是：</p>
<ol>
<li>不需要多一层负载均衡，多一层网络链路</li>
<li>不需要部署大量的proxysql节点</li>
<li>App或者ProxySQL节点上的Consul故障，不影响其它节点。Consul Server集群的天生具备高可用</li>
<li>ProxySQL故障会被Consul检查到，踢除故障节点，并通知给所有consul agent</li>
<li>可以利用Consul的DNS接口实现简单的负载均衡</li>
</ol>
<p>其实consul所做的与本文第2节的类似：自动提出不可用的节点，只是一个是被动、手动，一个是主动、自动。<br>下面简单演示一下。</p>
<h2 id="4-2-部署示例"><a href="#4-2-部署示例" class="headerlink" title="4.2 部署示例"></a>4.2 部署示例</h2><p>Consul Server节点的安装在此略过，网上有不少文章，直接进入到在ProxySQL节点安装配置Consul。</p>
<p>Consul agent:</p>
<ul>
<li>apps-1: <code>10.0.201.168</code></li>
<li>apps-2: <code>10.0.201.220</code></li>
<li>apps-3: <code>10.0.201.156</code></li>
</ul>
<p>ProxySQL node:<br>每个节点上运行了两个proxysql进程 <code>7033: crm0</code>, <code>7133: crm1</code></p>
<ul>
<li>proxysql-1 : <code>192.168.1.170</code></li>
<li>proxysql-2 : <code>192.168.1.171</code></li>
</ul>
<h3 id="配置-proxysql-节点上的Consul"><a href="#配置-proxysql-节点上的Consul" class="headerlink" title="配置 proxysql 节点上的Consul"></a>配置 proxysql 节点上的Consul</h3><p>配置 proxysql-1 节点上的Consul：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">$ sudo vim /etc/consul.d/config.json</div><div class="line">&#123;</div><div class="line">    <span class="string">"data_dir"</span>: <span class="string">"/opt/consul"</span>, </div><div class="line">    <span class="string">"datacenter"</span>: <span class="string">"Office_test"</span>, </div><div class="line">    <span class="string">"log_level"</span>: <span class="string">"INFO"</span>, </div><div class="line">    <span class="string">"node_name"</span>: <span class="string">"proxysql-1"</span>, </div><div class="line">    <span class="string">"retry_join"</span>: [</div><div class="line">        <span class="string">"10.0.201.168"</span>, </div><div class="line">        <span class="string">"10.0.201.220"</span>, </div><div class="line">        <span class="string">"10.0.201.156"</span></div><div class="line">    ], </div><div class="line">    <span class="string">"telemetry"</span>: &#123;</div><div class="line">        <span class="string">"statsd_address"</span>: <span class="string">"10.0.201.34:8125"</span>, </div><div class="line">        <span class="string">"statsite_prefix"</span>: <span class="string">"proxysql-1"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"dns_config"</span>: &#123;</div><div class="line">        <span class="string">"only_passing"</span>: true</div><div class="line">    &#125;</div><div class="line">    <span class="string">"acl_datacenter"</span>: <span class="string">"Office_test"</span>, </div><div class="line">    <span class="string">"acl_default_policy"</span>: <span class="string">"deny"</span>, </div><div class="line">    <span class="string">"encrypt"</span>: <span class="string">"XXXXxxxx=="</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">$ sudo vi /etc/consul.d/proxysql.json</div><div class="line">&#123;<span class="string">"services"</span>: [</div><div class="line">    &#123;</div><div class="line">        <span class="string">"id"</span>: <span class="string">"proxysql_crm0"</span>, </div><div class="line">        <span class="string">"name"</span>: <span class="string">"proxysql"</span>, </div><div class="line">        <span class="string">"address"</span>: <span class="string">"192.168.1.170"</span>,</div><div class="line">        <span class="string">"port"</span>: <span class="number">7133</span>, </div><div class="line">        <span class="string">"tags"</span>: [<span class="string">"test"</span>, <span class="string">"crm0"</span>], </div><div class="line">        <span class="string">"check"</span>: &#123;</div><div class="line">            <span class="string">"interval"</span>: <span class="string">"5s"</span>, </div><div class="line">            <span class="string">"tcp"</span>: <span class="string">"192.168.1.170:7033"</span>, </div><div class="line">            <span class="string">"timeout"</span>: <span class="string">"1s"</span></div><div class="line">        &#125;, </div><div class="line">        <span class="string">"enableTagOverride"</span>: false, </div><div class="line">        <span class="string">"token"</span>: <span class="string">"xxxxxxxx-xxxx"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="string">"id"</span>: <span class="string">"proxysql_crm1"</span>, </div><div class="line">        <span class="string">"address"</span>: <span class="string">"192.168.1.170"</span>,</div><div class="line">        <span class="string">"name"</span>: <span class="string">"proxysql"</span>, </div><div class="line">        <span class="string">"port"</span>: <span class="number">7133</span>, </div><div class="line">        <span class="string">"tags"</span>: [<span class="string">"test"</span>, <span class="string">"crm1"</span>], </div><div class="line">        <span class="string">"check"</span>: &#123;</div><div class="line">            <span class="string">"interval"</span>: <span class="string">"5s"</span>, </div><div class="line">            <span class="string">"tcp"</span>: <span class="string">"192.168.1.170:7133"</span>, </div><div class="line">            <span class="string">"timeout"</span>: <span class="string">"1s"</span></div><div class="line">        &#125;, </div><div class="line">        <span class="string">"enableTagOverride"</span>: false, </div><div class="line">        <span class="string">"token"</span>: <span class="string">"xxxxxxxx-xxxx"</span></div><div class="line">    &#125;</div><div class="line">]&#125;</div></pre></td></tr></table></figure></p>
<p>启动consul<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo consul agent -<span class="built_in">config</span>-dir /etc/consul &amp;</div></pre></td></tr></table></figure></p>
<p>查看日志</p>
<p>proxysql-2 节点上的Consul配置根据上面的内容去改。</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-ha-consul.png" alt=""></p>
<h2 id="4-4-使用方式"><a href="#4-4-使用方式" class="headerlink" title="4.4 使用方式"></a>4.4 使用方式</h2><p>先来看下效果：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[root@proxysql-1 ~]</span># <span class="selector-tag">dig</span> @<span class="keyword">127</span>.<span class="keyword">0</span>.<span class="keyword">0</span>.<span class="keyword">1</span> -p <span class="number">8600</span> crm0.proxysql.service.consul SRV</div><div class="line"></div><div class="line">; &lt;&lt;&gt;&gt; <span class="selector-tag">DiG</span> 9<span class="selector-class">.8</span><span class="selector-class">.2rc1-RedHat-9</span><span class="selector-class">.8</span><span class="selector-class">.2-0</span><span class="selector-class">.62</span><span class="selector-class">.rc1</span><span class="selector-class">.el6_9</span><span class="selector-class">.2</span> &lt;&lt;&gt;&gt; @<span class="keyword">127</span>.<span class="keyword">0</span>.<span class="keyword">0</span>.<span class="keyword">1</span> -p <span class="number">8600</span> crm0.proxysql.service.consul SRV</div><div class="line">; (1 <span class="selector-tag">server</span> <span class="selector-tag">found</span>)</div><div class="line">;; <span class="selector-tag">global</span> <span class="selector-tag">options</span>: +<span class="selector-tag">cmd</span></div><div class="line">;; <span class="selector-tag">Got</span> <span class="selector-tag">answer</span>:</div><div class="line">;; <span class="selector-tag">-</span>&gt;&gt;<span class="selector-tag">HEADER</span>&lt;&lt;<span class="selector-tag">-</span> <span class="selector-tag">opcode</span>: <span class="selector-tag">QUERY</span>, <span class="selector-tag">status</span>: <span class="selector-tag">NOERROR</span>, <span class="selector-tag">id</span>: 65293</div><div class="line">;; <span class="selector-tag">flags</span>: <span class="selector-tag">qr</span> <span class="selector-tag">aa</span> <span class="selector-tag">rd</span>; <span class="selector-tag">QUERY</span>: 1, <span class="selector-tag">ANSWER</span>: 2, <span class="selector-tag">AUTHORITY</span>: 0, <span class="selector-tag">ADDITIONAL</span>: 2</div><div class="line">;; <span class="selector-tag">WARNING</span>: <span class="selector-tag">recursion</span> <span class="selector-tag">requested</span> <span class="selector-tag">but</span> <span class="selector-tag">not</span> <span class="selector-tag">available</span></div><div class="line"></div><div class="line">;; <span class="selector-tag">QUESTION</span> <span class="selector-tag">SECTION</span>:</div><div class="line">;<span class="selector-tag">crm0</span><span class="selector-class">.proxysql</span><span class="selector-class">.service</span><span class="selector-class">.consul</span>.	<span class="selector-tag">IN</span>	<span class="selector-tag">SRV</span></div><div class="line"></div><div class="line">;; <span class="selector-tag">ANSWER</span> <span class="selector-tag">SECTION</span>:</div><div class="line"><span class="selector-tag">crm0</span><span class="selector-class">.proxysql</span><span class="selector-class">.service</span><span class="selector-class">.consul</span>. 0	<span class="selector-tag">IN</span>	<span class="selector-tag">SRV</span>	1 1 7033 <span class="selector-tag">proxysql-1</span><span class="selector-class">.node</span><span class="selector-class">.office_test</span><span class="selector-class">.consul</span>.</div><div class="line"><span class="selector-tag">crm0</span><span class="selector-class">.proxysql</span><span class="selector-class">.service</span><span class="selector-class">.consul</span>. 0	<span class="selector-tag">IN</span>	<span class="selector-tag">SRV</span>	1 1 7033 <span class="selector-tag">proxysql-2</span><span class="selector-class">.node</span><span class="selector-class">.office_test</span><span class="selector-class">.consul</span>.</div><div class="line"></div><div class="line">;; <span class="selector-tag">ADDITIONAL</span> <span class="selector-tag">SECTION</span>:</div><div class="line"><span class="selector-tag">proxysql-1</span><span class="selector-class">.node</span><span class="selector-class">.office_test</span><span class="selector-class">.consul</span>. 0 <span class="selector-tag">IN</span> <span class="selector-tag">A</span>	192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.170</span></div><div class="line"><span class="selector-tag">proxysql-2</span><span class="selector-class">.node</span><span class="selector-class">.office_test</span><span class="selector-class">.consul</span>. 0 <span class="selector-tag">IN</span> <span class="selector-tag">A</span>	192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.171</span></div><div class="line"></div><div class="line">;; <span class="selector-tag">Query</span> <span class="selector-tag">time</span>: 3 <span class="selector-tag">msec</span></div><div class="line">;; <span class="selector-tag">SERVER</span>: 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-id">#8600</span>(127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span>)</div><div class="line">;; <span class="selector-tag">WHEN</span>: <span class="selector-tag">Fri</span> <span class="selector-tag">May</span> 26 17<span class="selector-pseudo">:01</span><span class="selector-pseudo">:38</span> 2017</div><div class="line">;; <span class="selector-tag">MSG</span> <span class="selector-tag">SIZE</span>  <span class="selector-tag">rcvd</span>: 157</div></pre></td></tr></table></figure></p>
<p>看到域名 <code>crm0.proxysql.service.consul</code> 解析出来有两个可用地址 192.168.1.170，192.168.1.171，SRV记录还带出了端口信息（其实这里的端口对每个proxysql是固定/已知的，所以可不用SRV记录搜索）。</p>
<p>在应用端想要连接proxysql使用的方式大致有3种：</p>
<h3 id="DNS接口"><a href="#DNS接口" class="headerlink" title="DNS接口"></a>DNS接口</h3><p>需要将各自开发语言的DNS解析库嵌入到项目，指定 127.0.0.1:8600 为dns地址来解析上面的 crm0.proxysql.service.consul 域名。这种方式会增加开发的复杂度。</p>
<p>另一种方式是将应用服务器的默认DNS Server配置成本地consul的内置dns地址，并且consul设置 <code>recursors</code> 选项，来处理解析 consul. 以外的域名。这样对运维改动比较大。<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">"recursors"</span>: [</div><div class="line">    <span class="string">"10.143.22.116"</span>,</div><div class="line">    <span class="string">"10.143.22.118"</span>,</div><div class="line">    <span class="string">"114.114.114.114"</span></div><div class="line">]</div></pre></td></tr></table></figure></p>
<h3 id="HTTP接口"><a href="#HTTP接口" class="headerlink" title="HTTP接口"></a>HTTP接口</h3><p>通过 API 的方式获取services信息：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -X GET <span class="symbol">'http</span>://<span class="number">10.0</span>.<span class="number">201.156</span>:<span class="number">8500</span>/v1/health/service/proxysql?tag=crm1&amp;passing=<span class="literal">true</span>'</div></pre></td></tr></table></figure>
<p>可以获取到 crm1 库的proxysql所有健康的 Node 和 Service 信息，然后任取一个使用。</p>
<p>但并不需要每一次访问proxysql都需要请求api，可以定时（如每隔10s）去请求，缓冲在本地或者变量里；在处理数据库连接的时候发现连接ProxySQL错误，则再主动触发一次向Consul请求新的地址，再重连。</p>
<p>需要考虑的是访问API的地址如果是IP，往往也是单点。另者，java这类jvm语言修改配置后往往需要重启，也不简单。</p>
<h3 id="consul-template直接生成数据库连接的配置文件"><a href="#consul-template直接生成数据库连接的配置文件" class="headerlink" title="consul-template直接生成数据库连接的配置文件"></a>consul-template直接生成数据库连接的配置文件</h3><p>consul-template通过事先定义好的模板，根据发现服务的健康状态，生成最新可用的配置文件，然后下发。</p>
<p>如果大但的想一下，各个服务或者语言的配置文件并不相同，直接生成一份 hosts 文件是最简单的，然后通过配置管理工具统一下发应用。也不需要关心是否需要重启应用。</p>
<h4 id="consul-watch"><a href="#consul-watch" class="headerlink" title="consul watch"></a>consul watch</h4><p>Consul watch 功能，可以检测到service变化之后，主动调用一个脚本，脚本可以去更新数据库配置信息，根据需要决定是否重启，后者生成hosts。与consul-template思想是相同的。</p>
<p>因为 watch 是通过阻塞式HTTP长连接请求的方式，实时获取到service的监控状态，所以有问题时反馈还比较及时。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">"watches"</span>:[&#123;</div><div class="line">  <span class="string">"type"</span>: <span class="string">"service"</span>,</div><div class="line">  <span class="string">"service"</span>: <span class="string">"proxysql"</span>,</div><div class="line">  <span class="string">"tag"</span>: <span class="string">"crm0"</span>,</div><div class="line">  <span class="string">"passingonly"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="string">"handler"</span>: <span class="string">"sh /tmp/consul_watch_test.sh"</span></div><div class="line">&#125;]</div></pre></td></tr></table></figure></p>
<p><code>/tmp/consul_watch_test.sh</code> 脚本里或者python，可以做一些更新数据库配置文件、发送邮件等工作。</p>
<p><strong>参考</strong></p>
<ol>
<li><a href="https://www.percona.com/blog/2016/09/16/consul-proxysql-mysql-ha/" target="_blank" rel="external">https://www.percona.com/blog/2016/09/16/consul-proxysql-mysql-ha/</a></li>
<li><a href="https://www.percona.com/blog/2017/01/19/setup-proxysql-for-high-availability-not-single-point-failure/" target="_blank" rel="external">https://www.percona.com/blog/2017/01/19/setup-proxysql-for-high-availability-not-single-point-failure/</a></li>
<li><a href="https://www.slideshare.net/DerekDowney/proxysql-tutorial-plam-2016" target="_blank" rel="external">https://www.slideshare.net/DerekDowney/proxysql-tutorial-plam-2016</a> (本文部分图片出自该PPT)</li>
</ol>
<hr>
<p>原文连接地址：<a href="http://seanlook.com/2017/07/15/mysql-proxysql-ha-consul/">http://seanlook.com/2017/07/15/mysql-proxysql-ha-consul/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ProxySQL之改进patch：记录查询sql完整样例与合并digest多个?]]></title>
      <url>http://seanlook.com/2017/04/27/mysql-proxysql-patch-querytext-sample/</url>
      <content type="html"><![CDATA[<p>近期一直在思考sql上线审核该怎么做，刚好接触到 ProxySQL 这个中间件，内置了一个计算sql指纹的功能，但是没有记录原始的sql语句。当前正有个紧急的拆库项目也希望知道库上所有的查询。于是把ProxySQL的代码下了回来研究了几天，改了把，加入了两个功能：</p>
<ol>
<li>在 <code>stats_mysql_query_digest</code> 表上增加 <code>query_text</code> 字段，当第一次出现这个digest_text时，把原始sql记录下来。</li>
<li>修改计算指纹的模块，对 IN或者 VALUES 后面的多个 <code>?</code> 合并。这个是目前 <code>c_tokenizer.c</code> 文件里没有做的，用到底1点上可以避免重复记录。</li>
</ol>
<p>效果：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-querytext-sample-digest.png" alt="proxysql-querytext-sample-digest"></p>
<p>多个 <code>?</code> 被折叠成 <code>?,</code>，有些意外情况时 <code>??</code>，因为后面一些多余空格的缘故，没有像 <em>pt-fingerprint</em> 那样完全模糊化，像这里digest就保留了大小写、去除重复空格、保留 ` 分隔符。但仅有的几种意外情况是可以接受的。</p>
<p>后面的 query_text 列也有些未知情况，就是末尾会加上一些奇怪的字符，还在排除，但大体不影响需求。</p>
<p>代码是基于最新 v1.3.6 稳定版修改的，查看变更 <a href="https://github.com/sysown/proxysql/compare/v1.3.6...seanlook:v1.3.7-querysample_digest" target="_blank" rel="external">https://github.com/sysown/proxysql/compare/v1.3.6...seanlook:v1.3.7-querysample_digest</a> </p>
<p>多个 <code>?</code> 合并只涉及到 <em>c_tokenizer.c</em> 文件，分别在flag=4（处理 <code>&#39;abc&#39;,&#39;def&#39;</code> 的情况）和flag=5（处理 <code>1,2, 3</code> 的情况）加入判断：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// wrap two more ? to one ?,</span></div><div class="line"><span class="keyword">if</span> (*(<span class="keyword">p_r_t</span><span class="number">-2</span>) == <span class="string">'?'</span> &amp;&amp; (*(<span class="keyword">p_r_t</span><span class="number">-1</span>) ==<span class="string">' '</span> || *(<span class="keyword">p_r_t</span><span class="number">-1</span>) == <span class="string">','</span> || *(<span class="keyword">p_r_t</span><span class="number">-1</span>) == <span class="string">'?'</span>))&#123;</div><div class="line">    *(p_r<span class="number">-1</span>) = <span class="string">','</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">    *p_r++ = <span class="string">'?'</span>;</div></pre></td></tr></table></figure></p>
<p>然后在 line:450 左右 COPY CHAR 的时候进行一次过滤：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// COPY CHAR</span></div><div class="line"><span class="comment">// =================================================</span></div><div class="line"><span class="comment">// wrap two more ? to ?,</span></div><div class="line"><span class="keyword">if</span> ((*s == <span class="string">' '</span> || *s == <span class="string">','</span>) &amp;&amp; (*(<span class="keyword">p_r_t</span><span class="number">-1</span>) == <span class="string">'?'</span> || *(<span class="keyword">p_r_t</span><span class="number">-1</span>) == <span class="string">','</span> || *(<span class="keyword">p_r_t</span><span class="number">-1</span>) == <span class="string">' '</span>)) &#123;</div><div class="line">    <span class="keyword">if</span> (*(<span class="keyword">p_r_t</span><span class="number">-1</span>) == <span class="string">' '</span> &amp;&amp; *(<span class="keyword">p_r_t</span><span class="number">-2</span>) == <span class="string">'?'</span>)</div><div class="line">        *(p_r<span class="number">-1</span>) = <span class="string">','</span>;  <span class="comment">// p_r may be changed in line:435:is_digit_string</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div></pre></td></tr></table></figure></p>
<p>这部分代码调试花了不少功夫，一是理清逻辑，而是意外情况处理。变量的用途注释不清晰，几年没写C，不得不动用 gdb 来跟踪调试，怀念大学时用IDE的日子。</p>
<a id="more"></a>
<p>加 query_text 字段，在用 gdb 理清c++函数间调用关系的之后，改起来还是比较容易：</p>
<ol>
<li><em>MySQL_Session.cpp:Query_Info::init</em> 里面会将连接会话的sql信息临时存起来</li>
<li><em>MySQL_Session.cpp:Query_Info::query_parser_init</em> 调用 <em>Qurey_Processor.cpp:Query_Processor::query_parser_init</em>，里面会调用上面 <em>c_tokenizer.c</em> 来处理digest_text并计算得到digest</li>
<li>继而是 Query_Processor 类骨规则路由函数 <em>process_mysql_query</em>，但这与我们的改动无关</li>
<li>路由完成后，调用 <em>query_parser_update_counters</em> 函数来更新统计信息，改动从这里开始。从 sess 里拿到原始的sql，把地址传递给 <em>update_query_digest()</em></li>
<li><em>Query_Processor::update_query_digest</em> 方法会判断当前digest是否已存在 <em>digest_umap.find(qp-&gt;digest_total)</em><ul>
<li>如果不是第一次出现，则更新 <code>last_seen</code> 时间</li>
<li>如果是第一次出现，则 <em>new QP_query_digest_stats</em> 对象，就在这个地方把sql传过去。（Query_Processor.cpp:1026,1028）</li>
</ul>
</li>
<li>在 <code>QP_query_digest_stats</code> 加入 <code>query_text</code> 字段并在析构函数里初始化，同时记得free掉<br>这个地方一度出现 qt 的值在赋给 query_text 的时候，被莫名的吃掉，猜想应该是内存分配的时候被擦掉了，请了公司C++大神涛哥一起调试看了下，是传过来长度截取不对。<br>现在是没有这个问题，但是会随机性出现本文开头所说，sql末尾出现意外字符。还需要进一步排查。</li>
<li>修改操作sqlite的命令<ul>
<li><em>Query_Processor.cpp</em>：<em>SQLite3_result </em> Query_Processor::get_query_digests()*</li>
<li><em>ProxySQL_Admin.cpp</em>：修改 <code>stats_mysql_query_digest</code> 表定义，以及插入sql的模板。<br>这个地方参数漏了一个导致proxysql crash，编译的时候建议把 Makefile中的 <code>-O2</code> 改成 <code>-O0</code>，这样gdb调试的时候不会优化输出，容易跟踪。</li>
</ul>
</li>
</ol>
<p>这些改动对于c++程序员来说，小菜一碟，但对于我一个DBA来说，总算啃下来了。主要是考虑功能急用，提交 issue 等作者renecannao发版也是太慢。<br>现在可以愉快的收集所有sql了，接下来就是新产生的sql进行自动化审核。</p>
<p>以上两点特性对于升级来讲是无障碍的，因为 <code>stats_mysql_query_stats</code> 在内存里，重启之前字段就加上了，无需改动proxysql.db里面的内容。代码在我fork仓库的 <a href="https://github.com/seanlook/proxysql/tree/v1.3.7-querysample_digest" target="_blank" rel="external"><strong>v1.3.7-querysample_digest</strong></a> 分支，我也已提交 <a href="https://github.com/sysown/proxysql/pull/1010" target="_blank" rel="external">pull request</a> 给作者合并。等消息中……</p>
<hr>
<p>原文连接地址：<a href="http://seanlook.com/2017/04/27/mysql-proxysql-patch-querytext-sample/">http://seanlook.com/2017/04/27/mysql-proxysql-patch-querytext-sample/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ProxySQL之性能测试对比]]></title>
      <url>http://seanlook.com/2017/04/20/mysql-proxysql-performance-test/</url>
      <content type="html"><![CDATA[<p>本文会通过sysbench对ProxySQL进行基准测试，并与直连的性能进行对比。与此同时也对 Maxscale 和 Qihu360 Atlas 放在一起参考。<br>提示：压测前确保把query cache完全关掉。</p>
<h1 id="1-proxysql-vs-直连"><a href="#1-proxysql-vs-直连" class="headerlink" title="1. proxysql vs 直连"></a>1. proxysql vs 直连</h1><h2 id="1-1-select-nontrx"><a href="#1-1-select-nontrx" class="headerlink" title="1.1 select nontrx"></a>1.1 select nontrx</h2><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">.</span><span class="comment">/bin/sysbench</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">test=/root/sysbench2/sysbench/tests/db/oltp</span><span class="string">.</span><span class="comment">lua</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">host=10</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">100</span><span class="string">.</span><span class="comment">36</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">port=6033</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">user=myuser</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">password=mypass</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">db=db15</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">tables</span><span class="literal">-</span><span class="comment">count=20</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">table</span><span class="literal">-</span><span class="comment">size=5000000</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">report</span><span class="literal">-</span><span class="comment">interval=20</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">dist</span><span class="literal">-</span><span class="comment">type=uniform</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">rand</span><span class="literal">-</span><span class="comment">init=on</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">requests=0</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">test</span><span class="literal">-</span><span class="comment">mode=nontrx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">nontrx</span><span class="literal">-</span><span class="comment">mode=select</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">read</span><span class="literal">-</span><span class="comment">only=on</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">skip</span><span class="literal">-</span><span class="comment">trx=on</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">time=120</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">num</span><span class="literal">-</span><span class="comment">threads=2</span> <span class="comment">run</span></div><div class="line"></div><div class="line"><span class="comment">num</span><span class="literal">-</span><span class="comment">threads依次加大</span> <span class="comment">2</span> <span class="comment">5</span> <span class="comment">10</span> <span class="comment">20</span> <span class="comment">50</span> <span class="comment">100</span> <span class="comment">200</span> <span class="comment">400</span></div></pre></td></tr></table></figure>
<iframe src="http://www.tubiaoxiu.com/p.html?s=106165b0eeca215a&web_mode" width="900" height="700" frameborder="0" allowfullscreen></iframe>
<!--
![QPS Trends for ProxySQL](http://7q5fot.com1.z0.glb.clouddn.com/proxysql-perf-qps.png) 
-->
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-perf-rt.png" alt="Response Time Trends for ProxySQL">  </p>
<p>sysbench线程并发数达到10以下，性能损失在30%以上；达到20，性能损失减少到10%左右。看到proxysql承载的并发数越高，性能损失越少；最好的时候在50线程数，相比直连损失5%。</p>
<h2 id="1-2-oltp-dml"><a href="#1-2-oltp-dml" class="headerlink" title="1.2 oltp dml"></a>1.2 oltp dml</h2><p>混合读写测试。proxysql结果图应该与上面相差无几，因为是主要好在计算 query digest 和规则匹配，与select无异，可参考下节的图示。</p>
<p>sysbench 压测命令：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">./bin/sysbench --test=/root/sysbench2/sysbench/tests/db/oltp.lua --mysql-host=<span class="number">10.0</span><span class="number">.100</span><span class="number">.34</span> --mysql-port=<span class="number">3306</span> --mysql-user=myuser --mysql-password=mypass \</div><div class="line">--mysql-db=db15 --oltp-tables-count=<span class="number">20</span> --oltp-table-size=<span class="number">5000000</span> --report-interval=<span class="number">20</span> --oltp-dist-type=uniform --rand-init=on --max-requests=<span class="number">0</span> --oltp-read-only=off --max-time=<span class="number">120</span> \</div><div class="line">--num-threads=<span class="number">2</span> run</div><div class="line"></div><div class="line">num-threads依次加大 <span class="number">2</span> <span class="number">5</span> <span class="number">10</span> <span class="number">16</span> <span class="number">20</span> <span class="number">50</span> <span class="number">100</span> <span class="number">200</span> <span class="number">400</span></div><div class="line">分别对PrxoySQL, Maxscale, Atlas, 直连，四种情况做基准测试</div></pre></td></tr></table></figure></p>
<h1 id="2-proxysql-vs-maxscale-vs-atlas"><a href="#2-proxysql-vs-maxscale-vs-atlas" class="headerlink" title="2. proxysql vs maxscale vs atlas"></a>2. proxysql vs maxscale vs atlas</h1><p>作者自己也有指出，在客户端并发数不高的情况下，maxscale表现比proxysql要好。这里我也特意对maxscale和atlas一起做了个对比。配置基本是最小化的，没有很复杂的规则，只是中间转发。</p>
<ul>
<li>ProxySQL  (v1.3.5): mysql-threads=4</li>
<li>Atlas 360 (v2.2.1): event-threads=4</li>
<li>maxscale  (v1.4.5): threads=4</li>
</ul>
<p><strong> 2.1 select nontrx </strong><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-perf-qps-maxscale-atlas.png" alt="QPS(select) Trends for ProxySQL/Maxscale/atlas"></p>
<p>oltp混合读写基准测试，没有复杂配置的情况下，ProxySQL与Maxscale神奇般的几乎重合，Qihu360的atlas要弱一些。</p>
<p><strong> 2.2 oltp dml </strong><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-perf-qps-oltp-maxscale-atlas.png" alt="QPS(oltp) Trends for ProxySQL/Maxscale/atlas"></p>
<p>原始数据：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-perf-qps-src-data.png" alt="ProxySQL Performance Test Source Data"></p>
<h1 id="3-rewrite-vs-non-rewrite"><a href="#3-rewrite-vs-non-rewrite" class="headerlink" title="3. rewrite vs non-rewrite"></a>3. rewrite vs non-rewrite</h1><p>下面来测一下 query rewrite 对性能的影响，考虑到将来如果要分表，可以在ProxySQL这一层做，应用端无需改动表名。<br>为了达到效果，这里rewrite只是为表增加了个别名：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- proxysql admin cli</span></div><div class="line"><span class="keyword">update</span> mysql_query_rules <span class="keyword">set</span> match_pattern=<span class="string">"(.*)(sbtest\d+)(.*)"</span>,replace_pattern=<span class="string">"\1\2 as ttt \3"</span> <span class="keyword">where</span> rule_id &gt;=<span class="number">61</span> <span class="keyword">and</span> rule_id &lt;=<span class="number">92</span>;</div><div class="line"><span class="keyword">load</span> mysql <span class="keyword">query</span> <span class="keyword">rules</span> <span class="keyword">to</span> run;</div></pre></td></tr></table></figure></p>
<p>sysbench num-threads=20 的结果：</p>
<table>
<thead>
<tr>
<th style="text-align:left">replace?</th>
<th>qps</th>
<th>response time avg(ms)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">proxysql replace</td>
<td>15734.49</td>
<td>17.79</td>
</tr>
<tr>
<td style="text-align:left">proxysql no-replace</td>
<td>16764.66</td>
<td>16.70</td>
</tr>
<tr>
<td style="text-align:left">直连</td>
<td>18778.43</td>
<td>14.91</td>
</tr>
</tbody>
</table>
<p>在20个并发线程下，有 rewrite 是 no-rewrite 性能的 93.9% 。测试线程数继续加大到 50，差别更小。</p>
<h1 id="4-lots-of-rules"><a href="#4-lots-of-rules" class="headerlink" title="4. lots of rules"></a>4. lots of rules</h1><p>测试ProxySQL定义的 query rules 数量（并匹配但不apply），对性能的影响。</p>
<p>测试的规则时批量插入大量能匹配sysbench查询的规则，但 mysql_query_rules.apply=0 :<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">insert into mysql_query_rules(active,schemaname,apply,flagIN) values</div><div class="line">  (<span class="number">1</span>,'db15',<span class="number">0</span>,<span class="number">0</span>),(<span class="number">1</span>,'db15',<span class="number">0</span>,<span class="number">0</span>),(<span class="number">1</span>,'db15',<span class="number">0</span>,<span class="number">0</span>),(<span class="number">1</span>,'db15',<span class="number">0</span>,<span class="number">0</span>),(<span class="number">1</span>,'db15',<span class="number">0</span>,<span class="number">0</span>), ...</div><div class="line"></div><div class="line"># <span class="number">2</span> <span class="number">100</span> <span class="number">200</span> <span class="number">400</span> <span class="number">800</span> <span class="number">1200</span> <span class="number">2000</span></div></pre></td></tr></table></figure></p>
<p>这里偶然发现一个问题，flagIN=0的规则必须要在 !=0 的规则前面，否则flagOUT找不到下一个新链入口.(经作者回复是参数 <code>mysql-query_processor_iterations</code> 控制的)<br>下面的结果是 sysbench num-threads=20 的几轮数据：（由于结果接近，没作图）</p>
<table>
<thead>
<tr>
<th>matched rules</th>
<th>QPS</th>
<th>RT avg</th>
<th>CPU%</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
<td>16741.54</td>
<td>16.69</td>
<td>151</td>
</tr>
<tr>
<td>100</td>
<td>16743.54</td>
<td>16.69</td>
<td>152</td>
</tr>
<tr>
<td>200</td>
<td>16749.94</td>
<td>16.71</td>
<td>159</td>
</tr>
<tr>
<td>400</td>
<td>16556.09</td>
<td>16.91</td>
<td>176</td>
</tr>
<tr>
<td>800</td>
<td>16522.02</td>
<td>16.94</td>
<td>203</td>
</tr>
<tr>
<td>1200</td>
<td>16477.70</td>
<td>16.99</td>
<td>220</td>
</tr>
<tr>
<td>2000</td>
<td>16333.59</td>
<td>17.14</td>
<td>263</td>
</tr>
</tbody>
</table>
<p>看到匹配到的规则随着增多，QPS变化不大，只是略微下降；平均响应时间增加在3%以内；倒是ProxySQL对CPU的负载增加比较明显，匹配的规则从 2 个增加到 2000，cpu使用增加了 74% 。 </p>
<p>参考：</p>
<ul>
<li><a href="https://www.percona.com/blog/2017/04/10/proxysql-rules-do-i-have-too-many/#comment-10967989" target="_blank" rel="external">https://www.percona.com/blog/2017/04/10/proxysql-rules-do-i-have-too-many/#comment-10967989</a></li>
</ul>
<hr>
<p>原文连接地址：<a href="http://seanlook.com/2017/04/20/mysql-proxysql-performance-test/">http://seanlook.com/2017/04/20/mysql-proxysql-performance-test/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ProxySQL之连接复用（multiplexing）以及相关问题说明]]></title>
      <url>http://seanlook.com/2017/04/17/mysql-proxysql-multiplexing/</url>
      <content type="html"><![CDATA[<p>ProxySQL在连接池(<em>persistent connection poll</em>)的基础上，还有一个连接复用的概念 <em>multiplexing connection</em>，官方的wiki里没有很明确的说明，但在作者的一些 blog post 和 issue 里能找到解答： <a href="https://github.com/sysown/proxysql/issues/939#issuecomment-287489317" target="_blank" rel="external">https://github.com/sysown/proxysql/issues/939#issuecomment-287489317</a> </p>
<p>由于SQL可以路由，一个客户端连接上来，可能会到多个 hostgroup 发起连接。复用的意思是，一个后端DB的连接，可以“同时”被多个客户端使用。</p>
<p>传统的连接池，会在客户端<strong>断开连接</strong>（会话）后，把连接放回到池里。在ProxySQL中，由于连接复用，连接会在<strong>sql语句</strong>执行结束后，便将连接放回到池里（客户端会话可能并没有断开），这样便可大大提高后端连接的使用效率，而避免前段请求过大导致后端连接数疯长。</p>
<p>但这样做有时候并不安全，比如应用端连接时指定了 <code>set NAMES xxx</code>，然后执行查询，那么由于multiplexing可能导致两个语句发到不同的DB上执行，继而没有按照预期的字符集执行。proxysql考虑到了这种情况：</p>
<ol>
<li>连接会话里创建了临时表，<code>CREATE TEMPORARY table xxxx...</code></li>
<li>select @开头的变量，如<code>select @@hostname</code></li>
<li>手动开启了事务，<code>start transaction</code>, <code>commit</code>, <code>rollback</code>等等</li>
<li>连接设置了自己的用户变量，比如<code>set names xxx</code>, <code>set autocommit x</code>, <code>set sql_mode=xxx</code>, <code>set v_uservar=xx</code>等等</li>
</ol>
<p>第1,2,3点会根据路由规则，会自动禁用multiplex，发到对应hostgroup后，连接未断开之前不会复用到其它客户端。具体是发到主库还是从库，与匹配的规则有关。<br>issue <a href="https://github.com/sysown/proxysql/issues/941" target="_blank" rel="external">#941</a> 和 <a href="https://github.com/sysown/proxysql/issues/917" target="_blank" rel="external">#917</a> 都有提到临时表丢失的问题，可以用不同的rule来避免</p>
<p>下面对上面几点一一说明。</p>
<h2 id="1-临时表与用户变量（验证-1-2）"><a href="#1-临时表与用户变量（验证-1-2）" class="headerlink" title="1. 临时表与用户变量（验证 1, 2）"></a>1. 临时表与用户变量（验证 1, 2）</h2><p>以下注意连接的会话窗口及执行顺序，admin打头的是在proxysql管理接口上执行。</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">-- [session 1] mysql client proxysql</div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; select 1;</div><div class="line">+---+</div><div class="line">|<span class="string"> 1 </span>|</div><div class="line">+---+</div><div class="line">|<span class="string"> 1 </span>|</div><div class="line">+---+</div><div class="line"></div><div class="line">-- [session 2] proxysql admin cli</div><div class="line">select <span class="symbol">*</span> from stats_mysql_processlist;</div><div class="line">Empty set (0.00 sec)</div><div class="line"></div><div class="line">普通查询，session 1 没断开，但后端连接已放回连接池，所以看不到processlist。下面试验临时表：</div><div class="line"></div><div class="line">-- [session 1] mysql client proxysql</div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; CREATE TEMPORARY TABLE db0.tbl_tmp(id int);</div><div class="line">Query OK, 0 rows affected (0.18 sec)</div><div class="line"></div><div class="line">-- [session 2] proxysql admin cli</div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; select <span class="symbol">*</span> from stats_mysql_processlist;</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+-------------+------------+--------------+----------+---------+---------+------+</div><div class="line">|<span class="string"> ThreadID </span>|<span class="string"> SessionID </span>|<span class="string"> user  </span>|<span class="string"> db                 </span>|<span class="string"> cli_host    </span>|<span class="string"> cli_port </span>|<span class="string"> hostgroup </span>|<span class="string"> l_srv_host  </span>|<span class="string"> l_srv_port </span>|<span class="string"> srv_host     </span>|<span class="string"> srv_port </span>|<span class="string"> command </span>|<span class="string"> time_ms </span>|<span class="string"> info </span>|</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+-------------+------------+--------------+----------+---------+---------+------+</div><div class="line">|<span class="string"> 0        </span>|<span class="string"> 60        </span>|<span class="string"> ecdba </span>|<span class="string"> information_schema </span>|<span class="string"> 10.0.100.34 </span>|<span class="string"> 27058    </span>|<span class="string"> 100       </span>|<span class="string"> 10.0.100.36 </span>|<span class="string"> 41245      </span>|<span class="string"> 10.0.100.100 </span>|<span class="string"> 3307     </span>|<span class="string"> Sleep   </span>|<span class="string"> 4506    </span>|<span class="string">      </span>|</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+-------------+------------+--------------+----------+---------+---------+------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">看到后端的连接没有释放回连接池，但是在 session 1 里select却看不到刚才创建的临时表：</div><div class="line"></div><div class="line">-- [session 1] </div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; select <span class="symbol">*</span> from db0.tbl_tmp;</div><div class="line">ERROR 1146 (42S02): Table 'db0.tbl_tmp' doesn't exist</div><div class="line"></div><div class="line">-- [session 2] </div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; select <span class="symbol">*</span> from stats_mysql_processlist;</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+------------+------------+----------+----------+---------+---------+------+</div><div class="line">|<span class="string"> ThreadID </span>|<span class="string"> SessionID </span>|<span class="string"> user  </span>|<span class="string"> db                 </span>|<span class="string"> cli_host    </span>|<span class="string"> cli_port </span>|<span class="string"> hostgroup </span>|<span class="string"> l_srv_host </span>|<span class="string"> l_srv_port </span>|<span class="string"> srv_host </span>|<span class="string"> srv_port </span>|<span class="string"> command </span>|<span class="string"> time_ms </span>|<span class="string"> info </span>|</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+------------+------------+----------+----------+---------+---------+------+</div><div class="line">|<span class="string"> 0        </span>|<span class="string"> 60        </span>|<span class="string"> ecdba </span>|<span class="string"> information_schema </span>|<span class="string"> 10.0.100.34 </span>|<span class="string"> 27058    </span>|<span class="string"> 1000      </span>|<span class="string">            </span>|<span class="string">            </span>|<span class="string">          </span>|<span class="string">          </span>|<span class="string"> Sleep   </span>|<span class="string"> 2002    </span>|<span class="string">      </span>|</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+------------+------------+----------+----------+---------+---------+------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">select之后，发现上面的srv_host为空。下面往临时表里插数据，正常，且连接被 session 1 客户端持有：</div><div class="line"></div><div class="line">-- [session 1] </div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; insert into db0.tbl_tmp values(1);</div><div class="line">Query OK, 1 row affected (0.01 sec)</div><div class="line"></div><div class="line">-- [session 2] </div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; select <span class="symbol">*</span> from stats_mysql_processlist;</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+-------------+------------+--------------+----------+---------+---------+------+</div><div class="line">|<span class="string"> ThreadID </span>|<span class="string"> SessionID </span>|<span class="string"> user  </span>|<span class="string"> db                 </span>|<span class="string"> cli_host    </span>|<span class="string"> cli_port </span>|<span class="string"> hostgroup </span>|<span class="string"> l_srv_host  </span>|<span class="string"> l_srv_port </span>|<span class="string"> srv_host     </span>|<span class="string"> srv_port </span>|<span class="string"> command </span>|<span class="string"> time_ms </span>|<span class="string"> info </span>|</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+-------------+------------+--------------+----------+---------+---------+------+</div><div class="line">|<span class="string"> 0        </span>|<span class="string"> 60        </span>|<span class="string"> ecdba </span>|<span class="string"> information_schema </span>|<span class="string"> 10.0.100.34 </span>|<span class="string"> 27058    </span>|<span class="string"> 100       </span>|<span class="string"> 10.0.100.36 </span>|<span class="string"> 41245      </span>|<span class="string"> 10.0.100.100 </span>|<span class="string"> 3307     </span>|<span class="string"> Sleep   </span>|<span class="string"> 2996    </span>|<span class="string">      </span>|</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+-------------+------------+--------------+----------+---------+---------+------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">-- [session 1] </div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; select 1;</div><div class="line">+---+</div><div class="line">|<span class="string"> 1 </span>|</div><div class="line">+---+</div><div class="line">|<span class="string"> 1 </span>|</div><div class="line">+---+</div><div class="line"></div><div class="line">-- [session 2] </div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; select <span class="symbol">*</span> from stats_mysql_processlist;</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+------------+------------+----------+----------+---------+---------+------+</div><div class="line">|<span class="string"> ThreadID </span>|<span class="string"> SessionID </span>|<span class="string"> user  </span>|<span class="string"> db                 </span>|<span class="string"> cli_host    </span>|<span class="string"> cli_port </span>|<span class="string"> hostgroup </span>|<span class="string"> l_srv_host </span>|<span class="string"> l_srv_port </span>|<span class="string"> srv_host </span>|<span class="string"> srv_port </span>|<span class="string"> command </span>|<span class="string"> time_ms </span>|<span class="string"> info </span>|</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+------------+------------+----------+----------+---------+---------+------+</div><div class="line">|<span class="string"> 0        </span>|<span class="string"> 60        </span>|<span class="string"> ecdba </span>|<span class="string"> information_schema </span>|<span class="string"> 10.0.100.34 </span>|<span class="string"> 27058    </span>|<span class="string"> 1000      </span>|<span class="string">            </span>|<span class="string">            </span>|<span class="string">          </span>|<span class="string">          </span>|<span class="string"> Sleep   </span>|<span class="string"> 2303    </span>|<span class="string">      </span>|</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+------------+------------+----------+----------+---------+---------+------+</div></pre></td></tr></table></figure>
<p>通过上面的过程可以看见，proxysql在遇到与会话本身相关的变量或操作时，自动禁用了multiplexing，并且针对整个会话有效，直到断开连接。另外，禁用了multiplexing，但<strong>路由规则依然生效</strong>，这就导致了select临时表时路由到了其它实例， Table xxx doesn’t exist。</p>
<h2 id="2-显式start-transaction-验证3"><a href="#2-显式start-transaction-验证3" class="headerlink" title="2. 显式start transaction (验证3)"></a>2. 显式start transaction (验证3)</h2><p>第1,2点根据开发的习惯，都可以避免使用，但显式事务有时却不得不用，也做一个测试。</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">为了效果明显，我将一个不相干的实例，分配同一个hostgroup_id，权重1:1</div><div class="line"></div><div class="line">-- [session 1] </div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; select <span class="symbol">*</span> from db0.tbl_0;</div><div class="line">+-----+----------+--------+</div><div class="line">|<span class="string"> fid </span>|<span class="string"> username </span>|<span class="string"> corpid </span>|</div><div class="line">+-----+----------+--------+</div><div class="line">|<span class="string">   1 </span>|<span class="string"> db0 aa   </span>|<span class="string">      0 </span>|</div><div class="line">|<span class="string">   2 </span>|<span class="string"> db0 aa   </span>|<span class="string">     16 </span>|</div><div class="line">|<span class="string">   3 </span>|<span class="string"> db0 aa   </span>|<span class="string">     32 </span>|</div><div class="line">+-----+----------+--------+</div><div class="line"></div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; select <span class="symbol">*</span> from db0.tbl_0;</div><div class="line">ERROR 1146 (42S02): Table 'db0.tbl_0' doesn't exist</div><div class="line"></div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; begin;  -- 开启一个事务</div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; select <span class="symbol">*</span> from db0.tbl_0;</div><div class="line">+-----+----------+--------+</div><div class="line">|<span class="string"> fid </span>|<span class="string"> username </span>|<span class="string"> corpid </span>|</div><div class="line">+-----+----------+--------+</div><div class="line">|<span class="string">   1 </span>|<span class="string"> db0 aa   </span>|<span class="string">      0 </span>|</div><div class="line">|<span class="string">   2 </span>|<span class="string"> db0 aa   </span>|<span class="string">     16 </span>|</div><div class="line">|<span class="string">   3 </span>|<span class="string"> db0 aa   </span>|<span class="string">     32 </span>|</div><div class="line">+-----+----------+--------+</div><div class="line"></div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; select <span class="symbol">*</span> from db0.tbl_0;</div><div class="line">ERROR 1146 (42S02): Table 'db0.tbl_0' doesn't exist</div><div class="line"></div><div class="line">这就尴尬了，明显是在同一个事务里面，后端依然请求了多个backend。设置 transaction_persistent ：</div><div class="line"></div><div class="line">-- [session 2] </div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; update mysql_users set transaction_persistent=1 where username='ecdba';</div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; load mysql users to run;</div><div class="line"></div><div class="line">-- [session 1] </div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; begin;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; select <span class="symbol">*</span> from db0.tbl_0;</div><div class="line">+-----+----------+--------+</div><div class="line">|<span class="string"> fid </span>|<span class="string"> username </span>|<span class="string"> corpid </span>|</div><div class="line">+-----+----------+--------+</div><div class="line">|<span class="string">   1 </span>|<span class="string"> db0 aa   </span>|<span class="string">      0 </span>|</div><div class="line">|<span class="string">   2 </span>|<span class="string"> db0 aa   </span>|<span class="string">     16 </span>|</div><div class="line">|<span class="string">   3 </span>|<span class="string"> db0 aa   </span>|<span class="string">     32 </span>|</div><div class="line">+-----+----------+--------+</div><div class="line"></div><div class="line">反复执行多次还是上面的结果。 看到到后端连接的情况：</div><div class="line">-- [session 2] </div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; select <span class="symbol">*</span> from stats_mysql_processlist;</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+-------------+------------+--------------+----------+---------+---------+------+</div><div class="line">|<span class="string"> ThreadID </span>|<span class="string"> SessionID </span>|<span class="string"> user  </span>|<span class="string"> db                 </span>|<span class="string"> cli_host    </span>|<span class="string"> cli_port </span>|<span class="string"> hostgroup </span>|<span class="string"> l_srv_host  </span>|<span class="string"> l_srv_port </span>|<span class="string"> srv_host     </span>|<span class="string"> srv_port </span>|<span class="string"> command </span>|<span class="string"> time_ms </span>|<span class="string"> info </span>|</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+-------------+------------+--------------+----------+---------+---------+------+</div><div class="line">|<span class="string"> 3        </span>|<span class="string"> 73        </span>|<span class="string"> ecdba </span>|<span class="string"> information_schema </span>|<span class="string"> 10.0.100.34 </span>|<span class="string"> 45030    </span>|<span class="string"> 100       </span>|<span class="string"> 10.0.100.36 </span>|<span class="string"> 6057       </span>|<span class="string"> 10.0.100.100 </span>|<span class="string"> 3307     </span>|<span class="string"> Sleep   </span>|<span class="string"> 43046   </span>|<span class="string">      </span>|</div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+-------------+------------+--------------+----------+---------+---------+------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure>
<p>看到用户的 <code>transaction_persistent</code> 属性可以保证在同一个事务内的所有sql，都发向后端同一个db实例。如果它为0，同时一个hostgroup有多个可用slave，可能由于不同从库的延迟不一样，而查到不一致的数据。</p>
<p><code>transaction_persistent=1</code> 时还注意一下隐藏的一点点细节，begin 开启事务后，事务内所有语句包括select，都路由到了主库，这是因为 begin 匹配规则选择的是主库，后续的查询都跟着走;而 <code>transaction_persistent=0</code> 时 bgein 由于路由规则作用，也发到了主库，但后续的select,update等是不受它约束，继续根据路由规则走。在 非 <em>master-master</em> 模式下，事务还是安全的。</p>
<h2 id="3-1-autocommit-会话变量-验证4"><a href="#3-1-autocommit-会话变量-验证4" class="headerlink" title="3.1 autocommit 会话变量 (验证4)"></a>3.1 autocommit 会话变量 (验证4)</h2><p>第 4 点略微有些复杂，开始之前先引用一段作者针对 issue <a href="https://github.com/sysown/proxysql/issues/653#issuecomment-241828093" target="_blank" rel="external">#653</a> 的回复：（不完全翻译）</p>
<blockquote>
<p><strong>ProxySQL doesn’t track user variable</strong><br>ProxySQL不会记录 用户变量，当proxysql识别到 <code>set @variable1 = 67</code> 语句时，会自动禁用连接复用(disable multiplexing)，并根据路由规则选择后端节点（通常是写节点），执行完成后，连接不会放回连接池，直到disconnect。</p>
<p><strong>ProxySQL tracks some session variables</strong><br>ProxySQL会记录 会话变量，“记录” 的意思是，proxysql接收到这些会话变量后，不会马上从后端连接池去拿连接然后 set xxx （因为还没有足够的信息知道拿哪个用户哪个db的连接），而是在当前连接保存起来，等待下一个查询命令，然后一起发送到到后端。<code>use dbname</code>就是这样处理的。<br>当前，记录的只有 <code>autocommit</code> 和字符集变量、<code>timezone</code>。比如执行sql前发送一个 <code>set autocommit=1</code>，proxysql会马上返回一个 <code>OK</code>，代表它知道应用端设置了自动提交，等真正的dml请求过来时，它将与后端拿到的连接比较autocommit是否匹配，不匹配则先set再执行dml。</p>
<p>当然现实还受到proxysql全局变量 <code>mysql-enforce_autocommit_on_reads</code> 的影响，即是否开启对读操作强制 autocommit。这个变量所解决的问题是，在同一个事务里既有 write 又有 read 且配置了读写分离的情况下，会导致在 读库 和 写库 各自开一个事务 (从库会set autocommit=0)，这就不合理了，所以把它设为 true 可以保证事务始终是一个。默认 false。<br>但是如上节所说，如果开启了 <code>transaction_persistent=1</code>，这个问题就不存在了。</p>
</blockquote>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">-- [session <span class="number">1</span>] </div><div class="line">(ecdba@<span class="number">10.0</span><span class="number">.100</span><span class="number">.36</span>:<span class="number">6033</span>) [(none)]&gt; <span class="built_in">set</span> @variable1 = <span class="number">67</span>;</div><div class="line"></div><div class="line">-- [session <span class="number">2</span>] </div><div class="line">(admin@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6032</span>) [(none)]&gt; show processlist;</div><div class="line">+-----------+-------+--------------------+-----------+---------+---------+------+</div><div class="line">| <span class="type">SessionID</span> | <span class="type">user</span>  | <span class="type">db</span>                 | <span class="type">hostgroup</span> | <span class="type">command</span> | <span class="type">time_ms</span> | <span class="type">info</span> |</div><div class="line"><span class="type">+-----------+-------+--------------------+-----------+---------+---------+------+</span></div><div class="line">| 79        | <span class="type">ecdba</span> | <span class="type">information_schema</span> | <span class="type">100</span>       | <span class="type">Sleep</span>   | <span class="type">8008</span>    |      <span class="type">|</span></div><div class="line">+-----------+-------+--------------------+-----------+---------+---------+------+</div><div class="line">1 row <span class="built_in">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">与后端的连接已建立。但如果没有路由规则匹配到，proxysql会选择该用户 default_hostgroup，一般是<span class="number">0</span>，由于没有 HG <span class="number">0</span> 记录，这个<span class="built_in">set</span> variables会失败：</div><div class="line">-- [session <span class="number">1</span>] </div><div class="line">(ecdba@<span class="number">10.0</span><span class="number">.100</span><span class="number">.36</span>:<span class="number">6033</span>) [(none)]&gt; <span class="built_in">set</span> @variable1 = <span class="number">67</span>;</div><div class="line">ERROR <span class="number">9001</span> (HY000): Max connect <span class="built_in">timeout</span> reached while reaching hostgroup <span class="number">0</span> <span class="built_in">after</span> <span class="number">11462</span>ms</div><div class="line"></div><div class="line"></div><div class="line">同样情况下，<span class="built_in">set</span> autocommit 和 <span class="built_in">set</span> names 就很快返回，并且看不到后端有连接：</div><div class="line">(ecdba@<span class="number">10.0</span><span class="number">.100</span><span class="number">.36</span>:<span class="number">6033</span>) [(none)]&gt; <span class="built_in">set</span> session transaction isolation level read committed;</div><div class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.00</span> sec)</div><div class="line">(ecdba@<span class="number">10.0</span><span class="number">.100</span><span class="number">.36</span>:<span class="number">6033</span>) [(none)]&gt; <span class="built_in">set</span> autocommit=<span class="number">0</span>;</div><div class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">-- [session <span class="number">2</span>] </div><div class="line">(admin@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6032</span>) [(none)]&gt; show processlist;</div><div class="line">Empty <span class="built_in">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">-- [session <span class="number">1</span>] </div><div class="line">begin开启一个事务，验证 transaction_persistent：</div><div class="line">(ecdba@<span class="number">10.0</span><span class="number">.100</span><span class="number">.36</span>:<span class="number">6033</span>) [(none)]&gt; UPDATE db0.tbl_0 <span class="built_in">set</span> username='db0 autocommit' <span class="keyword">where</span> fid=<span class="number">3</span>;</div><div class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.00</span> sec)</div><div class="line">Rows matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></div><div class="line"></div><div class="line">(ecdba@<span class="number">10.0</span><span class="number">.100</span><span class="number">.36</span>:<span class="number">6033</span>) [(none)]&gt; select * from db0.tbl_0;</div><div class="line">+-----+----------------+--------+</div><div class="line">| <span class="type">fid</span> | <span class="type">username</span>       | <span class="type">corpid</span> |</div><div class="line"><span class="type">+-----+----------------+--------+</span></div><div class="line">|   1 | <span class="type">db0</span> aa         |      <span class="type">0</span> |</div><div class="line"><span class="type">|   2</span> | <span class="type">db0</span> aa         |     <span class="type">16</span> |</div><div class="line"><span class="type">|   3</span> | <span class="type">db0</span> autocommit |     <span class="type">32</span> |</div><div class="line"><span class="type">+-----+----------------+--------+</span></div><div class="line">3 rows <span class="built_in">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">(ecdba@<span class="number">10.0</span><span class="number">.100</span><span class="number">.36</span>:<span class="number">6033</span>) [(none)]&gt; commit;</div><div class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">查看后端DB（主库）的 general_log：（都发到了主库）</div><div class="line"></div><div class="line">44<span class="number">9651978</span> Connect	ecdba@<span class="number">10.0</span><span class="number">.100</span><span class="number">.36</span> on information_schema</div><div class="line">44<span class="number">9651978</span> Query	SET autocommit=<span class="number">0</span></div><div class="line">44<span class="number">9651978</span> Query	UPDATE db0.tbl_0 <span class="built_in">set</span> username='db0 autocommit' <span class="keyword">where</span> fid=<span class="number">3</span></div><div class="line">44<span class="number">9651978</span> Query	select * from db0.tbl_0</div><div class="line">44<span class="number">9651978</span> Query	commit</div></pre></td></tr></table></figure>
<p>这也告诉我们，尽量不要在 proxy admin cli 里面执行 show slave status， set global xxx 这样的管理命令，你较难预知到后端在哪里执行的。</p>
<h2 id="3-2-字符集prepared会话变量-验证4"><a href="#3-2-字符集prepared会话变量-验证4" class="headerlink" title="3.2 字符集prepared会话变量 (验证4)"></a>3.2 字符集prepared会话变量 (验证4)</h2><p>对字符集 <code>set NAMES xxx</code>, <code>set character_set_client=xxx</code>，处理方法与上面 set autocommit 是一样的，但是遇到使用 prepared statement 时需要特别提一下。</p>
<p>首先ProxySQL所支持的字符集，在表 <em>mysql_collations</em> 可以看到，它是直接从本地安装的mysql client lib获取的，proxysql默认使用的是utf8，指的是在连接的时候默认认为客户端的字符集是utf8。</p>
<p>根据 issue #780：<a href="https://github.com/sysown/proxysql/issues/780" target="_blank" rel="external">https://github.com/sysown/proxysql/issues/780</a> 的讨论，某些框架比如 Laravel 在通过PDO连接MySQL时，执行 prepared statement时会连同 <code>set NAMES xx</code> 一起发送，导致没有生效。经测试，该问题在 v1.3.5 中已不存在：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">-- </span>[session 1] </div><div class="line">mysql -uecweb -pweber -h10.0.100.34 -P6033 --default-character-set=latin1</div><div class="line"></div><div class="line">(ecweb@10.0.100.34:6033) [(none)]&gt; select * from d<span class="emphasis">_ec_</span>crm.tttt;</div><div class="line"><span class="code">+-----+</span>-------+</div><div class="line"><span class="section">| fid | fname |</span></div><div class="line">+-----+-------+</div><div class="line"><span class="section">|   1 | xx??? |</span></div><div class="line">+-----+-------+</div><div class="line"></div><div class="line"><span class="code"> latin1连接看utf8的数据，所以乱码。下面模拟 prepared statement 设置字符集：</span></div><div class="line">(ecweb@10.0.100.34:6033) [(none)]&gt; PREPARE stmt FROM <span class="emphasis">'SET NAMES utf8'</span>;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line">Statement prepared</div><div class="line"></div><div class="line"><span class="bullet">-- </span>[session 2] </div><div class="line">(admin@127.0.0.1:6032) [(none)]&gt; select * from stats<span class="emphasis">_mysql_</span>processlist;</div><div class="line"><span class="code">+----------+</span>-----------<span class="code">+-------+</span>--------------------<span class="code">+-------------+</span>----------<span class="code">+-----------+</span>-------------<span class="code">+------------+</span>---------------<span class="code">+----------+</span>---------<span class="code">+---------+</span>------+</div><div class="line"><span class="section">| ThreadID | SessionID | user  | db                 | cli_host    | cli_port | hostgroup | l_srv_host  | l_srv_port | srv_host      | srv_port | command | time_ms | info |</span></div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+-------------+------------+---------------+----------+---------+---------+------+</div><div class="line"><span class="section">| 1        | 50        | ecweb | information_schema | 10.0.100.34 | 46389    | 110       | 10.0.100.34 | 31946      | 192.168.1.229 | 3307     | Sleep   | 35649   |      |</span></div><div class="line">+----------+-----------+-------+--------------------+-------------+----------+-----------+-------------+------------+---------------+----------+---------+---------+------+</div><div class="line"></div><div class="line">直接执行还是乱码，也要在prepared ：</div><div class="line">(ecweb@10.0.100.34:6033) [(none)]&gt; select * from d<span class="emphasis">_ec_</span>crm.tttt;</div><div class="line"><span class="code">+-----+</span>-------+</div><div class="line"><span class="section">| fid | fname |</span></div><div class="line">+-----+-------+</div><div class="line"><span class="section">|   1 | xx??? |</span></div><div class="line">+-----+-------+</div><div class="line"></div><div class="line">(ecweb@10.0.100.34:6033) [(none)]&gt; PREPARE stmt FROM <span class="emphasis">'select * from d_ec_crm.tttt'</span>;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line">Statement prepared</div><div class="line"></div><div class="line">(ecweb@10.0.100.34:6033) [(none)]&gt; EXECUTE stmt;</div><div class="line"><span class="code">+-----+</span>-------------+</div><div class="line"><span class="section">| fid | fname       |</span></div><div class="line">+-----+-------------+</div><div class="line"><span class="section">|   1 | xx嘻嘻嘻 |</span></div><div class="line">+-----+-------------+</div></pre></td></tr></table></figure></p>
<p>注意到 <code>PREPARE stmt FROM &#39;SET NAMES utf8&#39;</code> 发送之后，马上与后端建立了连接，而不像上节<code>set names xx</code>止步于proxysql。所以是自动禁用了 multiplexing。</p>
<h2 id="3-3-set-sql-mode"><a href="#3-3-set-sql-mode" class="headerlink" title="3.3 set sql_mode"></a>3.3 set sql_mode</h2><p>作者明确表示 <code>sql_mode</code> 在 1.3.x 版本里不会track，也就是它完全按照路由规则走，不会像临时表或用户变量那样 disable multiplexing automaticly，也不像上面的会话变量那样 “记录” 然后一并发送。</p>
<p>如果sql_mode确实对应用使用造成困扰，1.4版本里会修复，在此前估计只好将连接复用的特性全局禁用：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> mysql-multiplexing=<span class="string">'false'</span>;</div><div class="line">LOAD MYSQL <span class="keyword">VARIABLES</span> TO <span class="comment">RUNTIME</span>;</div><div class="line">SAVE MYSQL <span class="keyword">VARIABLES</span> TO <span class="comment">DISK</span>;</div></pre></td></tr></table></figure></p>
<p>参考 <a href="https://github.com/sysown/proxysql/issues/916" target="_blank" rel="external">issue #916</a>。禁用 multiplexing 后，就像一般的中间件连接池一样，维持或者释放连接。</p>
<p>最后，关于 multiplexing 向作者提了一个特性 <a href="https://github.com/sysown/proxysql/issues/594#issuecomment-294703577" target="_blank" rel="external">594#issuecomment-294703577</a> ：前端连接执行完一个查询，后端不马上把它返回连接池（复用），而是等待几秒，如果这个连接后续又有sql进来，就不需要重新从池里获取连接，还有检查一堆变量。renecannao 的回复非常及时，也确认 v1.4 会加上这个功能。</p>
<p>updated at 2017-07-27:<br>关于连接复用与连接池的差别，在后一次与作者的沟通中，更加明确了，见 <a href="https://github.com/sysown/proxysql/issues/1107" target="_blank" rel="external">#issue 1107</a>:<br>问题始于发现环境中的connection pool没有起作用（禁用了multiplexing），因为一开始只是认为禁用了multiplexing，connection pool不会受影响。但实际不是的，在1.3.x版本里，禁用multiplexing，就相当于连接复用和连接池都没有了，前端应用在释放连接后，proxysql也把后端的连接释放了；在1.4.x版本里表现不同，禁用multiplexing后，前端连接释放，proxysql对后端的连接继续保持，并对连接重置以便重复利用。</p>
<p>所以如果测试上没啥问题，建议开启连接复用，或者升级到 1.4.x 版本。</p>
<hr>
<p>原文连接地址：<a href="http://seanlook.com/2017/04/17/mysql-proxysql-multiplexing/">http://seanlook.com/2017/04/17/mysql-proxysql-multiplexing/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ProxySQL之读写分离与分库路由演示]]></title>
      <url>http://seanlook.com/2017/04/17/mysql-proxysql-route-rw_split/</url>
      <content type="html"><![CDATA[<p>本文演示使用ProxySQL来完成读写分离和后端分库的一个实际配置过程，安装及配置项介绍见前文 <a href="http://seanlook.com/2017/04/10/mysql-proxysql-install-config/">ProxySQL之安装及配置详解</a>。</p>
<p>环境<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">instance0</span>: 10<span class="selector-class">.0</span><span class="selector-class">.100</span><span class="selector-class">.100</span> (<span class="selector-tag">db0</span>,<span class="selector-tag">db2</span>,<span class="selector-tag">db4</span>,<span class="selector-tag">db6</span>)</div><div class="line"><span class="selector-tag">instance1</span>: 10<span class="selector-class">.0</span><span class="selector-class">.100</span><span class="selector-class">.101</span> (<span class="selector-tag">db1</span>,<span class="selector-tag">db3</span>,<span class="selector-tag">db5</span>,<span class="selector-tag">db7</span>)</div><div class="line"><span class="selector-tag">instance2</span>: 10<span class="selector-class">.0</span><span class="selector-class">.100</span><span class="selector-class">.102</span> (<span class="selector-tag">db2</span>,<span class="selector-tag">db6</span>,<span class="selector-tag">db10</span>,<span class="selector-tag">db14</span>)</div><div class="line"><span class="selector-tag">instance3</span>: 10<span class="selector-class">.0</span><span class="selector-class">.100</span><span class="selector-class">.103</span> (<span class="selector-tag">db3</span>,<span class="selector-tag">db7</span>,<span class="selector-tag">db11</span>,<span class="selector-tag">db15</span>)</div><div class="line"></div><div class="line"><span class="selector-tag">instance0</span> <span class="selector-tag">slave</span>: 192<span class="selector-class">.168</span><span class="selector-class">.10</span><span class="selector-class">.4</span><span class="selector-pseudo">:3316</span></div><div class="line"><span class="selector-tag">instance1</span> <span class="selector-tag">slave</span>: 192<span class="selector-class">.168</span><span class="selector-class">.10</span><span class="selector-class">.4</span><span class="selector-pseudo">:3326</span></div><div class="line"><span class="selector-tag">instance2</span> <span class="selector-tag">slave</span>: 192<span class="selector-class">.168</span><span class="selector-class">.10</span><span class="selector-class">.4</span><span class="selector-pseudo">:3336</span></div><div class="line"><span class="selector-tag">instance3</span> <span class="selector-tag">slave</span>: 192<span class="selector-class">.168</span><span class="selector-class">.10</span><span class="selector-class">.4</span><span class="selector-pseudo">:3346</span></div><div class="line"></div><div class="line"><span class="selector-tag">proxysql</span> <span class="selector-tag">node0</span>: 10<span class="selector-class">.0</span><span class="selector-class">.100</span><span class="selector-class">.36</span></div></pre></td></tr></table></figure></p>
<p>现在想达到这样一个目的：客户端应用连接上 proxysql 的ip:port，连接时指定分库db名，执行sql时自动路由到对应的实例、对应的库。考虑下面的部署结构：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-rw-lb-deploy.png" alt="ProxySQL Deploy"></p>
<p>任何一个proxysql节点都是对等的，路由请求到后端instance的各个database上。</p>
<h1 id="1-配置后端DB"><a href="#1-配置后端DB" class="headerlink" title="1. 配置后端DB"></a>1. 配置后端DB</h1><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">-- proxysql admin cli</div><div class="line"></div><div class="line">insert into mysql_servers(hostgroup_id,hostname,port,weight,weight,comment) values</div><div class="line">  (<span class="number">100</span>, '<span class="number">10.0</span><span class="number">.100</span><span class="number">.100</span>', <span class="number">3307</span>, <span class="number">1</span>, 'db0,ReadWrite'),</div><div class="line">  (<span class="number">1000</span>, '<span class="number">10.0</span><span class="number">.100</span><span class="number">.100</span>', <span class="number">3307</span>, <span class="number">1</span>, 'db0,ReadWrite'),(<span class="number">1000</span>, '<span class="number">192.168</span><span class="number">.10</span><span class="number">.4</span>', <span class="number">3316</span>, <span class="number">9</span>, 'db0,ReadOnly');</div><div class="line"></div><div class="line">insert into mysql_servers(hostgroup_id,hostname,port,weight,weight,comment) values</div><div class="line">  (<span class="number">101</span>, '<span class="number">10.0</span><span class="number">.100</span><span class="number">.101</span>', <span class="number">3307</span>, <span class="number">1</span>, 'db1,ReadWrite'),</div><div class="line">  (<span class="number">1001</span>, '<span class="number">10.0</span><span class="number">.100</span><span class="number">.101</span>', <span class="number">3307</span>, <span class="number">1</span>, 'db1,ReadWrite'),(<span class="number">1001</span>, '<span class="number">192.168</span><span class="number">.10</span><span class="number">.4</span>', <span class="number">3326</span>, <span class="number">9</span>, 'db1,ReadOnly');</div><div class="line"></div><div class="line">insert into mysql_servers(hostgroup_id,hostname,port,weight,weight,comment) values</div><div class="line">  (<span class="number">102</span>, '<span class="number">10.0</span><span class="number">.100</span><span class="number">.102</span>', <span class="number">3307</span>, <span class="number">1</span>, 'db2,ReadWrite'),</div><div class="line">  (<span class="number">1002</span>, '<span class="number">10.0</span><span class="number">.100</span><span class="number">.102</span>', <span class="number">3307</span>, <span class="number">1</span>, 'db2,ReadWrite'),(<span class="number">1002</span>, '<span class="number">192.168</span><span class="number">.10</span><span class="number">.4</span>', <span class="number">3336</span>, <span class="number">9</span>, 'db2,ReadOnly');</div><div class="line"></div><div class="line">insert into mysql_servers(hostgroup_id,hostname,port,weight,weight,comment) values</div><div class="line">  (<span class="number">103</span>, '<span class="number">10.0</span><span class="number">.100</span><span class="number">.103</span>', <span class="number">3307</span>, <span class="number">1</span>, 'db3,ReadWrite'),</div><div class="line">  (<span class="number">1003</span>, '<span class="number">10.0</span><span class="number">.100</span><span class="number">.103</span>', <span class="number">3307</span>, <span class="number">1</span>, 'db3,ReadWrite'),(<span class="number">1003</span>, '<span class="number">192.168</span><span class="number">.10</span><span class="number">.4</span>', <span class="number">3346</span>, <span class="number">9</span>, 'db3,ReadOnly');</div></pre></td></tr></table></figure>
<p>比如 100 是主库，则 1000 是从库，同时主库也可以处理 1/10 的读请求。</p>
<h1 id="2-配置用户"><a href="#2-配置用户" class="headerlink" title="2. 配置用户"></a>2. 配置用户</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- proxysql admin cli</span></div><div class="line"></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mysql_users(username, <span class="keyword">password</span>,active,transaction_persistent)</div><div class="line">  <span class="keyword">values</span>(<span class="string">'user0'</span>, <span class="string">'password0'</span>, <span class="number">1</span>, <span class="number">1</span>),(<span class="string">'read1'</span>, <span class="string">'password1'</span>, <span class="number">1</span>, <span class="number">1</span>);</div></pre></td></tr></table></figure>
<p>这里将 transaction_persistent 设置为1，如果不知道它的含义，请参考前文。</p>
<p>要确保用户有能够登陆到后端的所有db的权限。</p>
<h1 id="3-修改全局变量"><a href="#3-修改全局变量" class="headerlink" title="3. 修改全局变量"></a>3. 修改全局变量</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- proxysql admin cli</span></div><div class="line"></div><div class="line"><span class="keyword">set</span> mysql-default_charset=<span class="string">'utf8mb4'</span>;</div><div class="line"><span class="keyword">set</span> mysql-query_retries_on_failure=<span class="number">0</span>;</div><div class="line"><span class="keyword">set</span> mysql-max_stmts_per_connection=<span class="number">1000</span>;</div><div class="line"><span class="keyword">set</span> mysql-eventslog_filename=<span class="string">'queries.log'</span>;</div><div class="line"><span class="keyword">set</span> monitor_slave_lag_when_null=<span class="number">7200</span>;</div><div class="line"></div><div class="line"><span class="keyword">set</span> mysql-ping_timeout_server=<span class="number">1500</span>;</div><div class="line"><span class="keyword">set</span> mysql-monitor_connect_timeout=<span class="number">1000</span>;</div><div class="line"><span class="keyword">set</span> mysql-default_max_latency_ms=<span class="number">2000</span>;</div><div class="line"></div><div class="line"><span class="keyword">set</span> mysql-monitor_username=<span class="string">'monitor'</span>;</div><div class="line"><span class="keyword">set</span> mysql-monitor_password=<span class="string">'monitor'</span>;</div><div class="line"><span class="keyword">set</span> mysql-server_version=<span class="string">'5.6.16'</span>;</div></pre></td></tr></table></figure>
<p>需要提前给 monitor 账号开通权限，一般共用监控数据库的权限就足够了。</p>
<p><strong>让上面所有的修改生效</strong>:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- proxysql admin cli</span></div><div class="line"><span class="comment">-- 应用</span></div><div class="line"><span class="keyword">load</span> mysql <span class="keyword">users</span> <span class="keyword">to</span> runtime;</div><div class="line"><span class="keyword">load</span> mysql servers <span class="keyword">to</span> runtime;</div><div class="line"><span class="keyword">load</span> mysql <span class="keyword">variables</span> <span class="keyword">to</span> runtime;</div><div class="line"></div><div class="line"><span class="comment">-- 保存到磁盘</span></div><div class="line">save mysql users to disk;</div><div class="line">save mysql servers to disk;</div><div class="line">save mysql variables to disk;</div><div class="line"></div><div class="line">save mysql users to mem;  <span class="comment">-- 可以屏蔽看到的明文密码</span></div></pre></td></tr></table></figure></p>
<h1 id="4-添加路由规则"><a href="#4-添加路由规则" class="headerlink" title="4. 添加路由规则"></a>4. 添加路由规则</h1><p>一般配置ProxySQL规则步骤是 <a href="https://github.com/sysown/proxysql/issues/653#issuecomment-242122732" target="_blank" rel="external">issues #653</a> :</p>
<ol>
<li>配置proxysql，将所有sql都发到主库</li>
<li>分析表 <code>stats_mysql_query_digest</code> 里面哪几种查询占比高</li>
<li>筛选哪些些占比高的SELECT，可以路由到从库</li>
<li>修改 <code>mysql_query_rules</code> 里面的规则，使其生效。不要一味的把所有查询都路由到主库</li>
</ol>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">-- [<span class="number">1</span>] read&amp;write split</div><div class="line">insert into mysql_query_rules(rule_id, active,match_digest,apply,flagOUT) values(<span class="number">49</span>, <span class="number">1</span>,'^select\s.*\sfor update',<span class="number">0</span>,<span class="number">21</span>);</div><div class="line">insert into mysql_query_rules(rule_id, active,match_digest,apply,flagOUT) values(<span class="number">50</span>, <span class="number">1</span>,'^\(?select',<span class="number">0</span>,<span class="number">20</span>);</div><div class="line">insert into mysql_query_rules(rule_id, active,match_digest,negate_match_pattern,apply,flagOUT) values(<span class="number">60</span>, <span class="number">1</span>,'^select',<span class="number">1</span>,<span class="number">0</span>,<span class="number">21</span>);</div><div class="line"></div><div class="line">-- 下面最好从rule_id <span class="number">70</span>开始，中间留空</div><div class="line"></div><div class="line">-- [<span class="number">2</span>] flag <span class="number">20</span> read</div><div class="line">insert into mysql_query_rules(active,schemaname,destination_hostgroup,apply,flagIN,flagOUT) values</div><div class="line">  (<span class="number">1</span>,'db0',<span class="number">1000</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db1',<span class="number">1001</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db2',<span class="number">1002</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db3',<span class="number">1003</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db4',<span class="number">1000</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db5',<span class="number">1001</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db6',<span class="number">1002</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db7',<span class="number">1003</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>),</div><div class="line">  (<span class="number">1</span>,'db8',<span class="number">1000</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db9',<span class="number">1001</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db10',<span class="number">1002</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db11',<span class="number">1003</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db12',<span class="number">1000</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db13',<span class="number">1001</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db14',<span class="number">1002</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>), (<span class="number">1</span>,'db15',<span class="number">1003</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>);</div><div class="line"></div><div class="line">-- [<span class="number">3</span>] flag <span class="number">21</span> write</div><div class="line">insert into mysql_query_rules(active,schemaname,destination_hostgroup,apply,flagIN,flagOUT) values</div><div class="line">  (<span class="number">1</span>,'db0',<span class="number">100</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db1',<span class="number">101</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db2',<span class="number">102</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db3',<span class="number">103</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db4',<span class="number">100</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db5',<span class="number">101</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db6',<span class="number">102</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db7',<span class="number">103</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), </div><div class="line">  (<span class="number">1</span>,'db8',<span class="number">100</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db9',<span class="number">101</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db10',<span class="number">102</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db11',<span class="number">103</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db12',<span class="number">100</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db13',<span class="number">101</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db14',<span class="number">102</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>), (<span class="number">1</span>,'db15',<span class="number">103</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>);</div><div class="line"></div><div class="line">-- [<span class="number">4</span>] no schema given when connect</div><div class="line">insert into mysql_query_rules(rule_id,active,schemaname,apply,flagOUT) values(<span class="number">20</span>,<span class="number">1</span>,'information_schema',<span class="number">0</span>,<span class="number">302</span>);</div><div class="line"></div><div class="line">-- [<span class="number">5</span>] route according to dbX.</div><div class="line">insert into mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply,flagIN,flagOUT) values(<span class="number">1000</span>,<span class="number">1</span>,'([\s\`])db(<span class="number">0</span>|<span class="number">4</span>|<span class="number">8</span>|<span class="number">12</span>)([\.\`])',<span class="number">100</span>,<span class="number">1</span>,<span class="number">302</span>,<span class="number">302</span>);</div><div class="line">insert into mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply,flagIN,flagOUT) values(<span class="number">1001</span>,<span class="number">1</span>,'([\s\`])db(<span class="number">1</span>|<span class="number">5</span>|<span class="number">9</span>|<span class="number">13</span>)([\.\`])',<span class="number">101</span>,<span class="number">1</span>,<span class="number">302</span>,<span class="number">302</span>);</div><div class="line">insert into mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply,flagIN,flagOUT) values(<span class="number">1002</span>,<span class="number">1</span>,'([\s\`])db(<span class="number">2</span>|<span class="number">6</span>|<span class="number">10</span>|<span class="number">14</span>)([\.\`])',<span class="number">102</span>,<span class="number">1</span>,<span class="number">302</span>,<span class="number">302</span>);</div><div class="line">insert into mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply,flagIN,flagOUT) values(<span class="number">1003</span>,<span class="number">1</span>,'([\s\`])db(<span class="number">3</span>|<span class="number">7</span>|<span class="number">11</span>|<span class="number">15</span>)([\.\`])',<span class="number">103</span>,<span class="number">1</span>,<span class="number">302</span>,<span class="number">302</span>);</div><div class="line"></div><div class="line">-- [<span class="number">6</span>] wrong usage</div><div class="line">insert into mysql_query_rules(rule_id,active,match_digest,apply,flagIN,flagOUT,error_msg,comment) </div><div class="line">  values(<span class="number">1404</span>,<span class="number">1</span>,'^SELECT DATABASE\(\)$',<span class="number">1</span>,<span class="number">302</span>,<span class="number">302</span>,'You should specify schema name first', 'use db0 Take long when no schema given for connection');</div><div class="line"></div><div class="line">-- [<span class="number">7</span>] <span class="section">default</span> route</div><div class="line">insert into mysql_query_rules(rule_id,active,apply, flagIN,flagOUT,error_msg,comment) values(<span class="number">9999</span>,<span class="number">1</span>,<span class="number">1</span>, <span class="number">302</span>,<span class="number">302</span>,'No query rules matched (by ProxySQL)', <span class="string">"Don't define the default hostgroup 0 for ME"</span>);</div><div class="line"></div><div class="line">-- [<span class="number">8</span>]</div><div class="line">LOAD MYSQL QUERY RULES TO RUN;</div><div class="line">SAVE MYSQL QUERY RULES TO DISK;</div></pre></td></tr></table></figure>
<p>逐个解释：</p>
<ol>
<li><p>以 select 开头并且不是 for update 类型的SQL，进入到新的规则链flagOUT=20;<br>其它诸如 insert, delete, update, replace, set, show 等语句，都进入到规则链flagOUT=21。<br>注：’^(?select’ 规则匹配以<code>select</code>或 <code>(select</code> 开头的查询，但目前proxysql(1.3.6, 1.4.1)版本对以 <code>(</code> 开头的查询不记录 stats_mysql_query_digest 表。<a href="https://github.com/sysown/proxysql/issues/1100" target="_blank" rel="external">#issue 1100</a></p>
<p>有个小技巧，mysql_query_rules 表的rule_id有自增，但最好从中间某个数开始，因为一旦后续可能需要紧急在前面插入规则，从1开始就没空位了。</p>
<p>这里大家可能有个顾虑，从库上可以执行 <code>set NAMES xxx</code>, <code>set session sql_mode=xxx</code>, <code>SET autocommit=?</code>, <code>commit</code>, <code>rollback</code>, <code>START TRANSACTION</code>, <code>use dbx</code> 这样的语句，不能全路由到主库吧？对此，另起了一篇文章 <a href="http://seanlook.com/2017/04/17/mysql-proxysql-multiplexing">http://seanlook.com/2017/04/17/mysql-proxysql-multiplexing</a> 。</p>
</li>
<li><p>flagIN=20 是 <em>只读链</em> 的入口<br>根据连接时指定的dbname，路由到对应的分库上。db0, db4, db8, db12 路由到 hostgroup_id=1000 ，db1, db5, db9, db16 路由到 hostgroup_id=1002 ，依次类推。<br>flagIN=flagOUT 则结束匹配。</p>
</li>
<li><p>flagOUT=21 是 <em>读写链</em>的入口<br>与上面的 [2] 类似，但是根据dbname路由到主库。</p>
</li>
<li><p>当建立连接的时候没有指定dbname时，分两种情况</p>
<ul>
<li>使用连接的时候 <code>use db0</code>，因为mysql协议在每次 use dbname 时都会发送一个 <code>SELECT DATABASE()</code> 命令，第一次由于没有连接上后端任何DB，命令会执行超时失败，再次 use db0 是才成功。具体参考我所提的 <a href="https://github.com/sysown/proxysql/issues/988" target="_blank" rel="external">issue #988</a> 。<br>因此这里我为它添加了一个规则 <strong>[6]</strong>，遇到这种情况马上处理，而不用等待失败。</li>
<li>使用连接时从未有默认schema，添加规则 <strong>[5]</strong>，使用 <code>schemaname.tablename</code> 的形式匹配 schemaname，然后路由到对应的 hostgroup 。</li>
</ul>
</li>
<li><p>因为没有定义 hostgroup 0，在意外情况什么规则都没匹配上时也依旧会等待失败，所以默认规则（默认路由）返回一个错误。</p>
</li>
</ol>
<h1 id="5-效果演示"><a href="#5-效果演示" class="headerlink" title="5. 效果演示"></a>5. 效果演示</h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">db0 与 db15 分别在两个实例上：</div><div class="line"></div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; select <span class="symbol">*</span> from db0.tbl_0;</div><div class="line">+-----+----------------+--------+</div><div class="line">|<span class="string"> fid </span>|<span class="string"> username       </span>|<span class="string"> corpid </span>|</div><div class="line">+-----+----------------+--------+</div><div class="line">|<span class="string">   1 </span>|<span class="string"> db0 aa         </span>|<span class="string">      0 </span>|</div><div class="line">|<span class="string">   2 </span>|<span class="string"> db0 aa         </span>|<span class="string">     16 </span>|</div><div class="line">|<span class="string">   3 </span>|<span class="string"> db0 autocommit </span>|<span class="string">     32 </span>|</div><div class="line">+-----+----------------+--------+</div><div class="line">3 rows in set (0.00 sec)</div><div class="line"></div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; select <span class="symbol">*</span> from db15.tbl_0;</div><div class="line">+-----+-----------------------------+--------+</div><div class="line">|<span class="string"> fid </span>|<span class="string"> username                    </span>|<span class="string"> corpid </span>|</div><div class="line">+-----+-----------------------------+--------+</div><div class="line">|<span class="string">   1 </span>|<span class="string"> db15 c2dfdf地方大幅度d      </span>|<span class="string">     15 </span>|</div><div class="line">|<span class="string">   2 </span>|<span class="string"> db15 c2dfdf地方大幅度d      </span>|<span class="string">     47 </span>|</div><div class="line">|<span class="string">   3 </span>|<span class="string"> db15 c2dfdf地方大幅度d      </span>|<span class="string">    111 </span>|</div><div class="line">+-----+-----------------------------+--------+</div><div class="line">3 rows in set (0.00 sec)</div><div class="line"></div><div class="line">无法路由时，报错：</div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; show databases;</div><div class="line">ERROR 1148 (42000): No query rules matched (by ProxySQL)</div><div class="line"></div><div class="line"></div><div class="line">看到 rule 的命中数符合预期：</div><div class="line">-- proxysql admin cli</div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; select active,hits, mysql_query_rules.rule_id, schemaname, match_digest, match_pattern, replace_pattern,destination_hostgroup hostgroup,flagIn,flagOUT </div><div class="line"> FROM mysql_query_rules NATURAL JOIN stats.stats_mysql_query_rules ORDER BY mysql_query_rules.rule_id;</div><div class="line">+--------+------+---------+--------------------+--------------+-------------------------------+-----------------+-----------+--------+---------+</div><div class="line">|<span class="string"> active </span>|<span class="string"> hits </span>|<span class="string"> rule_id </span>|<span class="string"> schemaname         </span>|<span class="string"> match_digest </span>|<span class="string"> match_pattern                 </span>|<span class="string"> replace_pattern </span>|<span class="string"> hostgroup </span>|<span class="string"> flagIN </span>|<span class="string"> flagOUT </span>|</div><div class="line">+--------+------+---------+--------------------+--------------+-------------------------------+-----------------+-----------+--------+---------+</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 3    </span>|<span class="string"> 20      </span>|<span class="string"> information_schema </span>|<span class="string"> NULL         </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> NULL      </span>|<span class="string"> 0      </span>|<span class="string"> 302     </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 50      </span>|<span class="string"> NULL               </span>|<span class="string"> ^\(*select   </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> NULL      </span>|<span class="string"> 0      </span>|<span class="string"> 20      </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 60      </span>|<span class="string"> NULL               </span>|<span class="string"> ^select      </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> NULL      </span>|<span class="string"> 0      </span>|<span class="string"> 21      </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 61      </span>|<span class="string"> db0                </span>|<span class="string"> NULL         </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> 1000      </span>|<span class="string"> 20     </span>|<span class="string"> 20      </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 62      </span>|<span class="string"> db1                </span>|<span class="string"> NULL         </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> 1001      </span>|<span class="string"> 20     </span>|<span class="string"> 20      </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 63      </span>|<span class="string"> db2                </span>|<span class="string"> NULL         </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> 1002      </span>|<span class="string"> 20     </span>|<span class="string"> 20      </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 64      </span>|<span class="string"> db3                </span>|<span class="string"> NULL         </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> 1003      </span>|<span class="string"> 20     </span>|<span class="string"> 20      </span>|</div><div class="line">....</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 77      </span>|<span class="string"> db0                </span>|<span class="string"> NULL         </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> 100       </span>|<span class="string"> 21     </span>|<span class="string"> 21      </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 78      </span>|<span class="string"> db1                </span>|<span class="string"> NULL         </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> 101       </span>|<span class="string"> 21     </span>|<span class="string"> 21      </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 79      </span>|<span class="string"> db2                </span>|<span class="string"> NULL         </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> 102       </span>|<span class="string"> 21     </span>|<span class="string"> 21      </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 80      </span>|<span class="string"> db3                </span>|<span class="string"> NULL         </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> 103       </span>|<span class="string"> 21     </span>|<span class="string"> 21      </span>|</div><div class="line">...</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 92      </span>|<span class="string"> db15               </span>|<span class="string"> NULL         </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> 103       </span>|<span class="string"> 21     </span>|<span class="string"> 21      </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 1    </span>|<span class="string"> 1000    </span>|<span class="string"> NULL               </span>|<span class="string"> NULL         </span>|<span class="string"> ([\s\`])db(0</span>|<span class="string">4</span>|<span class="string">8</span>|<span class="string">12)([\.\`])  </span>|<span class="string"> NULL            </span>|<span class="string"> 100       </span>|<span class="string"> 302    </span>|<span class="string"> 302     </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 1001    </span>|<span class="string"> NULL               </span>|<span class="string"> NULL         </span>|<span class="string"> ([\s\`])db(1</span>|<span class="string">5</span>|<span class="string">9</span>|<span class="string">13)([\.\`])  </span>|<span class="string"> NULL            </span>|<span class="string"> 101       </span>|<span class="string"> 302    </span>|<span class="string"> 302     </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 1002    </span>|<span class="string"> NULL               </span>|<span class="string"> NULL         </span>|<span class="string"> ([\s\`])db(2</span>|<span class="string">6</span>|<span class="string">10</span>|<span class="string">14)([\.\`]) </span>|<span class="string"> NULL            </span>|<span class="string"> 102       </span>|<span class="string"> 302    </span>|<span class="string"> 302     </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 1    </span>|<span class="string"> 1003    </span>|<span class="string"> NULL               </span>|<span class="string"> NULL         </span>|<span class="string"> ([\s\`])db(3</span>|<span class="string">7</span>|<span class="string">11</span>|<span class="string">15)([\.\`]) </span>|<span class="string"> NULL            </span>|<span class="string"> 103       </span>|<span class="string"> 302    </span>|<span class="string"> 302     </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 0    </span>|<span class="string"> 1404    </span>|<span class="string"> NULL               </span>|<span class="string"> NULL         </span>|<span class="string"> ^SELECT DATABASE\(\)$         </span>|<span class="string"> NULL            </span>|<span class="string"> NULL      </span>|<span class="string"> 302    </span>|<span class="string"> 302     </span>|</div><div class="line">|<span class="string"> 1      </span>|<span class="string"> 1    </span>|<span class="string"> 9999    </span>|<span class="string"> NULL               </span>|<span class="string"> NULL         </span>|<span class="string"> NULL                          </span>|<span class="string"> NULL            </span>|<span class="string"> NULL      </span>|<span class="string"> 302    </span>|<span class="string"> 302     </span>|</div><div class="line">+--------+------+---------+--------------------+--------------+-------------------------------+-----------------+-----------+--------+---------+</div><div class="line">41 rows in set (0.01 sec)</div><div class="line"></div><div class="line">mysql&gt; select rule_id,schemaname,match_digest,match_pattern,destination_hostgroup,negate_match_pattern,apply,flagIN,flagOUT,error_msg from mysql_query_rules;</div></pre></td></tr></table></figure>
<p>切换数据库继续：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [(none)]&gt; use db1;</div><div class="line">Database changed</div><div class="line"></div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [db1]&gt; select <span class="symbol">*</span> from tbl_0;</div><div class="line">+-----+----------+--------+</div><div class="line">|<span class="string"> fid </span>|<span class="string"> username </span>|<span class="string"> corpid </span>|</div><div class="line">+-----+----------+--------+</div><div class="line">|<span class="string">   1 </span>|<span class="string"> db1 bb   </span>|<span class="string">      1 </span>|</div><div class="line">|<span class="string">   2 </span>|<span class="string"> db1 bb   </span>|<span class="string">     17 </span>|</div><div class="line">|<span class="string">   3 </span>|<span class="string"> db1 bb   </span>|<span class="string">     33 </span>|</div><div class="line">+-----+----------+--------+</div><div class="line">3 rows in set (0.01 sec)</div><div class="line"></div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [db1]&gt; select <span class="symbol">*</span> from `db5`.tbl_0;</div><div class="line">+-----+--------------------+--------+</div><div class="line">|<span class="string"> fid </span>|<span class="string"> username           </span>|<span class="string"> corpid </span>|</div><div class="line">+-----+--------------------+--------+</div><div class="line">|<span class="string">   1 </span>|<span class="string"> db5 ces测试 kfjd   </span>|<span class="string">      5 </span>|</div><div class="line">+-----+--------------------+--------+</div><div class="line"></div><div class="line">db6并不在当前实例里：</div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [db1]&gt; select <span class="symbol">*</span> from db6.tbl_0;</div><div class="line">ERROR 1146 (42S02): Table 'db6.tbl_0' doesn't exist</div><div class="line"></div><div class="line">现在show databases不会再报错：</div><div class="line">(ecdba<span class="meta">@10.0.100.36:6033)</span> [db1]&gt; show databases;</div><div class="line">+--------------------+</div><div class="line">|<span class="string"> Database           </span>|</div><div class="line">+--------------------+</div><div class="line">|<span class="string"> information_schema </span>|</div><div class="line">|<span class="string"> db1                </span>|</div><div class="line">|<span class="string"> db13               </span>|</div><div class="line">|<span class="string"> db5                </span>|</div><div class="line">|<span class="string"> db9                </span>|</div><div class="line">|<span class="string"> mysql              </span>|</div><div class="line">|<span class="string"> performance_schema </span>|</div><div class="line">+--------------------+</div><div class="line"></div><div class="line"></div><div class="line">看到 stats 模块的统计信息：</div><div class="line">-- proxysql admin cli</div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; select hostgroup,schemaname,username,digest,substr(digest_text,120,-120),count_star from stats_mysql_query_digest;</div><div class="line">+-----------+--------------------+----------+--------------------+--------------------------------------------+------------+</div><div class="line">|<span class="string"> hostgroup </span>|<span class="string"> schemaname         </span>|<span class="string"> username </span>|<span class="string"> digest             </span>|<span class="string"> substr(digest_text,120,-120)               </span>|<span class="string"> count_star </span>|</div><div class="line">+-----------+--------------------+----------+--------------------+--------------------------------------------+------------+</div><div class="line">|<span class="string"> 1002      </span>|<span class="string"> db2                </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x45033ED34D21EDF5 </span>|<span class="string"> select * from tbl_0                        </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 102       </span>|<span class="string"> db2                </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x02033E45904D3DF0 </span>|<span class="string"> show databases                             </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 102       </span>|<span class="string"> db2                </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x99531AEFF718C501 </span>|<span class="string"> show tables                                </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 1001      </span>|<span class="string"> db1                </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x620B328FE9D6D71A </span>|<span class="string"> SELECT DATABASE()                          </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 1001      </span>|<span class="string"> db1                </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x903E7B5A87B51352 </span>|<span class="string"> select * from db6.tbl_0                    </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 1001      </span>|<span class="string"> db1                </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x0CE250A1C0E2C539 </span>|<span class="string"> select * from `db5`.tbl_0                  </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 1001      </span>|<span class="string"> db1                </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x45033ED34D21EDF5 </span>|<span class="string"> select * from tbl_0                        </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 101       </span>|<span class="string"> db1                </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x02033E45904D3DF0 </span>|<span class="string"> show databases                             </span>|<span class="string"> 2          </span>|</div><div class="line">|<span class="string"> 102       </span>|<span class="string"> db2                </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x6F8289B2913564A0 </span>|<span class="string"> update tbl_0 set username=? where corpid=? </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 0         </span>|<span class="string"> information_schema </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x620B328FE9D6D71A </span>|<span class="string"> SELECT DATABASE()                          </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 101       </span>|<span class="string"> db1                </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x99531AEFF718C501 </span>|<span class="string"> show tables                                </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 0         </span>|<span class="string"> information_schema </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x02033E45904D3DF0 </span>|<span class="string"> show databases                             </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 1001      </span>|<span class="string"> db1                </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x7A3428659E1BFDC2 </span>|<span class="string"> select * from db5.tbl_0                    </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 103       </span>|<span class="string"> information_schema </span>|<span class="string"> ecdba    </span>|<span class="string"> 0xA951EB38FA9ED6A4 </span>|<span class="string"> select * from db15.tbl_0                   </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 100       </span>|<span class="string"> information_schema </span>|<span class="string"> ecdba    </span>|<span class="string"> 0xA132AEDEC5932600 </span>|<span class="string"> select * from db0.tbl_0                    </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 0         </span>|<span class="string"> information_schema </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x594F2C744B698066 </span>|<span class="string"> select USER()                              </span>|<span class="string"> 1          </span>|</div><div class="line">|<span class="string"> 0         </span>|<span class="string"> information_schema </span>|<span class="string"> ecdba    </span>|<span class="string"> 0x226CD90D52A2BA0B </span>|<span class="string"> select @@version_comment limit ?           </span>|<span class="string"> 1          </span>|</div><div class="line">+-----------+--------------------+----------+--------------------+--------------------------------------------+------------+</div><div class="line">17 rows in set (0.01 sec)</div></pre></td></tr></table></figure></p>
<p>达到了读写分离和分实例分库的目的。</p>
<h1 id="6-另一种规则写法"><a href="#6-另一种规则写法" class="headerlink" title="6. 另一种规则写法"></a>6. 另一种规则写法</h1><p>从上面可以看到，客户端应用在使用的时候，最好都要指定 database name ，上面是因为加了第 5 类规则才避免由于不指定db时所带来的问题，但始终要求对每个 分db 建立自己连接，或者查询之前 use dbname ，当然也可以在获取连接的时候，传递dbname过去，拿到带正确db的连接过来。</p>
<p>那么其实还有一种办法，不需要指定连接db，而是采用注释 hint 的形式，传递给proxysql，然后来自动路由。将第 4 节的规则 [2],[3] 改成下面的形式：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">-- [<span class="number">1</span>] read&amp;write split</div><div class="line">-- instance0，read &amp; write</div><div class="line">INSERT INTO mysql_query_rules (rule_id,active,match_pattern,apply,flagIN,flagOUT) VALUES (<span class="number">40</span>,<span class="number">1</span>,<span class="string">"\/\*\s*shard_corp_mod=(0|4|8|12)\s*\*."</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">20</span>);</div><div class="line">INSERT INTO mysql_query_rules (rule_id,active,match_digest,destination_hostgroup,apply,flagIN,flagOUT) VALUES (<span class="number">50</span>,<span class="number">1</span>,'^select',<span class="number">1000</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>);</div><div class="line">INSERT INTO mysql_query_rules (active,match_digest,negate_match_pattern,destination_hostgroup,apply,flagIN,flagOUT) VALUES (<span class="number">1</span>,<span class="string">"^select"</span>,<span class="number">1</span>,<span class="number">100</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>);</div><div class="line"></div><div class="line">INSERT INTO mysql_query_rules (rule_id,active,match_pattern,apply,flagIN,flagOUT) VALUES (<span class="number">60</span>,<span class="number">1</span>,<span class="string">"\/\*\s*shard_corp_mod=(1|5|9|13)\s*\*."</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">21</span>);</div><div class="line">INSERT INTO mysql_query_rules (active,match_digest,destination_hostgroup,apply,flagIN,flagOUT) VALUES (<span class="number">1</span>,'^select',<span class="number">1001</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>);</div><div class="line">INSERT INTO mysql_query_rules (active,match_digest,negate_match_pattern,destination_hostgroup,apply,flagIN,flagOUT) VALUES (<span class="number">1</span>,<span class="string">"^select"</span>,<span class="number">1</span>,<span class="number">101</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="number">21</span>);</div><div class="line"></div><div class="line">INSERT INTO mysql_query_rules (rule_id,active,match_pattern,apply,flagIN,flagOUT) VALUES (<span class="number">70</span>,<span class="number">1</span>,<span class="string">"\/\*\s*shard_corp_mod=(2|6|10|14)\s*\*."</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">22</span>);</div><div class="line">INSERT INTO mysql_query_rules (active,match_digest,destination_hostgroup,apply,flagIN,flagOUT) VALUES (<span class="number">1</span>,'^select',<span class="number">1002</span>,<span class="number">1</span>,<span class="number">22</span>,<span class="number">22</span>);</div><div class="line">INSERT INTO mysql_query_rules (active,match_digest,negate_match_pattern,destination_hostgroup,apply,flagIN,flagOUT) VALUES (<span class="number">1</span>,<span class="string">"^select"</span>,<span class="number">1</span>,<span class="number">102</span>,<span class="number">1</span>,<span class="number">22</span>,<span class="number">22</span>);</div><div class="line"></div><div class="line">INSERT INTO mysql_query_rules (rule_id,active,match_pattern,apply,flagIN,flagOUT) VALUES (<span class="number">80</span>,<span class="number">1</span>,<span class="string">"\/\*\s*shard_corp_mod=(3|7|11|15)\s*\*."</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">23</span>);</div><div class="line">INSERT INTO mysql_query_rules (active,match_digest,destination_hostgroup,apply,flagIN,flagOUT) VALUES (<span class="number">1</span>,'^select',<span class="number">1003</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">23</span>);</div><div class="line">INSERT INTO mysql_query_rules (active,match_digest,negate_match_pattern,destination_hostgroup,apply,flagIN,flagOUT) VALUES (<span class="number">1</span>,<span class="string">"^select"</span>,<span class="number">1</span>,<span class="number">103</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">23</span>);</div><div class="line"></div><div class="line">-- [<span class="number">2</span>] no <span class="comment">/* shard_corp_mod=? */</span> given</div><div class="line">insert into mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply,flagIN) values(<span class="number">1000</span>,<span class="number">1</span>,'([\s\`])db(<span class="number">0</span>|<span class="number">4</span>|<span class="number">8</span>|<span class="number">12</span>)([\.\`])',<span class="number">100</span>,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">insert into mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply,flagIN) values(<span class="number">1001</span>,<span class="number">1</span>,'([\s\`])db(<span class="number">1</span>|<span class="number">5</span>|<span class="number">9</span>|<span class="number">13</span>)([\.\`])',<span class="number">101</span>,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">insert into mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply,flagIN) values(<span class="number">1002</span>,<span class="number">1</span>,'([\s\`])db(<span class="number">2</span>|<span class="number">6</span>|<span class="number">10</span>|<span class="number">14</span>)([\.\`])',<span class="number">102</span>,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">insert into mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply,flagIN) values(<span class="number">1003</span>,<span class="number">1</span>,'([\s\`])db(<span class="number">3</span>|<span class="number">7</span>|<span class="number">11</span>|<span class="number">15</span>)([\.\`])',<span class="number">103</span>,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line"></div><div class="line">-- [<span class="number">3</span>] wrong usage</div><div class="line">insert into mysql_query_rules(rule_id,active,schemaname,match_digest,apply,flagIN,error_msg,comment) </div><div class="line">  values(<span class="number">1404</span>,<span class="number">1</span>,'information_schema','^SELECT DATABASE\(\)$',<span class="number">1</span>,<span class="number">0</span>,'You should specify schema name first', 'use db0 Take long when no schema given for connection');</div><div class="line"></div><div class="line">-- [<span class="number">7</span>] <span class="section">default</span> route</div><div class="line">insert into mysql_query_rules(rule_id,active,apply, flagIN,error_msg,comment) values(<span class="number">9999</span>,<span class="number">1</span>,<span class="number">1</span>, <span class="number">0</span>,'No query rules matched (by ProxySQL)', <span class="string">"Don't define the default hostgroup 0 for ME"</span>);</div><div class="line"></div><div class="line">-- [<span class="number">8</span>]</div><div class="line">LOAD MYSQL QUERY RULES TO RUN;</div><div class="line">SAVE MYSQL QUERY RULES TO DISK;</div></pre></td></tr></table></figure></p>
<p>注意这里[2][3]用的是 <code>match_pattern</code>，而上节用的是<code>match_digest</code>，因为proxysql在处理fingerprint的时候，会去掉注释。如果在命令行测试，要加 <code>-c</code> 避免 HINT 被过滤掉。</p>
<p>使用时Hint放sql最后面，每个sql都要带mod或者指定实例：<code>select * from db5.tbl_0 /* shard_corp_mod=5 */</code>，真正实施起来，应用端的复杂度以及proxysql的性能，还是有待考虑的。</p>
<p>关于这些路由规则的写法对ProxySQL性能的影响，欢迎继续阅读这边文章 <a href="http://seanlook.com/2017/04/20/mysql-proxysql-performance-test/">ProxySQL之性能测试对比</a></p>
<p>参考：</p>
<ul>
<li><a href="https://severalnines.com/blog/how-proxysql-adds-failover-and-query-control-your-mysql-replication-setup" target="_blank" rel="external">https://severalnines.com/blog/how-proxysql-adds-failover-and-query-control-your-mysql-replication-setup</a></li>
<li><a href="https://www.percona.com/blog/2016/08/30/mysql-sharding-with-proxysql/" target="_blank" rel="external">https://www.percona.com/blog/2016/08/30/mysql-sharding-with-proxysql/</a></li>
</ul>
<hr>
<p>原文连接地址：<a href="http://seanlook.com/2017/04/17/mysql-proxysql-route-rw_split/">http://seanlook.com/2017/04/17/mysql-proxysql-route-rw_split/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ProxySQL之安装及配置详解]]></title>
      <url>http://seanlook.com/2017/04/10/mysql-proxysql-install-config/</url>
      <content type="html"><![CDATA[<p>ProxySQL是一个高性能的MySQL中间件，拥有强大的规则引擎。具有以下特性：</p>
<ul>
<li>连接池，而且是 <a href="http://seanlook.com/2017/04/17/mysql-proxysql-multiplexing/">multiplexing</a></li>
<li>主机和用户的最大连接数限制</li>
<li>自动下线后端DB<ul>
<li>延迟超过阀值</li>
<li>ping 延迟超过阀值</li>
<li>网络不通或宕机</li>
</ul>
</li>
<li>强大的规则路由引擎<ul>
<li>实现读写分离</li>
<li>查询重写</li>
<li>sql流量镜像</li>
</ul>
</li>
<li>支持prepared statement</li>
<li>支持Query Cache</li>
<li>支持负载均衡，与gelera结合自动failover</li>
</ul>
<p>集这么多优秀特性于一身，那么缺点呢就是项目不够成熟，好在作者一直在及时更新，并且受到 Percona 官方的支持。</p>
<h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h1><p>从 <a href="https://github.com/sysown/proxysql/releases" target="_blank" rel="external">https://github.com/sysown/proxysql/releases</a> 下载相应的版本。这里我选择 <code>proxysql-1.3.5-1-centos67.x86_64.rpm</code>，也是当前最新稳定版。 </p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">yum</span> <span class="selector-tag">localinstall</span> <span class="selector-tag">proxysql-1</span><span class="selector-class">.3</span><span class="selector-class">.5-1-centos67</span><span class="selector-class">.x86_64</span><span class="selector-class">.rpm</span> <span class="selector-tag">-y</span></div></pre></td></tr></table></figure>
<p>可以马上启动了：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/etc/</span>init.d/proxysql start</div><div class="line">Starting <span class="string">ProxySQL:</span> DONE!</div></pre></td></tr></table></figure></p>
<p>proxysql有个配置文件 <code>/etc/proxysql.cnf</code>，只在第一次启动的时候有用，后续所有的配置修改都是对SQLite数据库操作，并且不会更新到proxysql.cnf文件中。ProxySQL绝大部分配置都可以在线修改，配置存储在  <code>/var/lib/proxysql/proxysql.db</code> 中，后面会介绍它的在线配置的设计方式。</p>
<p>proxysql 启动后会像 mysqld 一样，马上fork一个子进程，真正处理请求，而父进程负责监控子进程运行状况，如果crash了就拉起来。</p>
<h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">安装高版本 gcc<span class="number">-4.8</span></div><div class="line"><span class="meta"># cd /etc/yum.repos.d</span></div><div class="line"><span class="meta"># wget https://copr.fedoraproject.org/coprs/rhscl/devtoolset-3/repo/epel-6/rhscl-devtoolset-3-epel-6.repo  \</span></div><div class="line">  -O /etc/yum.repos.d/rhscl-devtoolset<span class="number">-3</span>-epel<span class="number">-6.</span>repo</div><div class="line"><span class="meta"># yum install -y  scl-utils policycoreutils-python</span></div><div class="line"><span class="meta"># yum --disablerepo='*' --enablerepo='rhscl-devtoolset-3' install devtoolset-3-gcc devtoolset-3-gcc-c++ devtoolset-3-binutils</span></div><div class="line"><span class="meta"># yum --enablerepo=testing-devtools-2-centos-6 install devtoolset-2-gcc devtoolset-2-gcc-c++ devtoolset-2-binutils</span></div><div class="line"></div><div class="line">上一步会把 GCC 安装到以下目录 /opt/rh/devtoolset<span class="number">-3</span>/root/usr/bin</div><div class="line"></div><div class="line">接下来需要修改系统的配置，使默认的 gcc 和 g++ 命令使用的是新安装的版本。启用SCL环境中新版本GCC：</div><div class="line"><span class="meta"># scl enable devtoolset-3 bash</span></div><div class="line"> </div><div class="line">现在查看 g++ 的版本号：</div><div class="line"><span class="meta"># gcc --version</span></div><div class="line"></div><div class="line">编译安装proxysql</div><div class="line"><span class="meta"># cd proxysql-master</span></div><div class="line"><span class="meta"># make</span></div><div class="line"><span class="meta"># make install</span></div></pre></td></tr></table></figure>
<h1 id="2-内置库表介绍"><a href="#2-内置库表介绍" class="headerlink" title="2. 内置库表介绍"></a>2. 内置库表介绍</h1><h3 id="2-1-内置“库”"><a href="#2-1-内置“库”" class="headerlink" title="2.1 内置“库”"></a>2.1 内置“库”</h3><p>首先登陆到 proxysql 之后才能进一步配置：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ export MYSQL_PS1=<span class="string">"(\u@\h:\p) [\d]&gt; "</span></div><div class="line">$ mysql -uadmin -padmin -h127.0.0.1 -P6032</div><div class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</div><div class="line">Your MySQL connection id is 2</div><div class="line">Server version: 5.6.30 (ProxySQL Admin Module)</div><div class="line"></div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; show databases;</div><div class="line">+-----+---------+-------------------------------+</div><div class="line">|<span class="string"> seq </span>|<span class="string"> name    </span>|<span class="string"> file                          </span>|</div><div class="line">+-----+---------+-------------------------------+</div><div class="line">|<span class="string"> 0   </span>|<span class="string"> main    </span>|<span class="string">                               </span>|</div><div class="line">|<span class="string"> 2   </span>|<span class="string"> disk    </span>|<span class="string"> /var/lib/proxysql/proxysql.db </span>|</div><div class="line">|<span class="string"> 3   </span>|<span class="string"> stats   </span>|<span class="string">                               </span>|</div><div class="line">|<span class="string"> 4   </span>|<span class="string"> monitor </span>|<span class="string">                               </span>|</div><div class="line">+-----+---------+-------------------------------+</div></pre></td></tr></table></figure></p>
<p>默认管理端口是6032，客户端服务端口是6033。默认的用户名密码都是 <code>admin</code>。 </p>
<ul>
<li><code>main</code> 是默认的”数据库”名，表里存放后端db实例、用户验证、路由规则等信息。表名以 <code>runtime_</code>开头的表示proxysql当前运行的配置内容，不能通过dml语句修改，只能修改对应的不以 runtime_ 开头的（在内存）里的表，然后 <code>LOAD</code> 使其生效， <code>SAVE</code> 使其存到硬盘以供下次重启加载。</li>
<li><code>disk</code> 是持久化到硬盘的配置，sqlite数据文件。</li>
<li><code>stats</code> 是proxysql运行抓取的统计信息，包括到后端各命令的执行次数、流量、processlist、查询种类汇总/执行时间，等等。</li>
<li><code>monitor</code> 库存储 monitor 模块收集的信息，主要是对后端db的健康/延迟检查。</li>
</ul>
<p><code>global_variables</code> 有80多个变量可以设置，其中就包括监听的端口、管理账号、禁用monitor等，详细可参考 <a href="https://github.com/sysown/proxysql/wiki/Global-variables" target="_blank" rel="external">https://github.com/sysown/proxysql/wiki/Global-variables</a> 。</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; show tables;</div><div class="line">+--------------------------------------+</div><div class="line">|<span class="string"> tables                               </span>|</div><div class="line">+--------------------------------------+</div><div class="line">|<span class="string"> global_variables                     </span>|</div><div class="line">|<span class="string"> mysql_collations                     </span>|</div><div class="line">|<span class="string"> mysql_query_rules                    </span>|</div><div class="line">|<span class="string"> mysql_replication_hostgroups         </span>|</div><div class="line">|<span class="string"> mysql_servers                        </span>|</div><div class="line">|<span class="string"> mysql_users                          </span>|</div><div class="line">|<span class="string"> runtime_global_variables             </span>|</div><div class="line">|<span class="string"> runtime_mysql_query_rules            </span>|</div><div class="line">|<span class="string"> runtime_mysql_replication_hostgroups </span>|</div><div class="line">|<span class="string"> runtime_mysql_servers                </span>|</div><div class="line">|<span class="string"> runtime_mysql_users                  </span>|</div><div class="line">|<span class="string"> runtime_scheduler                    </span>|</div><div class="line">|<span class="string"> scheduler                            </span>|</div><div class="line">+--------------------------------------+</div><div class="line">13 rows in set (0.00 sec)</div><div class="line"></div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; show tables from stats;</div><div class="line">+--------------------------------+</div><div class="line">|<span class="string"> tables                         </span>|</div><div class="line">+--------------------------------+</div><div class="line">|<span class="string"> global_variables               </span>|</div><div class="line">|<span class="string"> stats_mysql_commands_counters  </span>|</div><div class="line">|<span class="string"> stats_mysql_connection_pool    </span>|</div><div class="line">|<span class="string"> stats_mysql_global             </span>|</div><div class="line">|<span class="string"> stats_mysql_processlist        </span>|</div><div class="line">|<span class="string"> stats_mysql_query_digest       </span>|</div><div class="line">|<span class="string"> stats_mysql_query_digest_reset </span>|</div><div class="line">|<span class="string"> stats_mysql_query_rules        </span>|</div><div class="line">+--------------------------------+</div><div class="line">8 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
<h3 id="2-2-表-mysql-servers"><a href="#2-2-表-mysql-servers" class="headerlink" title="2.2 表 mysql_servers"></a>2.2 表 <code>mysql_servers</code></h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; show create table mysql_servers\G</div><div class="line"><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span> 1. row <span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span></div><div class="line">       table: mysql_servers</div><div class="line">Create Table: CREATE TABLE mysql_servers (</div><div class="line">    hostgroup_id INT NOT NULL DEFAULT 0,</div><div class="line">    hostname VARCHAR NOT NULL,</div><div class="line">    port INT NOT NULL DEFAULT 3306,</div><div class="line">    status VARCHAR CHECK (UPPER(status) IN ('ONLINE','SHUNNED','OFFLINE_SOFT', 'OFFLINE_HARD')) NOT NULL DEFAULT 'ONLINE',</div><div class="line">    weight INT CHECK (weight &gt;= 0) NOT NULL DEFAULT 1,</div><div class="line">    compression INT CHECK (compression &gt;=0 AND compression <span class="variable">&lt;= 102400) NOT NULL DEFAULT 0,</span></div><div class="line">    max_connections INT CHECK (max_connections &gt;=0) NOT NULL DEFAULT 1000,</div><div class="line">    max_replication_lag INT CHECK (max_replication_lag &gt;= 0 AND max_replication_lag <span class="variable">&lt;= 126144000) NOT NULL DEFAULT 0,</span></div><div class="line">    use_ssl INT CHECK (use_ssl IN(0,1)) NOT NULL DEFAULT 0,</div><div class="line">    max_latency_ms INT UNSIGNED CHECK (max_latency_ms&gt;=0) NOT NULL DEFAULT 0,</div><div class="line">    comment VARCHAR NOT NULL DEFAULT '',</div><div class="line">    PRIMARY KEY (hostgroup_id, hostname, port) )</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; select <span class="symbol">*</span> from mysql_servers;</div><div class="line">+--------------+--------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------------+</div><div class="line">|<span class="string"> hostgroup_id </span>|<span class="string"> hostname     </span>|<span class="string"> port </span>|<span class="string"> status </span>|<span class="string"> weight </span>|<span class="string"> compression </span>|<span class="string"> max_connections </span>|<span class="string"> max_replication_lag </span>|<span class="string"> use_ssl </span>|<span class="string"> max_latency_ms </span>|<span class="string"> comment       </span>|</div><div class="line">+--------------+--------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------------+</div><div class="line">|<span class="string"> 100          </span>|<span class="string"> 10.0.100.100 </span>|<span class="string"> 3307 </span>|<span class="string"> ONLINE </span>|<span class="string"> 1      </span>|<span class="string"> 0           </span>|<span class="string"> 1000            </span>|<span class="string"> 0                   </span>|<span class="string"> 0       </span>|<span class="string"> 0              </span>|<span class="string"> db0,ReadWrite </span>|</div><div class="line">|<span class="string"> 1000         </span>|<span class="string"> 10.0.100.100 </span>|<span class="string"> 3307 </span>|<span class="string"> ONLINE </span>|<span class="string"> 1      </span>|<span class="string"> 0           </span>|<span class="string"> 1000            </span>|<span class="string"> 0                   </span>|<span class="string"> 0       </span>|<span class="string"> 0              </span>|<span class="string"> db0,ReadWrite </span>|</div><div class="line">|<span class="string"> 1000         </span>|<span class="string"> 192.168.10.4 </span>|<span class="string"> 3316 </span>|<span class="string"> ONLINE </span>|<span class="string"> 4      </span>|<span class="string"> 0           </span>|<span class="string"> 1000            </span>|<span class="string"> 0                   </span>|<span class="string"> 0       </span>|<span class="string"> 0              </span>|<span class="string"> db0,ReadOnly  </span>|</div><div class="line">|<span class="string"> 101          </span>|<span class="string"> 10.0.100.101 </span>|<span class="string"> 3307 </span>|<span class="string"> ONLINE </span>|<span class="string"> 1      </span>|<span class="string"> 0           </span>|<span class="string"> 1000            </span>|<span class="string"> 0                   </span>|<span class="string"> 0       </span>|<span class="string"> 0              </span>|<span class="string"> db1,ReadWrite </span>|</div><div class="line">|<span class="string"> 1001         </span>|<span class="string"> 192.168.10.4 </span>|<span class="string"> 3326 </span>|<span class="string"> ONLINE </span>|<span class="string"> 1      </span>|<span class="string"> 0           </span>|<span class="string"> 1000            </span>|<span class="string"> 0                   </span>|<span class="string"> 0       </span>|<span class="string"> 0              </span>|<span class="string"> db1,ReadOnly  </span>|</div><div class="line">+--------------+--------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------------+</div></pre></td></tr></table></figure>
<ul>
<li><code>hostgroup_id</code>: ProxySQL通过 hostgroup (下称HG) 的形式组织后端db实例。一个 HG 代表同属于一个角色<ul>
<li>该表的主键是 <code>(hostgroup_id, hostname, port)</code>，可以看到一个 hostname:port 可以在多个hostgroup里面，如上面的 10.0.100.100:3307，这样可以避免 HG 1000 的从库全都不可用时，依然可以把读请求发到主库上。</li>
<li>一个 HG 可以有多个实例，即多个从库，可以通过 <code>weight</code> 分配权重</li>
<li>hostgroup_id 0 是一个特殊的HG，路由查询的时候，没有匹配到规则则默认选择 HG 0</li>
</ul>
</li>
<li><code>status</code>: <ul>
<li><code>ONLINE</code>: 当前后端实例状态正常</li>
<li><code>SHUNNED</code>: 临时被剔除，可能因为后端 too many connections error，或者超过了可容忍延迟阀值 <code>max_replication_lag</code></li>
<li><code>OFFLINE_SOFT</code>: “软离线”状态，不再接受新的连接，但已建立的连接会等待活跃事务完成。</li>
<li><code>OFFLINE_HARD</code>: “硬离线”状态，不再接受新的连接，已建立的连接或被强制中断。当后端实例宕机或网络不可达，会出现。</li>
</ul>
</li>
<li><code>max_connections</code>: 允许连接到该后端实例的最大连接数。不要大于MySQL设置的 max_connections<br>如果后端实例 hostname:port 在多个 hostgroup 里，以较大者为准，而不是各自独立允许的最大连接数。</li>
<li><code>max_replication_lag</code>: 允许的最大延迟，主库不受这个影响，默认0。如果 &gt; 0， monitor 模块监控主从延迟大于阀值时，会临时把它变为 SHUNNED 。</li>
<li><code>max_latency_ms</code>: mysql_ping 响应时间，大于这个阀值会把它从连接池剔除（即使是ONLINE）</li>
<li><code>comment</code>: 备注，不建议留空。这有什么好讲呢，但是你可以通过它的内容如json格式的数据，配合自己写的check脚本，完成一些自动化的工作。</li>
</ul>
<p><code>compression</code> 和 <code>use_ssl</code> 顾名思义。</p>
<h3 id="2-3-表-mysql-users"><a href="#2-3-表-mysql-users" class="headerlink" title="2.3 表 mysql_users"></a>2.3 表 <code>mysql_users</code></h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; show create table mysql_users\G</div><div class="line"><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span> 1. row <span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span><span class="symbol">*</span></div><div class="line">       table: mysql_users</div><div class="line">Create Table: CREATE TABLE mysql_users (</div><div class="line">    username VARCHAR NOT NULL,</div><div class="line">    password VARCHAR,</div><div class="line">    active INT CHECK (active IN (0,1)) NOT NULL DEFAULT 1,</div><div class="line">    use_ssl INT CHECK (use_ssl IN (0,1)) NOT NULL DEFAULT 0,</div><div class="line">    default_hostgroup INT NOT NULL DEFAULT 0,</div><div class="line">    default_schema VARCHAR,</div><div class="line">    schema_locked INT CHECK (schema_locked IN (0,1)) NOT NULL DEFAULT 0,</div><div class="line">    transaction_persistent INT CHECK (transaction_persistent IN (0,1)) NOT NULL DEFAULT 0,</div><div class="line">    fast_forward INT CHECK (fast_forward IN (0,1)) NOT NULL DEFAULT 0,</div><div class="line">    backend INT CHECK (backend IN (0,1)) NOT NULL DEFAULT 1,</div><div class="line">    frontend INT CHECK (frontend IN (0,1)) NOT NULL DEFAULT 1,</div><div class="line">    max_connections INT CHECK (max_connections &gt;=0) NOT NULL DEFAULT 10000,</div><div class="line">    PRIMARY KEY (username, backend),</div><div class="line">    UNIQUE (username, frontend))</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; select <span class="symbol">*</span> from mysql_users;</div><div class="line">+----------+-----------+--------+---------+-------------------+----------------+---------------+------------------------+--------------+---------+----------+-----------------+</div><div class="line">|<span class="string"> username </span>|<span class="string"> password  </span>|<span class="string"> active </span>|<span class="string"> use_ssl </span>|<span class="string"> default_hostgroup </span>|<span class="string"> default_schema </span>|<span class="string"> schema_locked </span>|<span class="string"> transaction_persistent </span>|<span class="string"> fast_forward </span>|<span class="string"> backend </span>|<span class="string"> frontend </span>|<span class="string"> max_connections </span>|</div><div class="line">+----------+-----------+--------+---------+-------------------+----------------+---------------+------------------------+--------------+---------+----------+-----------------+</div><div class="line">|<span class="string"> user0    </span>|<span class="string"> password0 </span>|<span class="string"> 1      </span>|<span class="string"> 0       </span>|<span class="string"> 0                 </span>|<span class="string"> NULL           </span>|<span class="string"> 0             </span>|<span class="string"> 1                      </span>|<span class="string"> 0            </span>|<span class="string"> 1       </span>|<span class="string"> 1        </span>|<span class="string"> 10000           </span>|</div><div class="line">|<span class="string"> read1    </span>|<span class="string"> password1 </span>|<span class="string"> 1      </span>|<span class="string"> 0       </span>|<span class="string"> 0                 </span>|<span class="string"> NULL           </span>|<span class="string"> 0             </span>|<span class="string"> 1                      </span>|<span class="string"> 0            </span>|<span class="string"> 1       </span>|<span class="string"> 1        </span>|<span class="string"> 10000           </span>|</div><div class="line">+----------+-----------+--------+---------+-------------------+----------------+---------------+------------------------+--------------+---------+----------+-----------------+</div><div class="line">2 rows in set (0.00 sec)</div><div class="line"></div><div class="line">(admin<span class="meta">@127.0.0.1:6032)</span> [(none)]&gt; select username,password,transaction_persistent,active,backend,frontend,max_connections from runtime_mysql_users;</div><div class="line">+----------+------------------------------+------------------------+--------+---------+----------+-----------------+</div><div class="line">|<span class="string"> username </span>|<span class="string"> password                     </span>|<span class="string"> transaction_persistent </span>|<span class="string"> active </span>|<span class="string"> backend </span>|<span class="string"> frontend </span>|<span class="string"> max_connections </span>|</div><div class="line">+----------+------------------------------+------------------------+--------+---------+----------+-----------------+</div><div class="line">|<span class="string"> user0    </span>|<span class="string"> *FAB0955B2CE7AE2DAFEE46C3... </span>|<span class="string"> 1                      </span>|<span class="string"> 1      </span>|<span class="string"> 0       </span>|<span class="string"> 1        </span>|<span class="string"> 10000           </span>|</div><div class="line">|<span class="string"> read1    </span>|<span class="string"> *88A287979B45658C6CE41FB9... </span>|<span class="string"> 1                      </span>|<span class="string"> 1      </span>|<span class="string"> 0       </span>|<span class="string"> 1        </span>|<span class="string"> 10000           </span>|</div><div class="line">|<span class="string"> user0    </span>|<span class="string"> *FAB0955B2CE7AE2DAFEE46C3... </span>|<span class="string"> 1                      </span>|<span class="string"> 1      </span>|<span class="string"> 1       </span>|<span class="string"> 0        </span>|<span class="string"> 10000           </span>|</div><div class="line">|<span class="string"> read1    </span>|<span class="string"> *88A287979B45658C6CE41FB9... </span>|<span class="string"> 1                      </span>|<span class="string"> 1      </span>|<span class="string"> 1       </span>|<span class="string"> 0        </span>|<span class="string"> 10000           </span>|</div><div class="line">+----------+------------------------------+------------------------+--------+---------+----------+-----------------+</div><div class="line">4 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
<ul>
<li><code>username</code>, <code>password</code>: 连接后端db的用户密码。<br>这个密码你可以插入明文，也可以插入hash加密后的密文，proxysql会检查你插入的时候密码是否以  <code>*</code> 开头来判断，而且密文要在其它地方使用 <code>PASSWORD()</code>生成。<br>但到 <em>runtime_mysql_users</em> 里，都统一变成了密文，所以可以明文插入，再 <code>SAVE MYSQL USERS TO MEM</code>，此时看到的也是HASH密文。</li>
<li><code>active</code>: 是否生效该用户。</li>
<li><code>default_hostgroup</code>: 这个用户的请求没有匹配到规则时，默认发到这个 hostgroup，默认0</li>
<li><code>default_schema</code>: 这个用户连接时没有指定 database name 时，默认使用的schema<br>注意表面上看默认为NULL，但实际上受到变量 <code>mysql-default_schema</code> 的影响，默认为 information_schema。关于这个参考我所提的 issue <a href="https://github.com/sysown/proxysql/issues/988#issuecomment-293876759" target="_blank" rel="external">#988</a></li>
<li><code>transaction_persistent</code>: 如果设置为1，连接上ProxySQL的会话后，如果在一个hostgroup上开启了事务，那么后续的sql都继续维持在这个hostgroup上，不伦是否会匹配上其它路由规则，直到事务结束。<br>虽然默认是0，但我建议还是设成1，虽然一般来说由于前段应用的空值，为0出问题的情况几乎很小。作者也在考虑默认设成 1，<a href="https://github.com/sysown/proxysql/issues/793" target="_blank" rel="external">refer this issue #793</a></li>
<li><code>frontend</code>, <code>backend</code>: 目前版本这两个都需要使用默认的1，将来有可能会把 <em> Client -&gt; ProxySQL </em> (frontend) 与 <em> ProxySQL -&gt; BackendDB </em> (backend)的认证分开。<br>从 <em>runtime_mysql_users</em> 表内容看到，记录数比 <em>mysql_users</em> 多了一倍，就是把前端认证与后端认证独立出来的结果。</li>
<li><code>fast_forward</code>: 忽略查询重写/缓存层，直接把这个用户的请求透传到后端DB。相当于只用它的连接池功能，一般不用，路由规则 <code>.*</code> 就行了。</li>
</ul>
<h3 id="2-4-表-mysql-replication-hostgroups"><a href="#2-4-表-mysql-replication-hostgroups" class="headerlink" title="2.4 表 mysql_replication_hostgroups"></a>2.4 表 <code>mysql_replication_hostgroups</code></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mysql_replication_hostgroups (</div><div class="line">    writer_hostgroup <span class="built_in">INT</span> <span class="keyword">CHECK</span> (writer_hostgroup&gt;=<span class="number">0</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</div><div class="line">    reader_hostgroup <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">CHECK</span> (reader_hostgroup&lt;&gt;writer_hostgroup <span class="keyword">AND</span> reader_hostgroup&gt;<span class="number">0</span>),</div><div class="line">    <span class="keyword">comment</span> <span class="built_in">VARCHAR</span>,</div><div class="line">    <span class="keyword">UNIQUE</span> (reader_hostgroup))</div></pre></td></tr></table></figure>
<p>定义 hostgroup 的主从关系。ProxySQL monitor 模块会监控 HG 后端所有servers 的 <code>read_only</code> 变量，如果发现从库的 read_only 变为0、主库变为1，则认为角色互换了，自动改写 mysql_servers 表里面 hostgroup 关系，达到自动 Failover 效果。</p>
<p>目前这个表我是留空的，它与Gelera或PXC结合起来用比较合适。</p>
<h3 id="2-5-表-mysql-query-rules"><a href="#2-5-表-mysql-query-rules" class="headerlink" title="2.5 表 mysql_query_rules"></a>2.5 表 <code>mysql_query_rules</code></h3><p>ProxySQL非常核心一个表，定义查询路由规则，参考 <a href="https://github.com/sysown/proxysql/wiki/MySQL-Query-Rules" target="_blank" rel="external">https://github.com/sysown/proxysql/wiki/MySQL-Query-Rules</a> ：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">(admin<span class="symbol">@127</span><span class="number">.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6032</span>) [(none)]&gt; show create table mysql_query_rules\G</div><div class="line">*************************** <span class="number">1.</span> row ***************************</div><div class="line">       table: mysql_query_rules</div><div class="line">Create Table: CREATE TABLE mysql_query_rules (</div><div class="line">    rule_id INTEGER PRIMARY KEY AUTOINCREMENT <span class="literal">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    active <span class="built_in">INT</span> CHECK (active <span class="keyword">IN</span> (<span class="number">0</span>,<span class="number">1</span>)) <span class="literal">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</div><div class="line">    username VARCHAR,</div><div class="line">    schemaname VARCHAR,</div><div class="line">    flagIN <span class="built_in">INT</span> <span class="literal">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</div><div class="line">    client_addr VARCHAR,</div><div class="line">    proxy_addr VARCHAR,</div><div class="line">    proxy_port <span class="built_in">INT</span>,</div><div class="line">    digest VARCHAR,</div><div class="line">    match_digest VARCHAR,</div><div class="line">    match_pattern VARCHAR,</div><div class="line">    negate_match_pattern <span class="built_in">INT</span> CHECK (negate_match_pattern <span class="keyword">IN</span> (<span class="number">0</span>,<span class="number">1</span>)) <span class="literal">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</div><div class="line">    flagOUT <span class="built_in">INT</span>,</div><div class="line">    replace_pattern VARCHAR,</div><div class="line">    destination_hostgroup <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">    cache_ttl <span class="built_in">INT</span> CHECK(cache_ttl &gt; <span class="number">0</span>),</div><div class="line">    reconnect <span class="built_in">INT</span> CHECK (reconnect <span class="keyword">IN</span> (<span class="number">0</span>,<span class="number">1</span>)) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">    timeout <span class="built_in">INT</span> UNSIGNED,</div><div class="line">    retries <span class="built_in">INT</span> CHECK (retries&gt;=<span class="number">0</span> <span class="literal">AND</span> retries &lt;=<span class="number">1000</span>),</div><div class="line">    delay <span class="built_in">INT</span> UNSIGNED,</div><div class="line">    mirror_flagOUT <span class="built_in">INT</span> UNSIGNED,</div><div class="line">    mirror_hostgroup <span class="built_in">INT</span> UNSIGNED,</div><div class="line">    error_msg VARCHAR,</div><div class="line">    <span class="built_in">log</span> <span class="built_in">INT</span> CHECK (<span class="built_in">log</span> <span class="keyword">IN</span> (<span class="number">0</span>,<span class="number">1</span>)),</div><div class="line">    apply <span class="built_in">INT</span> CHECK(apply <span class="keyword">IN</span> (<span class="number">0</span>,<span class="number">1</span>)) <span class="literal">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</div><div class="line">    comment VARCHAR)</div><div class="line"><span class="number">1</span> row <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure></p>
<ul>
<li><code>rule_id</code>: 表主键，自增。规则处理是以 rule_id 的顺序进行。</li>
<li><code>active</code>: 只有 active=1 的规则才会参与匹配。</li>
<li><code>username</code>: 如果非 NULL，只有连接用户是 username 的值才会匹配</li>
<li><code>schemaname</code>: 如果非 NULL，只有查询连接使用的db是 schemaname 的值才会匹配。<br>注意如果是 NULL，不代表连接没有使用schema，而是不伦任何schema都进一步匹配。</li>
<li><code>flagIN</code>, <code>flagOUT</code>, <code>apply</code>: 用来定义路由链 chains of rules<ul>
<li>首先会检查 flagIN=0 的规则，以rule_id的顺序；如果都没匹配上，则走这个用户的 default_hostgroup </li>
<li>当匹配一条规则后，会检查 <code>flagOUT</code><ul>
<li>如果不为NULL，并且 flagIN != flagOUT ，则进入以flagIN为上一个flagOUT值的新规则链</li>
<li>如果不为NULL，并且 flagIN = flagOUT，则应用这条规则</li>
<li>如果为NULL，或者 apply=1，则结束，应用这条规则</li>
<li>如果最终没有匹配到，则找到这个用户的 default_hostgroup<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-route-rule-flag.png" alt="proxysql route chain"></li>
</ul>
</li>
</ul>
</li>
<li><code>client_addr</code>: 匹配客户端来源IP</li>
<li><code>proxy_addr</code>, <code>proxy_port</code>: 匹配本地proxysql的IP、端口。我目前没有想到它的应用场景，可能是把proxysql监听在多个接口上，分发到不同的业务？</li>
<li><code>digest</code>: 精确的匹配一类查询。</li>
<li><code>match_digest</code>: 正则匹配一类查询。query digest 是指对查询去掉具体值后进行“模糊化”后的查询，类似 <em>pt-fingerprint</em> / <em>pt-query-digest</em> 的效果。</li>
<li><code>match_pattern</code>: 正则匹配查询。<br>以上都是匹配查询的规则，目前1.3.5使用的正则引擎只有 RE2 ，1.4版本可以通过变量 <a href="https://github.com/sysown/proxysql/wiki/Global-variables#mysql-query_processor_regex" target="_blank" rel="external"><code>mysql-query_processor_regex</code></a> 设置 RE2 或者 PCRE，且1.4开始默认是PCRE。<br>ProxySQL的作者 renecannao 自己推荐用 match_digest 。关于每条查询都会计算digest对性能的影响，我提出疑问后，作者在这篇文章<a href="https://www.percona.com/blog/2017/04/10/proxysql-rules-do-i-have-too-many/#comment-10967989" target="_blank" rel="external">ProxySQL Rules: Do I Have Too Many?</a>的评论里做出了解释。大意是说计算query digest确实会有性能损失，但是确实proxysql里面非常重要特性，主要是两点：<ol>
<li>proxysql无法知道连接复用(multipexing)是否必须被自动禁用，比如连接里面有variables/tmp tables/lock table等特殊命令，是不能复用的。</li>
<li>完整的查询去匹配正则的效率，一般没有参数化后的查询匹配效率高，因为有很长的字符串内容需要处理。再者，<code>SELECT * FROM randomtable WHERE comment LIKE ‘%INTO sbtest1 % FROM sbtest2 %’</code>字符串里有类似这样的语句，很难排除误匹配。</li>
</ol>
</li>
<li><code>negate_match_pattern</code>: 反向匹配，相当于对 match_digest/match_pattern 的匹配取反。</li>
<li><code>re_modifiers</code>: 修改正则匹配的参数，比如默认的：忽略大小写<code>CASELESS</code>、禁用<code>GLOBAL</code></li>
</ul>
<p>上面都是匹配规则，下面是匹配后的行为：</p>
<ul>
<li><code>replace_pattern</code>: 查询重写，默认为空，不rewrite。<br>rewrite规则要遵守  <a href="https://github.com/google/re2/wiki/Syntax" target="_blank" rel="external">RE2::Replace</a> 。</li>
<li><code>destination_hostgroup</code>: 路由查询到这个 hostgroup。当然如果用户显式 start transaction 且 transaction_persistent=1，那么即使匹配到了，也依然按照事务里第一条sql的路由规则去走。</li>
<li><code>cache_ttl</code>: 查询结果缓存的毫秒数。<br>proxysql这个 Query Cache 与 MySQL 自带的query cache不是同一个。proxysql query cache也不会关心后端数据是否被修改，它所做的就是针对某些特定种类的查询结果进行缓存，比如一些历史数据的count结果。一般不设。</li>
<li><code>timeout</code>: 这一类查询执行的最大时间（毫秒），超时则自动kill。<br>这是对后端DB的保护机制，相当于阿里云RDS <code>loose_max_statement_time</code> 变量的功能，但是注意不同的是，阿里云这个变量的时间时不包括DML操作出现InnoDB行锁等待的时间，而ProxySQL的这个 timeout 是计算从发送sql到等待响应的时间。默认<code>mysql-default_query_timeout</code>给的是 10h .</li>
<li><code>retries</code>: 语句在执行时失败时，重试次数。默认由 <code>mysql-query_retries_on_failure</code>变量指定，为1 。<br>我个人建议把它设成0，即不重试。因为执行失败，对select而言很少见，主要是dml，但自己重试对数据不放心。</li>
<li><code>delay</code>: 查询延迟执行，这是ProxySQL提供的限流机制，会让其它的查询优先执行。<br>默认值 <code>mysql-default_query_delay</code>，为0。我们一般不用，其实还是要配合应用端使用，比如这边延迟执行，但上层等待你返回，那前端不就堵住了，没准出现雪崩效应。</li>
<li><code>mirror_flagOUT</code>,<code>mirror_hostgroup</code><br>这两个高级了，目前这部分文档不全，功能是SQL镜像。顾名思义，就是把匹配到的SQL除了发送到 destination_hostgroup，同时镜像一份到这里的hostgroup，比如我们的测试库。比如这种场景，数据库要从5.6升级到5.7，要验证现有查询语句对5.7的适用情况，就可以把生产流量镜像到5.7新库上验证。</li>
<li><code>error_msg</code>: 默认为NULL，如果指定了则这个查询直接被 block 掉，马上返回这个错误信息。<br>这个功能也很实用，比如线上突然冒出一个 “坏查询”，应用端不方便马上发版解决，我们就可以在这配置一个规则，把查询屏蔽掉，想正常的mysql报错那样抛异常。下一篇文章有演示。</li>
<li><code>multiplex</code>: 连接是否复用。<br>关于这个，单独起一篇文章来写，传送门：<a href="http://seanlook.com/2017/04/17/mysql-proxysql-multiplexing/">http://seanlook.com/2017/04/17/mysql-proxysql-multiplexing/</a></li>
<li><code>log</code>: 是否记录查询日志。可以看到log是否记录的对象是根据规则。<br>要开启日志记录，需要设置变量 <code>mysql-eventslog_filename</code> 来指定文件名，然后这个 log 标记为1。但是目前proxysql记录的日志是二进制格式，需要特定的工具才能读取： eventslog_reader_sample 。这个工具在源码目录 tools下面，我下载的1.3.5版本rpm表竟然还没有编译它。<br>参考 issue <a href="https://github.com/sysown/proxysql/issues/561" target="_blank" rel="external">#561 Logging all queries</a></li>
</ul>
<p>照 <a href="https://github.com/sysown/proxysql/wiki/Multi-layer-configuration-system#modifying-config-at-runtime" target="_blank" rel="external">wiki Multi-layer-configuration-system</a> 所说，在debug版本里应该有个 debug_levels 表来定义日志级别，但我没找到。据作者回复，上面的方式已过时，推荐 <code>mysql-eventslog_filename</code>。</p>
<h1 id="3-proxysql的多层配置设计"><a href="#3-proxysql的多层配置设计" class="headerlink" title="3. proxysql的多层配置设计"></a>3. proxysql的多层配置设计</h1><p>ProxySQL采用多层配置的设计来达到以下目的：</p>
<ul>
<li>允许在线应用配置项，而不需要重启proxysql</li>
<li>使用MySQL接口风格，来操作配置项，自定更新</li>
<li>如果配置有误，可以轻易回滚</li>
</ul>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/proxysql-config-multi-layer.png" alt="ProxySQL Multi layer configuration system"></p>
<p><strong>RUNTIME</strong> 代表的是ProxySQL当前生效的配置，包括 global_variables, mysql_servers, mysql_users, mysql_query_rules。无法直接修改这里的配置，必须要从下一层load进来。<br><strong>MEMORY</strong> 是平时在mysql命令行修改的 main 里头配置，可以认为是SQLite数据库在内存的镜像<br><strong>DISK / CONFIG FILE</strong> 持久存储的那份配置，一般在<code>$(DATADIR)/proxysql.db</code>，在重启的时候会从硬盘里加载。 <code>/etc/proxysql.cnf</code>文件只在第一次初始化的时候用到，完了后，如果要修改监听端口，还是需要在管理命令行里修改，再 save 到硬盘。</p>
<p>需要修改配置时，直接操作的是 MEMORAY，以下命令可用于加载或保存 <code>users</code>： （序号对应上图）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[1]: <span class="keyword">LOAD</span> MYSQL <span class="keyword">USERS</span> <span class="keyword">TO</span> RUNTIME / <span class="keyword">LOAD</span> MYSQL <span class="keyword">USERS</span> <span class="keyword">FROM</span> <span class="keyword">MEMORY</span>  <span class="comment">-- 常用</span></div><div class="line">[<span class="number">2</span>]: <span class="keyword">SAVE</span> MYSQL <span class="keyword">USERS</span> <span class="keyword">TO</span> <span class="keyword">MEMORY</span> / <span class="keyword">SAVE</span> MYSQL <span class="keyword">USERS</span> <span class="keyword">FROM</span> RUNTIME</div><div class="line">[<span class="number">3</span>]: <span class="keyword">LOAD</span> MYSQL <span class="keyword">USERS</span> <span class="keyword">TO</span> <span class="keyword">MEMORY</span> / <span class="keyword">LOAD</span> MYSQL <span class="keyword">USERS</span> <span class="keyword">FROM</span> DISK</div><div class="line">[<span class="number">4</span>]: <span class="keyword">SAVE</span> MYSQL <span class="keyword">USERS</span> <span class="keyword">TO</span> DISK /  <span class="keyword">SAVE</span> MYSQL <span class="keyword">USERS</span> <span class="keyword">FROM</span> <span class="keyword">MEMORY</span>    <span class="comment">-- 常用</span></div><div class="line">[<span class="number">5</span>]: <span class="keyword">LOAD</span> MYSQL <span class="keyword">USERS</span> <span class="keyword">FROM</span> CONFIG</div></pre></td></tr></table></figure></p>
<p>我比较习惯用 <code>TO</code>，记住往上层是 LOAD，往下层是 SAVE。</p>
<p>以下命令加载或保存<code>servers</code>:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">1</span>]: <span class="link">LOAD MYSQL SERVERS TO RUNTIME  -- 常用，让修改的配置生效</span></div><div class="line">[<span class="symbol">2</span>]: <span class="link">SAVE MYSQL SERVERS TO MEMORY</span></div><div class="line">[<span class="symbol">3</span>]: <span class="link">LOAD MYSQL SERVERS TO MEMORY</span></div><div class="line">[<span class="symbol">4</span>]: <span class="link">SAVE MYSQL SERVERS TO DISK     -- 常用，将修改的配置持久化</span></div><div class="line">[<span class="symbol">5</span>]: <span class="link">LOAD MYSQL SERVERS FROM CONFIG</span></div></pre></td></tr></table></figure></p>
<p>后面的使用方法也基本相同，一并列出。<br>以下命令加载或保存<code>query rules</code>:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[1]: <span class="keyword">load</span> mysql <span class="keyword">query</span> <span class="keyword">rules</span> <span class="keyword">to</span> run    <span class="comment">-- 常用</span></div><div class="line">[<span class="number">2</span>]: <span class="keyword">save</span> mysql <span class="keyword">query</span> <span class="keyword">rules</span> <span class="keyword">to</span> mem</div><div class="line">[<span class="number">3</span>]: <span class="keyword">load</span> mysql <span class="keyword">query</span> <span class="keyword">rules</span> <span class="keyword">to</span> mem</div><div class="line">[<span class="number">4</span>]: <span class="keyword">save</span> mysql <span class="keyword">query</span> <span class="keyword">rules</span> <span class="keyword">to</span> disk   <span class="comment">-- 常用</span></div><div class="line">[<span class="number">5</span>]: <span class="keyword">load</span> mysql <span class="keyword">query</span> <span class="keyword">rules</span> <span class="keyword">from</span> config</div></pre></td></tr></table></figure></p>
<p>以下命令加载或保存 <code>mysql variables</code>:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[1]: <span class="keyword">load</span> mysql <span class="keyword">variables</span> <span class="keyword">to</span> runtime</div><div class="line">[<span class="number">2</span>]: <span class="keyword">save</span> mysql <span class="keyword">variables</span> <span class="keyword">to</span> <span class="keyword">memory</span></div><div class="line">[<span class="number">3</span>]: <span class="keyword">load</span> mysql <span class="keyword">variables</span> <span class="keyword">to</span> <span class="keyword">memory</span></div><div class="line">[<span class="number">4</span>]: <span class="keyword">save</span> mysql <span class="keyword">variables</span> <span class="keyword">to</span> disk</div><div class="line">[<span class="number">5</span>]: <span class="keyword">load</span> mysql <span class="keyword">variables</span> <span class="keyword">from</span> config</div></pre></td></tr></table></figure></p>
<p>以下命令加载或保存<code>admin variables</code>:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[1]: <span class="keyword">load</span> <span class="keyword">admin</span> <span class="keyword">variables</span> <span class="keyword">to</span> runtime</div><div class="line">[<span class="number">2</span>]: <span class="keyword">save</span> <span class="keyword">admin</span> <span class="keyword">variables</span> <span class="keyword">to</span> <span class="keyword">memory</span></div><div class="line">[<span class="number">3</span>]: <span class="keyword">load</span> <span class="keyword">admin</span> <span class="keyword">variables</span> <span class="keyword">to</span> <span class="keyword">memory</span></div><div class="line">[<span class="number">4</span>]: <span class="keyword">save</span> <span class="keyword">admin</span> <span class="keyword">variables</span> <span class="keyword">to</span> disk</div><div class="line">[<span class="number">5</span>]: <span class="keyword">load</span> <span class="keyword">admin</span> <span class="keyword">variables</span> <span class="keyword">from</span> config</div></pre></td></tr></table></figure></p>
<p>下一篇文章将演示ProxySQL读写分离与分库的路由规则编写：<a href="http://seanlook.com/2017/04/17/mysql-proxysql-route-rw_split/">http://seanlook.com/2017/04/17/mysql-proxysql-route-rw_split/</a> </p>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ul>
<li><a href="https://severalnines.com/blog/mysql-load-balancing-proxysql-overview" target="_blank" rel="external">https://severalnines.com/blog/mysql-load-balancing-proxysql-overview</a></li>
<li><a href="https://github.com/sysown/proxysql/wiki" target="_blank" rel="external">https://github.com/sysown/proxysql/wiki</a></li>
<li><a href="http://www.techietown.info/2017/01/mysql-readwrite-splitting-proxysql/" target="_blank" rel="external">http://www.techietown.info/2017/01/mysql-readwrite-splitting-proxysql/</a></li>
</ul>
<hr>
<p>原文连接地址：<a href="http://seanlook.com/2017/04/10/mysql-proxysql-install-config/">http://seanlook.com/2017/04/10/mysql-proxysql-install-config/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[清明闲扯]]></title>
      <url>http://seanlook.com/2017/04/02/qingming-2017/</url>
      <content type="html"><![CDATA[<p>这个清明假期，没有做特意的安排，4月1日晚上的时候冒出个想法——去爬七娘山。后来考虑天太热，便作罢了，正好抽一点时间整理些近来的事情。</p>
<h2 id="关于博客"><a href="#关于博客" class="headerlink" title="** 关于博客"></a>** 关于博客</h2><p>很早在朋友圈看到 多说 要关闭的消息，不久后也收到了邮件。全国第一的评论系统，说倒就倒，到底是没有好的营收模式，看到网上一堆评论说挺惋惜的，但那么多用户评论数据在上面，价值可想而知，不应遭此地步。在2014年刚用 多说 的时候，就感觉到它后台基本上没有人在维护了，自身管理后台都有不少问题，提反馈也没响应。</p>
<p>选择网易云跟帖，把它替换掉了，并把以前的评论数据迁移了过来，就是人和人对不上号，以前那些网友找不到自己的评论，抱歉了。不过能用就行，还是多添点内容，也已经过了纠结样式主题的年纪了。有时候看到后台的评论，或者通过其它途径辛苦找到我的，给我了继续写博的动力。</p>
<p>再一个就是搜索功能，以前用的 swiftype 是在去年的时候，不免费了，只提供企业版。它提供的站内搜索引擎功能，十分强大，也很美观，后台管理能看到许多的分析数据，可是它偏偏就突然收费了，而且298$/m，不能接受。也是秉着能用的原则，装上了 hexo-generator-search 模块。</p>
<p>网站统计，现在是cnzz和百度站长的都在用，看了下每天还是有个400-600的独立访客，想想要整一个稍微过得去的 about 页面了。见这里 <a href="http://seanlook.com/about/">http://seanlook.com/about/</a> 。同时也才最近才加上leancloud访问量显示功能。</p>
<p>噢，对了，新加了个打赏的功能，孰知坚持写博不易，意思意思。<br> -- updated 2017-04-28 --<br> 把微信打赏改成了支付宝，这样方便知道对方是谁。</p>
<h2 id="关于职业"><a href="#关于职业" class="headerlink" title="** 关于职业"></a>** 关于职业</h2><p>本职工作呢，是一名 DBA 。上周末听香港MySQL用户组主席 Ivan Ma 讲，他们那么没有很清楚的把职位分为是 MySQL DBA 还是 Oracle DBA，他们许多都是不论什么类型的数据库，包括nosql，都得上。我对自身的定位也是，MySQL可以是看家本领，必须深入理解，熟悉它的周边生态圈，积累优化经验。但是像Redis,Mongo,HBase甚至ES这些都必须要有一定的了解，还有像python/go一两门拿得出手的开发语言。</p>
<p>相继前后有好几位同行通过微博、QQ、微信，找到我，请教些问题。有些可能我也并不能马上明确的回答，但是要么自己做个验证，也能很快有结论，要么提供一些建议、方向，或者一些风险点，总之尽我所能。一对一讨论，是能快速学习和加深理解非常有效的途径。</p>
<p>在叶老师知数堂的优化班里，进去之前自己还是有一定基础的，主要是查一查知识的盲点，认识一些行业内的圈子。所以在群里，基本上不参与无关话题的讨论，偶尔回复技术相关的，再者也真没那个闲工夫。</p>
<p>最近一直在处理一个矛盾——职业与工作。个人花工作时间来学习研究，与外部群体讨论，短时间内在工作上可能看不到效果。我们不像开发人员，开发有项目推动，我们基本上都是问题驱动，为了解决这个问题（无论是具体的，还是平台的，甚至架构的），当我们并没有处理经验的时候，往往需要了解和对比大量资料。但最后能有多少应用在工作中的，很难说。能解决一个问题，叫工作；解决好一个问题，叫职业。同样是解决，而且一般在任期内不会复发，显然后者对个人的投入和收获，都更大。</p>
<p>我们的DBA工作充斥了许多的表结构审核、修改线上业务数据，以及慢sql优化、隐患问题追踪等等，也一直在思考一种好的工具平台，但是这样一个数据库运维体系的建立，前期要投入的精力和时间可想而知，而另一边，日常有源源不断的琐事或者问题要处理，到底何为紧急？虽然现在大部分工作，组内几个人好像都做得过来，但说实在的，人肉运维以及效率，都有许多可以改进的地方。然而就是需要在众多繁琐运维事务中，找个时间把该做的平台先做好。</p>
<p>目前还是在摸索，并有些眉目了，开发工作看来也只能靠自己了……</p>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2017/04/02/qingming-2017/">http://seanlook.com/2017/04/02/qingming-2017/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一次艰辛的字符集转换历程 ACMUG分享]]></title>
      <url>http://seanlook.com/2017/03/27/mysql-ppt-charset-conversion-acmug/</url>
      <content type="html"><![CDATA[<p>本文的ppt是3月25日在中国MySQL用户组2017深圳活动上，我所做的一个主题分享，关于实际生产使用mysql过程中与字符集有关的一些坑。</p>
<p>这个总结其实自己去年一直也想去做，前后花了2个多月的时间，最后所有库无痛完成迁移转化。在2017年二月中下旬的时候微信上请教周董（去哪儿周彦韦大师）一个问题，因为以前也聊过一些，所以他突然问我要不要在3月份的活动上做个主题分享。当时有点不敢想，毕竟之前2次有关培训都是在公司内部的，而这次对外的分享，且不说台下听众有牛人存在，演讲嘉宾里面可各个都是大师级别的，所以当时没有马上答应。过了两天，偶然想到关于字符集这个经历可以讲一讲，不是为了展示自己有多牛B，只是分享下整个问题的处理经验，放低姿态。列了个提纲发给了周董，10分钟不到周董说定了。向经理请示了下没问题，这下赶着鸭子都得上了……</p>
<p>毕竟第一次公开在这样的场合演讲，说不紧张肯定是假的，所以早早的就在准备ppt，一边回顾，一边画图。上阵前一天晚上还在对演示稿微调，并尽量控制时间。</p>
<p>闲话不多说，PPT奉上：</p>


	<div class="row">
	  <iframe src="http://nagland.github.io/viewer/web/viewer.html?val=http://7q5fot.com1.z0.glb.clouddn.com/mysql-ppt-charset-conversion-acmug-sean.pdf" style="width:100%; height:550px"></iframe>
	</div>



<p>IT大咖说有录视频：</p>
<ul>
<li><a href="http://www.itdks.com/dakashuo/detail/700" target="_blank" rel="external">http://www.itdks.com/dakashuo/detail/700</a></li>
</ul>
<p>后来自己复看了一下，没啥大毛病，内容都交代清楚了，就是感觉确实舞台经验，表述上还有待加强。</p>
<p>同时这里是当天的活动掠影，阅读原文可看视频：</p>
<ul>
<li>ACMUG 2017 Tech Tour 深圳站掠影 <a href="http://mp.weixin.qq.com/s/-QNRhnN0kBtLkiWVIUS-QQ" target="_blank" rel="external">http://mp.weixin.qq.com/s/-QNRhnN0kBtLkiWVIUS-QQ</a></li>
</ul>
<p>下方是中国MySQL用户组(ACMUG)的公众号，欢迎关注：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-acmug-wechat.jpg" alt="ACMUG"></p>
<hr>
<p>原文连接地址：<a href="http://seanlook.com/2017/03/27/mysql-ppt-charset-conversion-acmug/">http://seanlook.com/2017/03/27/mysql-ppt-charset-conversion-acmug/</a></p>
<hr>
<!--
<iframe src="https://www.slideshare.net/slideshow/embed_code/key/3HLJJcJmM9KLGT" width="900" height="512" frameborder="0" allowfullscreen></iframe>
<p>–&gt;</p>
-->]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[index merge 引起的死锁分析]]></title>
      <url>http://seanlook.com/2017/03/11/mysql-index_merge-deadlock/</url>
      <content type="html"><![CDATA[<p>在看线上一个 MySQL innodb status 时，发现有死锁信息，而且出现的频率还不低。于是分析了一下，把过程记录下来。</p>
<h2 id="1-概要"><a href="#1-概要" class="headerlink" title="1. 概要"></a>1. 概要</h2><p>表结构脱敏处理：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_mytb1 (</div><div class="line">  f_id <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  f_fid <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line">  f_sid <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line">  f_mode <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</div><div class="line">  f_read <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line">  f_xxx1 <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line">  f_xxx2 <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line">  f_wx_zone <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (f_id),</div><div class="line">  <span class="keyword">KEY</span> idx_sid (f_sid),</div><div class="line">  <span class="keyword">KEY</span> idx_fid (f_fid)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</div></pre></td></tr></table></figure></p>
<p>死锁信息：<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">LATEST DETECTED DEADLOCK</div><div class="line">------------------------</div><div class="line"><span class="number">2017</span><span class="number">-02</span><span class="number">-28</span> <span class="number">13</span>:<span class="number">58</span>:<span class="number">29</span> <span class="number">7</span>f25a3efd700</div><div class="line">*** (<span class="number">1</span>) TRANSACTION:</div><div class="line">TRANSACTION <span class="number">4907718431</span>, ACTIVE <span class="number">0.010</span> sec fetching rows</div><div class="line">mysql tables <span class="keyword">in</span> use <span class="number">3</span>, locked <span class="number">3</span></div><div class="line">LOCK WAIT <span class="number">154</span> lock struct(s), heap size <span class="number">30248</span>, <span class="number">10</span> row lock(s)</div><div class="line">LOCK BLOCKING MySQL thread id: <span class="number">13589250</span> block <span class="number">13589247</span></div><div class="line">MySQL thread id <span class="number">13589247</span>, OS thread handle <span class="number">0x7f25a17e3700</span>, query id <span class="number">27061926722</span> <span class="number">11.</span>xx<span class="number">.52</span>.xx ecweb Searching rows <span class="keyword">for</span> update</div><div class="line">UPDATE `d_db1`.`t_mytb1` <span class="keyword">SET</span> `f_read` = f_read+<span class="number">1</span> WHERE (f_fid=<span class="number">91243</span>) <span class="keyword">AND</span> (f_sid=<span class="number">100</span>) <span class="keyword">AND</span> (f_mode=<span class="comment">'浏览器')</span></div><div class="line">*** (<span class="number">1</span>) WAITING <span class="keyword">FOR</span> THIS LOCK <span class="keyword">TO</span> BE GRANTED:</div><div class="line">RECORD LOCKS <span class="built_in">space</span> id <span class="number">13288</span> page no <span class="number">375</span> n bits <span class="number">352</span> index `PRIMARY` of table `d_db1`.`t_mytb1` trx id <span class="number">4907718431</span> lock_mode X locks rec but <span class="keyword">not</span> gap waiting</div><div class="line">Record lock, heap no <span class="number">245</span> PHYSICAL RECORD: n_fields <span class="number">10</span>; compact format; info bits <span class="number">0</span></div><div class="line"> <span class="number">0</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">0000</span>a63b; <span class="built_in">asc</span>    ;;;</div><div class="line"> <span class="number">1</span>: <span class="built_in">len</span> <span class="number">6</span>; <span class="built_in">hex</span> <span class="number">0001246304</span>a7; <span class="built_in">asc</span>   $c  ;;</div><div class="line"> <span class="number">2</span>: <span class="built_in">len</span> <span class="number">7</span>; <span class="built_in">hex</span> <span class="number">7</span>f000ac0162428; <span class="built_in">asc</span>      $(;;</div><div class="line"> <span class="number">3</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">00016470</span>; <span class="built_in">asc</span>   dp;;</div><div class="line"> <span class="number">4</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">00000064</span>; <span class="built_in">asc</span>    d;;</div><div class="line"> <span class="number">5</span>: <span class="built_in">len</span> <span class="number">9</span>; <span class="built_in">hex</span> e6b58fe8a788e599a8; <span class="built_in">asc</span>          ;;</div><div class="line"> <span class="number">6</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">0000244</span>f; <span class="built_in">asc</span>   $O;;</div><div class="line"> <span class="number">7</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">0000007</span>c; <span class="built_in">asc</span>    |;;</div><div class="line"> <span class="number">8</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">00000000</span>; <span class="built_in">asc</span>     ;;</div><div class="line"> <span class="number">9</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">00000000</span>; <span class="built_in">asc</span>     ;;</div><div class="line"></div><div class="line">*** (<span class="number">2</span>) TRANSACTION:</div><div class="line">TRANSACTION <span class="number">4907718435</span>, ACTIVE <span class="number">0.007</span> sec fetching rows</div><div class="line">mysql tables <span class="keyword">in</span> use <span class="number">3</span>, locked <span class="number">3</span></div><div class="line"><span class="number">154</span> lock struct(s), heap size <span class="number">30248</span>, <span class="number">3</span> row lock(s)</div><div class="line">MySQL thread id <span class="number">13589250</span>, OS thread handle <span class="number">0x7f25a3efd700</span>, query id <span class="number">27061926757</span> <span class="number">11.</span>xx<span class="number">.104</span>.xxx ecweb Searching rows <span class="keyword">for</span> update</div><div class="line">UPDATE `d_db1`.`t_mytb1` <span class="keyword">SET</span> `f_read` = f_read+<span class="number">1</span> WHERE (f_fid=<span class="number">91248</span>) <span class="keyword">AND</span> (f_sid=<span class="number">100</span>) <span class="keyword">AND</span> (f_mode=<span class="comment">'浏览器')</span></div><div class="line">*** (<span class="number">2</span>) HOLDS THE LOCK(S):</div><div class="line">RECORD LOCKS <span class="built_in">space</span> id <span class="number">13288</span> page no <span class="number">375</span> n bits <span class="number">352</span> index `PRIMARY` of table `d_db1`.`t_mytb1` trx id <span class="number">4907718435</span> lock_mode X locks rec but <span class="keyword">not</span> gap</div><div class="line">Record lock, heap no <span class="number">245</span> PHYSICAL RECORD: n_fields <span class="number">10</span>; compact format; info bits <span class="number">0</span></div><div class="line"> <span class="number">0</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">0000</span>a63b; <span class="built_in">asc</span>    ;;;  -- <span class="number">42555</span></div><div class="line"> <span class="number">1</span>: <span class="built_in">len</span> <span class="number">6</span>; <span class="built_in">hex</span> <span class="number">0001246304</span>a7; <span class="built_in">asc</span>   $c  ;;  -- <span class="number">4905436327</span></div><div class="line"> <span class="number">2</span>: <span class="built_in">len</span> <span class="number">7</span>; <span class="built_in">hex</span> <span class="number">7</span>f000ac0162428; <span class="built_in">asc</span>      $(;;</div><div class="line"> <span class="number">3</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">00016470</span>; <span class="built_in">asc</span>   dp;;  -- <span class="number">91248</span></div><div class="line"> <span class="number">4</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">00000064</span>; <span class="built_in">asc</span>    d;;  -- <span class="number">100</span></div><div class="line"> <span class="number">5</span>: <span class="built_in">len</span> <span class="number">9</span>; <span class="built_in">hex</span> e6b58fe8a788e599a8; <span class="built_in">asc</span>          ;;</div><div class="line"> <span class="number">6</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">0000244</span>f; <span class="built_in">asc</span>   $O;;  -- <span class="number">9295</span></div><div class="line"> <span class="number">7</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">0000007</span>c; <span class="built_in">asc</span>    |;;  -- <span class="number">124</span></div><div class="line"> <span class="number">8</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">00000000</span>; <span class="built_in">asc</span>     ;;</div><div class="line"> <span class="number">9</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">00000000</span>; <span class="built_in">asc</span>     ;;</div><div class="line"></div><div class="line">*** (<span class="number">2</span>) WAITING <span class="keyword">FOR</span> THIS LOCK <span class="keyword">TO</span> BE GRANTED:</div><div class="line">RECORD LOCKS <span class="built_in">space</span> id <span class="number">13288</span> page no <span class="number">202</span> n bits <span class="number">1272</span> index `idx_sid` of table `d_db1`.`t_mytb1` trx id <span class="number">4907718435</span> lock_mode X locks rec but <span class="keyword">not</span> gap waiting</div><div class="line">Record lock, heap no <span class="number">705</span> PHYSICAL RECORD: n_fields <span class="number">2</span>; compact format; info bits <span class="number">0</span></div><div class="line"> <span class="number">0</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">00000064</span>; <span class="built_in">asc</span>    d;;  -- <span class="number">100</span></div><div class="line"> <span class="number">1</span>: <span class="built_in">len</span> <span class="number">4</span>; <span class="built_in">hex</span> <span class="number">0000</span>a633; <span class="built_in">asc</span>    <span class="number">3</span>;;  -- <span class="number">42547</span></div><div class="line"></div><div class="line">*** WE ROLL BACK TRANSACTION (<span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<p>乍一看很奇怪，tx1和tx2 两个 UPDATE 各自以 f_fid 为条件更新的记录互不影响才对，即使 91243，91248 两个值有可能出现在同一条数据上（因为f_fid上是二级索引），那顶多也就是个更新锁等待，谁后来谁等待，怎么会出现互相争用对方已持有的锁，被死锁检测机制捕获？</p>
<p>当然,把 update 语句拿到数据库中 EXPLAIN 一下就可以看出端倪。这里不妨先分析一下输出的锁情况：</p>
<p><strong>先看 Tx2 (对应trx id 4907718435)</strong> :  </p>
<ol>
<li><p><code>RECORD LOCKS space id 13288 page no 375 n bits 352</code> 告诉我们是表空间id 13288 (可从 <code>information_schema.INNODB_SYS_DATAFILES</code> 查到对应ibd文件) 即 t_mytb1 表，第 375 号页面的 245 位置的记录被锁，并且是 idx PRIMARY 上的记录锁（注：本实例隔离级别为RC）。 Tx2正持有这把记录锁。<br>因为是聚集索引，显示了完整记录</p>
<figure class="highlight ldif"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">0</span>: 主键f_id=42555</div><div class="line"><span class="attribute">1</span>: DB_TRX_ID = 4905436327</div><div class="line"><span class="attribute">2</span>: DB_ROLL_PTR指向undo记录的地址</div><div class="line"><span class="attribute">3</span>: f_fid=91248</div><div class="line"><span class="attribute">4</span>: f_sid=100</div><div class="line">   ...</div></pre></td></tr></table></figure>
</li>
<li><p>然而Tx2还在等待一个记录锁（lock_mode X locks rec but not gap waiting），但这把锁来自二级索引 <code>idx_sid</code> 索引上的记录锁。在 RC 级别下没有GAP lock，行锁除了加在符合条件的二级索引 f_sid=100 上外，还会对主键加record lock。<br>二级索引值：</p>
<a id="more"></a>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">0</span>: f_sid=100</div><div class="line"><span class="attribute">1</span>: 主键f_id=42547</div></pre></td></tr></table></figure>
</li>
</ol>
<p>明显它们是两条不同的记录。</p>
<p><strong>再看 Tx1（对应trx id 4907718431）</strong><br>Tx1 事务等待的锁，就是上面 Tx2 已持有的记录锁 f_id=42555 。但是由于输出的关系，没有看到它持有的锁。既然这里出现死锁，可以推断，Tx1执行update时，已获得 f_id=42547 的记录锁，这样才导致死锁，否则的话只会出现一方等待。示意图如下：</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-secondary-index-merge.png" alt=""></p>
<p>InnoDB最终选择回滚 Tx2 是可以理解的 —— 它只获得了一个记录锁，资源占用最少。目前还无法解释的是关于锁数量这一部分：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql tables in <span class="keyword">use</span> <span class="number">3</span>, <span class="keyword">locked</span> <span class="number">3</span></div><div class="line"><span class="number">154</span> <span class="keyword">lock</span> <span class="keyword">struct</span>(s), <span class="keyword">heap</span> <span class="keyword">size</span> <span class="number">30248</span>, <span class="number">3</span> <span class="keyword">row</span> <span class="keyword">lock</span>(s)</div></pre></td></tr></table></figure></p>
<h2 id="2-死锁产生的原因-——-index-merge"><a href="#2-死锁产生的原因-——-index-merge" class="headerlink" title="2. 死锁产生的原因 —— index merge"></a>2. 死锁产生的原因 —— index merge</h2><p>上面任何一个 update 的explain结果：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-index_merge-deadlock.png" alt=""></p>
<p>可以看到 EXTRA 列 <code>Using intersect(idx_sid, idx_fid)</code>。</p>
<p>索引合并是 5.0 就引入的一种优化手段，意指在查询语句里，可以在一个表上使用多个索引，同时扫描，最后进行结果合并。上面的例子里，条件 <code>f_fid=xxx and f_sid=xxx</code>，因为表上有 <em>f_fid</em> 和 <em>f_sid</em> 两个单列索引，优化器在成本模型里进行估算，认为一边使用 f_fid=91243 索引扫描，一边使用 f_sid=100 索引扫描，然后对两个结果集取交集，会更快。结果在高并发更新情况下：</p>
<ul>
<li>Tx2通过 f_fid 索引锁住了记录 42555，欲通过 f_sid 锁定另一条记录 42547</li>
<li>Tx1 已通过 f_sid 锁定 42547，欲通过 f_fid 锁住记录42555</li>
<li>死锁发生</li>
</ul>
<h3 id="关于索引合并"><a href="#关于索引合并" class="headerlink" title="关于索引合并"></a>关于索引合并</h3><p>intersection 只是 索引合并中的一种，还有 union, sort_union 。可以用到  index_merge 是有比较苛刻的条件。</p>
<ol>
<li>首先是 Range 优先(&gt;5.6.7)。比如 key1=1 or (key1=2 and key2=3)，其中key1是可以转化成 range scan 的，不会使用 index merge union</li>
<li>其次，Intersect和Union要符合 ROR，即 Rowid-Ordered-Retrival：<blockquote>
<p>Intersect和Union都需要使用的索引是ROR的，也就时ROWID ORDERED，即针对不同的索引扫描出来的数据必须是同时按照ROWID排序的，这里的 ROWID其实也就是InnoDB的主键(如果不定义主键，InnoDB会隐式添加ROWID列作为主键)。只有每个索引是ROR的，才能进行归并排序，你懂的。 当然你可能会有疑惑，查不记录后内部进行一次sort不一样么，何必必须要ROR呢，不错，所以有了SORT-UNION。SORT-UNION就是每个非ROR的索引 排序后再进行Merge<br> – 来自 <a href="http://www.cnblogs.com/nocode/archive/2013/01/28/2880654.html" target="_blank" rel="external">http://www.cnblogs.com/nocode/archive/2013/01/28/2880654.html</a></p>
</blockquote>
</li>
</ol>
<p>像 <em>key1=v1 or key2=v2</em> ， key1与key2是单列索引，并且无其它索引可用，就有可能看到 Using Union(xx,xxx) 。更多内容可见参考链接。</p>
<h2 id="3-解决-——-加联合索引"><a href="#3-解决-——-加联合索引" class="headerlink" title="3. 解决 —— 加联合索引"></a>3. 解决 —— 加联合索引</h2><p>解决这个死锁可能你也想到了，添加联合索引 <code>idx_fid_sid(f_fid, f_sid)</code>，这样一来查询会选择这一个索引，至于 idx_sid 这个单列索引还需不需要，看业务场景。</p>
<p>另外，如果懂点业务的话，会发现这个更新之所以这么频繁，实际上是一个阅读量计数的功能，放到redis里可极大的提高并发能力，定时持久化到mysql表。</p>
<p>最后提一句 index_merge 是有选项可以关闭的：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select @@optimizer_switch;</div><div class="line">index_merge=<span class="keyword">on</span>,index_merge_union=<span class="keyword">on</span>,index_merge_sort_union=<span class="keyword">on</span>,index_merge_intersection=<span class="keyword">on</span> ...</div></pre></td></tr></table></figure></p>
<p>如果优化器选择了index_merge，一般是索引没建好，我看不让它使用比较更好。</p>
<p><strong> 参考文章 </strong>  </p>
<ol>
<li><a href="http://www.orczhou.com/index.php/2013/01/mysql-source-code-query-optimization-index-merge/" target="_blank" rel="external">MySQL优化器：index merge介绍</a></li>
<li><a href="http://hidba.org/?p=1065" target="_blank" rel="external">MySQL update use index merge(Using intersect) increase chances for deadlock</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.6/en/index-merge-optimization.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/en/index-merge-optimization.html</a></li>
</ol>
<hr>
<p>  原文链接地址：<a href="http://seanlook.com/2017/03/11/mysql-index_merge-deadlock/">http://seanlook.com/2017/03/11/mysql-index_merge-deadlock/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL根据离线binlog快速“闪回”]]></title>
      <url>http://seanlook.com/2017/03/03/mysql-flashback_use_purged-binlog/</url>
      <content type="html"><![CDATA[<p>昨天突然有个客户说误操作，自己删除了大量数据，CTO直接将我拉到一个讨论组里，说要帮他们恢复数据。他们自己挖的坑，打算让开发那边根据业务日志去恢复，被告知只记录的删除主键这样的信息，物理删除，无能为力。</p>
<p>上服务器看了下记录的日志，发现好几台上面都有被误删的记录输出。阿里RDS虽然可以克隆一个恢复到删除时间点前的实例，但这散落的几万个id找起来费力，还有就是几个表之间关联的数据也要恢复，觉得麻烦。</p>
<p>想到 MySQL 的闪回方案。以前看过好几篇相关文章，甚至差点自己用python撸一个来解析binlog，反转得到回滚sql，实在没空，这下要急用了。赶紧找了下网上“现成的方案”。</p>
<p>正文开始</p>
<hr>
<p>MySQL（含阿里RDS）快速闪回可以说是对数据库误操作的后悔药，flashback功能可以将数据库返回到误操作之前。但是即使oracle数据库也只支持短时间内的闪回。</p>
<p>网上现有开源的MySQL闪回实现，原理都是解析binlog，生成反向sql: (必须为row模式)</p>
<ol>
<li>对于 delete 操作，生成insert （DELETE_ROWS_EVENT）</li>
<li>对于 update 操作，交换binlog里面值的顺序 （UPDATE_ROWS_EVENT）</li>
<li>对于 insert 操作，反向生成delete （WRITE_ROWS_EVENT）</li>
<li>对于多个event，要逆向生成sql</li>
</ol>
<p>开源实现：</p>
<ul>
<li><a href="https://github.com/58daojia-dba/mysqlbinlog_flashback" target="_blank" rel="external">https://github.com/58daojia-dba/mysqlbinlog_flashback</a></li>
<li><a href="https://github.com/danfengcao/binlog2sql/" target="_blank" rel="external">https://github.com/danfengcao/binlog2sql/</a></li>
</ul>
<p>上面两种实现方式，都是通过 python-mysql-replication 包，模拟出原库的一个从库，然后 <code>show binary logs</code> 来获取binlog，发起同步binlog的请求，再解析EVENT。但是阿里云 RDS 的binlog在同步给从库之后，<strong> 很快就被 purge 掉了 </strong>。如果要恢复 <strong> 昨天</strong> 的 <strong> 部分数据 </strong>，两种方案都是拿不到binlog的。也就是闪回的时间有限。</p>
<p>还有一些比较简单的实现，就是解析 binlog 物理文件，实现回滚，如 <code>binlog-rollback.pl</code> ，试过，但是速度太慢。</p>
<p>为了不影响速度，又想使用比较成熟的闪回方案，我们可以这样做：</p>
<ol>
<li>借助一个自建的 mysqld 实例，将已purge掉的binlog拷贝到该实例的目录下</li>
<li>在自建实例里，提前创建好需要恢复的表（结构），因为工具需要连接上来从 <code>information_schema.columns</code> 获取元数据信息</li>
<li>拷贝的时候，可以替换掉mysql实例自己的binlog文件名，保持连续</li>
<li>可能要修改 <code>mysql-bin.index</code>，确保文件名还能被mysqld识别到</li>
<li>重启mysql实例，<code>show binary logs</code> 看一下是否在列表里面</li>
<li>接下来就可以使用上面任何一种工具，模拟从库，指定一个binlog文件，开始时间，结束时间，得到回滚SQL</li>
<li>再根据业务逻辑，筛选出需要的sql</li>
</ol>
<a id="more"></a>
<p>总之就是借助另外一个mysql，把binlog event传输过来。温馨提示：</p>
<ol>
<li>两个实例间版本不要跨度太大</li>
<li>注意文件权限</li>
<li>如果原库开启了gtid，这个自建实例也要开启gtid</li>
</ol>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">python mysqlbinlog_back.py --host=<span class="string">"localhost"</span> --username=<span class="string">"ecuser"</span> --password=<span class="string">"ecuser"</span> --port=<span class="number">3306</span> \</div><div class="line">--schema=dbname --tables=<span class="string">"t_xx1,t_xx2,t_xx3"</span> -S <span class="string">"mysql-bin.000019"</span> -E <span class="string">"2017-03-02 13:00:00"</span> -N <span class="string">"2017-03-02 14:09:00"</span> -I -U</div><div class="line"></div><div class="line">===log will also  write to .//mysqlbinlog_flashback.log===</div><div class="line">parameter=&#123;<span class="string">'start_binlog_file'</span>: <span class="string">'mysql-bin.000019'</span>, <span class="string">'stream'</span>: <span class="keyword">None</span>, <span class="string">'keep_data'</span>: <span class="keyword">True</span>,</div><div class="line"> <span class="string">'file'</span>: &#123;<span class="string">'data_create'</span>: <span class="keyword">None</span>, <span class="string">'flashback'</span>: <span class="keyword">None</span>, <span class="string">'data'</span>: <span class="keyword">None</span>&#125;, <span class="string">'add_schema_name'</span>: <span class="keyword">False</span>, <span class="string">'start_time'</span>: <span class="keyword">None</span>, <span class="string">'keep_current_data'</span>: <span class="keyword">False</span>, <span class="string">'start_to_timestamp'</span>: <span class="number">1488430800</span>,</div><div class="line"> <span class="string">'mysql_setting'</span>: &#123;<span class="string">'passwd'</span>: <span class="string">'ecuser'</span>, <span class="string">'host'</span>: <span class="string">'localhost'</span>, <span class="string">'charset'</span>: <span class="string">'utf8'</span>, <span class="string">'port'</span>: <span class="number">3306</span>, <span class="string">'user'</span>: <span class="string">'ecuser'</span>&#125;,</div><div class="line"> <span class="string">'table_name'</span>: <span class="string">'t_xx1,t_xx2,t_xx3'</span>, <span class="string">'skip_delete'</span>: <span class="keyword">False</span>, <span class="string">'schema'</span>: <span class="string">'dbname'</span>, <span class="string">'stat'</span>: &#123;<span class="string">'flash_sql'</span>: &#123;&#125;&#125;,</div><div class="line"> <span class="string">'table_name_array'</span>: [<span class="string">'t_xx1'</span>, <span class="string">'t_xx2'</span>, <span class="string">'t_xx3'</span>],</div><div class="line"> <span class="string">'one_binlog_file'</span>: <span class="keyword">False</span>, <span class="string">'output_file_path'</span>: <span class="string">'./log'</span>, <span class="string">'start_position'</span>: <span class="number">4</span>, <span class="string">'skip_update'</span>: <span class="keyword">True</span>,</div><div class="line"> <span class="string">'dump_event'</span>: <span class="keyword">False</span>, <span class="string">'end_to_timestamp'</span>: <span class="number">1488434940</span>, <span class="string">'skip_insert'</span>: <span class="keyword">True</span>, <span class="string">'schema_array'</span>: [<span class="string">'dbname'</span>]</div><div class="line">&#125;</div><div class="line">scan <span class="number">10000</span> events ....<span class="keyword">from</span> binlogfile=mysql-bin<span class="number">.000019</span>,timestamp=<span class="number">2017</span><span class="number">-03</span><span class="number">-02</span>T11:<span class="number">42</span>:<span class="number">14</span></div><div class="line">scan <span class="number">20000</span> events ....<span class="keyword">from</span> binlogfile=mysql-bin<span class="number">.000019</span>,timestamp=<span class="number">2017</span><span class="number">-03</span><span class="number">-02</span>T11:<span class="number">42</span>:<span class="number">29</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>提示：<br>binlog为ROW格式，dml影响的每一行都会记录两个event：Table_map和Row_log。而table_map里面的table_id并不会影响它在哪个实例上应用，这个id可以认为是逻辑上，记录表结构版本的机制 —— 当它在 table_definition_cache 没有找到表定义时，id自增1，分配给要记录到binlog的表。</p>
<p><strong>mysqlbinlog_back.py 使用经验</strong> ：</p>
<ul>
<li>务必指定库名、表明，开始的binlog文件名，起始时间，结束时间。可以加快scan的速度。</li>
<li>根据恢复的需要，选择 -I, -U, -D，指定回滚哪些类型的操作。</li>
<li>如果只是恢复部分表数据（非完全闪回），做不到关联表的正确恢复。比如需要恢复delete数据，但无法恢复业务里因为delete引起其它表更新的数据，除非完全闪回。</li>
<li>不支持表字段是 enum 类型的，比如 t_xx3 的f_do_type字段。可以把自建实例上的enum定义改成int。</li>
</ul>
<p><strong>参考</strong></p>
<ol>
<li><a href="http://dinglin.iteye.com/blog/1539167" target="_blank" rel="external">http://dinglin.iteye.com/blog/1539167</a></li>
<li><a href="http://www.penglixun.com/tech/database/mysql_flashback_feature.html/comment-page-1#comment-1207998" target="_blank" rel="external">http://www.penglixun.com/tech/database/mysql_flashback_feature.html/comment-page-1#comment-1207998</a></li>
<li><a href="http://www.cnblogs.com/yuyue2014/p/3721172.html" target="_blank" rel="external">http://www.cnblogs.com/yuyue2014/p/3721172.html</a></li>
</ol>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2017/03/03/mysql-flashback_use_purged-binlog/">http://seanlook.com/2017/03/03/mysql-flashback_use_purged-binlog/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于MySQL自增主键的几点问题（下）]]></title>
      <url>http://seanlook.com/2017/02/17/mysql-autoincrement_2/</url>
      <content type="html"><![CDATA[<h3 id="AUTO-INC-waiting-锁等待"><a href="#AUTO-INC-waiting-锁等待" class="headerlink" title="AUTO-INC waiting 锁等待"></a>AUTO-INC waiting 锁等待</h3><p>这是生产环境出现的现象，某日下午5点业务高峰期，我们的 <a href="http://seanlook.com/2016/09/27/python-mysql-querykill/">慢查询快照抓取程序</a> 报出大量线程阻塞，但是1分钟以后就好了。于是分析了当时的 processlist 和 innodb status 现场记录，发现有大量的 <code>AUTO-INC waiting</code>：</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-autoinc-1.png" alt="auto-inc-lock-wait"></p>
<p>当时想这是得多大的并发量，才会导致 AUTO_INCREMENT 列的自增id分配出现性能问题，不太愿意相信这个事实（后面就再也没出现过）。了解一番之后（见 <a href="http://seanlook.com/2017/02/16/mysql-autoincrement/">关于MySQLz自增主键问题（上篇）</a>），发现这个表级别的 AUTO-INC lock 就不应该在业务中存在，因为 <code>innodb_autoinc_lock_mode</code>为1，普通业务都是 simple inserts，获取自增id是靠内存里维护的一个互斥量（mutex counter）。</p>
<p>问题拿到知数堂优化班上课群里讨论过，也只是猜测是不是慢查询多了导致负载高，或者当时磁盘遇到什么物理故障阿里云那边自动恢复了。再后来怀疑是不是因为插入时带了 auto_increment 列的值（我们有个redis incr实现的自增id服务，虽然这一列有 AAUTO_INCREMENT 定义，但实际已经从发号器取id了），会导致锁的性质会变？</p>
<p>为了弄清这个疑问，特意去看了下mysql源码，发现如果插入的自增值比表当前AUTOINC值要大，是直接update mutex counter：</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-autoinc-mutex-update.png" alt=""></p>
<p>看源码的时候也打消了另一个疑虑：<code>show engine innodb status</code> 看到的 <code>AUTO-INC</code> 有没有可能不区分 表级自增锁和互斥量计数器 两种自增方案，只是告诉你自增id获取忙不过来？ 实际不是的，代码里面有明确的定义是 <code>autoinc_lock</code>还是<code>autoinc_mutex</code>：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// dict0dict.cc :</span></div><div class="line">#ifndef UNIV_HOTBACKUP</div><div class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span><span class="comment"><span class="markdown">/**</span></span></div><div class="line">Acquire the<span class="markdown"> autoinc lock. */</span></div><div class="line">UNIV_INTERN</div><div class="line"><span class="keyword">void</span></div><div class="line">dict_table_autoinc_lock(</div><div class="line"><span class="comment">/*====================*/</span></div><div class="line">4dict_table_t*	table)	<span class="comment">/*!&lt; in/out: table */</span></div><div class="line">&#123;</div><div class="line">4mutex_enter(&amp;table-&gt;autoinc_mutex);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span><span class="comment"><span class="markdown">/**</span></span></div><div class="line">Unconditionally set the<span class="markdown"> autoinc counter. */</span></div><div class="line">UNIV_INTERN</div><div class="line"><span class="keyword">void</span></div><div class="line">dict_table_autoinc_initialize(</div><div class="line"><span class="comment">/*==========================*/</span></div><div class="line">4dict_table_t*	table,	<span class="comment">/*!&lt; in/out: table */</span></div><div class="line">4ib_uint64_t	value)	<span class="comment">/*!&lt; in: next value to assign to a row */</span></div><div class="line">&#123;</div><div class="line">4ut_ad(mutex_own(&amp;table-&gt;autoinc_mutex));</div><div class="line"></div><div class="line">4table-&gt;autoinc = value;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>最后在微信上找周彦伟大神问问，在快要放弃的时候，从 innodb_lock_waits 中锁等待之间关系，一层一层挖，终于找到了一条这样的sql:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">"<span class="keyword">INSERT</span> <span class="keyword">INTO</span> mydb1.t_mytable_inc ( f_log_id, f_fff_id, ..., f_from, f_sendmsg )</div><div class="line">    <span class="keyword">SELECT</span> <span class="number">2021712366</span>, <span class="number">507019984</span>, ..., <span class="number">10</span>, <span class="number">0</span> <span class="keyword">from</span> dual<span class="string">"</span></div></pre></td></tr></table></figure></p>
<p>瞬间就明(ma)白(niang)了。典型的 <code>INSERT ... SELECT ...</code>， 但是 select 子句带的全是常量，但是对 innodb 来说它还是认为“这是 bulk inserts，我无法预估插入行数”，所以使用表级锁的自增方式。当时同时有 22 个这样的插入，可能负载也确实比较高导致活跃事务里主键最小的那一条一直处于 <em>query end</em> 状态，后面简单insert也需要等这个 语句 结束，直到释放 AUTO-INC table lock，以致引起雪崩效应。</p>
<p>之所以一直没发现这条语句，是因为 processlist 太长了，而且格式不友好。快照抓取程序这块还可以优化。</p>
<p>最后解决其实非常容易：</p>
<ol>
<li>既然已经有自增id服务，直接把把主键上的 AUTO_INCREMENT 定义去掉</li>
<li>整改这种 insert … select … 的sql。维护时可以，但开发账号要杜绝</li>
<li>周大神说他们用的是 mode 2 模式。也不失为一种方法</li>
</ol>
<h3 id="load-data-为什么没阻塞其它事务"><a href="#load-data-为什么没阻塞其它事务" class="headerlink" title="load data 为什么没阻塞其它事务"></a>load data 为什么没阻塞其它事务</h3><p>这是一个同行网友请教我的：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-autoinc-loaddata.png" alt=""></p>
<p>上篇讲到，load data infile 由于innodb无法提前知道插入的行数，所以归为 bulk inserts —— 表自增方式升级为表级锁，这样一来其它会话里的 insert岂不应该是会被阻塞，为什么实验结果却没有阻塞。</p>
<p>当然一开始我也觉得奇怪，但是仔细想一下就知道，这个表级锁是一个特殊的表锁，为了提高并发性，它是在 <strong>语句</strong> 结束就释放了（而不是事务结束），那么只要验证 LOAD DATA 是把文件里面的行记录，拼装成单个insert就行了，这样其它会话的插入就可以在交错获得表级自增锁，实现不阻塞插入：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-autoinc-loaddata-binlog.png" alt=""></p>
<p><del>~上图我是为了看效果，临时设置 <code>log_bin=&#39;statement&#39;</code>，看到 <code>LOAD DATA INFILE</code> 会把文件转换成 <em>一个</em> 事务包含的 <em>多行</em> insert，于是就说得通了。</del>~ @jin 多谢指正。</p>
<p>上图 row 模式下 的binlog，看到 BEGIN … COMMIT 之间包含了 多行 insert。（注：在 statement 模式下，binlog里面记录的是 LOAD DATA 语句，从库会把文件从主库传输过来，再执行）</p>
<p>温馨提示：  </p>
<ol>
<li>如果load data 的文件自带主键值，那么另一个会话获取的自增值很容易产生重复。</li>
<li>stackexchange上有个关于 <a href="http://dba.stackexchange.com/questions/40400/loading-data-in-mysql-using-load-data-infile-replication-safe" target="_blank" rel="external">load data infile 对复制安全性的讨论</a> ，同意二楼的观点，官方文档里说的 unsafe，并不是说执行这样的语句会导致安全问题，而是 considered unsafe，在 row-based 可用的情况下，优化器会自动把binlog记录为 row ，依然是安全的。</li>
</ol>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2017/02/17/mysql-autoincrement_2/">http://seanlook.com/2017/02/17/mysql-autoincrement_2/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于MySQL自增主键的几点问题（上）]]></title>
      <url>http://seanlook.com/2017/02/16/mysql-autoincrement/</url>
      <content type="html"><![CDATA[<p>前段时间遇到一个InnoDB表自增锁导致的问题，最近刚好有一个同行网友也问到自增锁的疑问，所以抽空系统的总结一下，这两个问题下篇会有阐述。</p>
<h2 id="1-划分三种插入类型"><a href="#1-划分三种插入类型" class="headerlink" title="1. 划分三种插入类型"></a>1. 划分三种插入类型</h2><p>这里区分一下几种插入数据行的类型，便于后面描述：（纯逻辑上的划分）</p>
<ol>
<li><p>“Simple inserts”<br>简单插入，就是在处理sql语句的时候，能够提前预估到插入的行数，包括 <code>INSERT</code> / <code>REPLACE</code> 的单行、多行插入，但不含嵌套子查询以及 <code>INSERT ... ON DUPLICATE KEY UPDATE</code>。</p>
</li>
<li><p>“Bulk inserts”<br>本文暂且叫做 大块插入，不能提前预知语句要插入的行数，也就无法知道分配多少个自增值，包括 <code>INSERT ... SELECT</code>, <code>REPLACE ... SELECT</code>, 以及 <code>LOAD DATA</code> 导入语句。InnoDB会每处理一行记录就为 AUTO_INCREMENT 列分配一个值。</p>
</li>
<li><p>“Mixed-mode inserts”<br>混合插入，比如在 “简单插入” 多行记录的时候，有的新行有指定自增值，有的没有，所以获得最坏情况下需要插入的数量，然后一次性分配足够的auto_increment id。比如:</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># <span class="selector-tag">c1</span> 是 <span class="selector-tag">t1</span> 的 <span class="selector-tag">AUTO_INCREMENT</span> 列</div><div class="line"><span class="selector-tag">INSERT</span> <span class="selector-tag">INTO</span> <span class="selector-tag">t1</span> (c1,c2) <span class="selector-tag">VALUES</span> (<span class="number">1</span>,<span class="string">'a'</span>), (NULL,<span class="string">'b'</span>), (<span class="number">5</span>,<span class="string">'c'</span>), (NULL,<span class="string">'d'</span>);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>又比如 <code>INSERT ... ON DUPLICATE KEY UPDATE</code>，它在 update 阶段有可能分配新的自增id，也可能不会。</p>
<h2 id="2-三种自增模式：innodb-autoinc-lock-mode"><a href="#2-三种自增模式：innodb-autoinc-lock-mode" class="headerlink" title="2. 三种自增模式：innodb_autoinc_lock_mode"></a>2. 三种自增模式：<code>innodb_autoinc_lock_mode</code></h2><p>在以 5.6 版本，自增id累加模式分为：</p>
<ul>
<li><p><strong> 传统模式</strong><br>traditional，<code>innodb_autoinc_lock_mode = 0</code><br>在具有 AUTO_INCREMENT 的表上，所有插入语句会获取一个特殊的表级锁 <em>AUTO-INC</em> ，这个表锁是在语句结束之后立即释放（无需等到事务结束），它可以保证在一个insert里面的多行记录连续递增，也能保证多个insert并发情况下自增值是连续的（不会有空洞）。</p>
</li>
<li><p><strong> 连续模式 </strong><br>consecutive，<code>innodb_autoinc_lock_mode = 1</code><br>MySQL 5.1.22开始，InnoDB提供了一种轻量级互斥的自增实现机制，在内存中会有一个互斥量（mutex），每次分配自增长ID时，就通过估算插入的数量（前提是必须能够估算到插入的数量，否则还是使用传统模式），然后更新mutex，下一个线程过来时从新 mutex 开始继续计算，这样就能避免传统模式非要等待每个都插入之后才能获取下一个，把“锁”降级到 只在分配id的时候 锁定互斥量。<br>在 <code>innodb_autoinc_lock_mode = 1</code>（默认） 模式下，“简单插入”采用上面的 mutex 方式，“大块插入”（insert/replace … select … 、load data…）依旧采用 AUTO-INC 表级锁方式。当然如果一个事务里已经持有表 AUTO-INC 锁，那么后续的简单插入也需要等待这个 AUTO-INC 锁释放。这能够保证任意insert并发情况下自增值是连续的。</p>
<a id="more"></a></li>
<li><p><strong> 交叉模式 </strong><br>interleaved，<code>innodb_autoinc_lock_mode = 2</code><br>该模式下所有 INSERT SQL 都不会有表级 AUTO-INC 锁，多个 <strong>语句</strong> 可以同时执行，所以在高并发插入场景下性能会好一些。但是当 binlog 采用 SBR 格式时，对于从库重放日志或者主库实例恢复时，并不可靠。<br>另者，它只能保证自增值在 insert语句级别 （单调）递增，所以多个insert可能会交叉着分配id，最终可能导致多个语句之间的id值不连续，这种情况出现在 混合插入：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 (c1,c2) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">'a'</span>), (<span class="literal">NULL</span>,<span class="string">'b'</span>), (<span class="number">5</span>,<span class="string">'c'</span>), (<span class="literal">NULL</span>,<span class="string">'d'</span>);</div></pre></td></tr></table></figure>
<p>mutex 会按行分配4个id，但实际只用到2个，因此出现空洞。</p>
</li>
</ul>
<h2 id="3-自增空洞（auto-increment-sequence-gap）"><a href="#3-自增空洞（auto-increment-sequence-gap）" class="headerlink" title="3. 自增空洞（auto-increment sequence gap）"></a>3. 自增空洞（auto-increment sequence gap）</h2><p>关于 AUTO_INCREMENT 自增出现空洞的问题，有必要再说明一下。</p>
<ol>
<li><p>在 0, 1, 2 三种任何模式下，如果事务回滚，那么里面获得自增值的sql回滚，但产生的自增值会一起丢失，不可能重新分配给其它insert语句。这也会产生空洞。</p>
</li>
<li><p>在大块插入情景下</p>
<ul>
<li><code>innodb_autoinc_lock_mode</code>为 0 或 1 时，因为 AUTO-INC 锁会持续到语句结束，同一时间只有一个 语句 在表上执行，所以自增值是连续的（其它事务需要等待），不会有空洞；</li>
<li><code>innodb_autoinc_lock_mode</code>为 2 时，两个 “大块插入” 之间可能会有空洞，因为每条语句事先无法预知精确的数量而导致分配过多的id，可能有空洞。</li>
</ul>
</li>
</ol>
<h2 id="4-混合插入对-AUTO-INCREMENT-的影响"><a href="#4-混合插入对-AUTO-INCREMENT-的影响" class="headerlink" title="4. 混合插入对 AUTO_INCREMENT 的影响"></a>4. 混合插入对 AUTO_INCREMENT 的影响</h2><p>混合插入在 innodb_autoinc_lock_mode 不同模式下会有对 表自增值有不同的表现。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE t1 (</div><div class="line">  c1 INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,</div><div class="line">  c2 CHAR(1)</div><div class="line">  ) ENGINE=INNODB;</div><div class="line"></div><div class="line">ALTER TABLE t1 AUTO_INCREMENT 101;</div><div class="line"></div><div class="line"></div><div class="line">mysql&gt; SHOW CREATE TABLE t1\G</div><div class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">** 1. row **</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span></div><div class="line"><span class="code">       Table: t1</span></div><div class="line">Create Table: CREATE TABLE <span class="code">`t1`</span> (</div><div class="line">  <span class="code">`c1`</span> int(10) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  <span class="code">`c2`</span> char(1) DEFAULT NULL,</div><div class="line">  PRIMARY KEY (<span class="code">`c1`</span>)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=101 DEFAULT CHARSET=utf8</div></pre></td></tr></table></figure></p>
<h3 id="1-mode-0"><a href="#1-mode-0" class="headerlink" title="1. mode 0"></a>1. mode 0</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; select @@innodb_autoinc_lock_mode;</span></div><div class="line">+----------------------------+</div><div class="line"><span class="section">| @@innodb_autoinc_lock_mode |</span></div><div class="line">+----------------------------+</div><div class="line"><span class="section">|                          0 |</span></div><div class="line">+----------------------------+</div><div class="line"></div><div class="line">mysql&gt; INSERT INTO t1 (c1,c2) VALUES (1,<span class="emphasis">'a'</span>), (NULL,<span class="emphasis">'b'</span>), (5,<span class="emphasis">'c'</span>), (NULL,<span class="emphasis">'d'</span>);</div><div class="line"><span class="section">mysql&gt; select * from t1;</span></div><div class="line">+-----+------+</div><div class="line"><span class="section">| c1  | c2   |</span></div><div class="line">+-----+------+</div><div class="line">|   1 | a    |</div><div class="line">|   5 | c    |</div><div class="line">| 101 | b    |</div><div class="line"><span class="section">| 102 | d    |</span></div><div class="line">+-----+------+</div><div class="line"></div><div class="line">mysql&gt; show create table t1\G</div><div class="line"><span class="bullet">...</span></div><div class="line">) ENGINE=InnoDB AUTO<span class="emphasis">_INCREMENT=103 DEFAULT CHARSET=utf8</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>可以看到下一个自增值是 103 ，因为即使这是 <strong> 一条 </strong> insert语句（多行记录），自增值还是每次分配一个，不会在语句开始前一次分配全。</p>
<h3 id="2-mode-1"><a href="#2-mode-1" class="headerlink" title="2. mode 1"></a>2. mode 1</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">mysql&gt; truncate table t1; ALTER TABLE t1 AUTO<span class="emphasis">_INCREMENT 101;  -- 复原</span></div><div class="line">mysql&gt; select @@innodb_autoinc<span class="emphasis">_lock_</span>mode;</div><div class="line"><span class="code">+----------------------------+</span></div><div class="line"><span class="section">| @@innodb_autoinc_lock_mode |</span></div><div class="line">+----------------------------+</div><div class="line"><span class="section">|                          1 |</span></div><div class="line">+----------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; INSERT INTO t1 (c1,c2) VALUES (1,<span class="emphasis">'a'</span>), (NULL,<span class="emphasis">'b'</span>), (5,<span class="emphasis">'c'</span>), (NULL,<span class="emphasis">'d'</span>);</div><div class="line">Query OK, 4 rows affected (0.00 sec)</div><div class="line">Records: 4  Duplicates: 0  Warnings: 0</div><div class="line"></div><div class="line"><span class="section">mysql&gt; select * from t1;</span></div><div class="line">+-----+------+</div><div class="line"><span class="section">| c1  | c2   |</span></div><div class="line">+-----+------+</div><div class="line">|   1 | a    |</div><div class="line">|   5 | c    |</div><div class="line">| 101 | b    |</div><div class="line"><span class="section">| 102 | d    |</span></div><div class="line">+-----+------+</div><div class="line"></div><div class="line">mysql&gt; show create table t1\G</div><div class="line"><span class="bullet">...</span></div><div class="line">) ENGINE=InnoDB AUTO<span class="emphasis">_INCREMENT=105 DEFAULT CHARSET=utf8</span></div></pre></td></tr></table></figure>
<p>可以看到最终插入的值是一样的，但下一个自增值变成了 105，因为该模式下insert语句处理的时候，提前分配了 4 个自增值，但实际只有了两个。</p>
<p>注：如果你的insert自增列全都有带值，那么处理的时候是不会分配自增值的，经过下面这个实验，可以知道 <strong> 分配自增值，是在遇到第一个没有带自增列的行时，一次性分配的 </strong> ：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">-- </span>Tx1，先运行。 -- 插入第2行的时候 sleep 5s</div><div class="line">INSERT INTO t1 (c1,c2) VALUES (2,<span class="emphasis">'e'</span>),(sleep(5)+6,<span class="emphasis">'g'</span>),(NULL,<span class="emphasis">'f'</span>), (NULL,<span class="emphasis">'h'</span>);</div><div class="line"></div><div class="line"><span class="bullet">-- </span>Tx2，后运行。 -- 第一行没有给自增列值，马上分配 4 个</div><div class="line">INSERT INTO t1 (c1,c2) VALUES  (NULL,<span class="emphasis">'b'</span>), (1,<span class="emphasis">'a'</span>), (sleep(5)+5,<span class="emphasis">'c'</span>), (NULL,<span class="emphasis">'d'</span>);</div><div class="line"></div><div class="line"><span class="section">-- 得到的结果是</span></div><div class="line">+-----+------+</div><div class="line"><span class="section">| c1  | c2   |</span></div><div class="line">+-----+------+</div><div class="line">|   1 | a    |</div><div class="line">|   2 | e    |</div><div class="line">|   5 | c    |</div><div class="line">|   6 | g    |</div><div class="line">| 101 | b    |</div><div class="line">| 102 | d    |</div><div class="line">| 105 | f    |</div><div class="line"><span class="section">| 106 | h    |</span></div><div class="line">+-----+------+</div></pre></td></tr></table></figure></p>
<h3 id="3-mode-2"><a href="#3-mode-2" class="headerlink" title="3. mode 2"></a>3. mode 2</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">mysql&gt; truncate table t1; ALTER TABLE t1 AUTO<span class="emphasis">_INCREMENT 101;  -- 复原</span></div><div class="line">mysql&gt; select @@innodb_autoinc<span class="emphasis">_lock_</span>mode;</div><div class="line"><span class="code">+----------------------------+</span></div><div class="line"><span class="section">| @@innodb_autoinc_lock_mode |</span></div><div class="line">+----------------------------+</div><div class="line"><span class="section">|                          2 |</span></div><div class="line">+----------------------------+</div><div class="line"></div><div class="line">mysql&gt; INSERT INTO t1 (c1,c2) VALUES (1,<span class="emphasis">'a'</span>), (NULL,<span class="emphasis">'b'</span>), (5,<span class="emphasis">'c'</span>), (NULL,<span class="emphasis">'d'</span>);</div><div class="line"><span class="section">mysql&gt; select * from t1;</span></div><div class="line">+-----+------+</div><div class="line"><span class="section">| c1  | c2   |</span></div><div class="line">+-----+------+</div><div class="line">|   1 | a    |</div><div class="line">|   5 | c    |</div><div class="line">| 101 | b    |</div><div class="line"><span class="section">| 102 | d    |</span></div><div class="line">+-----+------+</div><div class="line"></div><div class="line">mysql&gt; show create table t1\G</div><div class="line"><span class="bullet">...</span></div><div class="line">) ENGINE=InnoDB AUTO<span class="emphasis">_INCREMENT=105 DEFAULT CHARSET=utf8</span></div></pre></td></tr></table></figure>
<p>结果看起来与 连续模式 一样，其实不然！该模式下，如果另外一个 大块插入 并发执行时，可能会出现以下现象：</p>
<ol>
<li>大块插入的的自增值有间断</li>
<li>其它并发执行的事务插入出现 duplicate-key error</li>
</ol>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">第<span class="number">1</span>点 (create t2 select * <span class="keyword">from</span> t1)</div><div class="line">Tx1: insert <span class="keyword">into</span> t1(c2) select c2 <span class="keyword">from</span> t2；  -- 先执行</div><div class="line">Tx2: INSERT <span class="keyword">INTO</span> t1 (c1,c2) VALUES (<span class="number">1</span>,<span class="string">'a'</span>), (<span class="keyword">NULL</span>,<span class="string">'b'</span>), (<span class="number">5</span>,<span class="string">'c'</span>), (<span class="keyword">NULL</span>,<span class="string">'d'</span>);  -- 后 并发执行</div><div class="line"></div><div class="line">在交叉模式下，Tx1事务插入的数据行会与 Tx1 交叉出现。</div><div class="line">注：如果 Tx1 改成 insert <span class="keyword">into</span> t1 select * <span class="keyword">from</span> t2 ，那么 Tx2 执行极有可能会报 duplicate-key error，与下面第<span class="number">2</span>点所说的重复键是不一样的</div><div class="line"></div><div class="line">第<span class="number">2</span>点</div><div class="line">mysql&gt; truncate table t1; ALTER TABLE t1 AUTO_INCREMENT <span class="number">5</span>;  -- 复原</div><div class="line">mysql&gt; INSERT <span class="keyword">INTO</span> t1 (c1,c2) VALUES (<span class="number">1</span>,<span class="string">'a'</span>), (<span class="keyword">NULL</span>,<span class="string">'b'</span>), (<span class="number">5</span>,<span class="string">'c'</span>), (<span class="keyword">NULL</span>,<span class="string">'d'</span>);</div><div class="line">ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">'5'</span> <span class="keyword">for</span> key <span class="string">'PRIMARY'</span></div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面说了这么多，那么自增模式到底该怎么选择呢？其实很简单，目前数据库默认的 traditional 即 <code>innodb_autoinc_lock_mode=1</code> 就是最好的模式，一般业务生产库不会有 <code>insert into ... select ...</code>或者 load data infile 这样的维护动作。（提示：即使晚上有数据迁移任务，也不要通过这样的形式进行）</p>
<p><code>innodb_autoinc_lock_mode=2</code> 可以提高获取表自增id的并发能力（性能），但是除非出现上面演示的 duplicate-key 特殊用法情形，不会像网上所说的获取到相同key导致重复的问题。但是如果binlog在 RBR 格式下不建议使用，可能出现主从数据不一致。还有就是能够容忍gap的存在，以及多个语句insert的自增值交叉。</p>
<p>参考： <a href="https://dev.mysql.com/doc/refman/5.6/en/innodb-auto-increment-handling.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/en/innodb-auto-increment-handling.html</a></p>
<p>下篇分析遇到过的 MySQL 自增主键相关的具体问题。</p>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2017/02/16/mysql-autoincrement/">http://seanlook.com/2017/02/16/mysql-autoincrement/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[监控MySQL你还应该收集表信息]]></title>
      <url>http://seanlook.com/2016/12/04/mysql-schema-gather-statistics/</url>
      <content type="html"><![CDATA[<h2 id="1-Story"><a href="#1-Story" class="headerlink" title="1. Story"></a>1. Story</h2><p>也许你经常会被问到，库里某个表最近一年的内每个月的数据量增长情况。当然如果你有按月分表比较好办，挨个 <code>show table status</code>，如果只有一个大表，那估计要在大家都休息的时候，寂寞的夜里去跑sql统计了，因为你只能获取当前的表信息，历史信息追查不到了。</p>
<p>除此以外，作为DBA本身也要对数据库空间增长情况进行预估，用以规划容量。我们说的表信息主要包括：</p>
<ol>
<li>表数据大小（DATA_LENGTH）</li>
<li>索引大小(INDEX_LENGTH)</li>
<li>行数（ROWS）</li>
<li>当前自增值（AUTO_INCREMENT，如果有）</li>
</ol>
<p>目前是没有看到哪个mysql监控工具上提供这样的指标。这些信息不需要采集的太频繁，而且结果也只是个预估值，不一定准确，所以这是站在一个全局、长远的角度去监控(采集)表的。</p>
<p>本文要介绍的自己写的采集工具，是基于组内现有的一套监控体系：</p>
<ul>
<li><code>InfluxDB</code>：时间序列数据库，存储监控数据</li>
<li><code>Grafana</code>：数据展示面板</li>
<li><code>Telegraf</code>：收集信息的agent<br>看了下 telegraf 的最新的 <a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/mysql" target="_blank" rel="external">mysql 插件</a>，一开始很欣慰：支持收集 Table schema statistics 和 Info schema auto increment columns。试用了一下，有数据，但是如前面所说，除了自增值外其他都是预估值，telegraf收集频率过高没啥意义，也许一天2次就足够了，它提供的 <code>IntervalSlow</code>选项固定写死在代码里，只能是放缓 global status 监控频率。不过倒是可以与其它监控指标分开成两份配置文件，各自定义收集间隔来实现。<br>最后打算自己用python撸一个，上报到influxdb里 :)</li>
</ul>
<h2 id="2-Concept"><a href="#2-Concept" class="headerlink" title="2. Concept"></a>2. Concept</h2><p>完整代码见 GitHub项目地址：<a href="https://github.com/seanlook/DBschema_gather" target="_blank" rel="external">DBschema_gather</a><br>实现也特别简单，就是查询 <code>information_schema</code> 库的 <code>COLUMNS</code>、<code>TABLES</code> 两个表：<br><a id="more"></a><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">    <span class="keyword">IFNULL</span>(@@hostname, @@server_id) SERVER_NAME,</div><div class="line">    %s <span class="keyword">as</span> HOST,</div><div class="line">    t.TABLE_SCHEMA,</div><div class="line">    t.TABLE_NAME,</div><div class="line">    t.TABLE_ROWS,</div><div class="line">    t.DATA_LENGTH,</div><div class="line">    t.INDEX_LENGTH,</div><div class="line">    t.AUTO_INCREMENT,</div><div class="line">  c.COLUMN_NAME,</div><div class="line">  c.DATA_TYPE,</div><div class="line">  <span class="keyword">LOCATE</span>(<span class="string">'unsigned'</span>, c.COLUMN_TYPE) COL_UNSIGNED</div><div class="line">  # <span class="keyword">CONCAT</span>(c.DATA_TYPE, <span class="keyword">IF</span>(<span class="keyword">LOCATE</span>(<span class="string">'unsigned'</span>, c.COLUMN_TYPE)=<span class="number">0</span>, <span class="string">''</span>, <span class="string">'_unsigned'</span>))</div><div class="line"><span class="keyword">FROM</span></div><div class="line">    information_schema.<span class="string">`TABLES`</span> t</div><div class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> information_schema.<span class="string">`COLUMNS`</span> c <span class="keyword">ON</span> t.TABLE_SCHEMA = c.TABLE_SCHEMA</div><div class="line"><span class="keyword">AND</span> t.TABLE_NAME = c.TABLE_NAME</div><div class="line"><span class="keyword">AND</span> c.EXTRA = <span class="string">'auto_increment'</span></div><div class="line"><span class="keyword">WHERE</span></div><div class="line">    t.TABLE_SCHEMA <span class="keyword">NOT</span> <span class="keyword">IN</span> (</div><div class="line">        <span class="string">'mysql'</span>,</div><div class="line">        <span class="string">'information_schema'</span>,</div><div class="line">        <span class="string">'performance_schema'</span>,</div><div class="line">        <span class="string">'sys'</span></div><div class="line">    )</div><div class="line"><span class="keyword">AND</span> t.TABLE_TYPE = <span class="string">'BASE TABLE'</span></div></pre></td></tr></table></figure></p>
<p>关于 <code>auto_increment</code>，我们除了关注当前增长到哪了，还会在意相比 <code>int / bigint</code> 的最大值，还有多少可用空间。于是计算了 <code>autoIncrUsage</code> 这一列，用于保存当前已使用的比例。</p>
<p>然后使用 InfluxDB 的python客户端，批量存入influxdb。如果没有InfluxDB，结果会打印出json —— 这是Zabbix、Open-Falcon这些监控工具普遍支持的格式。</p>
<p>最后就是使用 Grafana 从 influxdb 数据源画图。</p>
<h2 id="3-Usage"><a href="#3-Usage" class="headerlink" title="3. Usage"></a>3. Usage</h2><ol>
<li><p>环境<br>在 python 2.7 环境下编写的，2.6，3.x没测。<br>运行需要<code>MySQLdb</code>、<code>influxdb</code>两个库：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo pip <span class="keyword">install</span> mysql-python influxdb</div></pre></td></tr></table></figure>
</li>
<li><p>配置<br><code>settings_dbs.py</code> 配置文件</p>
<ul>
<li><code>DBLIST_INFO</code>：列表存放需要采集的哪些MySQL实例表信息，元组内分别是连接地址、端口、用户名、密码<br>用户需要select表的权限，否则看不到对应的信息.</li>
<li><code>InfluxDB_INFO</code>：influxdb的连接信息，注意提前创建好数据库名 <code>mysql_info</code><br>设置为 <code>None</code> 可输出结果为json.</li>
</ul>
</li>
<li><p>创建influxdb上的数据库和存储策略<br>存放2年，1个复制集：（按需调整）</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="string">"mysql_info"</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">RETENTION</span> <span class="keyword">POLICY</span> <span class="string">"mysql_info_schema"</span> <span class="keyword">ON</span> <span class="string">"mysql_info"</span> <span class="keyword">DURATION</span> <span class="number">730</span>d <span class="keyword">REPLICATION</span> <span class="number">1</span> <span class="keyword">DEFAULT</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>看大的信息类似于：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-schema-statistics.png" alt="schema-influxdb-data"></p>
<ol>
<li><p>放crontab跑<br>可以单独放在用于监控的服务器上，不过建议在生产环境可以运行在mysql实例所在主机上，安全起见。<br>一般库在晚上会有数据迁移的动作，可以在迁移前后分别运行 <code>mysql_schema_info.py</code> 来收集一次。不建议太频繁。</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">40 </span><span class="number">23</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">18</span> * * * /opt/DBschema_info/mysql_schema_info.py &gt;&gt; /tmp/collect_DBschema_info.<span class="keyword">log</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span></div></pre></td></tr></table></figure>
</li>
<li><p>生成图表</p>
</li>
</ol>
<p>导入项目下的 <code>grafana_table_stats.json</code> 到 Grafana面板中。效果如下：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-schema-statistics2.png" alt="表数据大小和行数"><br><em>表数据大小和行数</em></p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-schema-statistics3.png" alt="每天行数变化增量,auto_increment使用率"><br><em>每天行数变化增量,auto_increment使用率</em></p>
<h2 id="4-More"><a href="#4-More" class="headerlink" title="4. More"></a>4. More</h2><ol>
<li>分库分表情况下，全局唯一ID在表里无法计算 autoIncrUsage  </li>
<li>实现上其实很简单，更主要的是唤醒收集这些信息的意识  </li>
<li>可以增加 Graphite 输出格式  </li>
</ol>
<hr>
<p>  原文链接地址：<a href="http://seanlook.com/2016/12/04/mysql-schema-gather-statistics/">http://seanlook.com/2016/12/04/mysql-schema-gather-statistics/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一种直观记录表结构变更历史的方法]]></title>
      <url>http://seanlook.com/2016/11/28/mysql-schema-gather-structure/</url>
      <content type="html"><![CDATA[<h2 id="1-Story"><a href="#1-Story" class="headerlink" title="1. Story"></a>1. Story</h2><p>在没有形成自己的数据库管理平台以前，数据库实例一多（包括生产和测试环境），许多表要执行DDL会变得异常繁杂。</p>
<p>说个自己的经历，需要改现网的一个索引来看优化的效果，因为存在风险，不会一次全改，先只改1个库，然后逐步放开。前后验证效果可能花上一两周的时间，除非实现完整的记录了当时的ddl语句和对应的库，否则根本难以记得。这就完全依赖于个人的习惯及能力。</p>
<p>又比如现网出了个问题，开发追查到一个时间点，想确认那个时候有没有对库表进行过更改操作，如果没有记录表结构变更的历史，也就难以提供需要的信息。</p>
<p>记录差异，很早就思考过能不能用git来做。终于花了一天时间来实现，并验证、修改达到预期的效果，还算满意。</p>
<p>github项目地址在文后。</p>
<h2 id="2-Concept"><a href="#2-Concept" class="headerlink" title="2. Concept"></a>2. Concept</h2><p>思路很简单，就是利用 <code>mydumper</code> 导出表时会把各表（结构）单独导成一个文件的特性，每天低峰期导出所有对象元数据：表、视图、存储过程、事件、触发器。需要过滤掉 <code>AUTO_INCREMENT</code> 值。</p>
<p>结构内容存放在一个git仓库下，通过shell脚本提交到 gitlab。所有DDL更改由原来依赖于DBA的主动记录，变成被动采集。</p>
<p>测试环境和生产环境表结构总会有些差异，为了兼顾同时收集两个环境的数据，设置了 <code>environment</code> 选项，根据当前所在运行的机器，自动判断采集哪些实例信息。</p>
<h2 id="3-Usage"><a href="#3-Usage" class="headerlink" title="3. Usage"></a>3. Usage</h2><p>首先你需要能够存放表结构信息的git仓库，如gitlab，而且建议设置为私有。<br><a id="more"></a></p>
<ol>
<li><p>安装 git 和 mydumper<br>mydumper 0.9.1 版本需要编译安装，可以参考这里 <a href="https://gist.github.com/nicksantamaria/66726bca586d152a3a01#file-mydumper-install-ubuntu14-04-sh" target="_blank" rel="external">file-mydumper-install-ubuntu14-04-sh</a>。当然 yum 或 apt-get 安装其他版本也是一样的。<br>脚本会尝试自动获取 <code>mydumper</code> 命令的路径。<br>注意配置git权限的时候，最好不允许其它用户手动提交修改仓库内容。</p>
</li>
<li><p>配置db实例地址<br><code>settings.ini</code>示例：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="section">[environment]</span></div><div class="line"><span class="attr">production</span>=puppetmaster</div><div class="line"><span class="attr">test</span>=puppettestmaster</div><div class="line"><span class="section"></span></div><div class="line">[production]</div><div class="line"><span class="attr">production_auth</span>=your_defaultuser:yourpassword</div><div class="line"></div><div class="line"><span class="attr">db_name1</span>=<span class="number">192.168</span>.<span class="number">1.100</span>:<span class="number">3306</span></div><div class="line"><span class="attr">db_name2</span>=<span class="number">192.168</span>.<span class="number">1.101</span>:<span class="number">3306</span></div><div class="line"><span class="attr">db_name3</span>=name3.dbhost.com:<span class="number">3306</span></div><div class="line"><span class="attr">db_name4</span>=<span class="number">192.168</span>.<span class="number">1.100</span>:<span class="number">3306</span>:myuser:mypassword</div><div class="line"><span class="section"></span></div><div class="line">[test]</div><div class="line"><span class="attr">test_auth</span>=user1:password1</div><div class="line"></div><div class="line"><span class="attr">db_name1</span>=<span class="number">10.0</span>.<span class="number">100.1</span>:<span class="number">3306</span></div><div class="line"><span class="attr">db_name2</span>=<span class="number">10.0</span>.<span class="number">100.1</span>:<span class="number">3307</span></div><div class="line"><span class="attr">db_name3</span>=<span class="number">10.0</span>.<span class="number">100.2</span>:<span class="number">3306</span></div><div class="line"></div><div class="line"><span class="attr">db_name4</span>=<span class="number">10.0</span>.<span class="number">100.3</span>:<span class="number">3306</span>:myuser1:mypassword1</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>上面的配置采集 <code>production</code>和<code>test</code>两个环境的表结构，识别两个环境是根据 hostname 来决定的。这样做的好吃就是这个脚本在两个环境下运行不需要做任何修改。  </li>
<li><code>[production]</code>节的名字就是 <code>[environment]</code>节指定的名字 <em>production=xx</em>  </li>
<li><code>dbname1=</code>就是配置各个db，地址+端口的形式。用户名和密码可以继续用 <code>:</code> 跟上</li>
<li><code>production_auth=</code>表示 production 环境下，如 <code>dbname1</code>没有配置用户名时，默认采用这个用户名和密码。这样设计主要是简化配置。<br>该数据库用户需要 select,show view,event,trigger,procedure 权限。<br><code>settings_parser.py</code> 用于解析上面的配置文件，输出<code>collect_tableMeta.sh</code>易处理的格式。</li>
</ul>
<ol>
<li><p>每天运行<br>可使用 <code>python settings_parser.py</code> 测试解析配置是否正常。<br>在配置文件里两个环境下（一般网络不互通）分别加上定时任务：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># Puppet Name: collect_DBschema</span></div><div class="line"><span class="number">5</span> <span class="number">5</span> * * * <span class="meta-keyword">/opt/</span>DBschema/collect_tableMeta.sh &gt;&gt; <span class="meta-keyword">/tmp/</span>collect_DBschema.log <span class="number">2</span>&gt;<span class="variable">&amp;1</span></div></pre></td></tr></table></figure>
</li>
<li><p>展示效果<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-schema-structure1.png" alt="mysql_schema_info"><br><code>A</code> 是新增，<code>M</code> 是修改，<code>D</code> 是删除，一目了然。点开可以前后对比。</p>
</li>
</ol>
<h2 id="4-More"><a href="#4-More" class="headerlink" title="4. More"></a>4. More</h2><p>思路和实现都不难，主要是意识，和如何快速找到解决当前需求的办法。一切都是为了效率 :)</p>
<p>目前所能想到更多的：  </p>
<ol>
<li>有内容push到git仓库后，使用 web hook 发出邮件。  </li>
<li>根据A,B两个表的结构，快速得到A修改成B的样子的DDL。  </li>
<li>event 权限问题。event权限没有所谓的读和修改之分，阿里云RDS就把它从 <em>只读</em> 账号里拿除了，导致收集不到事件定义。所以它的高权限账号管理模式还是很有作用的。  </li>
<li>密码明文。<br>最近公司邀请了一个安全公司给做培训，数据库安全里面，密码明文配置在文件里面是广泛存在的，难搞。</li>
</ol>
<p>GitHub地址：<a href="https://github.com/seanlook/DBschema_gather" target="_blank" rel="external">https://github.com/seanlook/DBschema_gather</a></p>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/11/28/mysql-schema-gather-structure/">http://seanlook.com/2016/11/28/mysql-schema-gather-structure/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL非主从环境下数据一致性校验及修复程序]]></title>
      <url>http://seanlook.com/2016/11/20/py-mysql-table-checksum-non-replicas/</url>
      <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>项目地址：<a href="https://github.com/seanlook/px-table-checksum" target="_blank" rel="external">https://github.com/seanlook/px-table-checksum</a></p>
<p>主从环境下数据一致性校验经常会用 pt-table-checksum 工具，它的原理及实施过程之前写过一篇文章：<a href="http://seanlook.com/2015/12/29/mysql_replica_pt-table-checksum/">生产环境使用 pt-table-checksum 检查MySQL数据一致性</a>。但是DBA工作中还会有些针对两个表检查是否一致，而这两个表之间并没有主从关系，pt工具是基于binlog把在主库进行的检查动作，在从库重放一遍，此时就不适用了。</p>
<p>总会有这样特殊的需求，比如从阿里云RDS实例迁移到自建mysql实例，它的数据传输服务实现方式是基于表的批量数据提取，加上binlog订阅，但强制row模式会导致pt-table-checksum没有权限把会话临时改成statement。另一种需求是，整库进行字符集转换：库表定义都是utf8，但应用连接使用了默认的 latin1，要将连接字符集和表字符集统一起来，只能以latin1导出数据，再以utf8导入，这种情况数据一致性校验，且不说binlog解析程序不支持statement（如canal），新旧库本身内容不同，pt-table-checksum 算出的校验值也会不一样，失效。</p>
<p>所以才萌生了参考 pt-table-checksum 自己写了一个：px-table-checksum 。</p>
<h2 id="2-实现方法"><a href="#2-实现方法" class="headerlink" title="2. 实现方法"></a>2. 实现方法</h2><p>整体思路是借鉴pt-table-checksum，从源库批量（即chunk）取出一块数据如1000行，计算CRC32值，同样的语句在目标库运行一遍，结果都存入另一个库，最后检查对应编号的chunk crc值是否一致。知道不一致还不行，得能否快速方便的修复差异，所以继续根据那些不一致的chunk，去目标库和源库找到不一致的行，是缺失，还是多余，还是被修改了，然后生成修复sql，根据指示是否自动修复。</p>
<p>那么问题就在于：</p>
<ol>
<li><p>如何确定批次，也就是下一个chunk该怎么取？<br>我还没想做到pt-table-checksum那样，可以根据负载动态调整chunk大小，甚至活跃线程数超过阀值就暂停检查，上来工作量就太大了。目前每次计算的chunk的行数是固定的，可以配置1000或2000等。<br>所以就要用到分页查询，根据（自增或联合）主键、唯一索引，每次limit 1000后升序取最后一条，作为下一批的起始。所以要分析表上的键情况，组合查询条件。目前仅能检查有主键或唯一所以的表。</p>
</li>
<li><p>如何保证源库和目标库，运行的sql一样？<br>之前一版是目标库和源库，以多线程各自计算chunk，入库，后来才意识到严重的bug：比如同样是取1000行，如果目标库少数据，那么下一个chunk起始就不一样，比较的结果简直一塌糊涂。<br>所以必须保证相同编号的chunk，起点必须相同，所以想到用队列，存放在源库跑过的所有校验sql，模拟pt工具在目标库重放。考虑到要多线程同时比较多个表，队列可能吃内存过大，于是使用了redis队列。</p>
</li>
<li><p>直接在数据库中计算crc32，还是取出数据在内存里计算？<br>翻了pt-table-checksum的源码，它是在数据库里计算的。但是第一节里说过，如果目标库和源库要使用不同的字符集才能读出正确的数据，只能查询出来之后再比较。所以 px-table-checksum 两种都支持，只需指定一个配置项。</p>
</li>
<li><p>同时检查多个表，源库sql挤在队列，目标库拿出来执行时过了1s，此时源库那条数据又被修改了一次同步到了目标库，会导致计算结果不一致，实则一致，怎么处理<br>无法处理，是px-table-checksum相比pt-table-checksum最大的缺陷。<br>但为了尽可能减少此类问题（比如主从延迟也可能会），特意设计了多个redis队列，目标库多个检查线程，即比如同时指定检查8个表，源库检查会有8个线程对应，但可以根据表的写入情况，配置4个redis队列（目前是随机入列），10个目标库检查线程，来减少不准确因素。<br>但站在我的角度往往来说，不一致的数据会被记录下来，如果不多，人工核对一下；如果较多，就再跑一遍检查，如果两次都有同一条数据不一致，那就有情况了。</p>
</li>
</ol>
<h2 id="3-限制"><a href="#3-限制" class="headerlink" title="3. 限制"></a>3. 限制</h2><ol>
<li>如果检查期间源表数据，变化频繁，有可能检查的结果不准确<br>也就是上面第4点的问题。很明显，这个程序每个检查的事务是分开的，不像pt工具能严格保证每条检查sql的事务顺序。但有不一致的数据再排查一下就ok了。实际在我线上使用过程中，99.9%是准确的。<a id="more"></a></li>
<li><p>表上必须有主键或唯一索引<br>程序会检查，如果没有会退出。</p>
</li>
<li><p>varbinay,blob等二进制字段不支持修复<br>其实也不是完全不支持，要看怎么用的。开发如果有把字符先转成字节，再存入mysql，这种就不支持修复。是有办法可以处理，那就是从源库查时用 <code>hex()</code>函数，修复sql里面<code>unhex()</code>写回去。</p>
</li>
</ol>
<h2 id="4-使用说明"><a href="#4-使用说明" class="headerlink" title="4. 使用说明"></a>4. 使用说明</h2><p>该python程序基于2.7开发，2.6、3.x上没有测试。使用前需要安装 <code>MySQLdb</code>和<code>hotqueue</code>：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo pip <span class="keyword">install</span> MySQL-python hotqueue</div></pre></td></tr></table></figure></p>
<p>要比较的表和选项，使用全配置化，即不通过命令行的方式指定（原谅命令行参数使用方式会额外增加代码量）。</p>
<h3 id="4-1-px-table-checksum-py"><a href="#4-1-px-table-checksum-py" class="headerlink" title="4.1 px-table-checksum.py"></a>4.1 <code>px-table-checksum.py</code></h3><p>主程序，运行<code>python px-table-checksum.py</code> 执行一致性检查，但一定了解下面的配置文件选项。</p>
<h3 id="4-2-settings-checksum-py"><a href="#4-2-settings-checksum-py" class="headerlink" title="4.2 settings_checksum.py"></a>4.2 <code>settings_checksum.py</code></h3><p>配置选项</p>
<ul>
<li><code>CHUNK_SIZE</code>: 每次提取的chunk行数</li>
<li><code>REDIS_INFO</code>: 指定使用redis队列地址</li>
<li><code>REDIS_QUEUE_CNT</code>: redis队列数量，消费者（目标库）有一一对应的线程守着队列</li>
<li><code>REDIS_POOL_CNT</code>: 生产者（源库）redis客户端连接池。这个设计是为了缓解GIL带来的问题，把入列端与出列端分开，因为如果表多可能短时间有大量sql入队列，避免hotqueue争用</li>
<li><p><code>CALC_CRC32_DB</code>: True 表示在db里面计算checksum值，False表示取出chunk数据在python里面计算。默认给的值是根据连接字符集定的。</p>
</li>
<li><p><code>DO_COMPARE</code>: 运行模式</p>
<ul>
<li>0: 只提取数据计算，不比较是否一致。可以在之后在模式2下只比较</li>
<li>1: 计算，并比较。常用，每次计算之前会删除上一次这个待检查表的结果，比较的结果只告诉哪些chunk号不一致。</li>
<li>2: 不计算，只从t_checkum结果比较。常用，计算是消耗数据库资源的，可以只对已有的checksum计算结果比较不一致的地方。类似pt工具的<code>--replicate-check-only</code>选项。</li>
</ul>
</li>
<li><code>GEN_DATAFIX</code>:<br>与<code>DO_COMPARE</code>结合使用，为 True 表示对不一致的chunk找到具体不一致行，并生成修复sql；为 False 则什么都不做。</li>
<li><p><code>RUN_DATAFIX</code>:<br>与<code>GEN_DATAFIX</code>结合使用，为 True 表示对生成的修复sql，在目标库执行。需要谨慎，如果哪一次设置了修复，记得完成后改回False，不然下次检查另一个表就出意外了，所以特意对这个选项再加了一个确认提示。</p>
</li>
<li><p><code>DB_CHECKSUM</code>: 一个字典，指定checksum的结果存到哪里<br>配置文件有示例，必须指定 <code>db_name</code>，表会自动创建。</p>
</li>
</ul>
<h3 id="4-3-settings-cs-tables-py"><a href="#4-3-settings-cs-tables-py" class="headerlink" title="4.3 settings_cs_tables.py"></a>4.3 <code>settings_cs_tables.py</code></h3><p>上面的配置文件可以认为是用于控制程序的，这个配置文件是指定要校验的源库和目标库信息，以及要检验哪些表。</p>
<ul>
<li><code>TABLES_CHECK</code>: 字典，指定要检查哪些表的一致性，db名为key，多个table名组成列表为value。暂不支持对整个db做检查，同时比较的表数量不建议超过8个</li>
<li><code>DB_SOURCE</code>: 字典，指定源库的连接信息</li>
<li><code>DB_SOURCE</code>: 字典，指定目标库的连接信息</li>
</ul>
<h2 id="5-示例："><a href="#5-示例：" class="headerlink" title="5. 示例："></a>5. 示例：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">Starting <span class="keyword">checksum</span> <span class="keyword">thread</span> <span class="keyword">for</span> <span class="keyword">table</span>: db1.t_test_201308 (<span class="number">192.168</span><span class="number">.1</span><span class="number">.122</span>:<span class="number">3306</span>)</div><div class="line"><span class="keyword">Before</span> <span class="keyword">checksum</span>: <span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> t_checksum</div><div class="line"><span class="keyword">Before</span> <span class="keyword">checksum</span>: delele <span class="keyword">old</span> <span class="keyword">data</span> <span class="keyword">from</span> t_checksum <span class="keyword">if</span> <span class="keyword">exists</span> <span class="keyword">for</span> <span class="keyword">table</span>:  db1.t_test_201308</div><div class="line">Caculate <span class="keyword">crc32</span> <span class="keyword">in</span> program instead <span class="keyword">of</span> db.(this program need more <span class="keyword">memory</span> <span class="keyword">and</span> more db net traffic, but <span class="keyword">convert</span> <span class="keyword">charset</span>)</div><div class="line">Caculating checksums:  <span class="number">192.168</span><span class="number">.1</span><span class="number">.122</span>:<span class="number">3306</span> db1.t_test_201308</div><div class="line">TARGET: (<span class="string">'192.168.1.121:3306'</span>, <span class="string">'t_test_201308'</span>, <span class="number">1</span>, <span class="string">'db1'</span>, <span class="string">'0'</span>, u<span class="string">'1495969'</span>, <span class="number">451060506</span>)</div><div class="line">TARGET: (<span class="string">'192.168.1.121:3306'</span>, <span class="string">'t_test_201308'</span>, <span class="number">2</span>, <span class="string">'db1'</span>, u<span class="string">'1495969'</span>, u<span class="string">'1502593'</span>, <span class="number">-678155635</span>)</div><div class="line">...</div><div class="line"><span class="keyword">Starting</span> <span class="keyword">checksum</span> <span class="keyword">thread</span> <span class="keyword">for</span> <span class="keyword">table</span>: db1.t_test_201408 (<span class="number">192.168</span><span class="number">.1</span><span class="number">.122</span>:<span class="number">3306</span>)</div><div class="line"><span class="keyword">Before</span> <span class="keyword">checksum</span>: delele <span class="keyword">old</span> <span class="keyword">data</span> <span class="keyword">from</span> t_checksum <span class="keyword">if</span> <span class="keyword">exists</span> <span class="keyword">for</span> <span class="keyword">table</span>:  db1.t_test_201408</div><div class="line">Caculate <span class="keyword">crc32</span> <span class="keyword">in</span> program instead <span class="keyword">of</span> db.(this program need more <span class="keyword">memory</span> <span class="keyword">and</span> more db net traffic, but <span class="keyword">convert</span> <span class="keyword">charset</span>)</div><div class="line">Caculating checksums:  <span class="number">192.168</span><span class="number">.1</span><span class="number">.122</span>:<span class="number">3306</span> db1.t_test_201408</div><div class="line">TARGET: (<span class="string">'192.168.1.121:3306'</span>, <span class="string">'t_test_201408'</span>TARGET: (<span class="string">'192.168.1.121:3306'</span>, <span class="string">'t_test_201408'</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="string">'db1'</span>, u<span class="string">'3836877'</span>, u<span class="string">'3845812'</span>, , <span class="string">'db1'</span>, u<span class="string">'3845812'</span><span class="number">373759054</span>)</div><div class="line">...</div><div class="line">源实例 <span class="number">192.168</span><span class="number">.1</span><span class="number">.122</span>:<span class="number">3306</span> db1.t_test_201308  计算<span class="keyword">checksum</span>结束！</div><div class="line">db conection closed.</div><div class="line"><span class="keyword">Checksum</span> <span class="keyword">thread</span> ended <span class="keyword">for</span> <span class="keyword">table</span>: db1.t_test_201308 (<span class="number">192.168</span><span class="number">.1</span><span class="number">.122</span>:<span class="number">3306</span>)</div><div class="line">...</div><div class="line">源实例 <span class="number">192.168</span><span class="number">.1</span><span class="number">.122</span>:<span class="number">3306</span> db1.t_test_201408  计算<span class="keyword">checksum</span>结束！</div><div class="line">消费<span class="keyword">sql</span> <span class="number">0</span> 退出！！</div><div class="line">消费<span class="keyword">sql</span> <span class="number">-1</span> 退出！！</div><div class="line"></div><div class="line">################################################################################</div><div class="line"><span class="keyword">Start</span> compare <span class="keyword">chunk</span><span class="string">'s crc32 for table: [ db1.t_test_201308 ]</span></div><div class="line">表 db1.t_test_201308 数据一致</div><div class="line"></div><div class="line">################################################################################</div><div class="line">################################################################################</div><div class="line">Start compare chunk's <span class="keyword">crc32</span> <span class="keyword">for</span> <span class="keyword">table</span>: [ db1.t_test_201408 ]</div><div class="line">表 db1.t_test_201408 数据不一致<span class="keyword">chunk</span>数：<span class="number">10</span></div><div class="line"><span class="comment">--------------------------------------------------------------------------------</span></div><div class="line"></div><div class="line">该<span class="keyword">chunk</span> [<span class="number">1</span>] 存在行内容不一致, <span class="keyword">CRC32</span>: src(<span class="number">828649697</span>) rgt(<span class="number">-1396224393</span>)</div><div class="line">去源库和目标库获取<span class="keyword">chunk</span>[<span class="number">1</span>]不一致行：</div><div class="line">  <span class="keyword">TO</span> <span class="keyword">insert</span> <span class="keyword">or</span> <span class="keyword">update</span>:  [u<span class="string">'3761994'</span>]</div><div class="line">  <span class="keyword">TO</span> <span class="keyword">delete</span>:  []</div><div class="line"></div><div class="line">该<span class="keyword">chunk</span> [<span class="number">5</span>] 存在行内容不一致, <span class="keyword">CRC32</span>: src(<span class="number">1513453680</span>) rgt(<span class="number">-1614463460</span>)</div><div class="line">去源库和目标库获取<span class="keyword">chunk</span>[<span class="number">5</span>]不一致行：</div><div class="line">  <span class="keyword">TO</span> <span class="keyword">insert</span> <span class="keyword">or</span> <span class="keyword">update</span>:  [u<span class="string">'3806841'</span>]</div><div class="line">  <span class="keyword">TO</span> <span class="keyword">delete</span>:  []</div></pre></td></tr></table></figure>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/11/20/py-mysql-table-checksum-non-replicas/">http://seanlook.com/2016/11/20/py-mysql-table-checksum-non-replicas/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[让mysqldump变成并发导出导入的魔法]]></title>
      <url>http://seanlook.com/2016/11/17/python-mysqldump-out-in-concurrency-magic/</url>
      <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>取名mypumpkin，是python封装的一个让mysqldump以多线程的方式导出库表，再以mysql命令多线程导入新库，用于成倍加快导出，特别是导入的速度。这一切只需要在 mysqldump 或 mysql 命令前面加上 <code>mypumpkin.py</code> 即可，所以称作魔法。</p>
<p><strong>项目地址</strong>：<a href="https://github.com/seanlook/mypumpkin" target="_blank" rel="external">https://github.com/seanlook/mypumpkin</a>  </p>
<p>该程序源于需要对现网单库几百G的数据进行转移到新库，并对中间进行一些特殊操作（如字符集转换），无法容忍mysqldump导入速度。有人可能会提到为什么不用 mydumper，其实也尝试过它但还是放弃了，原因有：</p>
<ol>
<li>不能设置字符集<br>mydumper强制使用 binary 方式来连接库以达到不关心备份恢复时的字符集问题，然而我的场景下需要特意以不同的字符集导出、再导入。写这个程序的时候正好在公众号看到网易有推送的一篇文章 (<a href="http://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&amp;mid=2650756926&amp;idx=1&amp;sn=b8081a8ae9456a6051d1ba519febee54&amp;chksm=f3f9e2abc48e6bbd5912edb4e6207ff6ec5bf7123fedbf10b5c65a43146af22845dbf0787b39&amp;scene=0#wechat_redirect" target="_blank" rel="external">解密网易MySQL实例迁移高效完成背后的黑科技</a>)，提到他们对mydumper的改进已支持字符集设置，可是在0.9.1版本的patch里还是没找到。</li>
<li>没有像 mysqldump 那样灵活控制过滤选项（导哪些表、忽略哪些表）<br>因为数据量之巨大，而且将近70%是不变更的历史表数据，这些表是可以提前导出转换的；又有少量单表大于50G的，最好是分库导出转换。mydumper 不具备 mysqldump 这样的灵活性</li>
<li>对忽略导出gtid信息、触发器等其它支持<br>阿里云rds 5.6 导出必须要设置 set-gtid-purged=OFF</li>
</ol>
<p>另外有人还可能提到 mysqlpump —— 它才是我认为mysqldump应该具有的模样，语法兼容，基于表的并发导出。但是只有 mysql服务端 5.7.9 以上才支持，这就是现实和理想的距离。。。</p>
<h2 id="2-实现方法"><a href="#2-实现方法" class="headerlink" title="2. 实现方法"></a>2. 实现方法</h2><p>首先说明，mysqldump的导出速度并不慢，经测试能达到50M/s的速度，10G数据花费3分钟的样子，可以看到瓶颈在于网络和磁盘IO，再怎样的导出工具也快不了多少，但是导入却花了60分钟，磁盘和网络大概只用到了20%，瓶颈在目标库写入速度（而一般顺序写入达不到IOPS限制），所以mypumpkin就诞生了 —— 兼顾myloader的导入速度和mysqldump导出的灵活性。</p>
<a id="more"></a>
<p>用python构造1个队列，将需要导出的所有表一次放到队列中，同时启动N个python线程，各自从这个Queue里取出表名，subprocess调用操作系统的mysqldump命令，导出数据到以 dbname.tablename.sql 命名的文件中。load in 与 dump out 类似，根据指定的库名或表名，从dump_dir目录找到所有sql文件，压进队列，N个线程同时调用mysql构造新的命令，模拟 <code>&lt;</code> 操作。</p>
<p>参数解析从原来自己解析，到改用argparse模块，几乎做了一次重构。<br>对于没有指定<code>--tables</code>的情况，程序会主动去库里查询一下所有表名，然后过滤进队列。</p>
<p>load in目标库，选项做到与dump out一样丰富，可以指定导入哪些db、哪些表、忽略哪些表。</p>
<p>其中的重点是做到与原mysqldump兼容，因为需要对与表有关的选项（<code>-B</code>, <code>-A</code>, <code>--tables</code>, <code>--ignore=</code>），进行分析并组合成新的执行命令，考虑的异常情况非常多。</p>
<h2 id="3-限制"><a href="#3-限制" class="headerlink" title="3. 限制"></a>3. 限制</h2><ol>
<li><strong>重要</strong>：导出的数据不保证库级别的一致性<ol>
<li>对历史不变表，是不影响的</li>
<li>具体到一个表能保证一致性，这是mysqldump本身采用哪些选项决定的</li>
<li>不同表导出动作在不同的mysqldump命令中，无法保证事务。<br>在我的案例场景下，是有开发同学辅助使用一套binlog解析程序，等完成后重放所有变更，来保证最终一致性。<br>另，许多情况下我们导数据，并不需要完整的或者一致的数据，只是用于离线分析或临时导出，重点是快速拿数据给到开发。</li>
</ol>
</li>
<li>不寻常选项识别<br>程序已经尽力做到与mysqldump命令兼容，只需要加上 mypumpkin.py、指定dump-dir，就完成并发魔法，但有些情况的参数不方便解析，暂不支持格式：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">db1</span> table1 table2</div><div class="line">db2 db3</div></pre></td></tr></table></figure>
</li>
</ol>
<p>即以上无法在命令行下判断 db1、table1 是库名还是表面，用的时候只需记住“[-A|-B], [–tables], [–ignore-table]”三组，必须出现一个：<code>db1 table1 table2</code>改成<code>db1 --tables table1 table2</code>，<code>db2</code>改成<code>-B db2 db3</code>。</p>
<ol>
<li>密码暂只能显式输入</li>
</ol>
<h2 id="4-使用说明"><a href="#4-使用说明" class="headerlink" title="4. 使用说明"></a>4. 使用说明</h2><p>安装基于python 2.7 开发，其它版本没测。需要按 MySQLdb 库。</p>
<h3 id="4-1-help"><a href="#4-1-help" class="headerlink" title="4.1 help"></a>4.1 help</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">./mypumpkin.py --<span class="keyword">help</span></div><div class="line">Only mysqldump or mysql allowed after mypumpkin.py</div><div class="line"></div><div class="line">usage: mypumpkin.py &#123;mysqldump|mysqls&#125; [--<span class="keyword">help</span>]</div><div class="line"></div><div class="line">This's a <span class="keyword">program</span> that wrap mysqldump/mysql to make them dump-<span class="keyword">out</span>/load-<span class="keyword">in</span></div><div class="line">concurrently. Attention: it can not <span class="keyword">keep</span> consistent <span class="keyword">for</span> whole database(s).</div><div class="line"></div><div class="line">optional arguments:</div><div class="line">  --<span class="keyword">help</span>                show this <span class="keyword">help</span> message and <span class="keyword">exit</span></div><div class="line">  -B db1 [db1 ...], --databases db1 [db1 ...]</div><div class="line">                        Dump <span class="keyword">one</span> or <span class="keyword">more</span> databases</div><div class="line">  -A, --all-databases   Dump all databases</div><div class="line">  --tables t1 [t1 ...]  Specifiy tables to dump. Override --databases (-B)</div><div class="line">  --ignore-<span class="keyword">table</span> db1.table1 [db1.table1 ...]</div><div class="line">                        <span class="keyword">Do</span> not dump the specified <span class="keyword">table</span>. (<span class="keyword">format</span> like</div><div class="line">                        --ignore-<span class="keyword">table</span>=dbname.tablename). <span class="keyword">Use</span> the directive</div><div class="line">                        multiple times <span class="keyword">for</span> <span class="keyword">more</span> than <span class="keyword">one</span> <span class="keyword">table</span> to ignore.</div><div class="line">  --threads =<span class="keyword">N</span>          Threads to dump <span class="keyword">out</span> [2], or load <span class="keyword">in</span> [CPUs*2].</div><div class="line">  --dump-<span class="keyword">dir</span> DUMP_DIR   Required. Directory to dump <span class="keyword">out</span> (create <span class="keyword">if</span> not exist),</div><div class="line">                        Or Where to load <span class="keyword">in</span> sqlfile</div><div class="line"></div><div class="line">At least <span class="keyword">one</span> of these 3 group options given: [-A,-B] [--tables] [--ignore-<span class="keyword">table</span>]</div></pre></td></tr></table></figure>
<ul>
<li><code>--dump-dir</code>，必选项，原来用的shell标准输入输出 <code>&gt; or &lt;</code> 不允许使用。dump-dir指定目录不存在时会尝试自动创建。</li>
<li><code>--threads=N</code>，N指定并发导出或导入线程数。dump out 默认线程数2， mypumpkin load in 默认线程数是 cpu个数 * 2。<br>注：线程数不是越大越好，这里主要的衡量指标是网络带宽、磁盘IO、目标库IOPS，最好用 dstat 观察一下。</li>
<li><code>-B</code>, <code>--tables</code>，<code>--ignore-table</code>，使用与mysqldump相同，如：  <ol>
<li>在mysqldump里面，<code>--tables</code>会覆盖<code>--databases/-B</code>选项</li>
<li>在mysqldump里面，<code>--tables</code>与<code>--ignore-table</code>不能同时出现</li>
<li>在mysqldump里面，如果没有指定<code>-B</code>，则<code>--tables</code>或<code>--ignore-table</code>必须紧跟db名之后</li>
</ol>
</li>
<li>其它选项，mypumpkin会原封不动的保留下来，放到shell去执行。所以如果其它选项有错误，检查是交给原生mysqldump去做的，执行过程遇到一个失败则会退出线程。</li>
</ul>
<h3 id="4-2-example"><a href="#4-2-example" class="headerlink" title="4.2 example"></a>4.2 example</h3><p>导出：<br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## 导出源库所有db到visit_dumpdir2目录 （不包括information_schema和performance_schema）</span></div><div class="line">$ ./<span class="string">mypumpkin.</span><span class="string">py </span><span class="string">mysqldump </span>-h <span class="string">dbhost_name </span>-<span class="string">utest_user </span>-<span class="string">pyourpassword </span>-<span class="string">P3306 </span>\</div><div class="line"> <span class="built_in">--single-transaction</span> <span class="built_in">--opt</span> -A <span class="built_in">--dump-dir</span> <span class="string">visit_dumpdir2</span></div><div class="line"></div><div class="line"><span class="comment">## 导出源库db1,db2，会从原库查询所有表名来过滤</span></div><div class="line">$ ./<span class="string">mypumpkin.</span><span class="string">py </span><span class="string">mysqldump </span>-h <span class="string">dbhost_name </span>-<span class="string">utest_user </span>-<span class="string">pyourpassword </span>-<span class="string">P3306 </span>\</div><div class="line"> <span class="built_in">--single-transaction</span> <span class="built_in">--opt</span> -B <span class="string">db1 </span><span class="string">db2 </span><span class="built_in">--dump-dir</span> <span class="string">visit_dumpdir2</span></div><div class="line"></div><div class="line"><span class="comment">## 只导出db1库的t1,t2表，如果指定表不存在则有提示</span></div><div class="line">$ ./<span class="string">mypumpkin.</span><span class="string">py </span><span class="string">mysqldump </span>-h <span class="string">dbhost_name </span>-<span class="string">utest_user </span>-<span class="string">pyourpassword </span>-<span class="string">P3306 </span>\</div><div class="line"> <span class="built_in">--single-transaction</span> <span class="built_in">--opt</span> -B <span class="string">db1 </span><span class="built_in">--tables</span> <span class="string">t1 </span><span class="string">t2 </span><span class="built_in">--dump-dir</span> <span class="string">visit_dumpdir2</span></div><div class="line"></div><div class="line"><span class="comment">## 导出db1,db2库，但忽略 db1.t1, db2.t2, db2.t3表</span></div><div class="line"><span class="comment">## mysqldump只支持--ignore-table=db1.t1这种，使用多个重复指令来指定多表。这里做了兼容扩展</span></div><div class="line">$ ./<span class="string">mypumpkin.</span><span class="string">py </span><span class="string">mysqldump </span>-h <span class="string">dbhost_name </span>-<span class="string">utest_user </span>-<span class="string">pyourpassword </span><span class="built_in">--single-transaction</span> \</div><div class="line"> <span class="built_in">--opt</span> -B <span class="string">db1 </span><span class="string">db2 </span><span class="built_in">--ignore-table=db1.t1</span> <span class="built_in">--ignore-table</span> <span class="string">db2.</span><span class="string">t2 </span><span class="string">db2.</span><span class="string">t3 </span><span class="built_in">--dump-dir</span> <span class="string">visit_dumpdir2 </span>(如果-A表示全部<span class="string">db)</span></div><div class="line"></div><div class="line"><span class="comment">## 不带 -A/-B</span></div><div class="line">$ ./<span class="string">mypumpkin.</span><span class="string">py </span><span class="string">mysqldump </span>-h <span class="string">dbhost_name </span>-<span class="string">utest_user </span>-<span class="string">pyourpassword </span>-<span class="string">P3306 </span>\</div><div class="line"> <span class="built_in">--single-transaction</span> <span class="built_in">--opt</span> <span class="string">db1 </span><span class="built_in">--ignore-table=db1.t1</span> <span class="built_in">--dump-dir=visit_dumpdir2</span></div><div class="line"></div><div class="line"><span class="comment">## 其它选项不做处理</span></div><div class="line">$ ./<span class="string">mypumpkin.</span><span class="string">py </span><span class="string">mysqldump </span>-h <span class="string">dbhost_name </span>-<span class="string">utest_user </span>-<span class="string">pyourpassword </span>-<span class="string">P3306 </span>\</div><div class="line"> <span class="built_in">--single-transaction</span> <span class="built_in">--set-gtid-purged=OFF</span> <span class="built_in">--no-set-names</span> <span class="built_in">--skip-add-locks</span> -e -q -t -n <span class="built_in">--skip-triggers</span> \</div><div class="line"> <span class="built_in">--max-allowed-packet=134217728</span> <span class="built_in">--net-buffer-length=1638400</span> <span class="built_in">--default-character-set=latin1</span> \</div><div class="line"> <span class="built_in">--insert-ignore</span> <span class="built_in">--hex-blob</span> <span class="built_in">--no-autocommit</span> \</div><div class="line"> <span class="string">db1 </span><span class="built_in">--tables</span> <span class="string">t1 </span><span class="built_in">--dump-dir</span> <span class="string">visit_dumpdir2</span></div></pre></td></tr></table></figure></p>
<p>导入：<br><code>-A</code>, <code>-B</code>, <code>--tables</code>, <code>--ignore-table</code>, <code>--threads</code>, <code>--dump-dir</code>用法与作用与上面完全相同，举部分例子：</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## 导入dump-dir目录下所有表</span></div><div class="line">$ ./<span class="string">mypumpkin.</span><span class="string">py </span><span class="string">mysql </span>-h <span class="string">dbhost_name </span>-<span class="string">utest_user </span>-<span class="string">pyourpassword </span><span class="built_in">--port</span> <span class="string">3307 </span>-A \</div><div class="line"> <span class="built_in">--dump-dir=visit_dumpdir2</span></div><div class="line"></div><div class="line"><span class="comment">## 导入db1库（所有表）</span></div><div class="line">$ ./<span class="string">mypumpkin.</span><span class="string">py </span><span class="string">mysql </span>-h <span class="string">dbhost_name </span>-<span class="string">utest_user </span>-<span class="string">pyourpassword </span><span class="built_in">--port</span> <span class="string">3307 </span>-B <span class="string">db1 </span>\</div><div class="line"> <span class="built_in">--dump-dir=visit_dumpdir2</span></div><div class="line"></div><div class="line"><span class="comment">## 只导入db.t1表</span></div><div class="line">$ ./<span class="string">mypumpkin.</span><span class="string">py </span><span class="string">mysql </span>-h <span class="string">dbhost_name </span>-<span class="string">utest_user </span>-<span class="string">pyourpassword </span><span class="built_in">--port</span> <span class="string">3307 </span>\</div><div class="line"> <span class="built_in">--default-character-set=utf8mb4</span> <span class="built_in">--max-allowed-packet=134217728</span> <span class="built_in">--net-buffer-length=1638400</span> \</div><div class="line"> -B <span class="string">db1 </span><span class="built_in">--tables</span> <span class="string">t1 </span><span class="built_in">--dump-dir=visit_dumpdir2</span></div><div class="line"></div><div class="line"><span class="comment">## 导入db1,db2库，但忽略db1.t1表（会到dump-dir目录检查db1,db2有无对应的表存在，不在目标库检查）</span></div><div class="line">$ ./<span class="string">mypumpkin.</span><span class="string">py </span><span class="string">mysql </span>-h <span class="string">dbhost_name </span>-<span class="string">utest_user </span>-<span class="string">pyourpassword </span><span class="built_in">--port</span> <span class="string">3307 </span>\</div><div class="line"> -B <span class="string">db1 </span><span class="string">db2 </span><span class="built_in">--ignore-table=db1.t1</span> <span class="built_in">--dump-dir=visit_dumpdir2</span></div></pre></td></tr></table></figure>
<h2 id="5-速度对比"><a href="#5-速度对比" class="headerlink" title="5.速度对比"></a>5.速度对比</h2><hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/11/17/python-mysqldump-out-in-concurrency-magic/">http://seanlook.com/2016/11/17/python-mysqldump-out-in-concurrency-magic/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql使用utf8mb4经验吐血总结]]></title>
      <url>http://seanlook.com/2016/10/23/mysql-utf8mb4/</url>
      <content type="html"><![CDATA[<h2 id="1-utf8-与-utf8mb4-异同"><a href="#1-utf8-与-utf8mb4-异同" class="headerlink" title="1. utf8 与 utf8mb4 异同"></a>1. utf8 与 utf8mb4 异同</h2><p>先看 官方手册 <a href="https://dev.mysql.com/doc/refman/5.6/en/charset-unicode-utf8mb4.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/en/charset-unicode-utf8mb4.html</a> 的说明：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">The character <span class="keyword">set</span> named utf8 uses a maximum <span class="keyword">of</span> three <span class="keyword">bytes</span> per <span class="built_in">character</span> <span class="keyword">and</span> contains <span class="keyword">only</span> BMP characters. The utf8mb4 <span class="built_in">character</span> <span class="keyword">set</span> uses a maximum <span class="keyword">of</span> four <span class="keyword">bytes</span> per <span class="built_in">character</span> supports supplementary <span class="keyword">characters</span>:</div><div class="line"></div><div class="line">- <span class="keyword">For</span> a BMP <span class="built_in">character</span>, utf8 <span class="keyword">and</span> utf8mb4 have identical <span class="keyword">storage</span> characteristics: same code <span class="keyword">values</span>, same <span class="keyword">encoding</span>, same length.</div><div class="line">- <span class="keyword">For</span> a supplementary <span class="built_in">character</span>, utf8 cannot <span class="keyword">store</span> the <span class="built_in">character</span> <span class="keyword">at</span> all, whereas utf8mb4 requires four <span class="keyword">bytes</span> <span class="keyword">to</span> <span class="keyword">store</span> it. Because utf8 cannot <span class="keyword">store</span> the <span class="built_in">character</span> <span class="keyword">at</span> all, you have <span class="keyword">no</span> supplementary <span class="keyword">characters</span> <span class="keyword">in</span> utf8 <span class="keyword">columns</span> <span class="keyword">and</span> need <span class="keyword">not</span> worry about converting <span class="keyword">characters</span> <span class="keyword">or</span> losing <span class="keyword">data</span> <span class="keyword">when</span> upgrading utf8 <span class="keyword">data</span> <span class="keyword">from</span> older <span class="keyword">versions</span> <span class="keyword">of</span> MySQL.</div></pre></td></tr></table></figure></p>
<p>MySQL在 5.5.3 之后增加了 <code>utf8mb4</code> 字符编码，mb4即 most bytes 4。简单说 utf8mb4 是 utf8 的超集并完全兼容utf8，能够用四个字节存储更多的字符。</p>
<p>但抛开数据库，标准的 UTF-8 字符集编码是可以用 1~4 个字节去编码21位字符，这几乎包含了是世界上所有能看见的语言了。然而在MySQL里实现的utf8最长使用3个字节，也就是只支持到了 Unicode 中的 <a href="https://zh.wikipedia.org/wiki/Unicode%E5%AD%97%E7%AC%A6%E5%B9%B3%E9%9D%A2%E6%98%A0%E5%B0%84" target="_blank" rel="external">基本多文本平面</a>（U+0000至U+FFFF），包含了控制符、拉丁文，中、日、韩等绝大多数国际字符，但并不是所有，最常见的就算现在手机端常用的表情字符 emoji和一些不常用的汉字，如 “墅” ，这些需要四个字节才能编码出来。</p>
<p>注：QQ里面的内置的表情不算，它是通过特殊映射到的一个gif图片。一般输入法自带的就是。</p>
<p>也就是当你的数据库里要求能够存入这些表情或宽字符时，可以把字段定义为 utf8mb4，同时要注意连接字符集也要设置为utf8mb4，否则在 <a href="http://seanlook.com/2016/04/22/mysql-sql-mode-troubleshooting/">严格模式</a> 下会出现 <code>Incorrect string value: /xF0/xA1/x8B/xBE/xE5/xA2… for column &#39;name&#39;</code>这样的错误，非严格模式下此后的数据会被截断。</p>
<p>提示：另外一种能够存储emoji的方式是，不关心数据库表字符集，只要连接字符集使用 latin1，但相信我，你绝对不想这个干，一是这种字符集混用管理极不规范，二是存储空间被放大（读者可以想下为什么）。</p>
<h2 id="2-utf8mb4-unicode-ci-与-utf8mb4-general-ci-如何选择"><a href="#2-utf8mb4-unicode-ci-与-utf8mb4-general-ci-如何选择" class="headerlink" title="2. utf8mb4_unicode_ci 与 utf8mb4_general_ci 如何选择"></a>2. utf8mb4_unicode_ci 与 utf8mb4_general_ci 如何选择</h2><p>字符除了需要存储，还需要排序或比较大小，涉及到与编码字符集对应的 排序字符集（collation）。ut8mb4对应的排序字符集常用的有 <code>utf8mb4_unicode_ci</code>、<code>utf8mb4_general_ci</code>，到底采用哪个在 stackoverflow 上有个讨论，<a href="http://stackoverflow.com/questions/766809/whats-the-difference-between-utf8-general-ci-and-utf8-unicode-ci" target="_blank" rel="external">What’s the difference between utf8_general_ci and utf8_unicode_ci</a></p>
<p>主要从排序准确性和性能两方面看：</p>
<ul>
<li>准确性<br><code>utf8mb4_unicode_ci</code> 是基于标准的Unicode来排序和比较，能够在各种语言之间精确排序<br><code>utf8mb4_general_ci</code> 没有实现Unicode排序规则，在遇到某些特殊语言或字符是，排序结果可能不是所期望的。<br><strong>但是在绝大多数情况下，这种特殊字符的顺序一定要那么精确吗</strong>。比如Unicode把<code>ß</code>、<code>Œ</code>当成<code>ss</code>和<code>OE</code>来看；而general会把它们当成<code>s</code>、<code>e</code>，再如<code>ÀÁÅåāă</code>各自都与 <code>A</code> 相等。</li>
<li>性能<br><code>utf8mb4_general_ci</code> 在比较和排序的时候更快<br><code>utf8mb4_unicode_ci</code> 在特殊情况下，Unicode排序规则为了能够处理特殊字符的情况，实现了略微复杂的排序算法。<br><strong>但是在绝大多数情况下，不会发生此类复杂比较</strong>。general理论上比Unicode可能快些，但相比现在的CPU来说，它远远不足以成为考虑性能的因素，索引涉及、SQL设计才是。<a id="more"></a>
我个人推荐是 <code>utf8mb4_unicode_ci</code>，将来 8.0 里也极有可能使用变为默认的规则。</li>
</ul>
<p>这也从另一个角度告诉我们，不要可能产生乱码的字段作为主键或唯一索引。我遇到过一例，以 url 来作为唯一索引，但是它记录的有可能是乱码，导致后来想把它们修复就特别麻烦。</p>
<h2 id="3-怎么从utf8转换为utf8mb4"><a href="#3-怎么从utf8转换为utf8mb4" class="headerlink" title="3. 怎么从utf8转换为utf8mb4"></a>3. 怎么从utf8转换为utf8mb4</h2><h3 id="3-1-“伪”转换"><a href="#3-1-“伪”转换" class="headerlink" title="3.1 “伪”转换"></a>3.1 “伪”转换</h3><p>如果你的表定义和连接字符集都是utf8，那么直接在你的表上执行<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4;</div></pre></td></tr></table></figure></p>
<p>则能够该表上所有的列的character类型变成 utf8mb4，表定义的默认字符集也会修改。连接的时候需要使用<code>set names utf8mb4</code>便可以插入四字节字符。（如果依然使用 utf8 连接，只要不出现四字节字符则完全没问题）。</p>
<p>上面的 convert 有两个问题，一是它不能ONLINE，也就是执行之后全表禁止修改，有关这方面的讨论见 <a href="http://seanlook.com/2016/05/24/mysql-online-ddl-concept/">mysql 5.6 原生Online DDL解析</a>；二是，它可能会自动该表字段类型定义，如 <a href="http://dev.mysql.com/doc/refman/5.7/en/alter-table.html" target="_blank" rel="external">VARCHAR 被转成 MEDIUMTEXT</a>，可以通过 MODIFY 指定类型为原类型。</p>
<p>另外 <code>ALTER TABLE tbl_name  DEFAULT CHARACTER SET utf8mb4</code> 这样的语句就不要随便执行了，特别是当表原本不是utf8时，除非表是空的或者你确认表里只有拉丁字符，否则正常和乱的就混在一起了。</p>
<p><strong>最重要的是</strong>，你连接时使用的latin1字符集写入了历史数据，表定义是latin1或utf8，不要期望通过 <code>ALTER ... CONVERT ...</code> 能够让你达到用utf8读取历史中文数据的目的，没卵用，老老实实做逻辑dump。所以我才叫它“伪”转换</p>
<h3 id="3-2-character-set-server"><a href="#3-2-character-set-server" class="headerlink" title="3.2 character-set-server"></a>3.2 character-set-server</h3><p>一旦你决定使用utf8mb4，强烈建议你要修改服务端 <code>character-set-server=utf8mb4</code>，不同的语言对它的处理方法不一样，c++, php, python可以设置character-set，但java驱动依赖于 character-set-server 选项，后面有介绍。</p>
<p>同时还要谨慎一些特殊选项，如 <a href="http://seanlook.com/2016/10/17/mysql-charset-handshake-cdb/">遇到腾讯云CDB连接字符集设置一个坑</a>。个人不建议设置全局 <code>init_connect</code>。</p>
<h2 id="4-key-768-long-错误"><a href="#4-key-768-long-错误" class="headerlink" title="4. key 768 long 错误"></a>4. key 768 long 错误</h2><p>字符集从utf8转到utf8mb4之后，最容易引起的就是索引键超长的问题。</p>
<p>对于表行格式是 <code>COMPACT</code>或 <code>REDUNDANT</code>，InnoDB有单个索引最大字节数 768 的限制，而字段定义的是能存储的字符数，比如 <code>VARCHAR(200)</code> 代表能够存200个汉字，索引定义是字符集类型最大长度算的，即 utf8 maxbytes=3, utf8mb4 maxbytes=4，算下来utf8和utf8mb4两种情况的索引长度分别为600 bytes和800bytes，后者超过了768，导致出错：<code>Error 1071: Specified key was too long; max key length is 767 bytes</code>。</p>
<p><code>COMPRESSED</code>和<code>DYNAMIC</code>格式不受限制，但也依然不建议索引太长，太浪费空间和cpu搜索资源。</p>
<p>如果已有定义超过这个长度的，可加上前缀索引，如果暂不能加上前缀索引（像唯一索引），可把该字段的字符集改回utf8或latin1。<br>但是，（ <strong> 敲黑板啦，很重要 </strong> ），要防止出现 <code>Illegal mix of collations (utf8_general_ci,IMPLICIT) and (utf8mb4_general_ci,COERCIBLE) for operation &#39;=&#39;</code> 错误：连接字符集使用utf8mb4，但 SELECT/UPDATE where条件有utf8类型的列，且条件右边存在不属于utf8字符，就会触发该异常。表示踩过这个坑。</p>
<p>再多加一个友好提示：EXPLAIN 结果里面的 key_len 指的搜索索引长度，单位是bytes，而且是以字符集支持的单字符最大字节数算的，这也是为什么 INDEX_LENGTH 膨胀厉害的一个原因。</p>
<h2 id="5-C-C-内存空间分配问题"><a href="#5-C-C-内存空间分配问题" class="headerlink" title="5. C/C++ 内存空间分配问题"></a>5. C/C++ 内存空间分配问题</h2><p>这是我们这边的开发遇到的一个棘手的问题。C或C++连接MySQL使用的是linux系统上的 libmysqlclient 动态库，程序获取到数据之后根据自定义的一个网络协议，按照mysql字段定义的固定字节数来传输数据。从utf8转utf8mb4之后，c++里面针对character单字符内存空间分配，从3个增加到4个，引起异常。</p>
<p>这个问题其实是想说明，使用utf8mb4之后，官方建议尽量用 varchar 代替 char，这样可以减少固定存储空间浪费（关于char与varchar的选择，可参考 <a href="http://seanlook.com/2016/04/28/mysql-char-varchar-set/">这里</a>）。但开发设计表时 varchar 的大小不能随意加大，它虽然是变长的，但客户端在定义变量来获取数据时，是以定义的为准，而非实际长度。按需分配，避免程序使用过多的内存。</p>
<h2 id="6-java驱动使用"><a href="#6-java驱动使用" class="headerlink" title="6. java驱动使用"></a>6. java驱动使用</h2><p>Java语言里面所实现的UTF-8编码就是支持4字节的，所以不需要配置 <code>mb4</code> 这样的字眼，但如果从MySQL读写emoji，MySQL驱动版本要在 5.1.13 及以上版本，数据库连接依然是 <code>characterEncoding=UTF-8</code> 。</p>
<p>但还没完，遇到一个大坑。<a href="http://dev.mysql.com/doc/relnotes/connector-j/5.1/en/news-5-1-13.html" target="_blank" rel="external">官方手册</a> 里还有这么一段话：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Connector/J did <span class="keyword">not</span> support utf8mb4 <span class="keyword">for</span> servers <span class="number">5.5</span><span class="number">.2</span> <span class="keyword">and</span> newer.</div><div class="line"></div><div class="line">Connector/J now auto-detects servers configured <span class="keyword">with</span> character_set_server=utf8mb4 <span class="keyword">or</span> treats <span class="keyword">the</span> Java encoding utf<span class="number">-8</span> passed</div><div class="line">  <span class="keyword">using</span> characterEncoding=... <span class="keyword">as</span> utf8mb4 <span class="keyword">in</span> <span class="keyword">the</span> SET NAMES= calls <span class="keyword">it</span> makes when establishing <span class="keyword">the</span> connection. (Bug <span class="comment">#54175)</span></div></pre></td></tr></table></figure></p>
<p>意思是，java驱动会自动检测服务端 <code>character_set_server</code> 的配置，如果为utf8mb4，驱动在建立连接的时候设置 <code>SET NAMES utf8mb4</code>。然而其他语言没有依赖于这样的特性。</p>
<h2 id="7-主从复制报错"><a href="#7-主从复制报错" class="headerlink" title="7. 主从复制报错"></a>7. 主从复制报错</h2><p>这个问题没有遇到，只是看官方文档有提到，曾经也看到过类似的技术文章。<br>大概就是从库的版本比主库的版本低，导致有些字符集不支持；或者人工修改了从库上的表或字段的字符集定义，都有可能引起异常。</p>
<h2 id="8-join-查询问题"><a href="#8-join-查询问题" class="headerlink" title="8. join 查询问题"></a>8. join 查询问题</h2><p>这个问题是之前在姜承尧老师公众号看到的一篇文章 <a href="http://mp.weixin.qq.com/s/ns9eRxjXZfUPNSpfgGA7UA" target="_blank" rel="external">MySQL表字段字符集不同导致的索引失效问题</a>，自己也验证了一下，的确会有问题：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (</div><div class="line">  f_id <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  f_action <span class="built_in">char</span>(<span class="number">25</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">''</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`f_id`</span>),</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 ROW_FORMAT=DYNAMIC;</div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1_copy_mb4 (</div><div class="line">  f_id <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  f_action <span class="built_in">char</span>(<span class="number">25</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">''</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`f_id`</span>),</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 ROW_FORMAT=DYNAMIC;</div><div class="line"></div><div class="line">1.</div><div class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">extended</span> <span class="keyword">select</span> * <span class="keyword">from</span> t1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> t1_copy_mb4 t2 <span class="keyword">on</span> t1.f_id=t2.f_id <span class="keyword">where</span> t1.f_id=<span class="string">'421036'</span>;</div><div class="line"></div><div class="line">2.</div><div class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">extended</span> <span class="keyword">select</span> * <span class="keyword">from</span> t1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> t1_copy_mb4 t2 <span class="keyword">on</span> t1.f_id=t2.f_id <span class="keyword">where</span> t2.f_id=<span class="string">'421036'</span>;</div></pre></td></tr></table></figure></p>
<p>对应上面1,2 的截图：</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-charset-utf8mb4-1.png" alt=""></p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-charset-utf8mb4-2.png" alt=""></p>
<p>其中 2 的warnings 有convert:</p>
<ul>
<li>(convert(<strong>t1.f_id</strong> using utf8mb4) = ‘421036’)</li>
</ul>
<p>官网能找到这一点解释的还是开头那个地址：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Similarly, the following comparison <span class="keyword">in</span> the <span class="keyword">WHERE</span> clause works according <span class="keyword">to</span> the collation <span class="keyword">of</span> utf8mb4_col:</div><div class="line"></div><div class="line">  <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> utf8_tbl, utf8mb4_tbl</div><div class="line">  <span class="keyword">WHERE</span> utf8_tbl.utf8_col = utf8mb4_tbl.utf8mb4_col;</div></pre></td></tr></table></figure></p>
<p>只是索引失效发生在utf8mb4列 在条件左边。（关于MySQL的隐式类型转换，见<a href="http://seanlook.com/2016/05/05/mysql-type-conversion/">这里</a>）。</p>
<h2 id="9-参考"><a href="#9-参考" class="headerlink" title="9. 参考"></a>9. 参考</h2><ul>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-conversion.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-conversion.html</a></li>
<li><a href="http://forums.mysql.com/read.php?103,187048,188748#msg-188748" target="_blank" rel="external">http://forums.mysql.com/read.php?103,187048,188748#msg-188748</a></li>
<li><a href="http://drupal.stackexchange.com/questions/166405/why-are-we-using-utf8mb4-general-ci-and-not-utf8mb4-unicode-ci" target="_blank" rel="external">Why are we using utf8mb4_general_ci and not utf8mb4_unicode_ci?</a></li>
<li><a href="https://mathiasbynens.be/notes/mysql-utf8mb4" target="_blank" rel="external">How to support full Unicode in MySQL databases</a></li>
<li><a href="http://cenalulu.github.io/mysql/mysql-mojibake/" target="_blank" rel="external">10分钟学会理解和解决MySQL乱码问题</a></li>
</ul>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/10/23/mysql-utf8mb4/">http://seanlook.com/2016/10/23/mysql-utf8mb4/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[遇到腾讯云CDB连接字符集设置一个坑]]></title>
      <url>http://seanlook.com/2016/10/17/mysql-charset-handshake-cdb/</url>
      <content type="html"><![CDATA[<p>最近一个与qq有关的服务迁到腾讯云上，相应的数据库也要从原阿里云RDS迁移到腾讯云CDB上，经过一番摸索，不带任何政治色彩的说，CDB跟RDS相比弱的不止一条街。比如看个错误日志还要提工单，数据库访问没有白名单，数据传输服务竞不支持源库的开启GTID，自带的后台管理是phpMyAdmin，要临时看查询日志也要提工单，当然这些都是可以容忍通过其它方法解决的，但是如果使用上带来了mysql数据库本身的影响，就用的不太爽了。</p>
<p>最近2个月一直在弄与字符集相关的工作，却还是在cdb踩到一个大坑。情况是这样的，我们旧的RDS上的数据库表定义都是utf8，但由于历史原因，开发一直使用 latin1 去连接的。现在要把这样的一个db迁移到CDB，腾讯云的数据传输服务出了点问题，于是想了办法用阿里云的DTS反向迁。现象是：</p>
<ol>
<li>用Navicat客户端latin1连接，旧数据显示都ok</li>
<li>但程序端看到历史数据全是乱码，新数据正常</li>
<li>而且<strong>新数据通过navicat去看用 utf8 连接才正常</strong></li>
<li>在mysql命令行下手动 <code>set names latin1</code> 读取旧数据ok，但新数据乱码</li>
</ol>
<p>这明显是新写入的时候就是以 utf8 连接的，读取的时候新旧数据也以 utf8 连接。但应用端已明确设置使用 latin1 连接来读写。为了验证是否CDB的问题，在相同环境下自建了个mysql实例，一切都ok。</p>
<p>腾讯云工程师先是怀疑迁移有问题，后来说可能是character_set_server设置的问题，我站在2个月来处理字符集的经验看了虽然不太可能，还是配合截了几个图，在工单、电话了里撕了几个来回：</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-qcloud-charset1.png" alt=""></p>
<p>因为跟腾讯有合作关系，上头就直接联系到了腾讯云的人，这才找到问题根源：都是<code>--skip-character-set-client-handshake</code>惹的祸。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--character-set-client-handshake</span></div><div class="line"></div><div class="line"><span class="keyword">Do</span> <span class="keyword">not</span> <span class="keyword">ignore</span> <span class="built_in">character</span> <span class="keyword">set</span> information sent <span class="keyword">by</span> the client. <span class="keyword">To</span> <span class="keyword">ignore</span> <span class="keyword">client</span> information <span class="keyword">and</span> <span class="keyword">use</span> the <span class="keyword">default</span> <span class="keyword">server</span> <span class="built_in">character</span> <span class="keyword">set</span>, <span class="keyword">use</span> <span class="comment">--skip-character-set-client-handshake; this makes MySQL behave like MySQL 4.0</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>一看到这个选项就恍然大悟了，官方文档FAQ里有专门介绍：<a href="https://dev.mysql.com/doc/refman/5.6/en/faqs-cjk.html" target="_blank" rel="external">A.11.11</a>（个人感觉最后一段贴的结果有问题），大意是说为了兼容 mysql 4.0 的习惯，mysqld启动时加上 <code>--skip-character-set-client-handshake</code> 来忽略客户端字符集的设置，强制使用服务端<code>character-set-server</code>的设置。</p>
<p>但这个选项默认是没有开启的，当你在web控制台修改了实例字符集时，CDB自作自作主张修改了这个参数并重启 character_set_client_handshake = 0 。而这个参数在 <code>show variables</code> 看不到的，隐藏的比较深。正好我建实例的时候选择了utf8，然后修改为utf8mb4，但应用端要求latin1，便中枪了。</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-qcloud-charset.png" alt=""></p>
<p>主要是以前没听过这个参数，后来发现老叶也有篇文章讲到它 <a href="http://imysql.com/2013/10/29/misunderstand-about-charset-handshake.shtm" target="_blank" rel="external">MySQL字符集的一个坑</a>，其实是很小的东西，结果排查验证问题前后花了2天。。。</p>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/10/17/mysql-charset-handshake-cdb/">http://seanlook.com/2016/10/17/mysql-charset-handshake-cdb/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[你可能需要一个实时抓取MySQL慢查询现场的程序]]></title>
      <url>http://seanlook.com/2016/09/27/python-mysql-querykill/</url>
      <content type="html"><![CDATA[<p>Python完成的一个小程序，初衷用于杀掉 MySQL 上的异常线程，如慢查询、处于Sleep状态的，但上线运行以后，以另一种模式运行来实时发现现网的慢查询特别有用，挖掘了许多潜在问题。<br><strong>项目地址</strong>：<a href="https://github.com/seanlook/myquerykill" target="_blank" rel="external">https://github.com/seanlook/myquerykill</a>  </p>
<p>在使用阿里云RDS的过程中，数据库出现异常，需要快速恢复。网上有许多类似的kill脚本，都是通过 mysqladmin 实现的。然而 Ali-RDS 环境有以下限制：</p>
<ul>
<li>不提供 SUPER 权限的用户，也就是用户只能 kill 自己的线程</li>
<li>当连接数暴增时，外部用户无法登陆，包括控制台</li>
</ul>
<p>为了解决上面两大问题，该 python 脚本通过在db实例上，使用多线程的方式，为每个用户保留一个连接，并<strong>实时</strong>读取指令配置文件 <code>mysqk.ini</code>，发现有 kill 需求时，利用对应用户已有连接找到 <code>information_schema.processlist</code> 中符合条件的线程，并 kill 。</p>
<p>说明：该脚本在9月份做过一次重写，7月份的版本（分支 old_0.5.0）是每实例每用户，对应一个线程，db实例一多线程数也太多，看得始终不太优雅，于是改成了一个db实例一个线程，维护同时维护多个用户的会话。同时新版也加入了更多的功能，如按时间窗口检查，包含或排除特定连接，邮件通知，配置项覆盖。</p>
<h1 id="1-特性"><a href="#1-特性" class="headerlink" title="1. 特性"></a>1. 特性</h1><ol>
<li>始终通过 mysql ping 维持一个长连接，并有断开自动重来机制，解决没有连接可用的尴尬</li>
<li>每个db实例有自己的线程，避免需要单独登陆个别用户去kill的繁复操作。<br>如果你具有 SUPER 权限，也可以简化配置做到兼容</li>
<li>能够分开应对需要杀死线程的场景：<ul>
<li>长时间运行超过 N 秒的</li>
<li>Sleep 状态的事务 （一般不建议，但有时候kill它，可以快速释放连接给管理员使用）</li>
<li>排除一些线程不能kill，如 Binlog dump。可配置</li>
<li>包含特定关键字的线程要kill</li>
</ul>
</li>
<li>出现符合条件的线程时，会对当时的processlist, engine status，lock_wait 做一个快照，并邮件发出。妈妈再也不愁没有事故现场了。</li>
<li>有试运行dry_run模式，即执行所有的检查过程但不真正kill<br>这便是开头所讲的，实时关注生产环境慢查询，而不是等出现问题被动去看slow log，严重的情况连接数可能已经爆了</li>
<li>支持只在时间窗口内运行，考虑到晚上一些长任务不检查</li>
<li>密码加密</li>
</ol>
<a id="more"></a>
<h1 id="2-快速上手"><a href="#2-快速上手" class="headerlink" title="2. 快速上手"></a>2. 快速上手</h1><p>需要pip安装<code>MySQL-python</code>和<code>pycrypto</code>两个库，只在python 2.7上有测试。</p>
<p>在 <em>settings.py</em> 里面设置连接的用户名和密码信息。这里假设同一批db的要check的认证信息是一样的，指定的用户既用于登录认证，也用于告知脚本哪些用户需要被检查。<br>密码要通过 <code>prpcryptec.py</code> 加密，加密的密钥需写入脚本本身的 <code>KEY_DB_AUTH</code>变量。（担心泄露的话，把mysqk.py编译成 pyc 来跑）</p>
<p>在 <em>mysqk.ini</em> 主配置文件里面  </p>
<ul>
<li><code>db_info</code> 节设置需要被检查的数据库地址，如 <code>db01=10.0.200.100:3306</code></li>
<li>可分别 <code>db01</code>等指定需要kill thread的选项。<code>[id_db01]</code> 则默认复用 <code>[db_commkill]</code> 的选项</li>
<li><code>db_comconfig</code> 节设置 <code>db_puser</code> 为能查看到所有processlist的权限用户，且在 <em>settings.py</em> 的DB_AUTH中已指定</li>
<li><p>只想执行检查，并不想真正kill异常线程，确认 dry_run不等于0</p>
<p>Here we go!</p>
</li>
</ul>
<h1 id="3-配置项说明"><a href="#3-配置项说明" class="headerlink" title="3. 配置项说明"></a>3. 配置项说明</h1><p><strong><code>mysqk.ini</code></strong>：</p>
<h2 id="3-1-mail-config"><a href="#3-1-mail-config" class="headerlink" title="3.1 mail_config"></a>3.1 mail_config</h2><p>邮件通知相关设置，smtp服务地址和认证信息。<br><code>mail_receiver=</code> 设置空，表示不发邮件</p>
<h2 id="3-2-db-info"><a href="#3-2-db-info" class="headerlink" title="3.2 db_info"></a>3.2 db_info</h2><p>设置要检查kill哪些数据库实例.<br>格式：<code>&lt;dbid&gt;=&lt;host&gt;:&lt;port&gt;</code>，dbid是唯一表示db实例的，后面设置各db需要被kill的选项，小节配置名就是 <code>id_&lt;dbid&gt;</code>；端口必需指定。</p>
<p>在这里出现的db实例都会被执行检查，可用 ; 注释，但需要重启脚本。</p>
<h2 id="3-3-db-comconfig"><a href="#3-3-db-comconfig" class="headerlink" title="3.3 db_comconfig"></a>3.3 db_comconfig</h2><p>检查用公共配置，实时生效。</p>
<ul>
<li><code>db_puser</code>：指定一个用户名用于 show processlist，需要的权限：PROCESS、information_schema库查看。可以认为是一个代表用户，检查异常thread，把结果提供给有该thread杀掉权限用户。</li>
<li><code>run_max_count</code>：执行检查的次数，是一个全局控制开关。每次修改这个值都会重新开始检查，即一个 clean start，让刚修改的配置生效。<ul>
<li>为 0 表示脚本不进行任何检查，只简单维护与数据库的连接存活。存活检查频率在 <em>settings.py</em> 由 <code>CHECK_CONFIG_INTERVAL × CHECK_PING_MULTI</code>决定</li>
<li>为 999 表示会在后台一致检查连接线程（但不一定有符合kill条件的），检查的频率在 <em>settings.py</em> 里面 <code>CHECK_CONFIG_INTERVAL</code> 指定</li>
<li>为其它值时，表示检查次数满后停止检查</li>
</ul>
</li>
<li><code>dry_run</code>：是否开启试运行模式，为0表示真实kill，为1或其它值表示试运行。试运行模式可用于监控慢查询并告警。注意同一会话线程ID只告警一次</li>
<li><code>run_time_window</code>：运行的检查的时间窗口，格式如 <code>08:00-22:00</code>，在这个时间以外不执行检查，留空表示不限制。主要考虑晚上一些统计任务可能出现“异常”线程。</li>
</ul>
<h2 id="3-4-db-commkill"><a href="#3-4-db-commkill" class="headerlink" title="3.4 db_commkill"></a>3.4 db_commkill</h2><p>kill用公共配置，实时生效，会被 <code>id_&lt;dbid&gt;</code> 节的选项覆盖。</p>
<ul>
<li><p><code>k_user</code>：很关键的一个选项，表示你要检查并kill哪些数据库用户，多个用逗号分隔（不要带引号）。<br>为 <code>all</code> 时，表示要检查 <em>settings.py</em> 里 DB_AUTH 指定的所有用户<br>为 <code>none</code> 时，表示不kill任何异常线程，效果与设置了 dry_run 模式相当  </p>
</li>
<li><p><code>k_longtime</code>：执行超过设定值的sql则认为异常。一般大于 CHECK_CONFIG_INTERVAL</p>
</li>
<li><code>k_sleep</code>：Sleep超过设定秒的sql则认为异常，为 0 表示不杀掉sleep状态的线程</li>
<li><code>k_exclude</code>：排除掉那些特定关键字的线程，比如复制线程、管理员的连接等</li>
<li><code>k_include</code>：包含这些特定关键字的线程，需要被kill。注意，它作用在满足 k_user 和 k_exclude 的前提之下。<br>k_exclude与k_include 的值是支持python re模块正则的格式，不要带引号</li>
</ul>
<h2 id="3-5-id-dbid"><a href="#3-5-id-dbid" class="headerlink" title="3.5 id_dbid"></a>3.5 id_dbid</h2><p>这部分区域的配置项与 db_commconfig 相同，用于针对个别db的kill选项。</p>
<h1 id="4-使用建议"><a href="#4-使用建议" class="headerlink" title="4. 使用建议"></a>4. 使用建议</h1><p>两种组合模式：</p>
<ol>
<li>设置 <code>dry_run=0</code>，默认 <code>k_user=none</code>，当数据库出现异常时，主动修改对应db的k_user值，动态kill</li>
<li>设置 <code>dry_run=1</code>，默认 <code>k_user=all</code>，相当于运行在daemon模式，有慢查询则邮件通知，并且记录下当时的信息。<strong>建议此模式</strong></li>
</ol>
<p>当然你也可以<code>dry_run=0</code>，<code>k_user=all</code>，让程序一直在后台跑并kill，但生产环境极不推荐。</p>
<p>有日志和快照文件可以查看。</p>
<h1 id="5-配置文件示例"><a href="#5-配置文件示例" class="headerlink" title="5. 配置文件示例"></a>5. 配置文件示例</h1><p>mysqlk.ini :</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="section">[mail_config]</span></div><div class="line"><span class="attr">mail_host</span>=smtp.exmail.qq.com</div><div class="line"><span class="attr">mail_user</span>=xxx@ecqun.com</div><div class="line"><span class="attr">mail_pass</span>=xxxxxx</div><div class="line"></div><div class="line"><span class="attr">mail_receiver</span>=</div><div class="line"><span class="section"></span></div><div class="line">[db_info]</div><div class="line"><span class="attr">crm0</span>=<span class="number">192.168</span>.<span class="number">1.125</span>:<span class="number">3306</span></div><div class="line"><span class="attr">crm1</span>=<span class="number">192.168</span>.<span class="number">1.126</span>:<span class="number">3306</span></div><div class="line"><span class="attr">crm2</span>=<span class="number">192.168</span>.<span class="number">1.127</span>:<span class="number">3306</span></div><div class="line"><span class="attr">crm3</span>=<span class="number">192.168</span>.<span class="number">1.128</span>:<span class="number">3306</span></div><div class="line"><span class="attr">base</span>=<span class="number">10.0</span>.<span class="number">200.142</span>:<span class="number">3306</span></div><div class="line"><span class="section"></span></div><div class="line">[db_commconfig]</div><div class="line"><span class="attr">db_puser</span>=ecuser</div><div class="line"></div><div class="line"><span class="comment">; how many kill times once this config file changed</span></div><div class="line"><span class="comment">; 0: DISABLE all kill</span></div><div class="line"><span class="comment">; 999: always kill threads that meet kill conditions</span></div><div class="line"><span class="comment">; default: 1</span></div><div class="line"><span class="comment">; can not be inherit</span></div><div class="line"><span class="attr">run_max_count</span>=<span class="number">999</span></div><div class="line"><span class="attr">dry_run</span>=<span class="number">1</span></div><div class="line"><span class="attr">run_time_window</span>=<span class="number">08</span>:<span class="number">00</span>-<span class="number">22</span>:<span class="number">00</span></div><div class="line"><span class="section"></span></div><div class="line"></div><div class="line">[db_commkill]</div><div class="line"><span class="attr">k_user</span>=all</div><div class="line"><span class="attr">k_longtime</span>=<span class="number">10</span></div><div class="line"><span class="attr">k_lock</span>=<span class="number">1</span></div><div class="line"><span class="attr">k_sleep</span>=<span class="number">0</span></div><div class="line"></div><div class="line"><span class="attr">k_exclude</span>=Binlog|ecdba|Daemon</div><div class="line"><span class="attr">k_include</span>=select sleep\(<span class="number">17</span>\)</div><div class="line"><span class="section"></span></div><div class="line"></div><div class="line">[id_crm0]</div><div class="line"><span class="comment">; k_user: who's threads to be killed. use comma to separate</span></div><div class="line"><span class="comment">;         none: do not kill anyone's threads</span></div><div class="line"><span class="comment">;         all: kill all user's threads (with other where conditions)</span></div><div class="line"><span class="comment">; default: none</span></div><div class="line"><span class="attr">k_user</span>=all</div><div class="line"></div><div class="line"><span class="comment">; k_longtime: filter the threads who's running time is longer than this</span></div><div class="line"><span class="comment">;             0: ignore the time &gt; x  condition</span></div><div class="line"><span class="comment">; default: 10</span></div><div class="line"><span class="attr">k_longtime</span>=<span class="number">10</span></div><div class="line"></div><div class="line"><span class="comment">; k_sleep: whether kill sleepd threads or not</span></div><div class="line"><span class="comment">;          0: do not kill command='Sleep' threads from processlist</span></div><div class="line"><span class="comment">;          when it set to 1, usually it's subset of k_longtime condition</span></div><div class="line"><span class="comment">; default: 0</span></div><div class="line"><span class="attr">k_sleep</span>=<span class="number">0</span></div><div class="line"><span class="section"></span></div><div class="line">[id_crm1]</div><div class="line"><span class="attr">k_user</span>=ecuser</div><div class="line"><span class="attr">k_longtime</span>=<span class="number">10</span></div><div class="line"><span class="attr">k_sleep</span>=<span class="number">0</span></div><div class="line"><span class="section"></span></div><div class="line">[id_crm2]</div><div class="line"><span class="attr">k_user</span>=all</div><div class="line"><span class="attr">k_longtime</span>=<span class="number">10</span></div><div class="line"><span class="attr">k_sleep</span>=<span class="number">0</span></div><div class="line"><span class="section"></span></div><div class="line">[id_crm3]</div></pre></td></tr></table></figure>
<h1 id="6-运行示例"><a href="#6-运行示例" class="headerlink" title="6. 运行示例"></a>6. 运行示例</h1><p><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-myquery-shot.png" alt="run-demo"></p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/python-mysql-slowquery-discover.png" alt="slowquery-discover"></p>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/09/27/python-mysql-querykill/">http://seanlook.com/2016/09/27/python-mysql-querykill/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[READ-COMMITED 与 REPEATABLE-READ 事务隔离级别之间的异同]]></title>
      <url>http://seanlook.com/2016/09/03/diffs-between-rr-and-rc-trx_isolation_level/</url>
      <content type="html"><![CDATA[<p>经常会被问到 InnoDB隔离级别中 READ-COMMITED和REPEATABLE-READ 的区别，今天就整理了一下，不再从“脏读”、“幻读”这样的名词解释一样去回答了。</p>
<h2 id="1-行锁"><a href="#1-行锁" class="headerlink" title="1. 行锁"></a>1. 行锁</h2><p>InnoDB行锁实际锁的是索引记录，为了防止死锁的产生以及维护所需要的隔离级别，在执行sql语句的全过程中，innodb必须对所需要修改的行每条索引记录上锁。如此一来，如果你执行的 UPDATE 没有很好的索引，那么会导致锁定许多行：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> employees <span class="keyword">set</span> store_id = <span class="number">0</span> <span class="keyword">where</span> store_id = <span class="number">1</span>;</div><div class="line"><span class="comment">---TRANSACTION 1EAB04, ACTIVE 7 sec</span></div><div class="line">633 <span class="keyword">lock</span> <span class="keyword">struct</span>(s), &lt;strong&gt;<span class="keyword">heap</span> <span class="keyword">size</span> <span class="number">96696</span>&lt;/strong&gt;, <span class="number">218786</span> <span class="keyword">row</span> <span class="keyword">lock</span>(s), <span class="keyword">undo</span> <span class="keyword">log</span> entries <span class="number">1</span></div><div class="line">MySQL <span class="keyword">thread</span> <span class="keyword">id</span> <span class="number">4</span>, OS <span class="keyword">thread</span> handle <span class="number">0x7f8dfc35d700</span>, <span class="keyword">query</span> <span class="keyword">id</span> <span class="number">47</span> localhost root</div><div class="line"><span class="keyword">show</span> <span class="keyword">engine</span> <span class="keyword">innodb</span> <span class="keyword">status</span></div></pre></td></tr></table></figure></p>
<p>上面的 <code>employees</code> 表 <code>store_id</code> 列没有索引。注意 UPDATE 已经执行完成（没有提交），但依然有 218786 个行锁没有释放，还有一个undo记录。这意味着只有一行被更改，但却持有了额外的锁。堆大小（heap size）代表了分配给锁使用的内存数量。</p>
<p>在 REPEATABLE-READ 级别，事务持有的 <strong>每个锁</strong> 在整个事务期间一直被持有。</p>
<p>在 READ-COMMITED 级别，事务里面特定语句结束之后，不匹配该sql语句扫描条件的锁，会被释放。</p>
<p>下面是上述相同的 UPDATE 在 READ-COMMITED 级别下的结果：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">---TRANSACTION 1EAB06, ACTIVE 11 sec</span></div><div class="line">631 <span class="keyword">lock</span> <span class="keyword">struct</span>(s), &lt;strong&gt;<span class="keyword">heap</span> <span class="keyword">size</span> <span class="number">96696</span>&lt;/strong&gt;, <span class="number">1</span> <span class="keyword">row</span> <span class="keyword">lock</span>(s), <span class="keyword">undo</span> <span class="keyword">log</span> entries <span class="number">1</span></div><div class="line">MySQL <span class="keyword">thread</span> <span class="keyword">id</span> <span class="number">4</span>, OS <span class="keyword">thread</span> handle <span class="number">0x7f8dfc35d700</span>, <span class="keyword">query</span> <span class="keyword">id</span> <span class="number">62</span> localhost root</div><div class="line"><span class="keyword">show</span> <span class="keyword">engine</span> <span class="keyword">innodb</span> <span class="keyword">status</span></div></pre></td></tr></table></figure></p>
<p>可以看到 heap size 没有变化，但是现在我们只持有一个行锁。无论什么隔离级别下，InnoDB 会为扫描过的每条索引记录创建锁，不同的是在 RC 模式，一旦语句执行完毕（事务未必完成），不符合扫描条件的记录上的锁会被随即释放。释放这些锁后，堆内存并不会马上释放，所以heap size看到与 RR 模式是一样的，但是持有的锁数量明显小了很多。</p>
<p>这也就意味着在 RC 级别下的事务A，只要A的UPDATE <strong>语句</strong> 完成了，其它事务可以修改A中也扫描过的行，但在 RR 级别下不允许。</p>
<h2 id="2-Read-View"><a href="#2-Read-View" class="headerlink" title="2. Read View"></a>2. Read View</h2><h3 id="REPEATABLE-READ"><a href="#REPEATABLE-READ" class="headerlink" title="REPEATABLE-READ"></a>REPEATABLE-READ</h3><p>在 REPEATABLE-READ 级别，<em>read view</em> 对象在事务一开启就被创建，这个一致性快照在整个事务期间一直保持打开。在同一个事务里，前后间隔几个小时执行一遍相同的 SELECT，你会得到完全一样的结果，这就是所谓的 MVCC (multiple version concurrency control)，它是通过行版本号和UNDO段来实现的。</p>
<p>在 REPEATABLE-READ 级别， InnoDB会为范围扫描创建间隙锁（gap locks）：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> some_table <span class="keyword">where</span> <span class="keyword">id</span> &gt; <span class="number">100</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>上面的update将会创建一个 gap lock，用来防止在 id&gt;100 范围内有新行被插入，锁会持续到事务回滚或提交。比如在同一个事务里，上午5点执行 SELECT … FOR UPDATE，下午5点执行 UPDATE some_table where id&gt;100，那么这个update只会修改上午5点 SELECT FOR UPDATE所锁定的行，因为大于100的记录的整个 <strong>间隙</strong> 被加了锁。</p>
<h3 id="READ-COMMITED"><a href="#READ-COMMITED" class="headerlink" title="READ-COMMITED"></a>READ-COMMITED</h3><p>在 READ-COMMITED 级别，<em>read view</em> 结构在每个语句开始的时候被创建，这意味着即使在同一个事务中，上午5点执行的 SELECT与下午5点执行的SELECT可能会得到不同的结果。因为 read view 在 READ-COMMITED 级别下仅在 <strong>语句执行</strong> 期间存在。</p>
<p>这就是所谓的 “幻读”（phantom read）。</p>
<p>READ-COMMITED 隔离级别下是没有gap locks，所以执行上面的 SELECT FOR UPDATE where id&gt;100 并不会阻止其它事务插入新行，如果同一个事务里后面执行 UPDATE … where id&gt;100，就有可能导致实际更新的行数比前面锁定的行数要多。</p>
<p>补充：<br>如果了解过 mysqldump 的实现原理，可知它就是充分利用InnoDB的MVCC特性，使用 REPEATABLE-READ 模式获取备份事务的一致性快照，避免锁表和幻读。</p>
<p>本文主要参考自 percona博客上的一篇文章 <a href="https://www.percona.com/blog/2012/08/28/differences-between-read-committed-and-repeatable-read-transaction-isolation-levels/" target="_blank" rel="external">https://www.percona.com/blog/2012/08/28/differences-between-read-committed-and-repeatable-read-transaction-isolation-levels/</a> 。</p>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2016/09/03/diffs-between-rr-and-rc-trx_isolation_level/">http://seanlook.com/2016/09/03/diffs-between-rr-and-rc-trx_isolation_level/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浅析MySQL事务隔离级别与锁 分享]]></title>
      <url>http://seanlook.com/2016/08/30/mysql-ppt-trx_isolation-lock/</url>
      <content type="html"><![CDATA[<p>这段时间在公司内部准备了一个分享，主题是关于 MySQL事务与锁，准备过程内容很多，也深入弄清楚了一些以前比较迷糊的地方，加上后面的讨论也就一个半小时。</p>
<p>主要涉及的是乐观锁与悲观锁，InnoDB多版本并发控制的实现，以及隔离级别与各种情况加锁分析，因为涉及的主要还是开发人员，所以不是很深奥。也算花了不少心血，分享一下。</p>
<p>slideshare: <a href="http://www.slideshare.net/ssuser5a0bc0/my-sql-seanlook" target="_blank" rel="external">http://www.slideshare.net/ssuser5a0bc0/my-sql-seanlook</a></p>


	<div class="row">
	  <iframe src="http://nagland.github.io/viewer/web/viewer.html?val=http://7q5fot.com1.z0.glb.clouddn.com/mysql-ppt-trx_isolation-lock-seanlook.pdf" style="width:100%; height:550px"></iframe>
	</div>



<hr>
<p>原文连接地址：<a href="http://seanlook.com/2016/08/30/mysql-ppt-trx_isolation-lock/">http://seanlook.com/2016/08/30/mysql-ppt-trx_isolation-lock/</a></p>
<hr>
<!--
<iframe src="https://www.slideshare.net/slideshow/embed_code/key/3HLJJcJmM9KLGT" width="900" height="512" frameborder="0" allowfullscreen></iframe>
<p>–&gt;</p>
-->]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Advanced MySQL Query Tuning .pdf]]></title>
      <url>http://seanlook.com/2016/06/11/mysql-advanced-query-tuning-percona/</url>
      <content type="html"><![CDATA[<p>端午在家无聊，又不想学习。于是在Youtube随便逛，看到一个很不错的分享，来自 Percona Database Performance。下面是演示稿：</p>
<p>slideshare: <a href="http://www.slideshare.net/ssuser5a0bc0/webinar-2013-advancedquerytuning" target="_blank" rel="external">http://www.slideshare.net/ssuser5a0bc0/webinar-2013-advancedquerytuning</a> </p>

	<iframe src="https://www.slideshare.net/slideshow/embed_code/key/3HLJJcJmM9KLGT" style="width:100%;height:550px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" allowfullscreen> </iframe> <div style="margin-bottom:5px">


<p>Youtube: <a href="https://www.youtube.com/watch?v=TPFibi2G_oo" target="_blank" rel="external">https://www.youtube.com/watch?v=TPFibi2G_oo</a></p>
<p>能 <em>条件</em> 的可以看看。</p>
<p>Percona webinars上有许多类似的分享，传送门： <a href="https://www.percona.com/resources/webinars" target="_blank" rel="external">https://www.percona.com/resources/webinars</a> ，不少是他们CEO Peter Zaitsev 亲自上马的。</p>
<hr>
<p>原文连接地址：<a href="http://seanlook.com/2016/06/11/mysql-advanced-query-tuning-percona/">http://seanlook.com/2016/06/11/mysql-advanced-query-tuning-percona/</a></p>
<hr>
<!--
<iframe src="https://www.slideshare.net/slideshow/embed_code/key/3HLJJcJmM9KLGT" width="900" height="512" frameborder="0" allowfullscreen></iframe>
<p>–&gt;</p>
--></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[pt-online-schema-change使用说明、限制与比较]]></title>
      <url>http://seanlook.com/2016/05/27/mysql-pt-online-schema-change/</url>
      <content type="html"><![CDATA[<p>如果正在看这篇文章，相信你已经知道自己的需求了。</p>
<p>在 mysql 5.5 版本以前，修改表结构如添加索引、修改列，需要锁表，期间不能写入，对于大表这简直是灾难。从5.5特别是5.6里，情况有了好转，支持Online DDL，相关介绍见 <a href="http://seanlook.com/2016/05/24/mysql-online-ddl-concept">这篇文章</a>，而我在实际alter table过程中还是会引起 data meta lock 问题。pt-online-schema-change是Percona-toolkit一员，通过改进原生ddl的方式，达到不锁表在线修改表结构。</p>
<h2 id="1-pt-osc工作过程"><a href="#1-pt-osc工作过程" class="headerlink" title="1. pt-osc工作过程"></a>1. pt-osc工作过程</h2><ol>
<li>创建一个和要执行 alter 操作的表一样的新的空表结构(是alter之前的结构)</li>
<li>在新表执行alter table 语句（速度应该很快）</li>
<li>在原表中创建触发器3个触发器分别对应insert,update,delete操作</li>
<li>以一定块大小从原表拷贝数据到临时表，拷贝过程中通过原表上的触发器在原表进行的写操作都会更新到新建的临时表</li>
<li>Rename 原表到old表中，在把临时表Rename为原表</li>
<li>如果有参考该表的外键，根据alter-foreign-keys-method参数的值，检测外键相关的表，做相应设置的处理</li>
<li>默认最后将旧原表删除</li>
</ol>
<h2 id="2-常用选项说明"><a href="#2-常用选项说明" class="headerlink" title="2. 常用选项说明"></a>2. 常用选项说明</h2><p>只介绍部分常用的选项</p>
<ul>
<li><code>--host=xxx --user=xxx --password=xxx</code><br>连接实例信息，缩写<code>-h xxx -u xxx -p xxx</code>，密码可以使用参数<code>--ask-pass</code> 手动输入。</li>
<li><code>--alter</code><br>结构变更语句，不需要 <code>ALTER TABLE</code>关键字。与原始ddl一样可以指定多个更改，用逗号分隔。<ul>
<li>绝大部分情况下表上需要有主键或唯一索引，因为工具在运行当中为了保证新表也是最新的，需要旧表上创建 DELETE和UPDATE 触发器，同步到新表的时候有主键会更快。个别情况是，当alter操作就是在c1列上建立主键时，DELETE触发器将基于c1列。</li>
<li>子句不支持 rename 去给表重命名。 </li>
<li>alter命令原表就不支持给索引重命名，需要先drop再add，在pt-osc也一样。(mysql 5.7 支持 RENAME INDEX old_index_name TO new_index_name)<br>但给字段重命名，千万不要drop-add，整列数据会丢失，使用<code>change col1 col1_new type constraint</code>（保持类型和约束一致，否则相当于修改 column type，不能online）</li>
<li>子句如果是add column并且定义了not null，那么必须指定default值，否则会失败。</li>
<li>如果要删除外键（名 fk_foo），使用工具的时候外键名要加下划线，比如<code>--alter &quot;DROP FOREIGN KEY _fk_foo&quot;</code></li>
</ul>
</li>
</ul>
<ul>
<li><p><code>D=db_name,t=table_name</code><br>指定要ddl的数据库名和表名</p>
</li>
<li><p><code>--max-load</code><br>默认为<code>Threads_running=25</code>。每个chunk拷贝完后，会检查 <em>SHOW GLOBAL STATUS</em> 的内容，检查指标是否超过了指定的阈值。如果超过，则先暂停。这里可以用逗号分隔，指定多个条件，每个条件格式： <code>status指标=MAX_VALUE</code>或者<code>status指标:MAX_VALUE</code>。如果不指定MAX_VALUE，那么工具会这只其为当前值的120%。<br>因为拷贝行有可能会给部分行上锁，Threads_running 是判断当前数据库负载的绝佳指标。</p>
</li>
<li><p><code>--max-lag</code><br>默认1s。每个chunk拷贝完成后，会查看所有复制Slave的延迟情况（<code>Seconds_Behind_Master</code>）。要是延迟大于该值，则暂停复制数据，直到所有从的滞后小于这个值。<code>--check-interval</code>配合使用，指定出现从库滞后超过 max-lag，则该工具将睡眠多长时间，默认1s，再检查。如<code>--max-lag=5 --check-interval=2</code>。<br>熟悉percona-toolkit的人都知道<code>--recursion-method</code>可以用来指定从库dsn记录。另外，如果从库被停止，将会永远等待，直到从开始同步，并且延迟小于该值。</p>
</li>
<li><p><code>--chunk-time</code><br>默认0.5s，即拷贝数据行的时候，为了尽量保证0.5s内拷完一个chunk，动态调整chunk-size的大小，以适应服务器性能的变化。<br>也可以通过另外一个选项<code>--chunk-size</code>禁止动态调整，即每次固定拷贝 1k 行，如果指定则默认1000行，且比 chunk-time 优先生效</p>
<a id="more"></a></li>
<li><p><code>--set-vars</code><br>使用pt-osc进行ddl要开一个session去操作，<code>set-vars</code>可以在执行alter之前设定这些变量，比如默认会设置<code>--set-vars &quot;wait_timeout=10000,innodb_lock_wait_timeout=1,lock_wait_timeout=60&quot;</code>。<br>因为使用pt-osc之后ddl的速度会变慢，所以预计2.5h只能还不能改完，记得加大<code>wait_timeout</code>。</p>
</li>
<li><p><code>--dry-run</code><br>创建和修改新表，但不会创建触发器、复制数据、和替换原表。并不真正执行，可以看到生成的执行语句，了解其执行步骤与细节，和<code>--print</code>配合最佳。。</p>
</li>
<li><p><code>--execute</code><br>确定修改表，则指定该参数。真正执行alter。–dry-run与–execute必须指定一个，二者相互排斥</p>
</li>
</ul>
<h2 id="3-使用疑惑（限制）"><a href="#3-使用疑惑（限制）" class="headerlink" title="3. 使用疑惑（限制）"></a>3. 使用疑惑（限制）</h2><h3 id="3-1-原表上不能有触发器存在"><a href="#3-1-原表上不能有触发器存在" class="headerlink" title="3.1 原表上不能有触发器存在"></a>3.1 原表上不能有触发器存在</h3><p>这个很容易理解，pt-osc会在原表上创建3个触发器，而一个表上不能同时有2个相同类型的触发器，为简单通用起见，只能一棍子打死。<br>所以如果要让它支持有触发器存在的表也是可以实现的，思路就是：先找到原表触发器定义；重写原表触发器；最后阶段将原表触发器定义应用到新表。</p>
<h3 id="3-2-通过触发器写数据到临时新表，会不会出现数据不一致或异常"><a href="#3-2-通过触发器写数据到临时新表，会不会出现数据不一致或异常" class="headerlink" title="3.2 通过触发器写数据到临时新表，会不会出现数据不一致或异常"></a>3.2 通过触发器写数据到临时新表，会不会出现数据不一致或异常</h3><p>这其实是我的一个顾虑，因为如果update t1，触发update t2，但这条数据还没copy到t2，不就有异常了吗？后台通过打开general_log，看到它创建的触发器：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">    6165 Query     <span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> <span class="string">`pt_osc_confluence_sbtest3_del`</span> <span class="keyword">AFTER</span> <span class="keyword">DELETE</span> <span class="keyword">ON</span> <span class="string">`confluence`</span>.<span class="string">`sbtest3`</span> </div><div class="line">        <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">DELETE</span> <span class="keyword">IGNORE</span> <span class="keyword">FROM</span> <span class="string">`confluence`</span>.<span class="string">`_sbtest3_new`</span> <span class="keyword">WHERE</span> <span class="string">`confluence`</span>.<span class="string">`_sbtest3_new`</span>.<span class="string">`id`</span> &lt;=&gt; OLD.<span class="string">`id`</span></div><div class="line">    <span class="number">6165</span> <span class="keyword">Query</span>     <span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> <span class="string">`pt_osc_confluence_sbtest3_upd`</span> <span class="keyword">AFTER</span> <span class="keyword">UPDATE</span> <span class="keyword">ON</span> <span class="string">`confluence`</span>.<span class="string">`sbtest3`</span> </div><div class="line">        <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">REPLACE</span> <span class="keyword">INTO</span> <span class="string">`confluence`</span>.<span class="string">`_sbtest3_new`</span> (<span class="string">`id`</span>, <span class="string">`k`</span>, <span class="string">`c`</span>, <span class="string">`pad`</span>) <span class="keyword">VALUES</span> (NEW.<span class="string">`id`</span>, NEW.<span class="string">`k`</span>, NEW.<span class="string">`c`</span>, NEW.<span class="string">`pad`</span>)</div><div class="line">    <span class="number">6165</span> <span class="keyword">Query</span>     <span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> <span class="string">`pt_osc_confluence_sbtest3_ins`</span> <span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> <span class="string">`confluence`</span>.<span class="string">`sbtest3`</span> </div><div class="line">        <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">REPLACE</span> <span class="keyword">INTO</span> <span class="string">`confluence`</span>.<span class="string">`_sbtest3_new`</span> (<span class="string">`id`</span>, <span class="string">`k`</span>, <span class="string">`c`</span>, <span class="string">`pad`</span>) <span class="keyword">VALUES</span> (NEW.<span class="string">`id`</span>, NEW.<span class="string">`k`</span>, NEW.<span class="string">`c`</span>, NEW.<span class="string">`pad`</span>)</div><div class="line"></div><div class="line">并且copy操作是：</div><div class="line"></div><div class="line">    <span class="number">6165</span> <span class="keyword">Query</span>     <span class="keyword">INSERT</span> <span class="keyword">LOW_PRIORITY</span> <span class="keyword">IGNORE</span> <span class="keyword">INTO</span> <span class="string">`confluence`</span>.<span class="string">`_sbtest3_new`</span> (<span class="string">`id`</span>, <span class="string">`k`</span>, <span class="string">`c`</span>, <span class="string">`pad`</span>) </div><div class="line">         <span class="keyword">SELECT</span> <span class="string">`id`</span>, <span class="string">`k`</span>, <span class="string">`c`</span>, <span class="string">`pad`</span> <span class="keyword">FROM</span> <span class="string">`confluence`</span>.<span class="string">`sbtest3`</span> <span class="keyword">FORCE</span> <span class="keyword">INDEX</span>(<span class="string">`PRIMARY`</span>) <span class="keyword">WHERE</span> ((<span class="string">`id`</span> &gt;= <span class="string">'4692805'</span>)) <span class="keyword">AND</span> ((<span class="string">`id`</span> &lt;= <span class="string">'4718680'</span>)) </div><div class="line">        <span class="keyword">LOCK</span> <span class="keyword">IN</span> <span class="keyword">SHARE</span> <span class="keyword">MODE</span> <span class="comment">/*pt-online-schema-change 46459 copy nibble*/</span></div></pre></td></tr></table></figure></p>
<p>在原表上update，新临时表上是replace into整行数据，所以达到有则更新，无则插入。同时配合后面的 insert ignore，保证这条数据不会因为重复而失败。</p>
<h3 id="3-3-为什么外键那么特殊"><a href="#3-3-为什么外键那么特殊" class="headerlink" title="3.3 为什么外键那么特殊"></a>3.3 为什么外键那么特殊</h3><p>假设 <em>t1</em> 是要修改的表，<em>t2</em> 有外键依赖于 <em>t1</em>，<em>_t1_new</em> 是 alter <em>t1</em> 产生的新临时表。<br>这里的外键不是看t1上是否存在外键，而是作为子表的 t2。主要问题在 rename t1 时，t1“不存在”导致t2的外键认为参考失败，不允许rename。<br>pt-osc提供<code>--alter-foreign-keys-method</code>选项来决定怎么处理这种情况：</p>
<ul>
<li><code>rebuild_constraints</code>，优先采用这种方式<ul>
<li>它先通过 <em>alter table t2 drop fk1,add _fk1</em> 重建外键参考，指向新表 </li>
<li>再 <em>rename t1 t1_old, _t1_new t1</em> ，交换表名，不影响客户端</li>
<li>删除旧表 t1_old<br>但如果字表t2太大，以致alter操作可能耗时过长，有可能会强制选择 drop_swap。<br>涉及的主要方法在 <code>pt-online-schema-change</code> 文件的 <em>determine_alter_fk_method</em>, <em>rebuild_constraints</em>, <em>swap_tables</em>三个函数中。</li>
</ul>
</li>
<li><code>drop_swap</code>，<ul>
<li>禁用t2表外键约束检查 <code>FOREIGN_KEY_CHECKS=0</code></li>
<li>然后 drop t1 原表</li>
<li>再 <em>rename _t1_new t1</em><br>这种方式速度更快，也不会阻塞请求。但有风险，第一，drop表的瞬间到rename过程，原表t1是不存在的，遇到请求会报错；第二，如果因为bug或某种原因，旧表已删，新表rename失败，那就太晚了，但这种情况很少见。<br>我们的开发规范决定，即使表间存在外键参考关系，也不通过表定义强制约束。</li>
</ul>
</li>
</ul>
<h3 id="3-4-在使用之前需要对磁盘容量进行评估"><a href="#3-4-在使用之前需要对磁盘容量进行评估" class="headerlink" title="3.4 在使用之前需要对磁盘容量进行评估"></a>3.4 在使用之前需要对磁盘容量进行评估</h3><p>使用OSC会使增加一倍的空间，包括索引<br>而且在 Row Based Replication 下，还会写一份binlog。不要想当然使用<code>--set-vars</code>去设置 sql_log_bin=0，因为在这个session级别，alter语句也要在从库上执行，除非你对从库另有打算。</p>
<h2 id="4-使用-pt-osc原生-5-6-online-ddl相比，如何选择"><a href="#4-使用-pt-osc原生-5-6-online-ddl相比，如何选择" class="headerlink" title="4. 使用 pt-osc原生 5.6 online ddl相比，如何选择"></a>4. 使用 pt-osc原生 5.6 online ddl相比，如何选择</h2><ul>
<li>online ddl在必须copy table时成本较高，不宜采用</li>
<li>pt-osc工具在存在触发器时，不适用</li>
<li>修改索引、外键、列名时，优先采用online ddl，并指定 ALGORITHM=INPLACE</li>
<li>其它情况使用pt-osc，虽然存在copy data</li>
<li>pt-osc比online ddl要慢一倍左右，因为它是根据负载调整的</li>
<li>无论哪种方式都选择的业务低峰期执行</li>
<li>特殊情况需要利用主从特性，先alter从库，主备切换，再改原主库</li>
</ul>
<p>借助percona博客一张图说明一下：</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/DDLFlow1.png" alt="DDL flow"></p>
<h2 id="5-示例"><a href="#5-示例" class="headerlink" title="5. 示例"></a>5. 示例</h2><ul>
<li><p><strong>添加新列</strong><br>完整输出过程</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">[root@ssd-<span class="number">34</span> sysbench]# pt-online-schema-change --user=user --password=password --host=<span class="number">10.0</span>.<span class="number">201.34</span>  --alter <span class="string">"ADD COLUMN f_id int default 0"</span> D=confluence,t=sbtest3 --print --execute</div><div class="line">No slaves found.  See --recursion-method <span class="keyword">if</span> host ssd-<span class="number">34</span> has slaves.</div><div class="line"><span class="literal">Not</span> checking slave lag because no slaves were found <span class="literal">and</span> --check-slave-lag was <span class="literal">not</span> specified.</div><div class="line"><span class="symbol">Operation, tries, wait:</span></div><div class="line">  analyze_table, <span class="number">10</span>, <span class="number">1</span></div><div class="line">  copy_rows, <span class="number">10</span>, <span class="number">0.25</span></div><div class="line">  create_triggers, <span class="number">10</span>, <span class="number">1</span></div><div class="line">  drop_triggers, <span class="number">10</span>, <span class="number">1</span></div><div class="line">  swap_tables, <span class="number">10</span>, <span class="number">1</span></div><div class="line">  update_foreign_keys, <span class="number">10</span>, <span class="number">1</span></div><div class="line">Altering `confluence`.`sbtest3`...</div><div class="line">Creating new table...         ==&gt; 创建新表</div><div class="line">CREATE TABLE `confluence`.`_sbtest3_new` (</div><div class="line">  `id` int(<span class="number">10</span>) unsigned <span class="literal">NOT</span> NULL AUTO_INCREMENT,</div><div class="line">  `k` int(<span class="number">10</span>) unsigned <span class="literal">NOT</span> NULL DEFAULT '<span class="number">0</span>',</div><div class="line">  `c` char(<span class="number">120</span>) COLLATE utf8_bin <span class="literal">NOT</span> NULL DEFAULT '',</div><div class="line">  `pad` char(<span class="number">60</span>) COLLATE utf8_bin <span class="literal">NOT</span> NULL DEFAULT '',</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `k_3` (`k`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=<span class="number">5000001</span> DEFAULT CHARSET=utf8 COLLATE=utf8_bin MAX_ROWS=<span class="number">1000000</span></div><div class="line">Created new table confluence._sbtest3_new OK.</div><div class="line">Altering new table...         ==&gt; 使用ddl修改新表结构</div><div class="line">ALTER TABLE `confluence`.`_sbtest3_new` ADD COLUMN f_id int default <span class="number">0</span></div><div class="line">Altered `confluence`.`_sbtest3_new` OK.</div><div class="line"><span class="number">2016</span>-<span class="number">05</span>-<span class="number">24</span>T20:<span class="number">54</span>:<span class="number">23</span> Creating triggers...   ==&gt; 在旧表上创建<span class="number">3</span>个触发器</div><div class="line">CREATE TRIGGER `pt_osc_confluence_sbtest3_del` AFTER DELETE ON `confluence`.`sbtest3` FOR EACH ROW </div><div class="line">    DELETE IGNORE FROM `confluence`.`_sbtest3_new` WHERE `confluence`.`_sbtest3_new`.`id` &lt;=&gt; OLD.`id`</div><div class="line">CREATE TRIGGER `pt_osc_confluence_sbtest3_upd` AFTER UPDATE ON `confluence`.`sbtest3` FOR EACH ROW </div><div class="line">    REPLACE INTO `confluence`.`_sbtest3_new` (`id`, `k`, `c`, `pad`) VALUES (NEW.`id`, NEW.`k`, NEW.`c`, NEW.`pad`)</div><div class="line">CREATE TRIGGER `pt_osc_confluence_sbtest3_ins` AFTER INSERT ON `confluence`.`sbtest3` FOR EACH ROW </div><div class="line">    REPLACE INTO `confluence`.`_sbtest3_new` (`id`, `k`, `c`, `pad`) VALUES (NEW.`id`, NEW.`k`, NEW.`c`, NEW.`pad`)</div><div class="line"><span class="number">2016</span>-<span class="number">05</span>-<span class="number">24</span>T20:<span class="number">54</span>:<span class="number">23</span> Created triggers OK.</div><div class="line"><span class="number">2016</span>-<span class="number">05</span>-<span class="number">24</span>T20:<span class="number">54</span>:<span class="number">23</span> Copying approximately <span class="number">4485573</span> rows...  ==&gt; 分块拷贝数据到新表</div><div class="line">INSERT LOW_PRIORITY IGNORE INTO `confluence`.`_sbtest3_new` (`id`, `k`, `c`, `pad`) </div><div class="line">  SELECT `id`, `k`, `c`, `pad` FROM `confluence`.`sbtest3` FORCE INDEX(`PRIMARY`) WHERE ((`id` &gt;= ?)) <span class="literal">AND</span> ((`id` &lt;= ?)) </div><div class="line">  LOCK IN SHARE MODE /*pt-online-schema-change <span class="number">44155</span> copy nibble*/</div><div class="line">SELECT /*!<span class="number">40001</span> SQL_NO_CACHE */ `id` FROM `confluence`.`sbtest3` FORCE INDEX(`PRIMARY`) WHERE ((`id` &gt;= ?)) ORDER BY `id` LIMIT ?, <span class="number">2</span> /*next chunk boundary*/</div><div class="line"><span class="symbol">Copying `confluence`.`sbtest3`:  36% 00:</span><span class="number">52</span> remain</div><div class="line"><span class="symbol">Copying `confluence`.`sbtest3`:  69% 00:</span><span class="number">26</span> remain</div><div class="line"><span class="number">2016</span>-<span class="number">05</span>-<span class="number">24</span>T20:<span class="number">56</span>:<span class="number">01</span> Copied rows OK.</div><div class="line"><span class="number">2016</span>-<span class="number">05</span>-<span class="number">24</span>T20:<span class="number">56</span>:<span class="number">01</span> Analyzing new table...</div><div class="line"><span class="number">2016</span>-<span class="number">05</span>-<span class="number">24</span>T20:<span class="number">56</span>:<span class="number">01</span> Swapping tables...  ==&gt; 交换新旧表</div><div class="line">RENAME TABLE `confluence`.`sbtest3` TO `confluence`.`_sbtest3_old`, `confluence`.`_sbtest3_new` TO `confluence`.`sbtest3`</div><div class="line"><span class="number">2016</span>-<span class="number">05</span>-<span class="number">24</span>T20:<span class="number">56</span>:<span class="number">01</span> Swapped original <span class="literal">and</span> new tables OK.</div><div class="line"><span class="number">2016</span>-<span class="number">05</span>-<span class="number">24</span>T20:<span class="number">56</span>:<span class="number">01</span> Dropping old table...  ==&gt; 删除旧表</div><div class="line">DROP TABLE <span class="keyword">IF</span> EXISTS `confluence`.`_sbtest3_old`</div><div class="line"><span class="number">2016</span>-<span class="number">05</span>-<span class="number">24</span>T20:<span class="number">56</span>:<span class="number">02</span> Dropped old table `confluence`.`_sbtest3_old` OK.</div><div class="line"><span class="number">2016</span>-<span class="number">05</span>-<span class="number">24</span>T20:<span class="number">56</span>:<span class="number">02</span> Dropping triggers...</div><div class="line">DROP TRIGGER <span class="keyword">IF</span> EXISTS `confluence`.`pt_osc_confluence_sbtest3_del`;</div><div class="line">DROP TRIGGER <span class="keyword">IF</span> EXISTS `confluence`.`pt_osc_confluence_sbtest3_upd`;</div><div class="line">DROP TRIGGER <span class="keyword">IF</span> EXISTS `confluence`.`pt_osc_confluence_sbtest3_ins`;</div><div class="line"><span class="number">2016</span>-<span class="number">05</span>-<span class="number">24</span>T20:<span class="number">56</span>:<span class="number">02</span> Dropped triggers OK.</div><div class="line">Successfully altered `confluence`.`sbtest3`.</div></pre></td></tr></table></figure>
</li>
<li><p><strong>修改列类型</strong></p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">pt-online-schema-change h=10.0.201.34,P=3306,u=jacky,p=xxx,D=confluence,t=sbtest3 \</div><div class="line">-<span class="ruby">-alter <span class="string">"CHANGE pad f_pad varchar(60) NOT NULL DEFAULT '' "</span> \</span></div><div class="line">-<span class="ruby">-print --dry-run</span></div><div class="line"></div><div class="line">pt-online-schema-change -ujacky -p xxx -h "10.0.201.34" D=confluence,t=sbtest3 \</div><div class="line">-<span class="ruby">-alter <span class="string">"CHANGE pad f_pad varchar(60) NOT NULL DEFAULT '' "</span> \</span></div><div class="line">-<span class="ruby">-execute</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>添加删除索引</strong><br>放后台执行</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">pt</span><span class="literal">-</span><span class="comment">online</span><span class="literal">-</span><span class="comment">schema</span><span class="literal">-</span><span class="comment">change</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">user=user</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">ask</span><span class="literal">-</span><span class="comment">pass</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">host=10</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">201</span><span class="string">.</span><span class="comment">34</span>  <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">alter</span> <span class="comment">"DROP</span> <span class="comment">KEY</span> <span class="comment">cid</span><span class="string">,</span> <span class="comment">ADD</span> <span class="comment">KEY</span> <span class="comment">idx_corpid_userid(f_corp_id</span><span class="string">,</span><span class="comment">f_user_id)</span> <span class="comment">"</span> <span class="comment">\</span></div><div class="line"><span class="comment">D=confluence</span><span class="string">,</span><span class="comment">t=sbtest3</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">print</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">execute</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>修改主键</strong></p>
</li>
</ul>
<p>在我的环境里有不少表设计之初没有自增id，而是采用复合主键，pt-osc 对删除、添加主键会特殊处理，详见 <a href="http://seanlook/2016/05/27/mysql-pt-osc-add-primarykey" target="_blank" rel="external">这里</a>。</p>
<h2 id="6-错误处理"><a href="#6-错误处理" class="headerlink" title="6. 错误处理"></a>6. 错误处理</h2><p><strong>1. 存在trigger </strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[zx@mysql-5 ~]$ pt-online-schema-<span class="keyword">change</span>  -u <span class="keyword">user</span> -p <span class="keyword">password</span> -h <span class="number">10.0</span><span class="number">.200</span><span class="number">.195</span> \</div><div class="line"><span class="comment">--alter="MODIFY COLUMN f_receiver  varchar(128)                                                      NOT NULL DEFAULT '' AFTER f_user_id" --dry-run D=db_name,t=table_name</span></div><div class="line">The <span class="keyword">table</span> <span class="string">`db_name`</span>.<span class="string">`table_name`</span> has triggers.  This tool needs <span class="keyword">to</span> <span class="keyword">create</span> its own <span class="keyword">triggers</span>, so the <span class="keyword">table</span> cannot already have triggers.</div></pre></td></tr></table></figure></p>
<p>表上存在触发器，不适用。</p>
<p><strong>2. no-version-check  </strong><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ pt-online-schema-change -uuser -ppassword --alter <span class="string">"add key id_provice(f_provice)"</span> \</div><div class="line"><span class="keyword">D</span>=db_name,t=tb_name -<span class="keyword">h</span> rdsxxxxxx.mysql.rds.aliyuncs.com</div><div class="line">Can't <span class="keyword">use</span> <span class="keyword">an</span> undefined value <span class="keyword">as</span> <span class="keyword">an</span> ARRAY reference at /usr/bin/pt-online-schema-change <span class="keyword">line</span> 7335.</div></pre></td></tr></table></figure></p>
<p>这个错误在阿里云RDS上执行时出现的，我以为是我哪里语法写错了，但拿到原生5.6的版本上就没问题了，加上<code>--no-version-check</code>选项就好了，见 <a href="https://help.aliyun.com/knowledge_detail/13098164.html" target="_blank" rel="external">https://help.aliyun.com/knowledge_detail/13098164.html</a> ，没深究，应该是pt去验证mysql server版本的时候从rds拿到的信息不对，导致格式出错。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.percona.com/doc/percona-toolkit/2.2/pt-online-schema-change.html" target="_blank" rel="external">refman pt-online-schema-change</a></li>
<li><a href="https://help.aliyun.com/knowledge_detail/13098164.html" target="_blank" rel="external">RDS MySQL 如何使用 Percona Toolkit</a></li>
<li><a href="http://www.cnblogs.com/zhoujinyi/p/3491059.html" target="_blank" rel="external">percona-toolkit 之 【pt-online-schema-change】说明</a></li>
<li><a href="https://www.percona.com/blog/2014/11/18/avoiding-mysql-alter-table-downtime/" target="_blank" rel="external">Avoiding MySQL ALTER table downtime</a></li>
<li><a href="http://www.imcjd.com/?p=1081" target="_blank" rel="external">MySQL Online DDL和NoSQL Schemaless Design</a></li>
</ul>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/05/27/mysql-pt-online-schema-change/">http://seanlook.com/2016/05/27/mysql-pt-online-schema-change/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用pt-osc修改主键时注意]]></title>
      <url>http://seanlook.com/2016/05/27/mysql-pt-osc-add-primarykey/</url>
      <content type="html"><![CDATA[<p>使用 pt-online-schema-change 做在线ddl最添加普通索引、列，修改列类型、添加默认值等使用比较常规，但涉及到要修改的是主键时就有点棘手。在我修改线上实例过程中，有这样的需求，不妨先思考一下怎么做才好：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">原表上有个复合主键，现在要添加一个自增<span class="built_in">id</span>作为主键，如何进行</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>会涉及到以下修改动作：</p>
<ol>
<li>删除复合主键定义</li>
<li>添加新的自增主键</li>
<li>原复合主键字段，修改成唯一索引</li>
</ol>
<p>如果你够聪明，应该会把这三个操作放在同一个 alter table 命令执行。percona手册里有两个地方对修改主键进行了特殊注解：</p>
<blockquote>
<p>–alter<br>A notable exception is when a PRIMARY KEY or UNIQUE INDEX is being created from existing columns as part of the ALTER clause; in that case it will use these column(s) for the DELETE trigger.</p>
<p>–[no]check-alter</p>
<ul>
<li>DROP PRIMARY KEY<br>If –alter contain DROP PRIMARY KEY (case- and space-insensitive), a warning is printed and the tool exits unless –dry-run is specified. Altering the primary key can be dangerous, but the tool can handle it. The tool’s triggers, particularly the DELETE trigger, are most affected by altering the primary key because the tool prefers to use the primary key for its triggers. You should first run the tool with –dry-run and –print and verify that the triggers are correct.</li>
</ul>
</blockquote>
<p>由上一篇文章 <a href="http://seanlook.com/2016/05/27/mysql-pt-online-schema-change/">pt-online-schema-change使用说明、限制与比较</a> 可知，pt-osc会在原表t1上创建 AFTER DELETE/UPDATE/INSERT 三个触发器，修改主键影响最大的就是 DELETE 触发器：新表t2上的主键字段在旧表t1上不存在，无法根据主键条件触发删除新表t2数据。<code>but the tool can handle it</code>，原因是pt-osc把触发器改成了下面的形式：<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CREATE TRIGGER `pt_osc_confluence_sbtest3_del` AFTER DELETE ON `confluence`.`sbtest3` FOR EACH ROW DELETE IGNORE FROM `confluence`.`_sbtest3_new` </div><div class="line">WHERE `confluence`.`_sbtest3_new`.`id` &lt;=&gt; OLD.`id` <span class="literal">AND</span> `confluence`.`_sbtest3_new`.`k` &lt;=&gt; OLD.`k`</div><div class="line"></div><div class="line">注：sbtest3表上以(id,k)作为复合主键</div></pre></td></tr></table></figure></p>
<p>但是如果id或k列上没有索引，这个删除的代价非常高，所以一定要同时添加复合（唯一）索引 <code>(id,k)</code> .</p>
<p>而对于INSERT,UPDATE的触发器，依然是 <code>REPLACE INTO</code>语法，因为它采用的是先插入，如果违反主键或唯一约束，则根据主键或意义约束删除这条数据，再执行插入。（但是注意你不能依赖于新表的主键递增，因为如果原表有update，新表就会先插入这一条，导致id与原表记录所在顺序不一样）</p>
<p>所以如果使用pt-osc去修改删除主键，务必同时添加原主键为 UNIQUE KEY，否则很有可能导致性能问题：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ pt-online-schema-<span class="keyword">change</span> <span class="comment">--user=ecuser --password=ecuser --host=10.0.201.34  \</span></div><div class="line"><span class="comment">--alter "DROP PRIMARY KEY,add column pk int auto_increment primary key,add unique key uk_id_k(id,k)" \</span></div><div class="line">D=confluence,t=sbtest3 <span class="comment">--print --dry-run</span></div><div class="line"></div><div class="line"><span class="comment">--alter contains 'DROP PRIMARY KEY'.  Dropping and altering the primary key can be dangerous, </span></div><div class="line">especially <span class="keyword">if</span> the original <span class="keyword">table</span> does <span class="keyword">not</span> have other <span class="keyword">unique</span> indexes.  ==&gt;注意 dry-run的输出</div><div class="line"></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`confluence`</span>.<span class="string">`_sbtest3_new`</span> <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>,<span class="keyword">add</span> <span class="keyword">column</span> pk <span class="built_in">int</span> auto_increment primary <span class="keyword">key</span>,<span class="keyword">add</span> <span class="keyword">unique</span> <span class="keyword">key</span> uk_id_k(<span class="keyword">id</span>,k)</div><div class="line">Altered <span class="string">`confluence`</span>.<span class="string">`_sbtest3_new`</span> OK.</div><div class="line"><span class="keyword">Using</span> original <span class="keyword">table</span> <span class="keyword">index</span> PRIMARY <span class="keyword">for</span> the <span class="keyword">DELETE</span> <span class="keyword">trigger</span> instead <span class="keyword">of</span> <span class="keyword">new</span> <span class="keyword">table</span> <span class="keyword">index</span> PRIMARY because ==&gt; 使用原表主键值判断</div><div class="line">the <span class="keyword">new</span> <span class="keyword">table</span> <span class="keyword">index</span> uses <span class="keyword">column</span> pk which does <span class="keyword">not</span> exist <span class="keyword">in</span> the original table.</div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> <span class="string">`pt_osc_confluence_sbtest3_del`</span> <span class="keyword">AFTER</span> <span class="keyword">DELETE</span> <span class="keyword">ON</span> <span class="string">`confluence`</span>.<span class="string">`sbtest3`</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">DELETE</span> <span class="keyword">IGNORE</span> <span class="keyword">FROM</span> <span class="string">`confluence`</span>.<span class="string">`_sbtest3_new`</span> </div><div class="line"><span class="keyword">WHERE</span> <span class="string">`confluence`</span>.<span class="string">`_sbtest3_new`</span>.<span class="string">`id`</span> &lt;=&gt; OLD.<span class="string">`id`</span> <span class="keyword">AND</span> <span class="string">`confluence`</span>.<span class="string">`_sbtest3_new`</span>.<span class="string">`k`</span> &lt;=&gt; OLD.<span class="string">`k`</span></div></pre></td></tr></table></figure>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/05/27/mysql-pt-osc-add-primarykey/">http://seanlook.com/2016/05/27/mysql-pt-osc-add-primarykey/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql 5.6 原生Online DDL解析]]></title>
      <url>http://seanlook.com/2016/05/24/mysql-online-ddl-concept/</url>
      <content type="html"><![CDATA[<p>做MySQL的都知道，数据库操作里面，DDL操作（比如CREATE,DROP,ALTER等）代价是非常高的，特别是在单表上千万的情况下，加个索引或改个列类型，就有可能堵塞整个表的读写。</p>
<p>然后 mysql 5.6 开始，大家期待的Online DDL出现了，可以实现修改表结构的同时，依然允许DML操作(select,insert,update,delete)。在这个特性出现以前，用的比较多的工具是<code>pt-online-schema-change</code>，比较请参考<a href="http://seanlook.com/2016/05/27/mysql-pt-online-schema-change">pt-online-schema-change使用说明、限制与比较</a>或 <a href="http://www.fromdual.ch/online-ddl_vs_pt-online-schema-change" target="_blank" rel="external">ONLINE DDL VS PT-ONLINE-SCHEMA-CHANGE</a> 。</p>
<h2 id="1-Online-DDL"><a href="#1-Online-DDL" class="headerlink" title="1. Online DDL"></a>1. Online DDL</h2><p>在 MySQL 5.1 （带InnoDB Plugin）和5.5中，有个新特性叫 Fast Index Creation（下称 FIC），就是在添加或者删除二级<strong>索引</strong>的时候，可以不用复制原表。对于之前的版本对于索引的添加删除这类DDL操作，MySQL数据库的操作过程为如下：</p>
<ol>
<li>首先新建Temp table，表结构是 ALTAR TABLE 新定义的结构</li>
<li>然后把原表中数据导入到这个Temp table</li>
<li>删除原表</li>
<li>最后把临时表rename为原来的表名</li>
</ol>
<p>为了保持数据的一致性，中间复制数据（Copy Table）全程锁表只读，如果有写请求进来将无法提供服务，连接数爆张。</p>
<p>引入FIC之后，创建二级索引时会对原表加上一个S锁，创建过程不需要重建表（no-rebuild）；删除InnoDB二级索引只需要更新内部视图，并标记这个索引的空间可用，去掉数据库元数据上该索引的定义即可。这个过程也只允许读操作，不能写入，但大大加快了修改索引的速度（不含主键索引，InnoDB IOT的特性决定了修改主键依然需要 Copy Table ）。</p>
<p>FIC只对索引的创建删除有效，MySQL 5.6 Online DDL把这种特性扩展到了添加列、删除列、修改列类型、列重命名、设置默认值等等，实际效果要看所使用的选项和操作类别来定。</p>
<h3 id="1-1-Online-DDL选项"><a href="#1-1-Online-DDL选项" class="headerlink" title="1.1 Online DDL选项"></a>1.1 Online DDL选项</h3><p>MySQL 在线DDL分为 <code>INPLACE</code> 和 <code>COPY</code> 两种方式，通过在ALTER语句的ALGORITHM参数指定。</p>
<ul>
<li><code>ALGORITHM=INPLACE</code>，可以避免重建表带来的IO和CPU消耗，保证ddl期间依然有良好的性能和并发。</li>
<li><code>ALGORITHM=COPY</code>，需要拷贝原始表，所以不允许并发DML写操作，可读。这种copy方式的效率还是不如 inplace ，因为前者需要记录undo和redo log，而且因为临时占用buffer pool引起短时间内性能受影响。</li>
</ul>
<p>上面只是 Online DDL 内部的实现方式，此外还有 LOCK 选项控制是否锁表，根据不同的DDL操作类型有不同的表现：默认mysql尽可能不去锁表，但是像修改主键这样的昂贵操作不得不选择锁表。</p>
<ul>
<li><code>LOCK=NONE</code>，即DDL期间允许并发读写涉及的表，比如为了保证 ALTER TABLE 时不影响用户注册或支付，可以明确指定，好处是如果不幸该 alter语句不支持对该表的继续写入，则会提示失败，而不会直接发到库上执行。<code>ALGORITHM=COPY</code>默认LOCK级别</li>
<li><code>LOCK=SHARED</code>，即DDL期间表上的写操作会被阻塞，但不影响读取。</li>
<li><code>LOCK=DEFAULT</code>，让mysql自己去判断lock的模式，原则是mysql尽可能不去锁表</li>
<li><code>LOCK=EXCLUSIVE</code>，即DDL期间该表不可用，堵塞任何读写请求。如果你想alter操作在最短的时间内完成，或者表短时间内不可用能接受，可以手动指定。</li>
</ul>
<p>但是有一点需要说明，无论任何模式下，online ddl开始之前都需要一个短时间排它锁(exclusive)来准备环境，所以alter命令发出后，会首先等待该表上的其它操作完成，在alter命令之后的请求会出现等待<code>waiting meta data lock</code>。同样在ddl结束之前，也要等待alter期间所有的事务完成，也会堵塞一小段时间。所以尽量在ALTER TABLE之前确保没有大事务在执行，否则一样出现连环锁表。</p>
<h3 id="1-2-考虑不同的DDL操作类别"><a href="#1-2-考虑不同的DDL操作类别" class="headerlink" title="1.2 考虑不同的DDL操作类别"></a>1.2 考虑不同的DDL操作类别</h3><p>从上面的介绍可以看出，不是5.6支持在线ddl就可以随心所欲的alter table，锁不锁表要看情况：</p>
<a id="more"></a>
<p>提示：下表根据官方 <a href="https://dev.mysql.com/doc/refman/5.6/en/innodb-create-index-overview.html" target="_blank" rel="external">Summary of Online Status for DDL Operations</a> 整理挑选的常用操作。</p>
<ul>
<li><em>In-Place</em> 为Yes是优选项，说明该操作支持INPLACE</li>
<li><em>Copies Table</em> 为No是优选项，因为为Yes需要重建表。大部分情况与In-Place是相反的</li>
<li><em>Allows Concurrent DML?</em> 为Yes是优选项，说明ddl期间表依然可读写，可以指定 LOCK=NONE（如果操作允许的话mysql自动就是NONE）</li>
<li><em>Allows Concurrent Query?</em> 默认所有DDL操作期间都允许查询请求，放在这只是便于参考</li>
<li><em>Notes</em> 会对前面几列Yes/No带 * 号的限制说明</li>
</ul>
<table>
<thead>
<tr>
<th>Operation</th>
<th>In-Place?</th>
<th>Copies Table?</th>
<th>Allows Concurrent DML?</th>
<th>Allows Concurrent Query?</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>添加索引</td>
<td>Yes*</td>
<td>No*</td>
<td>Yes</td>
<td>Yes</td>
<td>对全文索引的一些限制</td>
</tr>
<tr>
<td>删除索引</td>
<td>Yes</td>
<td>No</td>
<td>Yes</td>
<td>Yes</td>
<td>仅修改表的元数据</td>
</tr>
<tr>
<td>OPTIMIZE TABLE</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>从 5.6.17开始使用ALGORITHM=INPLACE，当然如果指定了<code>old_alter_table=1</code>或mysqld启动带<code>--skip-new</code>则将还是COPY模式。如果表上有全文索引只支持COPY</td>
</tr>
<tr>
<td>对一列设置默认值</td>
<td>Yes</td>
<td>No</td>
<td>Yes</td>
<td>Yes</td>
<td>仅修改表的元数据</td>
</tr>
<tr>
<td>对一列修改auto-increment 的值</td>
<td>Yes</td>
<td>No</td>
<td>Yes</td>
<td>Yes</td>
<td>仅修改表的元数据</td>
</tr>
<tr>
<td>添加 foreign key constraint</td>
<td>Yes*</td>
<td>No*</td>
<td>Yes</td>
<td>Yes</td>
<td>为了避免拷贝表，在约束创建时会禁用foreign_key_checks</td>
</tr>
<tr>
<td>删除 foreign key constraint</td>
<td>Yes</td>
<td>No</td>
<td>Yes</td>
<td>Yes</td>
<td>foreign_key_checks 不影响</td>
</tr>
<tr>
<td>改变列名</td>
<td>Yes*</td>
<td>No*</td>
<td>Yes*</td>
<td>Yes</td>
<td>为了允许DML并发, 如果保持相同数据类型，仅改变列名</td>
</tr>
<tr>
<td>添加列</td>
<td>Yes*</td>
<td>Yes*</td>
<td>Yes*</td>
<td>Yes</td>
<td>尽管允许 ALGORITHM=INPLACE ，但数据大幅重组，所以它仍然是一项昂贵的操作。当添加列是auto-increment，不允许DML并发</td>
</tr>
<tr>
<td>删除列</td>
<td>Yes</td>
<td>Yes*</td>
<td>Yes</td>
<td>Yes</td>
<td>尽管允许 ALGORITHM=INPLACE ，但数据大幅重组，所以它仍然是一项昂贵的操作</td>
</tr>
<tr>
<td>修改列数据类型</td>
<td>No</td>
<td>Yes*</td>
<td>No</td>
<td>Yes</td>
<td>修改类型或添加长度，都会拷贝表，而且不允许更新操作</td>
</tr>
<tr>
<td>更改列顺序</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>尽管允许 ALGORITHM=INPLACE ，但数据大幅重组，所以它仍然是一项昂贵的操作</td>
</tr>
<tr>
<td>修改ROW_FORMAT <br> 和KEY_BLOCK_SIZE</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>尽管允许 ALGORITHM=INPLACE ，但数据大幅重组，所以它仍然是一项昂贵的操作</td>
</tr>
<tr>
<td>设置列属性NULL<br>或NOT NULL</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>尽管允许 ALGORITHM=INPLACE ，但数据大幅重组，所以它仍然是一项昂贵的操作</td>
</tr>
<tr>
<td>添加主键</td>
<td>Yes*</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>尽管允许 ALGORITHM=INPLACE ，但数据大幅重组，所以它仍然是一项昂贵的操作。<br> 如果列定义必须转化NOT NULL，则不允许INPLACE</td>
</tr>
<tr>
<td>删除并添加主键</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>在同一个 ALTER TABLE 语句删除就主键、添加新主键时，才允许inplace；数据大幅重组,所以它仍然是一项昂贵的操作。</td>
</tr>
<tr>
<td>删除主键</td>
<td>No</td>
<td>Yes</td>
<td>No</td>
<td>Yes</td>
<td>不允许并发DML，要拷贝表，而且如果没有在同一 ATLER TABLE 语句里同时添加主键则会收到限制</td>
</tr>
<tr>
<td>变更表字符集</td>
<td>No</td>
<td>Yes</td>
<td>No</td>
<td>Yes</td>
<td>如果新的字符集编码不同，重建表</td>
</tr>
</tbody>
</table>
<p>从表看出，In-Place为No，DML一定是No，说明 <code>ALGORITHM=COPY</code> 一定会发生拷贝表，只读。但 <code>ALGORITHM=INPLACEE</code> 也要可能发生拷贝表，但可以并发DML:</p>
<ul>
<li>添加、删除列，改变列顺序</li>
<li>添加或删除主键</li>
<li>改变行格式ROW_FORMAT和压缩块大小KEY_BLOCK_SIZE</li>
<li>改变列NULL或NOT NULL</li>
<li>优化表OPTIMIZE TABLE</li>
<li>强制 rebuild 该表</li>
</ul>
<p>不允许并发DML的情况有：修改列数据类型、删除主键、变更表字符集，即这些类型操作ddl是不能online的。</p>
<p>另外，更改主键索引与普通索引处理方式是不一样的，主键即聚集索引，体现了表数据在物理磁盘上的排列，包含了数据行本身，需要拷贝表；而普通索引通过包含主键列来定位数据，所以普通索引的创建只需要一次扫描主键即可，而且是在已有数据的表上建立二级索引，更紧凑，将来查询效率更高。</p>
<p>修改主键也就意味着要重建所有的普通索引。删除二级索引更简单，修改InnoDB系统表信息和数据字典，标记该所以不存在，标记所占用的表空间可以被新索引或数据行重新利用。</p>
<h3 id="1-3-在线DDL的限制"><a href="#1-3-在线DDL的限制" class="headerlink" title="1.3 在线DDL的限制"></a>1.3 在线DDL的限制</h3><ul>
<li>在alter table时，如果涉及到table copy操作，要确保 <code>datadir</code> 目录有足够的磁盘空间，能够放的下整张表，因为拷贝表的的操作是直接在数据目录下进行的。</li>
<li>添加索引无需table copy，但要确保 <code>tmpdir</code> 目录足够存下索引一列的数据（如果是组合索引，当前临时排序文件一合并到原表上就会删除）</li>
<li>在主从环境下，主库执行alter命令在完成之前是不会进入binlog记录事件，如果允许dml操作则不影响记录时间，所以期间不会导致延迟。然而，由于从库是单个SQL Thread按顺序应用relay log，轮到ALTER语句时直到执行完才能下一条，所以从库会在master ddl完成后开始产生延迟。（pt-osc可以控制延迟时间，所以这种场景下它更合适）</li>
<li>During each online DDL ALTER TABLE statement, regardless of the LOCK clause, there are brief periods at the beginning and end requiring an exclusive lock on the table (the same kind of lock specified by the LOCK=EXCLUSIVE clause). Thus, an online DDL operation might wait before starting if there is a long-running transaction performing inserts, updates, deletes, or SELECT … FOR UPDATE on that table; and an online DDL operation might wait before finishing if a similar long-running transaction was started while the ALTER TABLE was in progress.</li>
<li>在执行一个允许并发DML在线 ALTER TABLE时，结束之前这个线程会应用 <em>online log</em> 记录的增量修改，而这些修改是其它thread里产生的，所以有可能会遇到重复键值错误 <em>(ERROR 1062 (23000): Duplicate entry)</em>。</li>
<li>涉及到table copy时，目前还没有机制限制暂停ddl，或者限制IO阀值<br>在MySQL 5.7.6开始能够通过 performance_schema 观察alter table的进度</li>
<li>一般来说，建议把多个alter语句合并在一起进行，避免多次table rebuild带来的消耗。但是也要注意分组，比如需要copy table和只需inplace就能完成的，应该分两个alter语句。</li>
<li>如果DDL执行时间很长，期间又产生了大量的dml操作，以至于超过了 <code>innodb_online_alter_log_max_size</code> 变量所指定的大小，会引起 <em>DB_ONLINE_LOG_TOO_BIG</em> 错误。默认为 128M，特别对于需要拷贝大表的alter操作，考虑临时加大该值，以此获得更大的日志缓存空间</li>
<li>执行完 <code>ALTER TABLE</code> 之后，最好 <code>ANALYZE TABLE tb1</code> 去更新索引统计信息</li>
</ul>
<h2 id="2-实现过程"><a href="#2-实现过程" class="headerlink" title="2. 实现过程"></a>2. 实现过程</h2><p>online ddl主要包括3个阶段，prepare阶段，ddl执行阶段，commit阶段，rebuild方式比no-rebuild方式实质多了一个ddl执行阶段，prepare阶段和commit阶段类似。下面将主要介绍ddl执行过程中三个阶段的流程。</p>
<ul>
<li><p><strong> Prepare阶段 </strong> :  </p>
<ol>
<li>创建新的临时frm文件(与InnoDB无关)</li>
<li>持有EXCLUSIVE-MDL锁，禁止读写</li>
<li>根据alter类型，确定执行方式(copy,online-rebuild,online-norebuild)<br>假如是Add Index，则选择online-norebuild即INPLACE方式</li>
<li>更新数据字典的内存对象</li>
<li>分配row_log对象记录增量(仅rebuild类型需要)</li>
<li>生成新的临时ibd文件(仅rebuild类型需要)</li>
</ol>
</li>
<li><p><strong> ddl执行阶段 </strong> :  </p>
<ol>
<li>降级EXCLUSIVE-MDL锁，允许读写</li>
<li>扫描old_table的聚集索引每一条记录rec</li>
<li>遍历新表的聚集索引和二级索引，逐一处理</li>
<li>根据rec构造对应的索引项</li>
<li>将构造索引项插入sort_buffer块排序</li>
<li>将sort_buffer块更新到新的索引上</li>
<li>记录ddl执行过程中产生的增量(仅rebuild类型需要)</li>
<li>重放row_log中的操作到新索引上(no-rebuild数据是在原表上更新的)</li>
<li>重放row_log间产生dml操作append到row_log最后一个Block</li>
</ol>
</li>
</ul>
<ul>
<li><p><strong> commit阶段 </strong> :  </p>
<ol>
<li>当前Block为row_log最后一个时，禁止读写，升级到EXCLUSIVE-MDL锁</li>
<li>重做row_log中最后一部分增量</li>
<li>更新innodb的数据字典表</li>
<li>提交事务(刷事务的redo日志)</li>
<li>修改统计信息</li>
<li>rename临时idb文件，frm文件</li>
<li>变更完成</li>
</ol>
</li>
</ul>
<p>这有一直导图挺直观的：<a href="http://blog.itpub.net/22664653/viewspace-2056953" target="_blank" rel="external">http://blog.itpub.net/22664653/viewspace-2056953</a> 。<br><strong>添加列</strong> 时由于需要copy table，row_log会重放到新表上（临时ibd文件），直到最后一个block，锁住原表禁止更新。</p>
<p>row_log记录了ddl变更过程中新产生的dml操作，并在ddl执行的最后将其应用到新的表中，保证数据完整性</p>
<h2 id="3-对比实验"><a href="#3-对比实验" class="headerlink" title="3. 对比实验"></a>3. 对比实验</h2><h3 id="3-1-添加二级索引"><a href="#3-1-添加二级索引" class="headerlink" title="3.1 添加二级索引"></a>3.1 添加二级索引</h3><p>我这里使用sysbench产生的表测试（500w数据）：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; select version();</span></div><div class="line">+------------+</div><div class="line"><span class="section">| version()  |</span></div><div class="line">+------------+</div><div class="line"><span class="section">| 5.6.30-log |</span></div><div class="line">+------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; show create table sbtest1;</div><div class="line">CREATE TABLE <span class="code">`sbtest1`</span> (</div><div class="line"><span class="code">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</span></div><div class="line"><span class="code">  `k` int(10) unsigned NOT NULL DEFAULT '0',</span></div><div class="line"><span class="code">  `c` char(120) COLLATE utf8_bin NOT NULL DEFAULT '',</span></div><div class="line"><span class="code">  `pad` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',</span></div><div class="line"><span class="code">  PRIMARY KEY (`id`),</span></div><div class="line"><span class="code">  KEY `k_1` (`k`)</span></div><div class="line">) ENGINE=InnoDB AUTO<span class="emphasis">_INCREMENT=5000001 DEFAULT CHARSET=utf8 COLLATE=utf8_</span>bin MAX<span class="emphasis">_ROWS=1000000</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="section">mysql&gt; show variables like "old_alter_table";</span></div><div class="line">+-----------------+-------+</div><div class="line"><span class="section">| Variable_name   | Value |</span></div><div class="line">+-----------------+-------+</div><div class="line"><span class="section">| old_alter_table | OFF   |</span></div><div class="line">+-----------------+-------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p><strong> 旧模式 </strong> 下，创建删除普通索引：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">*<span class="strong">*SESSION1:*</span>*</div><div class="line">mysql&gt; set old<span class="emphasis">_alter_</span>table=1;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; alter table sbtest1 drop index idx<span class="emphasis">_k_</span>1;</div><div class="line">Query OK, 5000000 rows affected (44.79 sec)</div><div class="line">Records: 5000000  Duplicates: 0  Warnings: 0</div><div class="line"></div><div class="line">mysql&gt; alter table sbtest1 add index idx<span class="emphasis">_k_</span>1(k);</div><div class="line">Query OK, 5000000 rows affected (1 min 11.29 sec)</div><div class="line">Records: 5000000  Duplicates: 0  Warnings: 0</div><div class="line"></div><div class="line"></div><div class="line">*<span class="strong">*SESSION2:*</span>*</div><div class="line"><span class="section">mysql&gt; select * from sbtest1 limit 1;</span></div><div class="line">+----+---------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</div><div class="line"><span class="section">| id | k       | c                                                                                                                       | pad                                                         |</span></div><div class="line">+----+---------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</div><div class="line"><span class="section">|  1 | 2481886 | 08566691963-88624...106334-50535565977 | 63188288836-9235114...351-49282961843 |</span></div><div class="line">+----+---------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; update sbtest1 set k=2481885 where id=1;</div><div class="line">Query OK, 1 row affected (45.16 sec)</div><div class="line">Rows matched: 1  Changed: 1  Warnings: 0</div><div class="line"></div><div class="line"></div><div class="line">*<span class="strong">*SESSION3:*</span>*</div><div class="line"><span class="section">mysql&gt; show processlist;</span></div><div class="line">+--------+-----------------+-----------+------------+---------+--------+---------------------------------+-----------------------------------------+</div><div class="line"><span class="section">| Id     | User            | Host      | db         | Command | Time   | State                           | Info                                    |</span></div><div class="line">+--------+-----------------+-----------+------------+---------+--------+---------------------------------+-----------------------------------------+</div><div class="line">| 118652 | root            | localhost | confluence | Query   |     19 | copy to tmp table               | alter table sbtest1 add index k<span class="emphasis">_1(k)    |</span></div><div class="line">| 118666 | root            | localhost | confluence | Query   |      3 | Waiting for table metadata lock | update sbtest1 set k=2481885 where id=1 |</div><div class="line">| 118847 | root            | localhost | NULL       | Query   |      0 | init                            | show processlist                        |</div><div class="line">+--------+-----------------+-----------+------------+---------+--------+---------------------------------+-----------------------------------------+</div><div class="line">4 rows in set (0.00 sec)</div><div class="line"></div><div class="line">同时在datadir目录下可以看到</div><div class="line">-rw-rw---- 1 mysql mysql 8.5K May 23 21:24 sbtest1.frm</div><div class="line">-rw-rw---- 1 mysql mysql 1.2G May 23 21:24 sbtest1.ibd</div><div class="line">-rw-rw---- 1 mysql mysql 8.5K May 23 20:48 #sql-1c6a<span class="emphasis">_1cf7c.frm</span></div><div class="line">-rw-rw---- 1 mysql mysql 638M May 23 20:48 #sql-1c6a_1cf7c.ibd</div></pre></td></tr></table></figure></p>
<p>传统ddl方式有 <em>copy to tmp table</em> 过程，dml更新操作期间被堵住45s：<code>Waiting for table metadata lock</code>。</p>
<p>下面改成 <strong>Online DDL方式</strong><br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">**SESSION1**</div><div class="line">mysql&gt; <span class="built_in">set</span> old_alter_table=<span class="number">0</span>;</div><div class="line"></div><div class="line">mysql&gt; alter table sbtest1 drop index k_1;</div><div class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.01</span> sec)</div><div class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></div><div class="line">索引秒删</div><div class="line"></div><div class="line">mysql&gt; alter table sbtest1 add index k_1(k);</div><div class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">13.99</span> sec)</div><div class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></div><div class="line"></div><div class="line">**SESSION2**</div><div class="line">mysql&gt; update sbtest1 <span class="built_in">set</span> k=<span class="number">2481887</span> <span class="keyword">where</span> id=<span class="number">1</span>;</div><div class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.00</span> sec)</div><div class="line">Rows matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line">**SESSION3**</div><div class="line">mysql&gt; show processlist;</div><div class="line">+--------+-----------------+-----------+------------+---------+--------+------------------------+--------------------------------------+</div><div class="line">| <span class="type">Id</span>     | <span class="type">User</span>            | <span class="type">Host</span>      | <span class="type">db</span>         | <span class="type">Command</span> | <span class="type">Time</span>   | <span class="type">State</span>                  | <span class="type">Info</span>                                 |</div><div class="line"><span class="type">+--------+-----------------+-----------+------------+---------+--------+------------------------+--------------------------------------+</span></div><div class="line">| 118652 | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">confluence</span> | <span class="type">Query</span>   |     <span class="type">10</span> | <span class="type">altering</span> table         | <span class="type">alter</span> table sbtest1 add index k_1(k) |</div><div class="line"><span class="type">| 118666</span> | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">confluence</span> | <span class="type">Sleep</span>   |      <span class="type">9</span> |                        <span class="type">| NULL</span>                                 |</div><div class="line"><span class="type">| 118847</span> | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">NULL</span>       | <span class="type">Query</span>   |      <span class="type">0</span> | <span class="type">init</span>                   | <span class="type">show</span> processlist                     |</div><div class="line"><span class="type">+--------+-----------------+-----------+------------+---------+--------+------------------------+--------------------------------------+</span></div><div class="line">4 rows <span class="built_in">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure></p>
<p>添加普通索引，并未出现阻塞update操作，而且速度更快。从 rows affected 可以看出有没有copy table。</p>
<p>但如果在alter之前有大事务在执行，<strong> 会阻塞 </strong> ddl以及后续的所有请求：</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">**SESSION1**</div><div class="line">mysql&gt; select * from sbtest1 <span class="keyword">where</span> c='long select <span class="built_in">before</span> alter';</div><div class="line">Empty <span class="built_in">set</span> (<span class="number">4.36</span> sec)</div><div class="line"></div><div class="line">**SESSION2**</div><div class="line">mysql&gt; alter table sbtest1 add index k_1(k);</div><div class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">16.28</span> sec)</div><div class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></div><div class="line"></div><div class="line">**SESSION3**</div><div class="line">mysql&gt; select * from sbtest1 <span class="keyword">where</span> c='long select <span class="built_in">after</span> alter execution but not complete';</div><div class="line">Empty <span class="built_in">set</span> (<span class="number">5.89</span> sec)</div><div class="line"></div><div class="line">**SESSION4**</div><div class="line">mysql&gt; show processlist;</div><div class="line">+----+-----------------+-----------+------------+---------+------+---------------------------------+------------------------------------------------------------------------------------+</div><div class="line">| <span class="type">Id</span> | <span class="type">User</span>            | <span class="type">Host</span>      | <span class="type">db</span>         | <span class="type">Command</span> | <span class="type">Time</span> | <span class="type">State</span>                           | <span class="type">Info</span>                                                                               |</div><div class="line"><span class="type">+----+-----------------+-----------+------------+---------+------+---------------------------------+------------------------------------------------------------------------------------+</span></div><div class="line">|  5 | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">confluence</span> | <span class="type">Query</span>   |    <span class="type">3</span> | <span class="type">Sending</span> data                    | <span class="type">select</span> * from sbtest1 <span class="keyword">where</span> c='long select <span class="built_in">before</span> alter'                           |</div><div class="line"><span class="type">|  7</span> | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">NULL</span>       | <span class="type">Query</span>   |    <span class="type">0</span> | <span class="type">init</span>                            | <span class="type">show</span> processlist                                                                   |</div><div class="line"><span class="type">| 13</span> | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">confluence</span> | <span class="type">Query</span>   |    <span class="type">2</span> | <span class="type">Waiting</span> <span class="keyword">for</span> table metadata lock | <span class="type">alter</span> table sbtest1 add index k_1(k)                                               |</div><div class="line"><span class="type">| 14</span> | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">confluence</span> | <span class="type">Query</span>   |    <span class="type">1</span> | <span class="type">Waiting</span> <span class="keyword">for</span> table metadata lock | <span class="type">select</span> * from sbtest1 <span class="keyword">where</span> c='long select <span class="built_in">after</span> alter execution but not complete' |</div><div class="line"><span class="type">+----+-----------------+-----------+------------+---------+------+---------------------------------+------------------------------------------------------------------------------------+</span></div><div class="line">5 rows <span class="built_in">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure>
<h3 id="3-2-添加列示例"><a href="#3-2-添加列示例" class="headerlink" title="3.2 添加列示例"></a>3.2 添加列示例</h3><p>添加新列是ddl操作里面相对较多的一类操作。从上文表中可以看到<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">**SESSION1**</div><div class="line">mysql&gt; ALTER TABLE `sbtest2` \</div><div class="line">       ADD COLUMN `f_new_col1` int(<span class="number">11</span>) NULL DEFAULT <span class="number">0</span>, \</div><div class="line">       ADD COLUMN `f_new_col2` varchar(<span class="number">32</span>) NULL DEFAULT '' AFTER `f_new_col1`;</div><div class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">1</span> min <span class="number">57.86</span> sec)</div><div class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></div><div class="line"></div><div class="line">**SESSION2**</div><div class="line">mysql&gt; update sbtest2 <span class="built_in">set</span> c=<span class="string">"update when add colomun ddl start"</span> <span class="keyword">where</span> c='<span class="number">33333</span>';</div><div class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">4.41</span> sec)</div><div class="line">Rows matched: <span class="number">0</span>  Changed: <span class="number">0</span>  Warnings: <span class="number">0</span></div><div class="line"></div><div class="line">**SESSION3**</div><div class="line">mysql&gt; select * from sbtest2 <span class="keyword">where</span> c='select when add colomun ddl start';</div><div class="line">Empty <span class="built_in">set</span> (<span class="number">3.44</span> sec)</div><div class="line"></div><div class="line">**SESSION4**</div><div class="line">mysql&gt; show processlist;</div><div class="line">+-----+-----------------+-----------+------------+---------+------+---------------------------+------------------------------------------------------------------------------------------------------+</div><div class="line">| <span class="type">Id</span>  | <span class="type">User</span>            | <span class="type">Host</span>      | <span class="type">db</span>         | <span class="type">Command</span> | <span class="type">Time</span> | <span class="type">State</span>                     | <span class="type">Info</span>                                                                                                 |</div><div class="line"><span class="type">+-----+-----------------+-----------+------------+---------+------+---------------------------+------------------------------------------------------------------------------------------------------+</span></div><div class="line">|   5 | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">confluence</span> | <span class="type">Query</span>   |    <span class="type">4</span> | <span class="type">altering</span> table            | <span class="type">ALTER</span> TABLE `sbtest2`  ADD COLUMN `f_new_col1` int(<span class="number">11</span>) NULL DEFAULT <span class="number">0</span>, ADD COLUMN `f_new_col2` varch |</div><div class="line"><span class="type">|   7</span> | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">NULL</span>       | <span class="type">Query</span>   |    <span class="type">0</span> | <span class="type">init</span>                      | <span class="type">show</span> processlist                                                                                     |</div><div class="line"><span class="type">| 161</span> | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">confluence</span> | <span class="type">Query</span>   |    <span class="type">2</span> | <span class="type">Searching</span> rows <span class="keyword">for</span> update | <span class="type">update</span> sbtest2 <span class="built_in">set</span> c=<span class="string">"update when add colomun ddl start"</span> <span class="keyword">where</span> c='<span class="number">33333</span>'                             |</div><div class="line"><span class="type">| 187</span> | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">confluence</span> | <span class="type">Query</span>   |    <span class="type">1</span> | <span class="type">Sending</span> data              | <span class="type">select</span> * from sbtest2 <span class="keyword">where</span> c='select when add colomun ddl start'                                    |</div><div class="line"><span class="type">+-----+-----------------+-----------+------------+---------+------+---------------------------+------------------------------------------------------------------------------------------------------+</span></div><div class="line">5 rows <span class="built_in">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure></p>
<p>看到，默认不加 ALGORITHM=INPLACE 就已经允许ddl期间并发DML操作。但是会有一个小临时文件产生：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-rw-rw----</span> 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span> 8<span class="selector-class">.6K</span> <span class="selector-tag">May</span> 23 21<span class="selector-pseudo">:42</span> <span class="selector-id">#sql-7055_5</span><span class="selector-class">.frm</span></div><div class="line"><span class="selector-tag">-rw-rw----</span> 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span> 112<span class="selector-tag">K</span> <span class="selector-tag">May</span> 23 21<span class="selector-pseudo">:42</span> <span class="selector-id">#sql-ib21-16847116</span><span class="selector-class">.ibd</span></div></pre></td></tr></table></figure></p>
<p>当指定copy时，就会锁表了（一般你不想这样做）：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`sbtest2`</span></div><div class="line">4DROIP <span class="keyword">COLUMN</span> <span class="string">`f_new_col1`</span>, algorithm=copy;</div></pre></td></tr></table></figure></p>
<h3 id="3-3-修改字段类型"><a href="#3-3-修改字段类型" class="headerlink" title="3.3 修改字段类型"></a>3.3 修改字段类型</h3><p>修改列类型与添加新列不一样，修改类型需要rebuild整个表：<br>(select ok, update waiting)<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">**SESSION1**</div><div class="line">mysql&gt; ALTER TABLE sbtest2</div><div class="line">4   CHANGE f_new_col2 f_new_col2 varchar(<span class="number">50</span>) NULL DEFAULT '', algorithm=inplace ;</div><div class="line">ERROR <span class="number">1846</span> (<span class="number">0</span>A000): ALGORITHM=INPLACE is not supported. Reason: Cannot <span class="built_in">change</span> column type INPLACE. Try ALGORITHM=COPY.</div><div class="line">不支持INPLACE</div><div class="line"></div><div class="line">mysql&gt; ALTER TABLE sbtest2</div><div class="line">4   CHANGE f_new_col2 f_new_col2 varchar(<span class="number">50</span>) NULL DEFAULT '';</div><div class="line"></div><div class="line">**SESSION2**</div><div class="line">mysql&gt; update sbtest2 <span class="built_in">set</span> c=<span class="string">"update when add colomun ddl start"</span> <span class="keyword">where</span> c='<span class="number">33333</span>';</div><div class="line"></div><div class="line">mysql&gt; select * from sbtest2 <span class="keyword">where</span> c='select when add colomun ddl start';</div><div class="line">Empty <span class="built_in">set</span> (<span class="number">3.79</span> sec)</div><div class="line"></div><div class="line">mysql&gt; show processlist;</div><div class="line">+-----+-----------------+-----------+------------+---------+------+---------------------------------+----------------------------------------------------------------------------------+</div><div class="line">| <span class="type">Id</span>  | <span class="type">User</span>            | <span class="type">Host</span>      | <span class="type">db</span>         | <span class="type">Command</span> | <span class="type">Time</span> | <span class="type">State</span>                           | <span class="type">Info</span>                                                                             |</div><div class="line"><span class="type">+-----+-----------------+-----------+------------+---------+------+---------------------------------+----------------------------------------------------------------------------------+</span></div><div class="line">|   5 | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">confluence</span> | <span class="type">Query</span>   |    <span class="type">5</span> | <span class="type">copy</span> to tmp table               | <span class="type">ALTER</span> TABLE sbtest2</div><div class="line">   CHANGE f_new_col2 f_new_col2 varchar(<span class="number">50</span>) NULL DEFAULT '' |</div><div class="line"><span class="type">|   7</span> | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">NULL</span>       | <span class="type">Query</span>   |    <span class="type">0</span> | <span class="type">init</span>                            | <span class="type">show</span> processlist                                                                 |</div><div class="line"><span class="type">| 161</span> | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">confluence</span> | <span class="type">Query</span>   |    <span class="type">4</span> | <span class="type">Waiting</span> <span class="keyword">for</span> table metadata lock | <span class="type">update</span> sbtest2 <span class="built_in">set</span> c=<span class="string">"update when add colomun ddl start"</span> <span class="keyword">where</span> c='<span class="number">33333</span>'         |</div><div class="line"><span class="type">| 187</span> | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">confluence</span> | <span class="type">Query</span>   |    <span class="type">3</span> | <span class="type">Sending</span> data                    | <span class="type">select</span> * from sbtest2 <span class="keyword">where</span> c='select when add colomun ddl start'                |</div><div class="line"><span class="type">+-----+-----------------+-----------+------------+---------+------+---------------------------------+----------------------------------------------------------------------------------+</span></div><div class="line">5 rows <span class="built_in">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure></p>
<h3 id="3-4-Waiting-for-table-metadata-lock"><a href="#3-4-Waiting-for-table-metadata-lock" class="headerlink" title="3.4 Waiting for table metadata lock"></a>3.4 Waiting for table metadata lock</h3><p>Online DDL看起来很美好，实验测试也正如预期，但几次在生产环境修改索引时（5000w的表），还是无法避免出现大量 <em>Waiting for table metadata lock</em> 锁等待，线程数持续增加并告警，导致长达十多分钟不可写。后来发现原来是 5.6.16 版本开始mysql对日期、时间类型的存储格式进行了改动，会导致日期类型的表在升级前后，第一次alter必须rebuild：（<a href="https://dev.mysql.com/doc/refman/5.6/en/upgrading-from-previous-series.html" target="_blank" rel="external">地址</a>）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">As of MySQL 5.6.16, <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> upgrades <span class="keyword">old</span> temporal <span class="keyword">columns</span> <span class="keyword">to</span> <span class="number">5.6</span> <span class="keyword">format</span> <span class="keyword">for</span> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span>, <span class="keyword">CHANGE</span> <span class="keyword">COLUMN</span>, <span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span>, <span class="keyword">ADD</span> <span class="keyword">INDEX</span>, <span class="keyword">and</span> <span class="keyword">FORCE</span> operations.</div><div class="line">Hence, the <span class="keyword">following</span> <span class="keyword">statement</span> upgrades a <span class="keyword">table</span> containing <span class="keyword">columns</span> <span class="keyword">in</span> the <span class="keyword">old</span> <span class="keyword">format</span>:</div><div class="line"></div><div class="line">  <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">FORCE</span>;</div><div class="line"></div><div class="line">This conversion cannot be done using the INPLACE algorithm because the table must be rebuilt,</div><div class="line">so specifying ALGORITHM=INPLACE in these cases results in an error. Specify ALGORITHM=COPY if necessary.</div></pre></td></tr></table></figure></p>
<p>关于 metadata lock 介绍参考云栖 <a href="https://yq.aliyun.com/articles/27667?spm=5176.100240.searchblog.8.StFEGY" target="_blank" rel="external">这系列文章</a>。</p>
<h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><ul>
<li><a href="http://www.cnblogs.com/cchust/p/4639397.html" target="_blank" rel="external">MySQL online ddl原理</a></li>
<li><a href="http://www.cnblogs.com/gomysql/p/3776192.html" target="_blank" rel="external">MySQL 5.6 Online DDL</a></li>
<li><a href="http://mysqllover.com/?p=547" target="_blank" rel="external">[MySQL 5.6] MySQL 5.6 online ddl 使用、测试及关键函数栈</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.6/en/innodb-create-index-overview.html" target="_blank" rel="external">MySQL Manual Overview of Online DDL</a></li>
<li><a href="http://hedengcheng.com/?p=405" target="_blank" rel="external">MySQL InnoDB Add Index实现调研(一：Inplace Add Index)</a></li>
<li><a href="http://tencentdba.com/blog/mysql%E5%9C%A8%E7%BA%BF%E5%8A%A0%E5%AD%97%E6%AE%B5%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/" target="_blank" rel="external">tencentDBA 实现的在线加字段</a></li>
</ul>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/05/24/mysql-online-ddl-concept/">http://seanlook.com/2016/05/24/mysql-online-ddl-concept/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[InnoDB行格式对text/blob大变长字段的影响]]></title>
      <url>http://seanlook.com/2016/05/18/mysql-blob-row_format/</url>
      <content type="html"><![CDATA[<p>最近在排查现网Text与Blob类型，发现有不少，在《高性能MySQL(第3版)》看到对这两种变长数据类型的处理会涉及到在磁盘上创建临时表，性能开销比较大。于是把影响blob型数据存储方式了解了一下：row_format。<!-- 关于临时表的内容，请参考 --></p>
<h2 id="1-InnoDB的Antelop与Barracuda文件格式"><a href="#1-InnoDB的Antelop与Barracuda文件格式" class="headerlink" title="1. InnoDB的Antelop与Barracuda文件格式"></a>1. InnoDB的Antelop与Barracuda文件格式</h2><p>Innodb存储引擎保存记录，是以行的形式存放的（与之对应的是像Google BigTable这种列数据库）。在InnoDB 1.0.x版本之前，InnoDB 存储引擎提供了 <code>Compact</code> 和 <code>Redundant</code> 两种格式来存放行记录数据，这也是目前使用最多的一种格式。Redundant 格式是为兼容之前版本而保留的。</p>
<p>MySQL 5.1 中的 innodb_plugin 引入了新的<em>文件格式</em>：<code>Barracuda</code>（将以前的<em>行格式</em> compact 和 redundant 合称为<code>Antelope</code>），该文件格式拥有新的两种行格式：<code>compressed</code>和<code>dynamic</code>。</p>
<p>在 MySQL 5.6 版本中，默认还是 Compact 行格式，也是目前使用最多的一种 ROW FORMAT。用户可以通过命令 <code>SHOW TABLE STATUS LIKE&#39;table_name&#39;</code> 来查看当前表使用的行格式，其中 <em>row_format</em> 列表示当前所使用的行记录结构类型。</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; show variables like "innodb_file_format";</span></div><div class="line">+--------------------+-----------+</div><div class="line"><span class="section">| Variable_name      | Value     |</span></div><div class="line">+--------------------+-----------+</div><div class="line"><span class="section">| innodb_file_format | Barracuda |</span></div><div class="line">+--------------------+-----------+</div><div class="line">1 row in set</div><div class="line"></div><div class="line">mysql&gt; show table status like "tablename%"\G</div><div class="line"><span class="bullet">*************************** </span>1. row ***************************</div><div class="line"><span class="code">           Name: t_rf_compact</span></div><div class="line"><span class="code">         Engine: InnoDB</span></div><div class="line"><span class="code">        Version: 10</span></div><div class="line"><span class="code">     Row_format: Compact</span></div><div class="line"><span class="code">           Rows: 4</span></div><div class="line"><span class="code"> Avg_row_length: 36864</span></div><div class="line"><span class="code">    Data_length: 147456</span></div><div class="line">Max<span class="emphasis">_data_</span>length: 0</div><div class="line"><span class="code">   Index_length: 0</span></div><div class="line"><span class="code">      Data_free: 0</span></div><div class="line"><span class="code"> Auto_increment: 7</span></div><div class="line"><span class="code">    Create_time: 2016-05-14 20:52:58</span></div><div class="line"><span class="code">    Update_time: NULL</span></div><div class="line"><span class="code">     Check_time: NULL</span></div><div class="line"><span class="code">      Collation: utf8_general_ci</span></div><div class="line"><span class="code">       Checksum: NULL</span></div><div class="line"><span class="code"> Create_options: </span></div><div class="line"><span class="code">        Comment: </span></div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure>
<p>在 msyql 5.7.9 及以后版本，默认行格式由<code>innodb_default_row_format</code>变量决定，它的默认值是<code>DYNAMIC</code>，也可以在 create table 的时候指定<code>ROW_FORMAT=DYNAMIC</code>。</p>
<a id="more"></a>
<p>注意，如果要修改现有表的行模式为<code>compressed</code>或<code>dynamic</code>，必须先将文件格式设置成Barracuda：<code>set global innodb_file_format=Barracuda;</code>，再用<code>ALTER TABLE tablename ROW_FORMAT=COMPRESSED;</code>去修改才能生效，否则修改无效却无提示：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">mysql&gt; ALTER TABLE tablename ROW<span class="emphasis">_FORMAT=COMPRESSED;</span></div><div class="line">Query OK, 0 rows affected</div><div class="line">Records: 0  Duplicates: 0  Warnings: 2</div><div class="line"></div><div class="line">修改失败</div><div class="line"><span class="section">mysql&gt; show warnings;</span></div><div class="line">+---------+------+-----------------------------------------------------------------------+</div><div class="line"><span class="section">| Level   | Code | Message                                                               |</span></div><div class="line">+---------+------+-----------------------------------------------------------------------+</div><div class="line">| Warning | 1478 | InnoDB: ROW<span class="emphasis">_FORMAT=COMPRESSED requires innodb_</span>file<span class="emphasis">_format &gt; Antelope. |</span></div><div class="line">| Warning | 1478 | InnoDB: assuming ROW_FORMAT=COMPACT.                                  |</div><div class="line"><span class="code">+---------+</span>------<span class="code">+-----------------------------------------------------------------------+</span></div><div class="line">2 rows in set</div></pre></td></tr></table></figure>
<h2 id="2-对TEXT-BLOB这类大字段类型的影响"><a href="#2-对TEXT-BLOB这类大字段类型的影响" class="headerlink" title="2. 对TEXT/BLOB这类大字段类型的影响"></a>2. 对TEXT/BLOB这类大字段类型的影响</h2><h3 id="2-1-compact"><a href="#2-1-compact" class="headerlink" title="2.1 compact"></a>2.1 compact</h3><p>在 Antelope 两种行格式下，如果blob列值长度 &lt;= 768 bytes，就不会发生行溢出(page overflow)，内容都在数据页(B-tree Node)；如果列值长度 &gt; 768字节，那么前768字节依然在数据页，而剩余的则放在溢出页(off-page)，如下图：</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-compact-768.png" alt=""></p>
<p>上面所讲的讲的blob或变长大字段类型包括blob,text,varchar，其中varchar列值长度大于某数N时也会存溢出页，在latin1字符集下N值可以这样计算：innodb的块大小默认为16kb，由于innodb存储引擎表为索引组织表，树底层的叶子节点为一双向链表，因此每个页中至少应该有两行记录，这就决定了innodb在存储一行数据的时候不能够超过8k，减去其它列值所占字节数，约等于N。</p>
<p>我们知道对于InnoDB来说，内存是极为珍贵的，如果把768字节长度的blob都放在数据页，虽然可以节省部分IO，但相对来说能缓存行数就变少，也就是能缓存的索引值变少了，降低了索引效率。</p>
<h3 id="2-2-dynamic"><a href="#2-2-dynamic" class="headerlink" title="2.2 dynamic"></a>2.2 dynamic</h3><p>Barracuda 的两种行格式对blob采用完全行溢出，即聚集索引记录（数据页）只保留20字节的指针，指向真实存放它的溢出段地址：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-barracuda-20-off-page.png" alt=""></p>
<p>dynamic行格式，列存储是否放到off-page页，主要取决于行大小，它会把行中最长的那一列放到off-page，直到数据页能存放下两行。TEXT/BLOB列 &lt;=40 bytes 时总是存放于数据页。这种方式可以避免compact那样把太多的大列值放到 B-tree Node，因为dynamic格式认为，只要大列值有部分数据放在off-page，那把整个值放入都放入off-page更有效。</p>
<p><strong>compressed</strong> 物理结构上与dynamic类似，但是对表的数据行使用zlib算法进行了压缩存储。在long blob列类型比较多的情况下用，可以降低off-page的使用，减少存储空间（一般40%左右），但要求更高的CPU，buffer pool里面可能会同时存储数据的压缩版和非压缩版，所以也多占用部分内存。这里 <a href="http://dev.mysql.com/doc/refman/5.6/en/innodb-compression-internals.html" target="_blank" rel="external">MySQL 5.6 Manual innodb-compression-internals</a> 讲的十分清楚。 </p>
<p>另外，由于<code>ROW_FORMAT=DYNAMIC</code> 和 <code>ROW_FORMAT=COMPRESSED</code> 是从 <code>ROW_FORMAT=COMPACT</code> 变化来的，所以他们处理 <code>CHAR</code>类型存储的方式和 COMPACT 一样。</p>
<h2 id="3-对blob型字段存取优化"><a href="#3-对blob型字段存取优化" class="headerlink" title="3. 对blob型字段存取优化"></a>3. 对blob型字段存取优化</h2><p>如果一个查询涉及BLOB值，又需要使用临时表——不管它多小——它都会立即在磁盘上创建临时表。这样效率很低，尤其是对小而快的查询，临时表可能是查询中最大的开销。</p>
<p>比如：创建一个带Text字段的compact表：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">mysql&gt; CREATE TABLE <span class="code">`t_rf_compact`</span> (</div><div class="line"><span class="code">  `f_id` int(11) NOT NULL AUTO_INCREMENT,</span></div><div class="line"><span class="code">  `f_char` char(30) DEFAULT NULL,</span></div><div class="line"><span class="code">  `f_varchar` varchar(30) NOT NULL DEFAULT '',</span></div><div class="line"><span class="code">  `f_text` text NOT NULL,</span></div><div class="line"><span class="code">  PRIMARY KEY (`f_id`)</span></div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW<span class="emphasis">_FORMAT=COMPACT;</span></div><div class="line"></div><div class="line">mysql&gt; insert into t<span class="emphasis">_rf_</span>compact(f<span class="emphasis">_char,f_</span>varchar,f<span class="emphasis">_text) values('aa','中中',repeat('b',700));</span></div><div class="line">mysql&gt; insert into t_rf<span class="emphasis">_compact(f_</span>char,f<span class="emphasis">_varchar,f_</span>text) values(<span class="emphasis">'aa'</span>,<span class="emphasis">'文'</span>,repeat(<span class="emphasis">'c'</span>,60000));</div><div class="line">第二条数据会行溢出，前768字节放在Clustered Index数据页，剩余的放扩展存储空间</div><div class="line"></div><div class="line"><span class="section">mysql&gt; explain select t1.f_id from t_rf_compact t1,t_rf_compact t2 where t1.f_id=t2.f_id order by t1.f_id limit 1; </span></div><div class="line">+----+-------------+-------+--------+---------------+---------+---------+-------------------+------+-------------+</div><div class="line"><span class="section">| id | select_type | table | type   | possible_keys | key     | key_len | ref               | rows | Extra       |</span></div><div class="line">+----+-------------+-------+--------+---------------+---------+---------+-------------------+------+-------------+</div><div class="line">|  1 | SIMPLE      | t1    | index  | PRIMARY       | PRIMARY | 4       | NULL              |    6 | Using index |</div><div class="line"><span class="section">|  1 | SIMPLE      | t2    | eq_ref | PRIMARY       | PRIMARY | 4       | d_ec_crm2.t1.f_id |    1 | Using index |</span></div><div class="line">+----+-------------+-------+--------+---------------+---------+---------+-------------------+------+-------------+</div><div class="line">2 rows in set (0.00 sec)</div><div class="line"></div><div class="line"></div><div class="line"><span class="section">mysql&gt; show status like "%tmp%tables";</span></div><div class="line">+-------------------------+-------+</div><div class="line"><span class="section">| Variable_name           | Value |</span></div><div class="line">+-------------------------+-------+</div><div class="line">| Created<span class="emphasis">_tmp_</span>disk<span class="emphasis">_tables | 7     |</span></div><div class="line">| Created_tmp<span class="emphasis">_tables      | 36    |</span></div><div class="line">+-------------------------+-------+</div><div class="line">2 rows in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; select t1.f_id from t_rf_compact t1,t_rf_compact t2 where t1.f_id=t2.f_id order by t1.f_id limit 1;</span></div><div class="line">+------+</div><div class="line"><span class="section">| f_id |</span></div><div class="line">+------+</div><div class="line"><span class="section">|    1 |</span></div><div class="line">+------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; show status like "%tmp%tables";</span></div><div class="line">+-------------------------+-------+</div><div class="line"><span class="section">| Variable_name           | Value |</span></div><div class="line">+-------------------------+-------+</div><div class="line">| Created<span class="emphasis">_tmp_</span>disk<span class="emphasis">_tables | 7     |</span></div><div class="line">| Created_tmp<span class="emphasis">_tables      | 36    |</span></div><div class="line">+-------------------------+-------+</div><div class="line">2 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>没有临时表产生，所以磁盘临时表无变化。让它产生临时表：（但不涉及text列）</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; explain select t1.f_id from t_rf_compact t1,t_rf_compact t2 where t1.f_id=t2.f_id order by t2.f_id;</span></div><div class="line">+----+-------------+-------+--------+---------------+---------+---------+-------------------+------+----------------------------------------------+</div><div class="line"><span class="section">| id | select_type | table | type   | possible_keys | key     | key_len | ref               | rows | Extra                                        |</span></div><div class="line">+----+-------------+-------+--------+---------------+---------+---------+-------------------+------+----------------------------------------------+</div><div class="line">|  1 | SIMPLE      | t1    | index  | PRIMARY       | PRIMARY | 4       | NULL              |    6 | Using index; Using temporary; Using filesort |</div><div class="line"><span class="section">|  1 | SIMPLE      | t2    | eq_ref | PRIMARY       | PRIMARY | 4       | d_ec_crm2.t1.f_id |    1 | Using index                                  |</span></div><div class="line">+----+-------------+-------+--------+---------------+---------+---------+-------------------+------+----------------------------------------------+</div><div class="line">2 rows in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; select t1.f<span class="emphasis">_id from t_</span>rf<span class="emphasis">_compact t1,t_</span>rf<span class="emphasis">_compact t2 where t1.f_</span>id=t2.f<span class="emphasis">_id order by t2.f_</span>id;</div><div class="line"></div><div class="line"><span class="section">mysql&gt; show status like "%tmp%tables";</span></div><div class="line">+-------------------------+-------+</div><div class="line"><span class="section">| Variable_name           | Value |</span></div><div class="line">+-------------------------+-------+</div><div class="line">| Created<span class="emphasis">_tmp_</span>disk<span class="emphasis">_tables | 7     |</span></div><div class="line">| Created_tmp<span class="emphasis">_tables      | 37    |</span></div><div class="line">+-------------------------+-------+</div><div class="line">2 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
<p>虽然有<code>Using temporary</code>，但内存临时表还是够用，磁盘临时表还是无变化。返回TEXT列（也会使用临时表排序）：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select t1.f<span class="emphasis">_text from t_</span>rf<span class="emphasis">_compact t1,t_</span>rf<span class="emphasis">_compact t2 where t1.f_</span>id=t2.f<span class="emphasis">_id order by t2.f_</span>id;</div><div class="line"><span class="section">mysql&gt; show status like "%tmp%tables";</span></div><div class="line">+-------------------------+-------+</div><div class="line"><span class="section">| Variable_name           | Value |</span></div><div class="line">+-------------------------+-------+</div><div class="line">| Created<span class="emphasis">_tmp_</span>disk<span class="emphasis">_tables | 8     |</span></div><div class="line">| Created_tmp<span class="emphasis">_tables      | 38    |</span></div><div class="line">+-------------------------+-------+</div><div class="line">2 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
<p><code>Created_tmp_disk_tables</code>磁盘临时表有增加，与上面结论相符：只有有TEXT/BLOB列参与，如果用到临时表，不管它多小，都会创建在磁盘上，从而带来性能消耗。</p>
<p>注：磁盘临时表存储引擎一定是 MyISAM，与<code>select @@default_tmp_storage_engine;</code>（5.6.3开始）看到的<em>InnoDB</em>无关，它是控制<em>CREATE TEMPORARY TABLE</em>时的默认引擎。在 5.7.5 开始<code>internal_tmp_disk_storage_engine</code>选项可以定义磁盘临时表的引擎类型。关于临时表与内存表可以参考 <a href="http://imysql.com/2015/07/11/mysql-faq-how-using-temp-table.shtml" target="_blank" rel="external">[MySQL FAQ]系列 — 什么情况下会用到临时表 -老叶</a> 。</p>
<p>有两种办法来减轻这种不利的情况：通过 <code>SUBSTRING()</code> 函数把值转换为 VARCHAR，或者让磁盘临时表更快一些。</p>
<p>让磁盘临时表运行更快的方式是，把它们放在基于内存的文件系统tmpfs，tmpfs文件系统为了降低开销不会刷新内存数据到磁盘，读写速度也很快，而临时表也不需要持久存放。mysql的 tmpdir 参数控制临时文件存放位置，建议如果使用的话要监控空间使用率。另外如果BLOB列非常大或多，可以考虑调大InnoDB日志缓存大小<code>innodb_log_buffer_size</code>。</p>
<p>如果使用BLOB这类变长大字段类型，需要以下后果考虑：</p>
<blockquote>
<ul>
<li>大字段在InnoDB里可能浪费大量空间。例如，若存储字段值只是比行的要求多了一个字节，也会使用整个页面来存储剩下的字节，浪费了页面的大部分空间。同样的，如果有一个值只是稍微超过了32个页的大小，实际上就需要使用96个页面。</li>
<li>扩展存储禁用了自适应哈希，因为需要完整的比较列的整个长度，才能发现是不是正确的数据（哈希帮助InnoDB非常快速的找到“猜测的位置”，但是必须检查“猜测的位置”是不是正确）。因为自适应哈希是完全的内存结构，并且直接指向Buffer Pool中访问“最”频繁的页面，但对于扩展存储空间却无法使用Adaptive Hash。</li>
<li>太长的值可能使得在查询中作为WHERE条件不能使用索引，因而执行很慢。在应用WHERE条件之前，MySQL需要把所有的列读出来，所以可能导致MySQL要求InnoDB读取很多扩展存储，然后检查WHERE条件，丢弃所有不需要的数据。查询不需要的列绝对不是好主意，在这种特殊的场景下尤其需要避免这样做。如果发现查询正遇到这个限制带来的问题，可以尝试通过覆盖索引来解决部分问题。</li>
<li>如果一张表里有很多大字段，最好是把它们组合起来单独存到一个列里面，比如说用XML文档格式存储。这让所有的大字段共享一个扩展存储空间，这比每个字段用自己的页要好。</li>
<li>有时候可以把大字段用COMPRESS()压缩后再存为BLOB，或者在发送到MySQL前在应用程序中进行压缩，这可以获得显著的空间优势和性能收益。<br>—— 《高性能MySQL(第3版)》 P368</li>
</ul>
</blockquote>
<p>对上面的解读就是：</p>
<ul>
<li>如果预期长度范围varchar就满足，就避免使用TEXT</li>
<li>对于字段非常大的列可以在应用程序里压缩后再存到mysql，如果列值很长请考虑用单独的表存放</li>
<li>一张表有多个类blob字段，把它们组合起来如<code>&lt;TEXT&gt;&lt;f_big_col1&gt;long..&lt;/f_big_col1&gt; &lt;f_content&gt;long..&lt;/f_content&gt;&lt;/TEXT&gt;</code>，再压缩存储。但要考虑是否使用全文索引，是否需要前缀索引。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://blog.opskumu.com/mysql-blob.html" target="_blank" rel="external">MySQL 大字段溢出导致数据回写失败</a></li>
<li><a href="http://hidba.org/?p=551" target="_blank" rel="external">innodb使用大字段text，blob的一些优化建议 -玄惭</a></li>
<li><a href="http://imysql.com/2014/09/28/mysql-optimization-case-blob-stored-in-innodb-optimization.shtml" target="_blank" rel="external">[MySQL优化案例]系列 — 优化InnoDB表BLOB列的存储效率 -老叶</a></li>
<li><a href="http://blog.chinaunix.net/uid-24485075-id-3523032.html" target="_blank" rel="external">InnoDB 数据表压缩原理与限制 </a></li>
<li><a href="http://dev.mysql.com/doc/refman/5.6/en/innodb-row-format-dynamic.html" target="_blank" rel="external">MySQL Manual DYNAMIC and COMPRESSED Row Formats </a></li>
<li>《MySQL技术内幕·InnoDB存储引擎》 P</li>
</ul>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/05/18/mysql-blob-row_format/">http://seanlook.com/2016/05/18/mysql-blob-row_format/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL数据库开发规范-EC]]></title>
      <url>http://seanlook.com/2016/05/11/mysql-dev-principle-ec/</url>
      <content type="html"><![CDATA[<!-- 

http://highdb.com/mysql%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/
http://blog.csdn.net/xlgen157387/article/details/48086607
http://www.iteye.com/topic/1141229
-->
<p>最近一段时间一边在线上抓取SQL来优化，一边在整理这个开发规范，尽量减少新的问题SQL进入生产库。今天也是对公司的开发做了一次培训，PPT就不放上来了，里面有十来个生产SQL的案例。因为规范大部分还是具有通用性，所以也借鉴了像去哪儿和赶集的规范，但实际在撰写本文的过程中，每一条规范的背后无不是在工作中有参照的反面例子的。如果时间可以的话，会抽出一部分或分析其原理，或用案例证明。</p>
<h2 id="1-命名规范"><a href="#1-命名规范" class="headerlink" title="1. 命名规范"></a>1. 命名规范</h2><ol>
<li><h3 id="库名、表名、字段名必须使用小写字母，并采用下划线分割"><a href="#库名、表名、字段名必须使用小写字母，并采用下划线分割" class="headerlink" title="库名、表名、字段名必须使用小写字母，并采用下划线分割"></a>库名、表名、字段名必须使用小写字母，并采用下划线分割</h3><ul>
<li>MySQL有配置参数lower_case_table_names=1，即库表名以小写存储，大小写不敏感。如果是0，则库表名以实际情况存储，大小写敏感；如果是2，以实际情况存储，但以小写比较。</li>
<li>如果大小写混合使用，可能存在abc，Abc，ABC等多个表共存，容易导致混乱。</li>
<li>字段名显示区分大小写，但实际使⽤时不区分，即不可以建立两个名字一样但大小写不一样的字段。</li>
<li>为了统一规范， 库名、表名、字段名使用小写字母。</li>
</ul>
</li>
<li><h3 id="库名以-d-开头，表名以-t-开头，字段名以-f-开头"><a href="#库名以-d-开头，表名以-t-开头，字段名以-f-开头" class="headerlink" title="库名以 d 开头，表名以 t 开头，字段名以 f_ 开头"></a>库名以 d<em> 开头，表名以 t</em> 开头，字段名以 f_ 开头</h3><ul>
<li>比如表 <code>t_crm_relation</code>，中间的 crm 代表业务模块名</li>
<li>视图以<code>view_</code>开头，事件以<code>event_</code>开头，触发器以<code>trig_</code>开头，存储过程以<code>proc_</code>开头，函数以<code>func_</code>开头</li>
<li>普通索引以<code>idx_col1_col2</code>命名，唯一索引以<code>uk_col1_col2</code>命名（可去掉f_公共部分）。如 idx_companyid_corpid_contacttime(f_company_id,f_corp_id,f_contact_time)</li>
</ul>
</li>
<li><h3 id="库名、表名、字段名禁止超过32个字符，需见名知意"><a href="#库名、表名、字段名禁止超过32个字符，需见名知意" class="headerlink" title="库名、表名、字段名禁止超过32个字符，需见名知意"></a>库名、表名、字段名禁止超过32个字符，需见名知意</h3><p>库名、表名、字段名支持最多64个字符，但为了统一规范、易于辨识以及减少传输量，禁止超过32个字符</p>
</li>
<li><h3 id="临时库、表名须以tmp加日期为后缀"><a href="#临时库、表名须以tmp加日期为后缀" class="headerlink" title="临时库、表名须以tmp加日期为后缀"></a>临时库、表名须以tmp加日期为后缀</h3><p>如 t_crm_relation_tmp0425。备份表也类似，形如 <code>_bak20160425</code> 。</p>
</li>
<li><h3 id="按日期时间分表须符合-YYYY-MM-DD-格式"><a href="#按日期时间分表须符合-YYYY-MM-DD-格式" class="headerlink" title="按日期时间分表须符合_YYYY[MM][DD]格式"></a>按日期时间分表须符合_YYYY[MM][DD]格式</h3><p>这也是为将来有可能分表做准备的，比如<code>t_crm_ec_record_201403</code>，但像 t_crm_contact_at201506就打破了这种规范。<br>不具有时间特性的，直接以 <code>t_tbname_001</code> 这样的方式命名。</p>
</li>
</ol>
<h2 id="2-库表基础规范"><a href="#2-库表基础规范" class="headerlink" title="2. 库表基础规范"></a>2. 库表基础规范</h2><ol>
<li><h3 id="使用Innodb存储引擎"><a href="#使用Innodb存储引擎" class="headerlink" title="使用Innodb存储引擎"></a>使用Innodb存储引擎</h3><p>5.5版本开始mysql默认存储引擎就是InnoDB，5.7版本开始，系统表都放弃MyISAM了。</p>
</li>
<li><h3 id="表字符集统一使用UTF8"><a href="#表字符集统一使用UTF8" class="headerlink" title="表字符集统一使用UTF8"></a>表字符集统一使用UTF8</h3><ul>
<li>UTF8字符集存储汉字占用3个字节，存储英文字符占用一个字节</li>
<li>校对字符集使用默认的 utf8_general_ci</li>
<li>连接的客户端也使用utf8，建立连接时指定charset或<code>SET NAMES UTF8;</code>。（对于已经在项目中长期使用latin1的，救不了了）</li>
<li>如果遇到EMOJ等表情符号的存储需求，可申请使用UTF8MB4字符集</li>
</ul>
</li>
<li><h3 id="所有表都要添加注释"><a href="#所有表都要添加注释" class="headerlink" title="所有表都要添加注释"></a>所有表都要添加注释</h3><ul>
<li>尽量给字段也添加注释</li>
<li>类status型需指明主要值的含义，如”0-离线，1-在线”</li>
</ul>
</li>
<li><h3 id="控制单表字段数量"><a href="#控制单表字段数量" class="headerlink" title="控制单表字段数量"></a>控制单表字段数量</h3><ul>
<li>单表字段数上限30左右，再多的话考虑垂直分表，一是冷热数据分离，二是大字段分离，三是常在一起做条件和返回列的不分离。</li>
<li>表字段控制少而精，可以提高IO效率，内存缓存更多有效数据，从而提高响应速度和并发能力，后续 alter table 也更快。</li>
</ul>
</li>
<li><h3 id="所有表都必须要显式指定主键"><a href="#所有表都必须要显式指定主键" class="headerlink" title="所有表都必须要显式指定主键"></a>所有表都必须要显式指定主键</h3><ul>
<li>主键尽量采用自增方式，InnoDB表实际是一棵索引组织表，顺序存储可以提高存取效率，充分利用磁盘空间。还有对一些复杂查询可能需要自连接来优化时需要用到。</li>
<li>需要全局唯一主键时，使用外部发号器ticket server（建设中）</li>
<li>如果没有主键或唯一索引，update/delete是通过所有字段来定位操作的行，相当于每行就是一次全表扫描</li>
<li>少数情况可以使用联合唯一主键，需与DBA协商</li>
</ul>
</li>
<li><h3 id="不强制使用外键参考"><a href="#不强制使用外键参考" class="headerlink" title="不强制使用外键参考"></a>不强制使用外键参考</h3><p>即使2个表的字段有明确的外键参考关系，也不使用 FOREIGN KEY ，因为新纪录会去主键表做校验，影响性能。</p>
</li>
<li><h3 id="适度使用存储过程、视图，禁止使用触发器、事件"><a href="#适度使用存储过程、视图，禁止使用触发器、事件" class="headerlink" title="适度使用存储过程、视图，禁止使用触发器、事件"></a>适度使用存储过程、视图，禁止使用触发器、事件</h3></li>
</ol>
<a id="more"></a>
<ul>
<li>存储过程（procedure）虽然可以简化业务端代码，在传统企业写复杂逻辑时可能会用到，而在互联网企业变更是很频繁的，在分库分表的情况下要升级一个存储过程相当麻烦。又因为它是不记录log的，所以也不方便debug性能问题。如果使用过程，一定考虑如果执行失败的情况。<ul>
<li>使用视图一定程度上也是为了降低代码里SQL的复杂度，但有时候为了视图的通用性会损失性能（比如返回不必要的字段）。</li>
</ul>
</li>
<li>触发器（trigger）也是同样，但也不应该通过它去约束数据的强一致性，mysql只支持“基于行的触发”，也就是说，触发器始终是针对一条记录的，而不是针对整个sql语句的，如果变更的数据集非常大的话，效率会很低。掩盖一条sql背后的工作，一旦出现问题将是灾难性的，但又很难快速分析和定位。再者需要ddl时无法使用pt-osc工具。放在transaction执行。</li>
<li>事件（event）也是一种偷懒的表现，目前已经遇到数次由于定时任务执行失败影响业务的情况，而且mysql无法对它做失败预警。建立专门的 job scheduler 平台。</li>
</ul>
<ol>
<li><h3 id="单表数据量控制在5000w以内"><a href="#单表数据量控制在5000w以内" class="headerlink" title="单表数据量控制在5000w以内"></a>单表数据量控制在5000w以内</h3></li>
<li><h3 id="数据库中不允许存储明文密码"><a href="#数据库中不允许存储明文密码" class="headerlink" title="数据库中不允许存储明文密码"></a>数据库中不允许存储明文密码</h3></li>
</ol>
<h2 id="3-字段规范"><a href="#3-字段规范" class="headerlink" title="3. 字段规范"></a>3. 字段规范</h2><ol>
<li><h3 id="char、varchar、text等字符串类型定义"><a href="#char、varchar、text等字符串类型定义" class="headerlink" title="char、varchar、text等字符串类型定义"></a>char、varchar、text等字符串类型定义</h3><ul>
<li>对于长度基本固定的列，如果该列恰好更新又特别频繁，适合char</li>
<li>varchar虽然存储变长字符串，但不可太小也不可太大。UTF8最多能存21844个汉字，或65532个英文</li>
<li>varbinary(M)保存的是二进制字符串，它保存的是字节而不是字符，所以没有字符集的概念，M长度0-255（字节）。只用于排序或比较时大小写敏感的类型，不包括密码存储</li>
<li>TEXT类型与VARCHAR都类似，存储可变长度，最大限制也是2^16，但是它20bytes以后的内容是在数据页以外的空间存储（row_format=dynamic），对它的使用需要多一次寻址，没有默认值。<br>一般用于存放容量平均都很大、操作没有其它字段那样频繁的值。<br>网上部分文章说要避免使用text和blob，要知道如果纯用varchar可能会导致行溢出，效果差不多，但因为每行占用字节数过多，会导致buffer_pool能缓存的数据行、页下降。另外text和blob上面一般不会去建索引，而是利用sphinx之类的第三方全文搜索引擎，如果确实要创建（前缀）索引，那就会影响性能。凡事看具体场景。<br>另外尽可能把text/blob拆到另一个表中</li>
<li>BLOB可以看出varbinary的扩展版本，内容以二进制字符串存储，无字符集，区分大小写，有一种经常提但不用的场景：不要在数据库里存储图片。</li>
</ul>
</li>
<li><h3 id="int、tinyint、decimal等数字类型定义"><a href="#int、tinyint、decimal等数字类型定义" class="headerlink" title="int、tinyint、decimal等数字类型定义"></a>int、tinyint、decimal等数字类型定义</h3><ul>
<li>使用tinyint来代替 enum和boolean<br>ENUM类型在需要修改或增加枚举值时，需要在线DDL，成本较高；ENUM列值如果含有数字类型，可能会引起默认值混淆<br>tinyint使用1个字节，一般用于status,type,flag的列</li>
<li>建议使用 UNSIGNED 存储非负数值<br>相比不使用 unsigned，可以扩大一倍使用数值范围</li>
<li>int使用固定4个字节存储，int(11)与int(4)只是显示宽度的区别</li>
<li>使用Decimal 代替float/double存储精确浮点数<br>对于货币、金额这样的类型，使用decimal，如 decimal(9,2)。float默认只能能精确到6位有效数字</li>
</ul>
</li>
<li><h3 id="timestamp与datetime选择"><a href="#timestamp与datetime选择" class="headerlink" title="timestamp与datetime选择"></a>timestamp与datetime选择</h3><ul>
<li>datetime 和 timestamp类型所占的存储空间不同，前者8个字节，后者4个字节，这样造成的后果是两者能表示的时间范围不同。前者范围为1000-01-01 00:00:00 ~ 9999-12-31 23:59:59，后者范围为 1970-01-01 08:00:01 到 2038-01-19 11:14:07 。所以 TIMESTAMP 支持的范围比 DATATIME 要小。</li>
<li>timestamp可以在insert/update行时，自动更新时间字段（如 f_set_time timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP），但一个表只能有一个这样的定义。</li>
<li>timestamp显示与时区有关，内部总是以 UTC 毫秒 来存的。还受到严格模式的限制</li>
<li>优先使用timestamp，datetime也没问题</li>
<li>where条件里不要对时间列上使用时间函数</li>
</ul>
</li>
<li><h3 id="建议字段都定义为NOT-NULL"><a href="#建议字段都定义为NOT-NULL" class="headerlink" title="建议字段都定义为NOT NULL"></a>建议字段都定义为NOT NULL</h3><ul>
<li>如果是索引字段，一定要定义为not null 。因为null值会影响cordinate统计，影响优化器对索引的选择</li>
<li>如果不能保证insert时一定有值过来，定义时使用default ‘’ ，或 0</li>
</ul>
</li>
<li><h3 id="同一意义的字段定义必须相同"><a href="#同一意义的字段定义必须相同" class="headerlink" title="同一意义的字段定义必须相同"></a>同一意义的字段定义必须相同</h3><p> 比如不同表中都有 f_user_id 字段，那么它的类型、字段长度要设计成一样</p>
</li>
</ol>
<h2 id="4-索引规范"><a href="#4-索引规范" class="headerlink" title="4. 索引规范"></a>4. 索引规范</h2><ol>
<li><h3 id="任何新的select-update-delete上线，都要先explain，看索引使用情况"><a href="#任何新的select-update-delete上线，都要先explain，看索引使用情况" class="headerlink" title="任何新的select,update,delete上线，都要先explain，看索引使用情况"></a>任何新的select,update,delete上线，都要先explain，看索引使用情况</h3><p>尽量避免extra列出现：Using File Sort，Using Temporary，rows超过1000的要谨慎上线。<br>explain解读</p>
<ul>
<li><code>type</code>：ALL, index,  range, ref, eq_ref, const, system, NULL（从左到右，性能从差到好）</li>
<li><code>possible_keys</code>：指出MySQL能使用哪个索引在表中找到记录，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用</li>
<li><code>key</code>：表示MySQL实际决定使用的键（索引）<br>如果没有选择索引，键是NULL。要想强制MySQL使用或忽视possible_keys列中的索引，在查询中使用FORCE INDEX、USE INDEX或者IGNORE INDEX</li>
<li><code>ref</code>：表示选择 <code>key</code> 列上的索引，哪些列或常量被用于查找索引列上的值</li>
<li><code>rows</code>：根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数</li>
<li><code>Extra</code><ul>
<li><code>Using temporary</code>：表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询</li>
<li><code>Using filesort</code>：MySQL中无法利用索引完成的排序操作称为“文件排序”</li>
</ul>
</li>
</ul>
</li>
</ol>
<ol>
<li><h3 id="索引个数限制"><a href="#索引个数限制" class="headerlink" title="索引个数限制"></a>索引个数限制</h3><ul>
<li>索引是双刃剑，会增加维护负担，增大IO压力，索引占用空间是成倍增加的</li>
<li>单张表的索引数量控制在5个以内，或不超过表字段个数的20%。若单张表多个字段在查询需求上都要单独用到索引，需要经过DBA评估。</li>
</ul>
</li>
<li><h3 id="避免冗余索引"><a href="#避免冗余索引" class="headerlink" title="避免冗余索引"></a>避免冗余索引</h3><ul>
<li>InnoDB表是一棵索引组织表，主键是和数据放在一起的聚集索引，普通索引最终指向的是主键地址，所以把主键做最后一列是多余的。如f_crm_id作为主键，联合索引(f_user_id,f_crm_id)上的f_crm_id就完全多余</li>
<li>(a,b,c)、(a,b)，后者为冗余索引。可以利用前缀索引来达到加速目的，减轻维护负担</li>
</ul>
</li>
<li><h3 id="没有特殊要求，使用自增id作为主键"><a href="#没有特殊要求，使用自增id作为主键" class="headerlink" title="没有特殊要求，使用自增id作为主键"></a>没有特殊要求，使用自增id作为主键</h3><ul>
<li>主键是一种聚集索引，顺序写入。组合唯一索引作为主键的话，是随机写入，适合写少读多的表</li>
<li>主键不允许更新</li>
</ul>
</li>
<li><h3 id="索引尽量建在选择性高的列上"><a href="#索引尽量建在选择性高的列上" class="headerlink" title="索引尽量建在选择性高的列上"></a>索引尽量建在选择性高的列上</h3><ul>
<li>不在低基数列上建立索引，例如性别、类型。但有一种情况，idx_feedbackid_type (f_feedback_id,f_type)，如果经常用 f_type=1 比较，而且能过滤掉90%行，那这个组合索引就值得创建。有时候同样的查询语句，由于条件取值不同导致使用不同的索引，也是这个道理。</li>
<li>索引选择性计算方法（基数 ÷ 数据行数）<br>Selectivity = Cardinality / Total Rows = select count(distinct col1)/count(*) from tbname，越接近1说明col1上使用索引的过滤效果越好</li>
<li>走索引扫描行数超过30%时，改全表扫描</li>
</ul>
</li>
<li><h3 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h3><ul>
<li>mysql使用联合索引时，从左向右匹配，遇到断开或者范围查询时，无法用到后续的索引列<br>比如索引idx_c1_c2_c3 (c1,c2,c3)，相当于创建了(c1)、(c1,c2)、(c1,c2,c3)三个索引，where条件包含上面三种情况的字段比较则可以用到索引，但像 where c1=a and c3=c 只能用到c1列的索引，像 c2=b and c3=c等情况就完全用不到这个索引</li>
<li>遇到范围查询(&gt;、&lt;、between、like)也会停止索引匹配，比如 c1=a and c2 &gt; 2 and c3=c，只有c1,c2列上的比较能用到索引，(c1,c2,c3)排列的索引才可能会都用上</li>
<li>where条件里面字段的顺序与索引顺序无关，mysql优化器会自动调整顺序</li>
</ul>
</li>
<li><h3 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h3><ul>
<li>对超过30个字符长度的列创建索引时，考虑使用前缀索引，如 idx_cs_guid2 (f_cs_guid(26))表示截取前26个字符做索引，既可以提高查找效率，也可以节省空间</li>
<li>前缀索引也有它的缺点是，如果在该列上 ORDER BY 或 GROUP BY 时无法使用索引，也不能把它们用作覆盖索引(Covering Index)</li>
<li>如果在varbinary或blob这种以二进制存储的列上建立前缀索引，要考虑字符集，括号里表示的是字节数</li>
</ul>
</li>
<li><h3 id="合理使用覆盖索引减少IO"><a href="#合理使用覆盖索引减少IO" class="headerlink" title="合理使用覆盖索引减少IO"></a>合理使用覆盖索引减少IO</h3><p>INNODB存储引擎中，secondary index(非主键索引，又称为辅助索引、二级索引)没有直接存储行地址，而是存储主键值。<br>如果用户需要查询secondary index中所不包含的数据列，则需要先通过secondary index查找到主键值，然后再通过主键查询到其他数据列，因此需要查询两次。覆盖索引则可以在一个索引中获取所有需要的数据列，从而避免回表进行二次查找，节省IO因此效率较高。<br>例如SELECT email，uid FROM user_email WHERE uid=xx，如果uid不是主键，适当时候可以将索引添加为index(uid，email)，以获得性能提升。</p>
</li>
<li><h3 id="尽量不要在频繁更新的列上创建索引"><a href="#尽量不要在频繁更新的列上创建索引" class="headerlink" title="尽量不要在频繁更新的列上创建索引"></a>尽量不要在频繁更新的列上创建索引</h3><p>如不在定义了 ON UPDATE CURRENT_STAMP 的列上创建索引，维护成本太高（好在mysql有insert buffer，会合并索引的插入）</p>
</li>
</ol>
<h2 id="5-SQL设计"><a href="#5-SQL设计" class="headerlink" title="5. SQL设计"></a>5. SQL设计</h2><ol>
<li><h3 id="杜绝直接-SELECT-读取全部字段"><a href="#杜绝直接-SELECT-读取全部字段" class="headerlink" title="杜绝直接 SELECT * 读取全部字段"></a>杜绝直接 SELECT * 读取全部字段</h3><p> 即使需要所有字段，减少网络带宽消耗，能有效利用覆盖索引，表结构变更对程序基本无影响</p>
</li>
<li><h3 id="能确定返回结果只有一条时，使用-limit-1"><a href="#能确定返回结果只有一条时，使用-limit-1" class="headerlink" title="能确定返回结果只有一条时，使用 limit 1"></a>能确定返回结果只有一条时，使用 limit 1</h3><p><strong>在保证数据不会有误的前提下</strong>，能确定结果集数量时，多使用limit，尽快的返回结果。</p>
</li>
<li><h3 id="小心隐式类型转换"><a href="#小心隐式类型转换" class="headerlink" title="小心隐式类型转换"></a>小心隐式类型转换</h3><ul>
<li><p>转换规则</p>
<blockquote>
<p>a. 两个参数至少有一个是 NULL 时，比较的结果也是 NULL，例外是使用 &lt;=&gt; 对两个 NULL 做比较时会返回 1，这两种情况都不需要做类型转换<br>b. 两个参数都是字符串，会按照字符串来比较，不做类型转换<br>c. 两个参数都是整数，按照整数来比较，不做类型转换<br>d. 十六进制的值和非数字做比较时，会被当做二进制串<br>e. 有一个参数是 TIMESTAMP 或 DATETIME，并且另外一个参数是常量，常量会被转换为 timestamp<br>f. 有一个参数是 decimal 类型，如果另外一个参数是 decimal 或者整数，会将整数转换为 decimal 后进行比较，如果另外一个参数是浮点数，则会把 decimal 转换为浮点数进行比较<br>g. 所有其他情况下，两个参数都会被转换为浮点数再进行比较。</p>
</blockquote>
</li>
<li><p>如果一个索引建立在string类型上，如果这个字段和一个int类型的值比较，符合第 g 条。如f_phone定义的类型是varchar，但where使用f_phone in (098890)，两个参数都会被当成成浮点型。发生这个隐式转换并不是最糟的，最糟的是string转换后的float，mysql无法使用索引，这才导致了性能问题。如果是 f_user_id = ‘1234567’ 的情况，符合第 b 条,直接把数字当字符串比较。</p>
</li>
</ul>
</li>
<li><h3 id="禁止在where条件列上使用函数"><a href="#禁止在where条件列上使用函数" class="headerlink" title="禁止在where条件列上使用函数"></a>禁止在where条件列上使用函数</h3><ul>
<li>会导致索引失效，如lower(email)，f_qq % 4。可放到右边的常量上计算</li>
<li>返回小结果集不是很大的情况下，可以对返回列使用函数，简化程序开发</li>
</ul>
</li>
<li><h3 id="使用like模糊匹配，-不要放首位"><a href="#使用like模糊匹配，-不要放首位" class="headerlink" title="使用like模糊匹配，%不要放首位"></a>使用like模糊匹配，%不要放首位</h3><p>会导致索引失效，有这种搜索需求是，考虑其它方案，如sphinx全文搜索</p>
</li>
<li><h3 id="涉及到复杂sql时，务必先参考已有索引设计，先explain"><a href="#涉及到复杂sql时，务必先参考已有索引设计，先explain" class="headerlink" title="涉及到复杂sql时，务必先参考已有索引设计，先explain"></a>涉及到复杂sql时，务必先参考已有索引设计，先explain</h3><ul>
<li>简单SQL拆分，不以代码处理复杂为由。</li>
<li>比如 OR 条件： f_phone=’10000’ or f_mobile=’10000’，两个字段各自有索引，但只能用到其中一个。可以拆分成2个sql，或者union all。</li>
<li>先explain的好处是可以为了利用索引，增加更多查询限制条件</li>
</ul>
</li>
<li><h3 id="使用join时，where条件尽量使用充分利用同一表上的索引"><a href="#使用join时，where条件尽量使用充分利用同一表上的索引" class="headerlink" title="使用join时，where条件尽量使用充分利用同一表上的索引"></a>使用join时，where条件尽量使用充分利用同一表上的索引</h3><ul>
<li>如 select t1.a,t2.b * from t1,t2 and t1.a=t2.a and t1.b=123 and t2.c= 4 ，如果t1.c与t2.c字段相同，那么t1上的索引(b,c)就只用到b了。此时如果把where条件中的t2.c=4改成t1.c=4，那么可以用到完整的索引</li>
<li>这种情况可能会在字段冗余设计（反范式）时出现</li>
<li>正确选取inner join和left join</li>
</ul>
</li>
<li><h3 id="少用子查询，改用join"><a href="#少用子查询，改用join" class="headerlink" title="少用子查询，改用join"></a>少用子查询，改用join</h3><p>小于5.6版本时，子查询效率很低，不像Oracle那样先计算子查询后外层查询。5.6版本开始得到优化</p>
</li>
<li><h3 id="考虑使用union-all，少使用union，注意考虑去重"><a href="#考虑使用union-all，少使用union，注意考虑去重" class="headerlink" title="考虑使用union all，少使用union，注意考虑去重"></a>考虑使用union all，少使用union，注意考虑去重</h3><ul>
<li>union all不去重，而少了排序操作，速度相对比union要快，如果没有去重的需求，优先使用union all</li>
<li>如果UNION结果中有使用limit，在2个子SQL可能有许多返回值的情况下，各自加上limit。如果还有order by，请找DBA。</li>
</ul>
</li>
<li><h3 id="IN的内容尽量不超过200个"><a href="#IN的内容尽量不超过200个" class="headerlink" title="IN的内容尽量不超过200个"></a>IN的内容尽量不超过200个</h3><p>超过500个值使用批量的方式，否则一次执行会影响数据库的并发能力，因为单SQL只能且一直占用单CPU，而且可能导致主从复制延迟</p>
</li>
<li><h3 id="拒绝大事务"><a href="#拒绝大事务" class="headerlink" title="拒绝大事务"></a>拒绝大事务</h3><p>比如在一个事务里进行多个select，多个update，如果是高频事务，会严重影响MySQL并发能力，因为事务持有的锁等资源只在事务rollback/commit时才能释放。但同时也要权衡数据写入的一致性。</p>
</li>
<li><h3 id="避免使用is-null-is-not-null这样的比较"><a href="#避免使用is-null-is-not-null这样的比较" class="headerlink" title="避免使用is null, is not null这样的比较"></a>避免使用is null, is not null这样的比较</h3></li>
<li><h3 id="order-by-limit"><a href="#order-by-limit" class="headerlink" title="order by .. limit"></a>order by .. limit</h3><p>这种查询更多的是通过索引去优化，但order by的字段有讲究，比如主键id与f_time都是顺序递增，那就可以考虑order by id而非 f_time 。</p>
</li>
<li><h3 id="c1-lt-a-order-by-c2"><a href="#c1-lt-a-order-by-c2" class="headerlink" title="c1 &lt; a order by c2"></a>c1 &lt; a order by c2</h3><p>与上面不同的是，order by之前有个范围查询，由前面的内容可知，用不到类似(c1,c2)的索引，但是可以利用(c2,c1)索引。另外还可以改写成join的方式实现。</p>
</li>
<li><h3 id="分页优化"><a href="#分页优化" class="headerlink" title="分页优化"></a>分页优化</h3><p>建议使用合理的分页方式以提高分页效率，大页情况下不使用跳跃式分页<br>假如有类似下面分页语句:<br>SELECT <em> FROM table1 ORDER BY ftime DESC LIMIT 10000,10;<br>这种分页方式会导致大量的io，因为MySQL使用的是提前读取策略。<br>推荐分页方式：<br>SELECT </em> FROM table1  WHERE ftime &lt; last_time ORDER BY ftime DESC LIMIT 10<br>即传入上一次分页的界值</p>
<p>SELECT * FROM table as t1 inner JOIN (SELECT id FROM table ORDER BY time LIMIT 10000，10) as t2 ON t1.id=t2.id</p>
</li>
<li><h3 id="count计数"><a href="#count计数" class="headerlink" title="count计数"></a>count计数</h3><ul>
<li>首先count(<em>)、count(1)、count(col1)是有区别的，count(</em>)表示整个结果集有多少条记录，count(1)表示结果集里以primary key统计数量，绝大多数情况下count(<em>)与count(1)效果一样的，但count(col1)表示的是结果集里 col1 列 NOT null 的记录数。优先采用count(</em>)</li>
<li>大数据量count是消耗资源的操作，甚至会拖慢整个库，查询性能问题无法解决的，应从产品设计上进行重构。例如当频繁需要count的查询，考虑使用汇总表</li>
<li>遇到distinct的情况，group by方式可能效率更高。</li>
</ul>
</li>
<li><h3 id="delete-update语句改成select再explain"><a href="#delete-update语句改成select再explain" class="headerlink" title="delete,update语句改成select再explain"></a>delete,update语句改成select再explain</h3><p>select最多导致数据库慢，写操作才是锁表的罪魁祸首</p>
</li>
<li><h3 id="减少与数据库交互的次数，尽量采用批量SQL语句"><a href="#减少与数据库交互的次数，尽量采用批量SQL语句" class="headerlink" title="减少与数据库交互的次数，尽量采用批量SQL语句"></a>减少与数据库交互的次数，尽量采用批量SQL语句</h3><ul>
<li><code>INSERT ... ON DUPLICATE KEY UPDATE ...</code>，插入行后会导致在一个UNIQUE索引或PRIMARY KEY中出现重复值，则执行旧行UPDATE，如果不重复则直接插入，影响1行。</li>
<li><code>REPLACE INTO</code>类似，但它是冲突时删除旧行。<code>INSERT IGNORE</code>相反，保留旧行，丢弃要插入的新行。</li>
<li>INSERT INTO VALUES(),(),()，合并插入。</li>
</ul>
</li>
<li><h3 id="杜绝危险SQL"><a href="#杜绝危险SQL" class="headerlink" title="杜绝危险SQL"></a>杜绝危险SQL</h3><ul>
<li>去掉where 1=1 这样无意义或恒真的条件，如果遇到update/delete或遭到sql注入就恐怖了</li>
<li>SQL中不允许出现DDL语句。一般也不给予create/alter这类权限，但阿里云RDS只区分读写用户</li>
</ul>
</li>
</ol>
<h2 id="6-行为规范"><a href="#6-行为规范" class="headerlink" title="6. 行为规范"></a>6. 行为规范</h2><ul>
<li>不允许在DBA不知情的情况下导现网数据</li>
<li>大批量更新，如修复数据，避开高峰期，并通知DBA。直接执行sql的由运维或DBA同事操作</li>
<li>及时处理已下线业务的SQL</li>
<li>复杂sql上线审核<br>因为目前还没有SQL审查机制，复杂sql如多表join,count,group by，主动上报DBA评估。</li>
<li>重要项目的数据库方案选型和设计必须提前通知DBA参与</li>
</ul>
<h2 id="本文参考"><a href="#本文参考" class="headerlink" title="本文参考"></a>本文参考</h2><ul>
<li><a href="http://wangwei007.blog.51cto.com/68019/1709769" target="_blank" rel="external">互联网MySQL开发规范</a> 这个基本也是《去哪儿MySQL开发规范.pdf》版本</li>
<li>MySQL数据库开发的三十六条军规<em>石展</em>完整.pdf</li>
<li><a href="http://imysql.com/2015/07/23/something-important-about-mysql-design-reference.shtml" target="_blank" rel="external">老叶观点：MySQL开发规范之我见</a></li>
<li><a href="http://blog.csdn.net/xlgen157387/article/details/48086607" target="_blank" rel="external">MySQL开发规范与使用技巧总结</a></li>
<li><a href="http://highdb.com/mysql%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/" target="_blank" rel="external">http://highdb.com/mysql%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</a></li>
</ul>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2016/05/11/mysql-dev-principle-ec/">http://seanlook.com/2016/05/11/mysql-dev-principle-ec/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[小心MySQL的隐式类型转换陷阱]]></title>
      <url>http://seanlook.com/2016/05/05/mysql-type-conversion/</url>
      <content type="html"><![CDATA[<h2 id="1-隐式类型转换实例"><a href="#1-隐式类型转换实例" class="headerlink" title="1. 隐式类型转换实例"></a>1. 隐式类型转换实例</h2><p>今天生产库上突然出现MySQL线程数告警，IOPS很高，实例会话里面出现许多类似下面的sql：(修改了相关字段和值)</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SELECT f_col3_id,f_qq1_id FROM d_dbname.t_tb1 WHERE f_col1_id=<span class="number">1226391</span> and f_col2_id=<span class="number">1244378</span> and </div><div class="line">f_qq1_id in (<span class="number">12345</span>,<span class="number">23456</span>,<span class="number">34567</span>,<span class="number">45678</span>,<span class="number">56789</span>,<span class="number">67890</span>,<span class="number">78901</span>,<span class="number">89012</span>,<span class="number">90123</span>,<span class="number">901231</span>,<span class="number">901232</span>,<span class="number">901233</span>)</div></pre></td></tr></table></figure>
<p>用 explain 看了下扫描行数和索引选择情况： </p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql&gt;explain SELECT f<span class="emphasis">_col3_</span>id,f<span class="emphasis">_qq1_</span>id FROM d<span class="emphasis">_dbname.t_</span>tb1 WHERE f<span class="emphasis">_col1_</span>id=1226391 </div><div class="line"><span class="section">and f_col2_id=1244378 and f_qq1_id in (12345,23456,34567,45678,56789,67890,78901,89012,90123,901231,901232,901233);</span></div><div class="line">+------+---------------+---------+--------+--------------------------------+---------------+------------+--------+--------+------------------------------------+</div><div class="line"><span class="section">| id   | select_type   | table   | type   | possible_keys                  | key           | key_len    | ref    | rows   | Extra                              |</span></div><div class="line">+------+---------------+---------+--------+--------------------------------+---------------+------------+--------+--------+------------------------------------+</div><div class="line"><span class="section">| 1    | SIMPLE        | t_tb1   | ref    | uid_type_frid,idx_corpid_qq1id | uid_type_frid | 8          | const  | 1386   | Using index condition; Using where |</span></div><div class="line">+------+---------------+---------+--------+--------------------------------+---------------+------------+--------+--------+------------------------------------+</div><div class="line">共返回 1 行记录,花费 11.52 ms.</div></pre></td></tr></table></figure>
<p>t_tb1 表上有个索引<code>uid_type_frid(f_col2_id,f_type)</code>、<code>idx_corp_id_qq1id(f_col1_id,f_qq1_id)</code>，而且如果选择后者时，f_qq1_id的过滤效果应该很佳，但却选择了前者。当使用 hint <code>use index(idx_corp_id_qq1id)</code>时：<br><a id="more"></a><br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">mysql&gt;explain extended SELECT f_col3_id,f_qq1_id FROM d_dbname.t_tb1  use index(idx_corpid_qq1id) WHERE f_col1_id=<span class="number">1226391</span> <span class="literal">and</span> f_col2_id=<span class="number">1244378</span> <span class="literal">and</span> f_qq1_id in (<span class="number">12345</span>,<span class="number">23456</span>,<span class="number">34567</span>,<span class="number">45678</span>,<span class="number">56789</span>,<span class="number">67890</span>,<span class="number">78901</span>,<span class="number">89012</span>,<span class="number">90123</span>,<span class="number">901231</span>,<span class="number">901232</span>,<span class="number">901233</span>)<span class="comment">;</span></div><div class="line">+------+---------------+--------+--------+---------------------+------------------+------------+----------+-------------+------------------------------------+</div><div class="line">| id   | select_type   | table  | type   | possible_keys       | key              | key_len    | ref      | rows        | Extra                              |</div><div class="line">+------+---------------+--------+--------+---------------------+------------------+------------+----------+-------------+------------------------------------+</div><div class="line">| <span class="number">1</span>    | SIMPLE        | t_tb1  | ref    | idx_corpid_qq1id    | idx_corpid_qq1id | <span class="number">8</span>          | const    | <span class="number">2375752</span>     | Using index condition<span class="comment">; Using where |</span></div><div class="line">+---- -+---------------+--------+--------+---------------------+------------------+------------+----------+-------------+------------------------------------+</div><div class="line">共返回 <span class="number">1</span> 行记录,花费 <span class="number">17.48</span> ms.</div><div class="line"></div><div class="line">mysql&gt;show warnings<span class="comment">;</span></div><div class="line">+-----------------+----------------+-----------------------------------------------------------------------------------------------------------------------+</div><div class="line">| Level           | Code           | Message                                                                                                               |</div><div class="line">+-----------------+----------------+-----------------------------------------------------------------------------------------------------------------------+</div><div class="line">| Warning         |           <span class="number">1739</span> | Cannot use range access on index 'idx_corpid_qq1id' due to type <span class="literal">or</span> collation conversion on field 'f_qq1_id'           |</div><div class="line">| Note            |           <span class="number">1003</span> | /* select#<span class="number">1</span> */ select `d_dbname`.`t_tb1`.`f_col3_id` AS `f_col3_id`,`d_dbname`.`t_tb1`.`f_qq1_id` AS `f_qq1_id` from `d_dbname`.`t_tb1` USE INDEX (`idx_corpid_qq1id`) where |</div><div class="line">|                 |                |  ((`d_dbname`.`t_tb1`.`f_col2_id` = <span class="number">1244378</span>) <span class="literal">and</span> (`d_dbname`.`t_tb1`.`f_col1_id` = <span class="number">1226391</span>) <span class="literal">and</span> (`d_dbname`.`t_tb1`.`f_qq1_id` in |</div><div class="line">|                 |                | (<span class="number">12345</span>,<span class="number">23456</span>,<span class="number">34567</span>,<span class="number">45678</span>,<span class="number">56789</span>,<span class="number">67890</span>,<span class="number">78901</span>,<span class="number">89012</span>,<span class="number">90123</span>,<span class="number">901231</span>,<span class="number">901232</span>,<span class="number">901233</span>)))                                        |</div><div class="line">+-----------------+----------------+-----------------------------------------------------------------------------------------------------------------------+</div><div class="line">共返回 <span class="number">2</span> 行记录,花费 <span class="number">10.81</span> ms.</div></pre></td></tr></table></figure></p>
<p>rows列达到200w行，但问题也发现了：select_type应该是 range 才对，key_len看出来只用到了<code>idx_corpid_qq1id</code>索引的第一列。上面explain使用了 <code>extended</code>，所以<code>show warnings;</code>可以很明确的看到 f_qq1_id 出现了隐式类型转换：f_qq1_id是varchar，而后面的比较值是整型。</p>
<p>解决该问题就是避免出现隐式类型转换(implicit type conversion)带来的不可控：把f_qq1_id in的内容写成字符串：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql&gt;explain SELECT f<span class="emphasis">_col3_</span>id,f<span class="emphasis">_qq1_</span>id FROM d<span class="emphasis">_dbname.t_</span>tb1 WHERE f<span class="emphasis">_col1_</span>id=1226391 and f<span class="emphasis">_col2_</span>id=1244378 and </div><div class="line"><span class="section">f_qq1_id in ('12345','23456','34567','45678','56789','67890','78901','89012','90123','901231');</span></div><div class="line">+-------+---------------+--------+---------+--------------------------------+------------------+-------------+---------+---------+------------------------------------+</div><div class="line"><span class="section">| id    | select_type   | table  | type    | possible_keys                  | key              | key_len     | ref     | rows    | Extra                              |</span></div><div class="line">+-------+---------------+--------+---------+--------------------------------+------------------+-------------+---------+---------+------------------------------------+</div><div class="line"><span class="section">| 1     | SIMPLE        | t_tb1  | range   | uid_type_frid,idx_corpid_qq1id | idx_corpid_qq1id | 70          |         | 40      | Using index condition; Using where |</span></div><div class="line">+-------+---------------+--------+---------+--------------------------------+------------------+-------------+---------+---------+------------------------------------+</div><div class="line">共返回 1 行记录,花费 12.41 ms.</div></pre></td></tr></table></figure>
<p>扫描行数从1386减少为40。</p>
<p>类似的还出现过一例：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="number">0</span>)  <span class="keyword">FROM</span> d_dbname.t_tb2 <span class="keyword">where</span> f_col1_id= <span class="string">'1931231'</span>  <span class="keyword">AND</span> f_phone <span class="keyword">in</span>(<span class="number">098890</span>);</div><div class="line"></div><div class="line">| Warning | 1292 | Truncated incorrect DOUBLE value: '1512-98464356'</div></pre></td></tr></table></figure>
<p>优化后直接从扫描rows 100w行降为1。</p>
<p>借这个机会，系统的来看一下mysql中的隐式类型转换。</p>
<h2 id="2-mysql隐式转换规则"><a href="#2-mysql隐式转换规则" class="headerlink" title="2. mysql隐式转换规则"></a>2. mysql隐式转换规则</h2><h3 id="2-1-规则"><a href="#2-1-规则" class="headerlink" title="2.1 规则"></a>2.1 规则</h3><p>下面来分析一下<a href="http://dev.mysql.com/doc/refman/5.7/en/type-conversion.html" target="_blank" rel="external">隐式转换的规则</a>：</p>
<blockquote>
<p>a. 两个参数至少有一个是 NULL 时，比较的结果也是 NULL，例外是使用 &lt;=&gt; 对两个 NULL 做比较时会返回 1，这两种情况都不需要做类型转换<br>b. 两个参数都是字符串，会按照字符串来比较，不做类型转换<br>c. 两个参数都是整数，按照整数来比较，不做类型转换<br>d. 十六进制的值和非数字做比较时，会被当做二进制串<br>e. 有一个参数是 TIMESTAMP 或 DATETIME，并且另外一个参数是常量，常量会被转换为 timestamp<br>f. 有一个参数是 decimal 类型，如果另外一个参数是 decimal 或者整数，会将整数转换为 decimal 后进行比较，如果另外一个参数是浮点数，则会把 decimal 转换为浮点数进行比较<br>g. 所有其他情况下，两个参数都会被转换为浮点数再进行比较</p>
</blockquote>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; select 11 + '11', 11 + 'aa', 'a1' + 'bb', 11 + '0.01a';  </span></div><div class="line">+-----------+-----------+-------------+--------------+</div><div class="line"><span class="section">| 11 + '11' | 11 + 'aa' | 'a1' + 'bb' | 11 + '0.01a' |</span></div><div class="line">+-----------+-----------+-------------+--------------+</div><div class="line"><span class="section">|        22 |        11 |           0 |        11.01 |</span></div><div class="line">+-----------+-----------+-------------+--------------+</div><div class="line">1 row in set, 4 warnings (0.00 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; show warnings;</span></div><div class="line">+---------+------+-------------------------------------------+</div><div class="line"><span class="section">| Level   | Code | Message                                   |</span></div><div class="line">+---------+------+-------------------------------------------+</div><div class="line">| Warning | 1292 | Truncated incorrect DOUBLE value: <span class="emphasis">'aa'</span>    |</div><div class="line">| Warning | 1292 | Truncated incorrect DOUBLE value: <span class="emphasis">'a1'</span>    |</div><div class="line">| Warning | 1292 | Truncated incorrect DOUBLE value: <span class="emphasis">'bb'</span>    |</div><div class="line"><span class="section">| Warning | 1292 | Truncated incorrect DOUBLE value: '0.01a' |</span></div><div class="line">+---------+------+-------------------------------------------+</div><div class="line">4 rows in set (0.00 sec)</div><div class="line"></div><div class="line"></div><div class="line"><span class="section">mysql&gt; select '11a' = 11, '11.0' = 11, '11.0' = '11', NULL = 1;</span></div><div class="line">+------------+-------------+---------------+----------+</div><div class="line"><span class="section">| '11a' = 11 | '11.0' = 11 | '11.0' = '11' | NULL = 1 |</span></div><div class="line">+------------+-------------+---------------+----------+</div><div class="line"><span class="section">|          1 |           1 |             0 |     NULL |</span></div><div class="line">+------------+-------------+---------------+----------+</div><div class="line">1 row in set, 1 warning (0.01 sec)</div></pre></td></tr></table></figure>
<p>上面可以看出<code>11 + &#39;aa&#39;</code>，由于操作符两边的类型不一样且符合第g条，<code>aa</code>要被转换成浮点型小数，然而转换失败（字母被截断），可以认为转成了 0，整数<code>11</code>被转成浮点型还是它自己，所以<code>11 + &#39;aa&#39; = 11</code>。</p>
<p><code>0.01a</code>转成double型也是被截断成<code>0.01</code>，所以<code>11 + &#39;0.01a&#39; = 11.01</code>。</p>
<p>等式比较也说明了这一点，<code>&#39;11a&#39;</code>和<code>&#39;11.0&#39;</code>转换后都等于 <code>11</code>，这也正是文章开头实例为什么没走索引的原因： varchar型的f_qq1_id，转换成浮点型比较时，等于 12345 的情况有无数种如12345a、12345.b等待，MySQL优化器无法确定索引是否更有效，所以选择了其它方案。</p>
<p>但并不是只要出现隐式类型转换，就会引起上面类似的性能问题，最终是要看转换后能否有效选择索引。像<code>f_id = &#39;654321&#39;</code>、<code>f_mtime between &#39;2016-05-01 00:00:00&#39; and &#39;2016-05-04 23:59:59&#39;</code>就不会影响索引选择，因为前者f_id是整型，即使与后面的字符串型数字转换成double比较，依然能根据double确定f_id的值，索引依然有效。后者是因为符合第e条，只是右边的常量做了转换。</p>
<p>开发人员可能都只要存在这么一个隐式类型转换的坑，但却又经常不注意，所以干脆无需记住那么多规则，该什么类型就与什么类型比较。</p>
<h3 id="2-2-隐式类型转换的安全问题"><a href="#2-2-隐式类型转换的安全问题" class="headerlink" title="2.2 隐式类型转换的安全问题"></a>2.2 隐式类型转换的安全问题</h3><p>implicit type conversion 不仅可能引起性能问题，还有可能产生安全问题。<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; desc t_account;</span></div><div class="line">+-----------+-------------+------+-----+---------+----------------+</div><div class="line"><span class="section">| Field     | Type        | Null | Key | Default | Extra          |</span></div><div class="line">+-----------+-------------+------+-----+---------+----------------+</div><div class="line">| fid       | int(11)     | NO   | PRI | NULL    | auto<span class="emphasis">_increment |</span></div><div class="line">| fname     | varchar(20) | YES  |     | NULL    |                |</div><div class="line">| fpassword | varchar(50) | YES  |     | NULL    |                |</div><div class="line">+-----------+-------------+------+-----+---------+----------------+</div><div class="line"></div><div class="line"><span class="section">mysql&gt; select * from t_account;</span></div><div class="line">+-----+-----------+-------------+</div><div class="line"><span class="section">| fid | fname     | fpassword   |</span></div><div class="line">+-----+-----------+-------------+</div><div class="line">|   1 | xiaoming  | p<span class="emphasis">_xiaoming  |</span></div><div class="line">|   2 | xiaoming1 | p_xiaoming1 |</div><div class="line"><span class="code">+-----+</span>-----------<span class="code">+-------------+</span></div><div class="line"></div><div class="line">假如应用前端没有WAF防护，那么下面的sql很容易注入：</div><div class="line">mysql&gt; select * from t<span class="emphasis">_account where fname='A' ;</span></div><div class="line"></div><div class="line">fname传入  A' OR 1=<span class="emphasis">'1  </span></div><div class="line"></div><div class="line">mysql&gt; select * from t<span class="emphasis">_account where fname='A' OR 1='1';</span></div></pre></td></tr></table></figure></p>
<p>攻击者更聪明一点： fname传入 <code>A&#39;+&#39;B</code>  ，fpassword传入 <code>ccc&#39;+0</code> ：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; select * from t_account where fname='A'+'B' and fpassword='ccc'+0;</span></div><div class="line">+-----+-----------+-------------+</div><div class="line"><span class="section">| fid | fname     | fpassword   |</span></div><div class="line">+-----+-----------+-------------+</div><div class="line">|   1 | xiaoming  | p<span class="emphasis">_xiaoming  |</span></div><div class="line">|   2 | xiaoming1 | p_xiaoming1 |</div><div class="line"><span class="code">+-----+</span>-----------<span class="code">+-------------+</span></div><div class="line">2 rows in set, 7 warnings (0.00 sec)</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://yq.aliyun.com/articles/39477" target="_blank" rel="external">MySQL隐式转化整理</a></li>
<li><a href="http://blog.itpub.net/22418990/viewspace-1302080/" target="_blank" rel="external">WHRER条件里的数据类型必须和字段数据类型一致</a></li>
<li><a href="https://vagosec.org/2013/04/mysql-implicit-type-conversion/" target="_blank" rel="external">Implicit type conversion in MySQL</a></li>
</ul>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/05/05/mysql-type-conversion/">http://seanlook.com/2016/05/05/mysql-type-conversion/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL数字类型int与tinyint、float与decimal如何选择]]></title>
      <url>http://seanlook.com/2016/04/29/mysql-numeric-int-float/</url>
      <content type="html"><![CDATA[<p>最近在准备给开发做一个mysql数据库开发规范方面培训，一步一步来，结合在生产环境发现的数据库方面的问题，从几个常用的数据类型说起。</p>
<h2 id="int、tinyint与bigint"><a href="#int、tinyint与bigint" class="headerlink" title="int、tinyint与bigint"></a>int、tinyint与bigint</h2><p>它们都是（精确）整型数据类型，但是占用字节数和表达的范围不同。首先没有这个表就说不过去了：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Storage</th>
<th>Minimum Value</th>
<th>Maximum Value</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>(Bytes)</td>
<td>(Signed/Unsigned)</td>
<td>(Signed/Unsigned)</td>
</tr>
<tr>
<td>TINYINT</td>
<td>1</td>
<td>-128</td>
<td>127</td>
</tr>
<tr>
<td></td>
<td></td>
<td>0</td>
<td>255</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>2</td>
<td>-32768</td>
<td>32767</td>
</tr>
<tr>
<td></td>
<td></td>
<td>0</td>
<td>65535</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>3</td>
<td>-8388608</td>
<td>8388607</td>
</tr>
<tr>
<td></td>
<td></td>
<td>0</td>
<td>16777215</td>
</tr>
<tr>
<td>INT</td>
<td>4</td>
<td>-2147483648</td>
<td>2147483647</td>
</tr>
<tr>
<td></td>
<td></td>
<td>0</td>
<td>4294967295</td>
</tr>
<tr>
<td>BIGINT</td>
<td>8</td>
<td>-9223372036854775808</td>
<td>9223372036854775807</td>
</tr>
<tr>
<td></td>
<td></td>
<td>0</td>
<td>18446744073709551615</td>
</tr>
</tbody>
</table>
<p>只需要知道对应类型占多少字节就能推算出范围了，比如int占 4 bytes,即4*8=32bits，大约10位数字，也能理解为什么int默认显示位数是11。</p>
<p>遇到比较多的是tinyint和bigint，tinyint一般用于存放status,type这种数值小的数据，不够用时可能会用smallint。bigint一般用于自增主键。</p>
<p>为了避免数据库被过度设计，布尔、枚举类型也采用tinyint。</p>
<p>还有一点也是经常被提到的关于 int(M) 中M的理解，int型数据无论是int(4)还是int(11)，都已经占用了 4 bytes 存储空间，M表示的只是显示宽度(display width, max value 255)，并不是定义int的长度。</p>
<p>例如：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">mysql&gt; CREATE TABLE `tc_integer` (</div><div class="line">  `f_id` bigint(20) PRIMARY KEY AUTO_INCREMENT,</div><div class="line">  `f_type` tinyint,</div><div class="line">  `f_flag` tinyint(1),</div><div class="line">  `f_num` smallint(5) unsigned ZEROFILL</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</div><div class="line"></div><div class="line">mysql&gt; desc tc_integer;</div><div class="line">+----------------+-------------------------------+------+-----+---------+----------------+</div><div class="line">|<span class="string"> Field          </span>|<span class="string"> Type                          </span>|<span class="string"> Null </span>|<span class="string"> Key </span>|<span class="string"> Default </span>|<span class="string"> Extra          </span>|</div><div class="line">+----------------+-------------------------------+------+-----+---------+----------------+</div><div class="line">|<span class="string"> f_id           </span>|<span class="string"> bigint(20)                    </span>|<span class="string"> NO   </span>|<span class="string"> PRI </span>|<span class="string"> NULL    </span>|<span class="string"> auto_increment </span>|</div><div class="line">|<span class="string"> f_type         </span>|<span class="string"> tinyint(4)                    </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">                </span>|</div><div class="line">|<span class="string"> f_flag         </span>|<span class="string"> tinyint(1)                    </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">                </span>|</div><div class="line">|<span class="string"> f_num          </span>|<span class="string"> smallint(5) unsigned zerofill </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">                </span>|</div><div class="line">+----------------+-------------------------------+------+-----+---------+----------------+</div><div class="line">4 rows in set (0.01 sec)</div></pre></td></tr></table></figure>
<p>插入几条数据看一下：<br><a id="more"></a></p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">mysql&gt; insert into tc<span class="emphasis">_integer values(1, 1, 1, 1);</span></div><div class="line">Query OK, 1 row affected (0.02 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into tc<span class="emphasis">_integer values(9223372036854775808, 127, 127, 65535);</span></div><div class="line">Query OK, 1 row affected, 1 warning (0.01 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; show warnings;</span></div><div class="line">+---------+------+-----------------------------------------------+</div><div class="line"><span class="section">| Level   | Code | Message                                       |</span></div><div class="line">+---------+------+-----------------------------------------------+</div><div class="line"><span class="section">| Warning | 1264 | Out of range value for column 'f_id' at row 1 |</span></div><div class="line">+---------+------+-----------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; select i.*, length(i.f_flag) as len_flag from tc_integer i;</span></div><div class="line">+---------------------+--------------+---------------+----------------+----------+</div><div class="line"><span class="section">| f_id                | f_type       | f_flag        | f_num          | len_flag |</span></div><div class="line">+---------------------+--------------+---------------+----------------+----------+</div><div class="line">|                   1 |            1 |             1 |          00001 |        1 |</div><div class="line"><span class="section">| 9223372036854775807 |          127 |           127 |          65535 |        3 |</span></div><div class="line">+---------------------+--------------+---------------+----------------+----------+</div><div class="line">2 rows in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; select * from tc_integer where f_num=' 01' and f_num=1 and f_num=f_flag;</span></div><div class="line">+------+--------------+---------------+----------------+</div><div class="line"><span class="section">| f_id | f_type       | f_flag        | f_num          |</span></div><div class="line">+------+--------------+---------------+----------------+</div><div class="line"><span class="section">|    1 |            1 |             1 |          00001 |</span></div><div class="line">+------+--------------+---------------+----------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure>
<p>上面的实验说明了几个问题：</p>
<ul>
<li>f_id列插入比最大值还大的数，出现warnings，并且最终的值自动变成 9223372036854775807 。这个坑曾经在迁移到阿里RDS时遇到过，他们的迁移工具是java写的，结果我们的主键值大于java INTEGER里面的最大限制，导致 duplicate key问题。</li>
<li>f_flag的显示宽度为1，但并不影响更多位数的显示。也证实了tinyint(1)并不像char(1)那样限制存储长度</li>
<li>f_num定义成无符号的zerofill类型，能存储的最大数值是65535，而signed才是32767。（当列上使用zerofill时，unsigned会自动加上）</li>
<li>zerofill的作用是在显示检索结果的时候，左边用0补齐到display width，实际存储时不补0的，仅作为返回结果meta data的一部分。查询的条件值忽略0和空格</li>
<li>length()在numeric类型中作用于char_length()一样，因为字节数已经固定了。</li>
</ul>
<p>zerofill的使用可能会在复杂join时因为了解不够深入而带来问题，所以最终的结论也很简单：除非极端的特殊需要，尽量不用zerofill，建表时这类int无需指定 (11) 这样的显示宽度。</p>
<h2 id="float与decimal"><a href="#float与decimal" class="headerlink" title="float与decimal"></a>float与decimal</h2><p>MySQL使用<code>DECIMAL</code>类型去存储对精度要求比较高的数值，比如金额，也叫定点数，decimal在mysql内存是以<del>字符串</del>二进制存储的。声明语法是<code>DECIMAL(M,D)</code>，<del>占用字节 M+2 bytes</del>。M是数字最大位数（精度precision），范围1-65；D是小数点右侧数字个数（标度scale），范围0-30，但不得超过M。</p>
<p>占用字节数计算方法 —— 小数和整数分别计算，每9位数占4字节，剩余部分如下表换算：</p>
<table>
<thead>
<tr>
<th>Leftover Digits</th>
<th>Number of Bytes</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1–2</td>
<td>1</td>
</tr>
<tr>
<td>3–4</td>
<td>2</td>
</tr>
<tr>
<td>5–6</td>
<td>3</td>
</tr>
<tr>
<td>7–9</td>
<td>4</td>
</tr>
</tbody>
</table>
<p>比如<code>DECIMAL(18,9)</code>，整数部分和小数部分各9位，所以各占4字节，共8bytes<br>再比如<code>DECIMAL(20,6)</code>，整数14位，需要4字节存9位，还需3字节存5位；小数6位，需3字节。共10bytes<br>（感谢 consatan 在评论区提出文中错误）</p>
<p>比如定义<code>DECIMAL(7,3)</code>：</p>
<ul>
<li>能存的数值范围是 -9999.999 ~ 9999.999，占用4个字节</li>
<li>123.12 -&gt; 123.120，因为小数点后未满3位，补0</li>
<li>123.1245 -&gt; 123.125，小数点只留3位，多余的自动四舍五入截断</li>
<li>12345.12 -&gt; 保存失败，因为小数点未满3位，补0变成12345.120，超过了7位。严格模式下报错，非严格模式存成9999.999</li>
</ul>
<p>MySQL使用<code>FLOAT</code>和<code>DOUBLE</code>来表示近似数值类型，这是因为十进制0.1在电脑里用二进制是无法精确表示的，<a href="https://segmentfault.com/a/1190000004112565" target="_blank" rel="external">只能尽可能的接近</a>。</p>
<p>单精度浮点数float占4字节，float标准语法允许通过<code>FLOAT(M)</code>的形式指定精度，但是这个精度值M只是决定存储大小： 0-23与默认不指定效果相同，24-53就变成双精度的<code>DOUBLE</code>了。</p>
<p>float还有非MySQL自己实现的<em>非标准</em>语法<code>FLOAT(M,D)</code>，代表最多存储M个数字长度，其中小数点后数字个数为D。效果与 DECIMAL(M,D)很相似。</p>
<p>double 和 float 的区别是double精度高，有效数字16位（float精度7位）。但double消耗内存是float的两倍，占8字节，double的运算速度比float慢得多。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">msyql&gt; create table tc_float(fid int primary <span class="type">key</span> auto_increment,f_float <span class="type">float</span>, f_float10 <span class="type">float</span>(<span class="number">10</span>), f_float25 <span class="type">float</span>(<span class="number">25</span>), f_float7_3 <span class="type">float</span>(<span class="number">7</span>,<span class="number">3</span>), f_float9_2 <span class="type">float</span>(<span class="number">9</span>,<span class="number">2</span>), f_float30_3 <span class="type">float</span>(<span class="number">30</span>,<span class="number">3</span>), f_decimal9_2 decimal(<span class="number">9</span>,<span class="number">2</span>));</div><div class="line"></div><div class="line">mysql&gt; insert into tc_float(f_float,f_float10,f_float25) values(<span class="number">123456</span>,<span class="number">123456</span>,<span class="number">123456</span>);</div><div class="line">mysql&gt; insert into tc_float(f_float,f_float10,f_float25) values(<span class="number">1234567.89</span>,<span class="number">12345.67</span>,<span class="number">1234567.89</span>);</div><div class="line">mysql&gt; select * from tc_float;</div><div class="line">+-----+----------+-----------+------------+------------+------------+-------------+--------------+</div><div class="line">| fid | f_float  | f_float10 | f_float25  | f_float7_3 | f_float9_2 | f_float30_3 | f_decimal9_2 |</div><div class="line">+-----+----------+-----------+------------+------------+------------+-------------+--------------+</div><div class="line">|   <span class="number">1</span> |   <span class="number">123456</span> |    <span class="number">123456</span> |     <span class="number">123456</span> | NULL       | NULL       | NULL        | NULL         |</div><div class="line">|   <span class="number">2</span> |  <span class="number">1234570</span> |   <span class="number">12345.7</span> | <span class="number">1234567.89</span> | NULL       | NULL       | NULL        | NULL         |</div><div class="line">+-----+----------+-----------+------------+------------+------------+-------------+--------------+</div></pre></td></tr></table></figure>
<ul>
<li>可以看到float与float(10)是没区别的，float默认能精确到6位有效数字</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">mysql&gt; insert into tc<span class="emphasis">_float(f_</span>float9<span class="emphasis">_2,f_</span>decimal9<span class="emphasis">_2) values(123456.78,123456.78);</span></div><div class="line">mysql&gt; insert into tc_float(f<span class="emphasis">_float9_</span>2,f<span class="emphasis">_decimal9_</span>2) values(1234567.1,1234567.125);</div><div class="line">Query OK, 1 row affected, 1 warning (0.00 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; show warnings;</span></div><div class="line">+-------+------+---------------------------------------------------+</div><div class="line"><span class="section">| Level | Code | Message                                           |</span></div><div class="line">+-------+------+---------------------------------------------------+</div><div class="line"><span class="section">| Note  | 1265 | Data truncated for column 'f_decimal9_2' at row 1 |</span></div><div class="line">+-------+------+---------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; select * from tc_float;</span></div><div class="line">+-----+----------+-----------+------------+------------+------------+-------------+--------------+</div><div class="line"><span class="section">| fid | f_float  | f_float10 | f_float25  | f_float7_3 | f_float9_2 | f_float30_3 | f_decimal9_2 |</span></div><div class="line">+-----+----------+-----------+------------+------------+------------+-------------+--------------+</div><div class="line">|   6 | NULL     | NULL      | NULL       | NULL       |  123456.78 | NULL        |    123456.78 |</div><div class="line"><span class="section">|   9 | NULL     | NULL      | NULL       | NULL       | 1234567.12 | NULL        |   1234567.13 |</span></div><div class="line">+-----+----------+-----------+------------+------------+------------+-------------+--------------+</div><div class="line"></div><div class="line">mysql&gt; insert into tc<span class="emphasis">_float(f_</span>float7<span class="emphasis">_3) values(12345.1);</span></div><div class="line">ERROR 1264 (22003): Out of range value for column 'f_float7<span class="emphasis">_3' at row 1</span></div></pre></td></tr></table></figure>
<ul>
<li>float(9,2)与decimal(9,2)是很像的，并没有前面提到24位一下6位有效数字的限制</li>
<li>他们俩之间的差别就在精度上，f_float9_2本应该是 1234567.10，结果小数点变成 .12 。f_decimal9_2因为标度为2，所以 .125 四舍五入成 .13</li>
<li>将 12345.1 插入f_float7_3列，因为转成标度3时 12345.100，整个位数大于7，所以 out of range 了</li>
</ul>
<p>另外在编程中应尽量避免做浮点数的比较，否则可能会导致一些潜在的问题。</p>
<p>坚决不允许使用float去存money，使用decimal更加稳妥，但使用decimal做除法依旧会产生浮点型，所以特殊情况请考虑使用整型，货币单位使用 分 ，或者除法在最后进行。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.path8.net/tn/archives/951" target="_blank" rel="external">MySQL各数据类型的区别</a></li>
<li><a href="http://dev.mysql.com/doc/refman/5.6/en/out-of-range-and-overflow.html" target="_blank" rel="external">MySQL manual Out-of-Range and Overflow Handling</a></li>
<li><a href="http://www.intechgrity.com/mysql-datatypes-working-with-fraction-and-decimal-dec/" target="_blank" rel="external">MySQL FLOAT vs DEC: working with fraction and decimal</a></li>
<li><a href="http://www.noelherrick.com/blog/always-use-decimal-for-money" target="_blank" rel="external">Never use floats for money</a></li>
</ul>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2016/04/29/mysql-numeric-int-float/">http://seanlook.com/2016/04/29/mysql-numeric-int-float/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL字符数据类型char与varchar的区别]]></title>
      <url>http://seanlook.com/2016/04/28/mysql-char-varchar-set/</url>
      <content type="html"><![CDATA[<p>数据类型差不多是接触mysql一开始就了解的内容，最近遇到几个现象如varchar自动转mediumtext，blob存储性能的问题，不得不回头明确一下关于MySQL常用数据类型的选择。</p>
<p><a href="http://dev.mysql.com/doc/refman/5.6/en/char.html" target="_blank" rel="external">mysql手册这里</a> 已经讲的很清楚了。它们都是定义字符串型字段时常用的类型，但它们存储和检索的方式有不同，最大长度和尾部的空格是否保留也有差别。</p>
<p><code>char</code>类型是使用固定长度空间进行存储，范围0-255。比如<code>CHAR(30)</code>能放30个字符，存放abcd时，尾部会以空格补齐，实际占用空间 30 * 3bytes (utf8)。检索它的时候尾部空格会被去除。</p>
<p>char善于存储经常改变的值，或者长度相对固定的值，比如type、ip地址或md5之类的数据，不容易产生碎片。关于它的效率可以参考<a href="http://bbs.chinaunix.net/thread-1696053-1-1.html" target="_blank" rel="external">这里</a>。</p>
<p><code>varchar</code>类型保存可变长度字符串，范围0-65535（但受到单行最大64kb的限制）。比如用 <code>varchar(30)</code> 去存放abcd，实际使用5个字节，因为还需要使用额外1个字节来标识字串长度（0-255使用1个字节，超过255需要2个字节）。</p>
<p>varchar善于存储值的长短不一的列，也是用的最多的一种类型，节省磁盘空间。update时varchar列时，如果新数据比原数据大，数据库需要重新开辟空间，这一点会有性能略有损耗，但innodb引擎下查询效率比char高一点。这也是innodb官方推荐的类型。</p>
<p>如果存储时真实长度超过了char或者varchar定义的最大长度呢？</p>
<ul>
<li>在SQL严格模式下，无论char还是varchar，如果尾部要被截断的是非空格，会提示错误，即插入失败</li>
<li>在SQL非严格模式下，无论char还是varchar，如果尾部要被截断的是非空格，会提示warning，但可以成功</li>
<li>如果尾部要被截断的是空格，无论SQL所处模式，varchar都可以插入成功但提示warning；char也可以插入成功，并且无任何提示</li>
</ul>
<p>这里特意提到SQL的严格模式，是因为在工作中也遇到过一些坑，参考<a href="">MySQL的sql_mode严格模式注意点</a>。</p>
<p>贴上官方的一个表格：</p>
<table>
<thead>
<tr>
<th>Value</th>
<th>CHAR(4)</th>
<th>Storage Required</th>
<th>VARCHAR(4)</th>
<th>Storage Required</th>
</tr>
</thead>
<tbody>
<tr>
<td>‘’</td>
<td>‘    ‘</td>
<td>4 bytes</td>
<td>‘’</td>
<td>1 byte</td>
</tr>
<tr>
<td>‘ab’</td>
<td>‘ab  ‘</td>
<td>4 bytes</td>
<td>‘ab’</td>
<td>3 bytes</td>
</tr>
<tr>
<td>‘abcd’</td>
<td>‘abcd’</td>
<td>4 bytes</td>
<td>‘abcd’</td>
<td>5 bytes</td>
</tr>
<tr>
<td>‘abcdefgh’</td>
<td>‘abcd’</td>
<td>4 bytes</td>
<td>‘abcd’</td>
<td>5 bytes</td>
</tr>
</tbody>
</table>
<p>另外，mysql字段值比较时默认是不区分大小写的，这是由于他们的校对规则（一般是 utf8_general_ci）决定的，按字符比较，所以查询时 值尾部 的空格也是被忽略的，除非建表时对列指定 <code>BINARY</code> （校对字符集变成utf8_bin）或者<code>select * from vc where binary v=&#39;ab  &#39;;</code>，就会按字节比较，即比较时区分大小写和尾部空格。</p>
<p>需要注意的是，使用varchar不能因为长度可变就随意分大空间，比如90个字节能放够的列定义成varchar(200)，因为开辟内存时是以200字节进行的，遇到需要filesort或tmp table作业可能会带来不利影响。</p>
<a id="more"></a>
<p>最后研究一下字符集对存储长度影响，以 <code>create table tc_utf8(c1 int primary key auto_increment, c2 char(30), c3 varchar(N)) charset=utf8;</code> 为例：</p>
<p>字符集为utf8，于是中文每个字符占3个字节，英文还是1个字节，所以N最大为 (65535-1-2-4-30*3)/3 = 21812，即最多能存放21812个英文、数字、汉字。其中65535是单行最大限制，减1是NULL标识位，减2的是头部的2个字节标识长度，减30*3的原因是char(30)占用90个字节，最后除以3还是因为utf8最长用3个字节表示一个字符。</p>
<p>但有人会说，utf8的英文字符只需要1个字节表示，并不占用3个字节，在存ASCII字符的情况下N是不是可以更大呢。答案是否定的，因为定义表的时候mysql事先并不知道c3要存的是英文还在中文，只能以最大来计。mysql也是以这种方式来确保行最大 65535 bytes 限制：数据行只要出现一个ascii字符（如英文字母、数字），就永远达不到65535，数据行全中文则刚好满。</p>
<p>还有一种特殊情况：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; show variables like "char%";</span></div><div class="line">+--------------------------+----------------------------+</div><div class="line"><span class="section">| Variable_name            | Value                      |</span></div><div class="line">+--------------------------+----------------------------+</div><div class="line">| character<span class="emphasis">_set_</span>client     | utf8                       |</div><div class="line">| character<span class="emphasis">_set_</span>connection | utf8                       |</div><div class="line">| character<span class="emphasis">_set_</span>database   | utf8                       |</div><div class="line">| character<span class="emphasis">_set_</span>filesystem | binary                     |</div><div class="line">| character<span class="emphasis">_set_</span>results    | utf8                       |</div><div class="line">| character<span class="emphasis">_set_</span>server     | latin1                     |</div><div class="line">| character<span class="emphasis">_set_</span>system     | utf8                       |</div><div class="line"><span class="section">| character_sets_dir       | /usr/share/mysql/charsets/ |</span></div><div class="line">+--------------------------+----------------------------+</div><div class="line">8 rows in set (0.12 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; select @@sql_mode;</span></div><div class="line">+------------------------+</div><div class="line"><span class="section">| @@sql_mode             |</span></div><div class="line">+------------------------+</div><div class="line"><span class="section">| NO_ENGINE_SUBSTITUTION |</span></div><div class="line">+------------------------+</div><div class="line">1 rows in set (0.13 sec)</div><div class="line"></div><div class="line">mysql&gt; create table tc<span class="emphasis">_utf8_</span>21812(c1 int primary key auto<span class="emphasis">_increment, c2 char(30), c3 varchar(21812)) charset=utf8;</span></div><div class="line">Query OK, 0 rows affected (0.10 sec)</div><div class="line"></div><div class="line">mysql&gt; create table tc<span class="emphasis">_utf8_</span>21813(c1 int primary key auto<span class="emphasis">_increment, c2 char(30), c3 varchar(21845)) charset=utf8;</span></div><div class="line">Row size too large. The maximum row size for the used table type, not counting BLOBs, is 65535. This includes storage overhead, check the manual. You have to change some columns to TEXT or BLOBs</div><div class="line"></div><div class="line">mysql&gt; create table tc<span class="emphasis">_utf8_</span>21846(c1 int primary key auto<span class="emphasis">_increment, c2 char(30), c3 varchar(21846)) charset=utf8;</span></div><div class="line">Query OK, 0 rows affected, 1 warnings (0.10 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; show warnings;</span></div><div class="line">+-------+------+---------------------------------------------+</div><div class="line"><span class="section">| Level | Code | Message                                     |</span></div><div class="line">+-------+------+---------------------------------------------+</div><div class="line"><span class="section">| Note  | 1246 | Converting column 'c3' from VARCHAR to TEXT |</span></div><div class="line">+-------+------+---------------------------------------------+</div><div class="line">1 rows in set (0.14 sec)</div></pre></td></tr></table></figure>
<p>即在非严格模式下，因为N=21813 &gt; 21812，所以报 Row size too large 错误。但N=21846 &gt; (65535/3)时，只是出现warnings，varchar自动变成了mediumtext 类型。</p>
<p>细心的朋友可能注意到上面开始我看了一下字符集 <code>show variabels like &quot;char%&quot;;</code>，因为接下来要说明另外一个问题：客户端字符集与database不一样的情况。</p>
<p>我们回到 N&lt;=21812 的正常情况：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tc_utf8`</span> (</div><div class="line">  <span class="string">`c1`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`c2`</span> <span class="built_in">char</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`c3`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`c1`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div></pre></td></tr></table></figure>
<p>插入一些数据：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">mysql&gt; set names utf8;</div><div class="line">mysql&gt; insert into tc<span class="emphasis">_utf8(c2,c3) values('en_</span>30',repeat(<span class="emphasis">'a'</span>,30));</div><div class="line">Query OK, 1 rows affected (17.87 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into tc<span class="emphasis">_utf8(c2,c3) values('en_</span>31',repeat(<span class="emphasis">'b'</span>,31));</div><div class="line">Query OK, 1 rows affected, 1 warnings (0.10 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; show warnings;</span></div><div class="line">+---------+------+-----------------------------------------+</div><div class="line"><span class="section">| Level   | Code | Message                                 |</span></div><div class="line">+---------+------+-----------------------------------------+</div><div class="line"><span class="section">| Warning | 1265 | Data truncated for column 'c3' at row 1 |</span></div><div class="line">+---------+------+-----------------------------------------+</div><div class="line">1 rows in set (0.14 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into tc<span class="emphasis">_utf8(c2,c3) values('zh_</span>30',repeat(<span class="emphasis">'中'</span>,30));</div><div class="line">Query OK, 1 rows affected (0.18 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into tc<span class="emphasis">_utf8(c2,c3) values('zh_</span>31',repeat(<span class="emphasis">'文'</span>,31));</div><div class="line">Query OK, 1 rows affected, 1 warnings (0.09 sec)</div><div class="line"></div><div class="line">意料之中，汉字同样被截断</div><div class="line"></div><div class="line"><span class="section">ysql&gt; select c2,c3,length(c3),char_length(c3) from tc_utf8;</span></div><div class="line">+-------+------------+-----------------+------------------------------------------------------------------------+</div><div class="line"><span class="section">| c2    | length(c3) | char_length(c3) | c3                                                                     |</span></div><div class="line">+-------+------------+-----------------+------------------------------------------------------------------------+</div><div class="line">| en<span class="emphasis">_30 |         30 |              30 | aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                                         |</span></div><div class="line">| en_31 |         30 |              30 | bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb                                         |</div><div class="line">| zh<span class="emphasis">_30 |         90 |              30 | 中中中中中中中中中中中中中中中中中中中中中中中中中中中中中中 |</span></div><div class="line">| zh_31 |         90 |              30 | 文文文文文文文文文文文文文文文文文文文文文文文文文文文文文文 |</div><div class="line"><span class="code">+-------+</span>------------<span class="code">+-----------------+</span>------------------------------------------------------------------------+</div><div class="line">4 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
<p>上面的en_30代表insert的时候存入<em>30</em>个<em>英文</em>字符。可以看到30个a占用30个字节，30个汉字占用90个字节，大于30的会被截断，证实了文章一开头的说法。</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">mysql&gt; set names latin1;</div><div class="line"></div><div class="line">mysql&gt; insert into tc<span class="emphasis">_utf8(c2,c3) values('zh_</span>30<span class="emphasis">_latin1',repeat('中',30));</span></div><div class="line">Query OK, 1 rows affected, 1 warnings (0.10 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; show warnings;</span></div><div class="line">+---------+------+-----------------------------------------+</div><div class="line"><span class="section">| Level   | Code | Message                                 |</span></div><div class="line">+---------+------+-----------------------------------------+</div><div class="line"><span class="section">| Warning | 1265 | Data truncated for column 'c3' at row 1 |</span></div><div class="line">+---------+------+-----------------------------------------+</div><div class="line">1 rows in set (0.14 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into tc<span class="emphasis">_utf8(c2,c3) values('zh_</span>10<span class="emphasis">_latin1',repeat('中',10));</span></div><div class="line">Query OK, 1 rows affected (0.10 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into tc<span class="emphasis">_utf8(c2,c3) values('zh_</span>10<span class="emphasis">_latin1',repeat('文',10));</span></div><div class="line">Query OK, 1 rows affected (0.11 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into tc<span class="emphasis">_utf8(c2,c3) values('zh_</span>11<span class="emphasis">_latin1',repeat('文',11));</span></div><div class="line">Query OK, 1 rows affected, 1 warnings (0.12 sec)</div><div class="line"></div><div class="line">截断</div></pre></td></tr></table></figure>
<p>上面的实验显示，db table是utf8，但客户端连接时使用latin1，在非严格模式下 varchar(30) <strong>只能存10</strong>个汉字，多余的尾部被截断了</p>
<p>我们来看一下占用字节的情况：（2,3行的乱码是意料之中的）</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select c1,c2,c3,length(c3),char_length(c3) from tc_utf8;</div><div class="line">+----+--------------+--------------------------------+------------+-----------------+</div><div class="line">|<span class="string"> c1 </span>|<span class="string"> c2           </span>|<span class="string"> c3                             </span>|<span class="string"> length(c3) </span>|<span class="string"> char_length(c3) </span>|</div><div class="line">+----+--------------+--------------------------------+------------+-----------------+</div><div class="line">|<span class="string"> 1  </span>|<span class="string"> en_30        </span>|<span class="string"> aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa </span>|<span class="string"> 30         </span>|<span class="string"> 30              </span>|</div><div class="line">|<span class="string"> 2  </span>|<span class="string"> en_31        </span>|<span class="string"> bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb </span>|<span class="string"> 30         </span>|<span class="string"> 30              </span>|</div><div class="line">|<span class="string"> 3  </span>|<span class="string"> zh_30        </span>|<span class="string"> ?????????????????????????????? </span>|<span class="string"> 90         </span>|<span class="string"> 30              </span>|</div><div class="line">|<span class="string"> 4  </span>|<span class="string"> zh_31        </span>|<span class="string"> ?????????????????????????????? </span>|<span class="string"> 90         </span>|<span class="string"> 30              </span>|</div><div class="line">|<span class="string"> 5  </span>|<span class="string"> zh_30_latin1 </span>|<span class="string"> 中中中中中中中中中中 </span>|<span class="string"> 60         </span>|<span class="string"> 30              </span>|</div><div class="line">|<span class="string"> 6  </span>|<span class="string"> zh_10_latin1 </span>|<span class="string"> 中中中中中中中中中中 </span>|<span class="string"> 60         </span>|<span class="string"> 30              </span>|</div><div class="line">|<span class="string"> 7  </span>|<span class="string"> zh_10_latin1 </span>|<span class="string"> 文文文文文文文文文文 </span>|<span class="string"> 80         </span>|<span class="string"> 30              </span>|</div><div class="line">|<span class="string"> 9  </span>|<span class="string"> zh_11_latin1 </span>|<span class="string"> 文文文文文文文文文文 </span>|<span class="string"> 80         </span>|<span class="string"> 30              </span>|</div><div class="line">+----+--------------+--------------------------------+------------+-----------------+</div><div class="line">8 rows in set (0.14 sec)</div></pre></td></tr></table></figure>
<p>看到char_length函数算出的中、英文字符个数都是30，但一个“中”占6字节，一个“文”占8字节，是不是很诧异，这中间有数次的编码转换过程，有兴趣 可以参考 <a href="http://mysql.rjweb.org/doc.php/charcoll" target="_blank" rel="external">http://mysql.rjweb.org/doc.php/charcoll</a> ，是可以模拟出来的。</p>
<p>在严格模式下就没这么复杂了，所以尽量使用 STRICT_TRANS_TABLES ，避免意外的情况带入生产环境。早期设计的时候就要保持客户端与数据库字符集一致。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://dev.mysql.com/doc/refman/5.7/en/char.html" target="_blank" rel="external">MySQL manual:The CHAR and VARCHAR Types</a></li>
<li><a href="http://get.ftqq.com/723.get" target="_blank" rel="external">MySQL字符集指南–进阶篇V0.7</a></li>
<li><a href="http://mysql.rjweb.org/doc.php/charcoll" target="_blank" rel="external">MySQL字符集与校对规则</a></li>
<li><a href="http://www.mysqltutorial.org/mysql-string-length/" target="_blank" rel="external">MySQL String Length</a></li>
<li><a href="http://sunny90.com/a/database/2014/0819/24.html" target="_blank" rel="external">http://sunny90.com/a/database/2014/0819/24.html</a></li>
</ul>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2016/04/28/mysql-char-varchar-set/">http://seanlook.com/2016/04/28/mysql-char-varchar-set/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL sql_mode 说明（及处理一起 sql_mode 引发的问题）]]></title>
      <url>http://seanlook.com/2016/04/22/mysql-sql-mode-troubleshooting/</url>
      <content type="html"><![CDATA[<h2 id="1-MySQL莫名变成了-Strict-SQL-Mode"><a href="#1-MySQL莫名变成了-Strict-SQL-Mode" class="headerlink" title="1. MySQL莫名变成了 Strict SQL Mode"></a>1. MySQL莫名变成了 Strict SQL Mode</h2><p>最近测试组那边反应数据库部分写入失败，app层提示是插入成功，但表里面里面没有产生数据，而两个写入操作的另外一个表有数据。因为 insert 失败在数据库层面是看不出来的，于是找php的同事看下错误信息：</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="literal">Err</span>] <span class="number">1364</span> - Field `f_company_id` doesn<span class="symbol">'t</span> have a <span class="keyword">default</span> value</div></pre></td></tr></table></figure>
<p>很明显2个 insert 操作，第一条成功，第二条失败了，但因为没有控制在一个事务当中，导致app里面依然提示成功，这是客户入库操作，心想如果线上也有这个问题得是多大的代价。</p>
<p>不说开发的问题，好端端的mysql怎么突然就部分表写入失败呢？根据上面的问题很快能猜到是 sql_mode 问题： NOT NULL 列没有默认值但代码里也没给值，在非严格模式下，int列默认为0，string列默认为’’了，所以不成问题；但在严格模式下，是直接返回失败的。</p>
<p>一看，果然：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; show variables like "sql_mode";</span></div><div class="line">+---------------+--------------------------------------------+</div><div class="line"><span class="section">| Variable_name | Value                                      |</span></div><div class="line">+---------------+--------------------------------------------+</div><div class="line"><span class="section">| sql_mode      | STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION |</span></div><div class="line">+---------------+--------------------------------------------+</div></pre></td></tr></table></figure></p>
<p>但是一直是没问题的的，就突然出现了，有谁会去改 sql_mode 呢，生产环境产生这个问题的风险有多大？所以必须揪出来。</p>
<p>先 <code>set global sql_mode=&#39;&#39;</code> ，让他们用着先（文后会给解决问题根本的办法），同时打开general_log看是哪一个用户有类似设置 sql_mode 命令：<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">1134456 </span>Query   SET autocommit=<span class="number">1</span></div><div class="line"><span class="symbol">1134456 </span>Query   Set sql_mode=<span class="comment">'NO_ENGINE_SUBSITUTION,STRICT_TRANS_TABLES'</span></div><div class="line"><span class="symbol">1134457 </span>Connect ecuser@<span class="number">10.0.200.173</span> <span class="keyword">on</span></div><div class="line"><span class="symbol">1134457 </span>Query   /* mysql-connector-java-<span class="number">5.1.35</span> ...</div></pre></td></tr></table></figure></p>
<p>看出是java组那边哪个框架建立连接的时候使用设置了sql_mode，但这是session级别的，不影响php那边用户的连接。</p>
<a id="more"></a>
<p>那会是什么原因在 set global 之后又变回strict模式呢，于是想到 mysqld_safe 启动实际是一个保护进程，在mysqld异常停止之后会拉起来，会不会中间有异常导致 mysqld 重启，致使 global 失效？看了mysql错误日志，才想到前些天断过电，所以决定直接改 <code>/etc/my.cnf</code>配置：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="section">[mysqld]</span></div><div class="line"><span class="attr">sql_mode</span>=NO_ENGINE_SUBSTITUTION</div></pre></td></tr></table></figure></p>
<p>重启myqld之后，还是<code>STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION</code>，很少遇到my.cnf里面配置不生效的情况。无独有偶，在 stackoverflow上找到同样的问题 <a href="http://stackoverflow.com/questions/28849293/how-to-make-sql-mode-no-engine-substitution-permanent-in-mysql-my-cnf" target="_blank" rel="external">how-to-make-sql-mode-no-engine-substitution-permanent-in-mysql-my-cnf</a> ，原因很简单，sql_mode这个选项被其它地方的配置覆盖了。</p>
<p><strong>了解一下mysql配置文件的加载顺序：</strong></p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mysqld --<span class="keyword">help</span> --<span class="keyword">verbose</span>|<span class="keyword">grep</span> -A1 -B1 <span class="keyword">cnf</span></div><div class="line">Default <span class="keyword">options</span> are <span class="keyword">read</span> from the following <span class="keyword">files</span> in the given order:</div><div class="line">/etc/my.<span class="keyword">cnf</span> /etc/mysql/my.<span class="keyword">cnf</span> /usr/etc/my.<span class="keyword">cnf</span> ~/.my.<span class="keyword">cnf</span></div></pre></td></tr></table></figure>
<p>mysql按照上面的顺序加载配置文件，后面的配置项会覆盖前面的。最后终于在 <code>/usr/my.cnf</code> 找到有一条<code>sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</code>，把这个文件删掉，/etc/my.cnf 里面的就生效了。</p>
<p>但是目前没能整明白的是，mysql运行这么长时间怎么突然在<code>/usr</code> （MYSQL_BASE）下多个my.cnf，也不像人为创建的。其它实例也没这样的问题。</p>
<p>类似还出现过一例：存储过程里把 ‘’ 传给int型的，严格模式是不允许，而非严格模式只是一个warning。（命令行执行完语句后，<code>show warnings</code> 可看见）</p>
<p>那么解决这类问题的终极（推荐）办法其实是，考虑到数据的兼容性和准确性，MySQL就应该运行在严格模式下！无论开发环境还是生产环境，否则代码移植到线上可能产生隐藏的问题。</p>
<p>sql_mode 问题可以很简单，也可以很复杂。曾经在一个交流群里看到有人提到，主从sql_mode设置不一致导致复制异常，这里自己正好全面了解一下几个常用的值，方便以后排除问题多个方向。</p>
<h2 id="2-sql-mode-常用值说明"><a href="#2-sql-mode-常用值说明" class="headerlink" title="2. sql_mode 常用值说明"></a>2. sql_mode 常用值说明</h2><p>官方手册专门有一节介绍 <a href="https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html</a> 。 SQL Mode 定义了两个方面：MySQL应支持的SQL语法，以及应该在数据上执行何种确认检查。</p>
<ul>
<li><p>SQL语法支持类</p>
<ul>
<li><p><code>ONLY_FULL_GROUP_BY</code><br>对于GROUP BY聚合操作，如果在SELECT中的列、HAVING或者ORDER BY子句的列，没有在GROUP BY中出现，那么这个SQL是不合法的。是可以理解的，因为不在 group by 的列查出来展示会有矛盾。<br>在5.7中默认启用，所以在实施5.6升级到5.7的过程需要注意：</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> Expression <span class="string">#1</span> <span class="keyword">of</span> <span class="keyword">SELECT</span> list <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span></div><div class="line">clause <span class="keyword">and</span> contains nonaggregated column</div><div class="line"><span class="string">'1066export.ebay_order_items.TransactionID'</span> which</div><div class="line"><span class="keyword">is</span> <span class="keyword">not</span> functionally dependent <span class="keyword">on</span> columns <span class="keyword">in</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span></div><div class="line">clause; this <span class="keyword">is</span> incompatible <span class="keyword">with</span> sql_mode=only_full_group_by</div></pre></td></tr></table></figure>
</li>
<li><p><code>ANSI_QUOTES</code><br>启用 ANSI_QUOTES 后，不能用双引号来引用字符串，因为它被解释为识别符，作用与 ` 一样。<br>设置它以后，<code>update t set f1=&quot;&quot; ...</code>，会报 Unknown column ‘’ in ‘field list 这样的语法错误。</p>
</li>
<li><code>PIPES_AS_CONCAT</code><br>将 <code>||</code> 视为字符串的连接操作符而非 或 运算符，这和Oracle数据库是一样的，也和字符串的拼接函数 CONCAT() 相类似</li>
<li><code>NO_TABLE_OPTIONS</code><br>使用 <code>SHOW CREATE TABLE</code> 时不会输出MySQL特有的语法部分，如 <code>ENGINE</code> ，这个在使用 mysqldump 跨DB种类迁移的时候需要考虑。</li>
<li><code>NO_AUTO_CREATE_USER</code><br>字面意思不自动创建用户。在给MySQL用户授权时，我们习惯使用 <code>GRANT ... ON ... TO dbuser</code> 顺道一起创建用户。设置该选项后就与oracle操作类似，授权之前必须先建立用户。5.7.7开始也默认了。  </li>
</ul>
</li>
<li><p>数据检查类</p>
<ul>
<li><code>NO_ZERO_DATE</code><br>认为日期 ‘0000-00-00’ 非法，与是否设置后面的严格模式有关。<br>1.如果设置了严格模式，则 NO_ZERO_DATE 自然满足。但如果是 INSERT IGNORE 或 UPDATE IGNORE，’0000-00-00’依然允许且只显示warning<br>2.如果在非严格模式下，设置了<code>NO_ZERO_DATE</code>，效果与上面一样，’0000-00-00’允许但显示warning；如果没有设置<code>NO_ZERO_DATE</code>，no warning，当做完全合法的值。<br>3.<code>NO_ZERO_IN_DATE</code>情况与上面类似，不同的是控制日期和天，是否可为 0 ，即 <code>2010-01-00</code> 是否合法。  </li>
<li><code>NO_ENGINE_SUBSTITUTION</code><br>使用 <code>ALTER TABLE</code>或<code>CREATE TABLE</code> 指定 ENGINE 时， 需要的存储引擎被禁用或未编译，该如何处理。启用<code>NO_ENGINE_SUBSTITUTION</code>时，那么直接抛出错误；不设置此值时，CREATE用默认的存储引擎替代，ATLER不进行更改，并抛出一个 warning .</li>
<li><code>STRICT_TRANS_TABLES</code><br>设置它，表示启用严格模式。<br>注意 <code>STRICT_TRANS_TABLES</code> 不是几种策略的组合，单独指 <code>INSERT</code>、<code>UPDATE</code>出现少值或无效值该如何处理:<br>1.前面提到的把 ‘’ 传给int，严格模式下非法，若启用非严格模式则变成0，产生一个warning<br>2.Out Of Range，变成插入最大边界值<br>3.A value is missing when a new row to be inserted does not contain a value for a non-NULL column that has no explicit DEFAULT clause in its definition</li>
</ul>
</li>
</ul>
<p>上面并没有囊括所有的 SQL Mode，选了几个代表性的，详细还是 <a href="https://mariadb.com/kb/en/mariadb/sql_mode/" target="_blank" rel="external">看手册</a>。</p>
<p>sql_mode一般来说很少去关注它，没有遇到实际问题之前不会去启停上面的条目。我们常设置的 sql_mode 是 <code>ANSI</code>、<code>STRICT_TRANS_TABLES</code>、<code>TRADITIONAL</code>，ansi和traditional是上面的几种组合。</p>
<ul>
<li><code>ANSI</code>：更改语法和行为，使其更符合标准SQL<br>相当于REAL_AS_FLOAT, PIPES_AS_CONCAT, ANSI_QUOTES, IGNORE_SPACE</li>
<li><code>TRADITIONAL</code>：更像传统SQL数据库系统，该模式的简单描述是当在列中插入不正确的值时“给出错误而不是警告”。<br>相当于 STRICT_TRANS_TABLES, STRICT_ALL_TABLES, NO_ZERO_IN_DATE, NO_ZERO_DATE, ERROR_FOR_DIVISION_BY_ZERO, NO_AUTO_CREATE_USER, NO_ENGINE_SUBSTITUTION</li>
<li><code>ORACLE</code>：相当于 PIPES_AS_CONCAT, ANSI_QUOTES, IGNORE_SPACE, NO_KEY_OPTIONS, NO_TABLE_OPTIONS, NO_FIELD_OPTIONS, NO_AUTO_CREATE_USER</li>
</ul>
<p>无论何种mode，产生error之后就意味着单条sql执行失败，对于支持事务的表，则导致当前事务回滚；但如果没有放在事务中执行，或者不支持事务的存储引擎表，则可能导致数据不一致。MySQL认为，相比直接报错终止，数据不一致问题更严重。于是 <code>STRICT_TRANS_TABLES</code> 对非事务表依然尽可能的让写入继续，比如给个”最合理”的默认值或截断。而对于 <code>STRICT_ALL_TABLES</code>，如果是单条更新，则不影响，但如果更新的是多条，第一条成功，后面失败则会出现部分更新。</p>
<p>5.6.6 以后版本默认就是<code>NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</code>，5.5默认为 ‘’ 。</p>
<h2 id="3-设置-sql-mode"><a href="#3-设置-sql-mode" class="headerlink" title="3. 设置 sql_mode"></a>3. 设置 sql_mode</h2><p><strong>查看</strong><br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">查看当前连接会话的sql模式：</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">select</span> @@session.sql_mode;</div><div class="line">或者从环境变量里取</div><div class="line">mysql&gt; show variables like <span class="string">"sql_mode"</span>;</div><div class="line"></div><div class="line"></div><div class="line">查看全局sql_mode设置：</div><div class="line">mysql&gt; <span class="keyword">select</span> @@<span class="keyword">global</span>.sql_mode;</div><div class="line"></div><div class="line">只设置<span class="keyword">global</span>，需要重新连接进来才会生效</div></pre></td></tr></table></figure></p>
<p><strong>设置</strong><br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">形式如</div><div class="line">mysql&gt; <span class="keyword">set</span> sql_mode=<span class="string">''</span>;</div><div class="line">mysql&gt; <span class="keyword">set</span> global <span class="comment">sql_mode=</span><span class="comment">'NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES'</span>;</div><div class="line"></div><div class="line"></div><div class="line">如果是自定义的模式组合，可以像下面这样</div><div class="line"></div><div class="line">Adding only one mode to sql_mode without removing existing ones:</div><div class="line">mysql&gt; <span class="keyword">SET</span> sql_mode=(SELECT <span class="comment">CONCAT(@@sql_mode,</span><span class="comment">',&lt;mode_to_add&gt;'</span><span class="comment">))</span>;</div><div class="line"></div><div class="line">Removing only a specific mode from sql_mode without removing others:</div><div class="line">mysql&gt; <span class="keyword">SET</span> sql_mode=(SELECT <span class="comment">REPLACE(@@sql_mode,</span><span class="comment">'&lt;mode_to_remove&gt;'</span><span class="comment">,</span><span class="comment">''</span><span class="comment">))</span>;</div></pre></td></tr></table></figure></p>
<p>配置文件里面设置<code>sql-mode=&quot;&quot;</code> 。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html#sql-mode-strict" target="_blank" rel="external">MySQL manual sql-mode</a></li>
<li><a href="http://xstarcd.github.io/wiki/MySQL/MySQL-sql-mode.html" target="_blank" rel="external">mysql的sql_mode合理设置</a></li>
<li><a href="http://dba.stackexchange.com/questions/109053/set-sql-mode-blank-after-upgrading-to-mysql-5-6" target="_blank" rel="external">set-sql-mode-blank-after-upgrading-to-mysql-5-6</a></li>
<li><a href="http://blog.itpub.net/29773961/viewspace-1813501/" target="_blank" rel="external">MySQL SQL_MODE详解</a></li>
</ul>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/04/22/mysql-sql-mode-troubleshooting/">http://seanlook.com/2016/04/22/mysql-sql-mode-troubleshooting/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL避免索引列使用 OR 条件]]></title>
      <url>http://seanlook.com/2016/04/05/mysql-avoid-or-query/</url>
      <content type="html"><![CDATA[<p>这个亏已经吃过很多次了，在开发以前的sql代码里面，许多以 or 作为where条件的查询，甚至更新。这里举例来说明使用 or 的弊端，以及改进办法。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> f_crm_id <span class="keyword">from</span> d_dbname1.t_tbname1 <span class="keyword">where</span>  f_xxx_id = <span class="number">926067</span>  </div><div class="line"><span class="keyword">and</span> (f_mobile =<span class="string">'1234567891'</span> <span class="keyword">or</span> f_phone =<span class="string">'1234567891'</span> ) <span class="keyword">limit</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<p>从查询语句很容易看出，f_mobile和f_phone两个字段都有可能存电话号码，一般思路都是用 or 去一条sql解决，但表数据量一大简直是灾难：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-avoid-or-1.png" alt=""></p>
<p>t_tbanme1上有索引<code>idx_id_mobile(f_xxx_id,f_mobile)</code>, <code>idx_phone(f_phone)</code>,<code>idx_id_email(f_id,f_email)</code>，explain 的结果却使用了 idx_id_email 索引，有时候运气好可能走 idx_id_mobile f_xxx_id</p>
<p><strong>因为mysql的每条查询，每个表上只能选择一个索引</strong>。如果使用了 idx_id_mobile 索引，恰好有一条数据，因为有 limit 1 ，那么恭喜很快得到结果；但如果 f_mobile 没有数据，那 f_phone 字段只能在f_id条件下挨个查找，扫描12w行。 or 跟 and 不一样，甚至有开发认为添加 <code>(f_xxx_id,f_mobile,f_phone)</code>不就完美了吗，要吐血了~<br><a id="more"></a><br>那么优化sql呢，很简单（<strong>注意f_mobile,f_phone上都要有相应的索引</strong>），<strong>方法一</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">select</span> f_crm_id <span class="keyword">from</span> d_dbname1.t_tbname1 <span class="keyword">where</span>  f_xxx_id = <span class="number">900000</span>  <span class="keyword">and</span> f_mobile =<span class="string">'1234567891'</span> <span class="keyword">limit</span> <span class="number">1</span> )</div><div class="line"><span class="keyword">UNION</span> ALL </div><div class="line">(<span class="keyword">select</span> f_crm_id <span class="keyword">from</span> d_dbname1.t_tbname1 <span class="keyword">where</span>  f_xxx_id = <span class="number">900000</span>  <span class="keyword">and</span> f_phone =<span class="string">'1234567891'</span> <span class="keyword">limit</span> <span class="number">1</span> )</div></pre></td></tr></table></figure></p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-avoid-or-2.png" alt=""></p>
<p>两条独立的sql都能用上索引，分查询各自limit，如果都有结果集返回，随便取一条就行。</p>
<p>还有一种优化办法，如果这种查询特别频繁（又无缓存），改成单独的sql执行，比如大部分号码值都在f_mobile上，那就先执行分sql1，有结果则结束，判断没有结果再执行分sql2 ，能减少数据库查询速度，让代码去处理更多的事情，<strong>方法二</strong>伪代码：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sql1 = <span class="keyword">select</span> f_crm_id <span class="keyword">from</span> d_dbname1.t_tbname1 <span class="keyword">where</span>  f_xxx_id = <span class="number">900000</span>  <span class="keyword">and</span> f_mobile =<span class="string">'1234567891'</span> <span class="keyword">limit</span> <span class="number">1</span>;</div><div class="line">sq1.execute();</div><div class="line">if no result sql1:</div><div class="line">  sql1 = <span class="keyword">select</span> f_crm_id <span class="keyword">from</span> d_dbname1.t_tbname1 <span class="keyword">where</span>  f_xxx_id = <span class="number">900000</span>  <span class="keyword">and</span> f_phone =<span class="string">'1234567891'</span> <span class="keyword">limit</span> <span class="number">1</span>;</div><div class="line">    sql1.execute();</div></pre></td></tr></table></figure></p>
<hr>
<p>复杂一点的场景是止返回一条记录那么简单，limit 2：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select <span class="selector-tag">a</span><span class="selector-class">.f_crm_id</span> from d_dbname1<span class="selector-class">.t_tbname1</span> as <span class="selector-tag">a</span> </div><div class="line">where (<span class="selector-tag">a</span><span class="selector-class">.f_create_time</span> &gt; from_unixtime(<span class="string">'1464107527'</span>) or <span class="selector-tag">a</span><span class="selector-class">.f_modify_time</span> &gt; from_unixtime(<span class="string">'1464107527'</span>) )</div><div class="line">limit <span class="number">0</span>,<span class="number">200</span></div></pre></td></tr></table></figure></p>
<p>这种情况方法一、二都需要改造，因为 f_create_time，f_modify_time 都可能均满足判断条件，这样就会返回重复的数据。</p>
<p>方法一需要改造：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(select <span class="selector-tag">a</span><span class="selector-class">.f_crm_id</span> from d_dbname1<span class="selector-class">.t_tbname1</span> as <span class="selector-tag">a</span> </div><div class="line">where <span class="selector-tag">a</span><span class="selector-class">.f_create_time</span> &gt; from_unixtime(<span class="string">'1464397527'</span>)</div><div class="line">limit <span class="number">0</span>,<span class="number">200</span> )</div><div class="line">UNION ALL</div><div class="line">(select <span class="selector-tag">a</span><span class="selector-class">.f_crm_id</span> from d_dbname1<span class="selector-class">.t_tbname1</span> as <span class="selector-tag">a</span> </div><div class="line">where <span class="selector-tag">a</span><span class="selector-class">.f_modify_time</span> &gt; from_unixtime(<span class="string">'1464397527'</span>) and <span class="selector-tag">a</span><span class="selector-class">.f_create_time</span> &lt;= from_unixtime(<span class="string">'1464397527'</span>)</div><div class="line">limit <span class="number">0</span>,<span class="number">200</span> )</div></pre></td></tr></table></figure></p>
<p>有人说 把 UNION ALL 改成 UNION 不就去重了吗？如果说查询比较频繁，或者limit比较大，数据库还是会有压力，所以需要做trade off。</p>
<p>这种情况更多还是适合方法二，包括有可能需要 order by limit 情况。改造伪代码：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sql1 = (<span class="keyword">select</span> a.f_crm_id <span class="keyword">from</span> d_dbname1.t_tbname1 <span class="keyword">as</span> a <span class="keyword">where</span> a.f_create_time &gt; from_unixtime(<span class="string">'1464397527'</span>) limit <span class="number">0</span>,<span class="number">200</span> );</div><div class="line">sql1.execute();</div><div class="line">sql1_count = sql1.result.count</div><div class="line"><span class="keyword">if</span> sql1_count &lt; <span class="number">200</span> :</div><div class="line">  sql2 = (<span class="keyword">select</span> a.f_crm_id <span class="keyword">from</span> d_dbname1.t_tbname1 <span class="keyword">as</span> a <span class="keyword">where</span> a.f_modify_time &gt; from_unixtime(<span class="string">'1464397527'</span>) <span class="keyword">and</span> a.f_create_time &lt;= from_unixtime(<span class="string">'1464397527'</span>) limit <span class="number">0</span>, (<span class="number">200</span> - sql1_count) );</div><div class="line">  sql2.execute();</div><div class="line"></div><div class="line">final_result = paste(sql1,sql2);</div></pre></td></tr></table></figure></p>
<p>or条件在数据库上很难优化，能在代码里优化逻辑，不至于拖垮数据库。只有在 or 条件下无需索引时（且需要比较的数据量小），才考虑。</p>
<p>相同字段 or 可改成 in，如 <code>f_id=1 or f_id=100</code> -&gt; <code>f_id in (1,100)</code>。 效率问题见文章 <a href="http://blog.chinaunix.net/uid-20639775-id-3416737.html" target="_blank" rel="external">mysql中or和in的效率问题</a> 。</p>
<p>上述优化情景都是存储引擎在 InnoDB 情况下，在MyISAM有不同，见<a href="http://blog.csdn.net/hguisu/article/details/7106159" target="_blank" rel="external">mysql or条件可以使用索引而避免全表</a> 。</p>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/04/05/mysql-avoid-or-query/">http://seanlook.com/2016/04/05/mysql-avoid-or-query/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用sysbench对mysql压力测试]]></title>
      <url>http://seanlook.com/2016/03/28/mysql-sysbench/</url>
      <content type="html"><![CDATA[<p>sysbench是一个模块化的、跨平台、多线程基准测试工具，主要用于评估测试各种不同系统参数下的数据库负载情况。关于这个项目的详细介绍请看：<a href="https://github.com/akopytov/sysbench" target="_blank" rel="external">https://github.com/akopytov/sysbench</a> 。<br>它主要包括以下几种方式的测试：</p>
<ol>
<li>cpu性能</li>
<li>磁盘io性能</li>
<li>调度程序性能</li>
<li>内存分配及传输速度</li>
<li>POSIX线程性能</li>
<li>数据库性能(OLTP基准测试)</li>
</ol>
<p>sysbench的数据库OLTP测试支持MySQL、PostgreSQL、Oracle，目前主要用于Linux操作系统，开源社区已经将sysbench移植到了Windows，并支持SQL Server的基准测试。</p>
<p>废话不多说，开始。</p>
<h2 id="1-sysbench安装"><a href="#1-sysbench安装" class="headerlink" title="1. sysbench安装"></a>1. sysbench安装</h2><ul>
<li>mysql版本: mysql-community-server-5.6.29   </li>
<li>OS: CentOS 6.7 X86_64</li>
<li>sysbench 0.5相比0.4版本有一些变化，包括oltp测试结合了lua脚本，还多了一些隐藏选项，本文会涉及得到一部分。</li>
</ul>
<p>目前许多仓库里已编译好的二进制sysbench还是0.4.x版本，不过现在主流也还是github上的0.5，可以从 <a href="http://www.lefred.be/node/154" target="_blank" rel="external">这里</a>下载0.5版本的rpm包直接安装，不过我选择自己编译，因为只有这个办法是通用的。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 先安装编译依赖环境</span></div><div class="line">$ sudo yum install gcc gcc-c++ automake make  libtool mysql-community-devel</div><div class="line"></div><div class="line">$ cd <span class="regexp">/tmp &amp;&amp; git clone https:/</span><span class="regexp">/github.com/</span>akopytov/sysbench.git</div><div class="line"></div><div class="line">$ cd <span class="regexp">/tmp/</span>sysbench &amp;&amp; ./autogen.sh</div><div class="line">$ .<span class="regexp">/configure --prefix=/</span>usr<span class="regexp">/local/</span>sysbench<span class="number">-0.5</span></div><div class="line">$ ./make &amp;&amp; sudo make install</div><div class="line"></div><div class="line"><span class="comment">// 0.5版本需要oltp.lua测试脚本</span></div><div class="line"><span class="comment">// 如果是rpm包方式安装的，在 /usr/share/doc/sysbench/tests/db/ 下可找到</span></div><div class="line">$ cd <span class="regexp">/usr/</span>local<span class="regexp">/sysbench &amp;&amp; sudo mkdir -p share/</span>tests/db</div><div class="line">$ cp <span class="regexp">/tmp/</span>sysbench<span class="regexp">/sysbench/</span>tests<span class="regexp">/db/</span>*.lua share<span class="regexp">/tests/</span>db/</div><div class="line">$ .<span class="regexp">/bin/</span>sysbench --version</div><div class="line">sysbench <span class="number">0.5</span></div></pre></td></tr></table></figure>
<p>如果需要测试PostgreSQL、Oracle，则在configure时需要加上 –with-oracle 或者 –with-pgsql 参数</p>
<h2 id="2-使用sysbench对mysql压测"><a href="#2-使用sysbench对mysql压测" class="headerlink" title="2. 使用sysbench对mysql压测"></a>2. 使用sysbench对mysql压测</h2><h3 id="2-1-只读示例"><a href="#2-1-只读示例" class="headerlink" title="2.1 只读示例"></a>2.1 只读示例</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="string">.</span><span class="comment">/bin/sysbench</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">test=</span><span class="string">.</span><span class="comment">/share/tests/db/oltp</span><span class="string">.</span><span class="comment">lua</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">host=10</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">201</span><span class="string">.</span><span class="comment">36</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">port=8066</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">user=ecuser</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">password=ecuser</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">db=dbtest1a</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">tables</span><span class="literal">-</span><span class="comment">count=10</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">table</span><span class="literal">-</span><span class="comment">size=500000</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">report</span><span class="literal">-</span><span class="comment">interval=10</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">dist</span><span class="literal">-</span><span class="comment">type=uniform</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">rand</span><span class="literal">-</span><span class="comment">init=on</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">requests=0</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">test</span><span class="literal">-</span><span class="comment">mode=nontrx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">nontrx</span><span class="literal">-</span><span class="comment">mode=select</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">read</span><span class="literal">-</span><span class="comment">only=on</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">skip</span><span class="literal">-</span><span class="comment">trx=on</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">time=120</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">num</span><span class="literal">-</span><span class="comment">threads=12</span> <span class="comment">\</span></div><div class="line"><span class="title">[</span><span class="comment">prepare|run|cleanup</span><span class="title">]</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>注意最后一行，一项测试开始前需要用<code>prepare</code>来准备好表和数据，<code>run</code>执行真正的压测，<code>cleanup</code>用来清除数据和表。实际prepare的表结构：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mysql&gt; desc dbtest1a.sbtest1;</div><div class="line">+-------+------------------+------+-----+---------+----------------+</div><div class="line">|<span class="string"> Field </span>|<span class="string"> Type             </span>|<span class="string"> Null </span>|<span class="string"> Key </span>|<span class="string"> Default </span>|<span class="string"> Extra          </span>|</div><div class="line">+-------+------------------+------+-----+---------+----------------+</div><div class="line">|<span class="string"> id    </span>|<span class="string"> int(10) unsigned </span>|<span class="string"> NO   </span>|<span class="string"> PRI </span>|<span class="string"> NULL    </span>|<span class="string"> auto_increment </span>|</div><div class="line">|<span class="string"> k     </span>|<span class="string"> int(10) unsigned </span>|<span class="string"> NO   </span>|<span class="string"> MUL </span>|<span class="string"> 0       </span>|<span class="string">                </span>|</div><div class="line">|<span class="string"> c     </span>|<span class="string"> char(120)        </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string">         </span>|<span class="string">                </span>|</div><div class="line">|<span class="string"> pad   </span>|<span class="string"> char(60)         </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string">         </span>|<span class="string">                </span>|</div><div class="line">+-------+------------------+------+-----+---------+----------------+</div><div class="line">4 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
<p>上面的测试命令代表的是：对mysql进行oltp基准测试，表数量10，每表行数约50w（几乎delete多少就会insert的多少），并且是非事务的只读测试，持续60s，并发线程数12。</p>
<p><strong>需要说明的选项：</strong></p>
<ul>
<li><code>mysql-db=dbtest1a</code>：测试使用的目标数据库，这个库名要事先创建</li>
<li><code>--oltp-tables-count=10</code>：产生表的数量</li>
<li><code>--oltp-table-size=500000</code>：每个表产生的记录行数</li>
<li><code>--oltp-dist-type=uniform</code>：指定随机取样类型，可选值有 uniform(均匀分布), Gaussian(高斯分布), special(空间分布)。默认是special</li>
<li><code>--oltp-read-only=off</code>：表示不止产生只读SQL，也就是使用oltp.lua时会采用读写混合模式。默认 off，如果设置为on，则不会产生update,delete,insert的sql。</li>
<li><code>--oltp-test-mode=nontrx</code>：执行模式，这里是非事务式的。可选值有simple,complex,nontrx。默认是complex<ul>
<li>simple：简单查询，SELECT c FROM sbtest WHERE id=N</li>
<li>complex (advanced transactional)：事务模式在开始和结束事务之前加上begin和commit， 一个事务里可以有多个语句，如点查询、范围查询、排序查询、更新、删除、插入等，并且为了不破坏测试表的数据，该模式下一条记录删除后会在同一个事务里添加一条相同的记录。</li>
<li>nontrx (non-transactional)：与simple相似，但是可以进行update/insert等操作，所以如果做连续的对比压测，你可能需要重新cleanup,prepare。</li>
</ul>
</li>
<li><p><code>--oltp-skip-trx=[on|off]</code>：省略begin/commit语句。默认是off</p>
</li>
<li><p><code>--rand-init=on</code>：是否随机初始化数据，如果不随机化那么初始好的数据每行内容除了主键不同外其他完全相同</p>
</li>
<li><code>--num-threads=12</code>： 并发线程数，可以理解为模拟的客户端并发连接数</li>
<li><code>--report-interval=10</code>：表示每10s输出一次测试进度报告</li>
<li><code>--max-requests=0</code>：压力测试产生请求的总数，如果以下面的<code>max-time</code>来记，这个值设为0</li>
<li><code>--max-time=120</code>：压力测试的持续时间，这里是2分钟。</li>
</ul>
<p>注意，针对不同的选项取值就会有不同的子选项。比如<code>oltp-dist-type=special</code>，就有比如<code>oltp-dist-pct=1</code>、<code>oltp-dist-res=50</code>两个子选项，代表有50%的查询落在1%的行（即热点数据）上，另外50%均匀的(sample uniformly)落在另外99%的记录行上。</p>
<p>再比如<code>oltp-test-mode=nontrx</code>时, 就可以有<code>oltp-nontrx-mode</code>，可选值有select（默认）, update_key, update_nokey, insert, delete，代表非事务式模式下使用的测试sql类型。</p>
<p>以上代表的是一个只读的例子，可以把<code>num-threads</code>依次递增（16,36,72,128,256,512），或者调整my.cnf参数，比较效果。另外需要注意的是，大部分mysql中间件对事务的处理，默认都是把sql发到主库执行，所以只读测试需要加上<code>oltp-skip-trx=on</code>来跳过测试中的显式事务。</p>
<p>ps1: 只读测试也可以使用<code>share/tests/db/select.lua</code>进行，但只是简单的point select。<br>ps2: 我在用sysbench压的时候，在mysql后端会话里有时看到大量的query cache lock，如果使用的是uniform取样，最好把查询缓存关掉。当然如果是做两组性能对比压测，因为都受这个因素影响，关心也不大。</p>
<h3 id="2-2-混合读写"><a href="#2-2-混合读写" class="headerlink" title="2.2 混合读写"></a>2.2 混合读写</h3><p>读写测试还是用oltp.lua，只需把<code>--oltp-read-only</code>等于<code>off</code>。</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">.</span><span class="comment">/bin/sysbench</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">test=</span><span class="string">.</span><span class="comment">/share/tests/db/oltp</span><span class="string">.</span><span class="comment">lua</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">host=10</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">201</span><span class="string">.</span><span class="comment">36</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">port=8066</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">user=ecuser</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">password=ecuser</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">db=dbtest1a</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">tables</span><span class="literal">-</span><span class="comment">count=10</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">table</span><span class="literal">-</span><span class="comment">size=500000</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">report</span><span class="literal">-</span><span class="comment">interval=10</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">rand</span><span class="literal">-</span><span class="comment">init=on</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">requests=0</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">test</span><span class="literal">-</span><span class="comment">mode=nontrx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">nontrx</span><span class="literal">-</span><span class="comment">mode=select</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">read</span><span class="literal">-</span><span class="comment">only=off</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">time=120</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">num</span><span class="literal">-</span><span class="comment">threads=128</span> <span class="comment">prepare</span></div><div class="line"></div><div class="line"><span class="string">.</span><span class="comment">/bin/sysbench</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">test=</span><span class="string">.</span><span class="comment">/share/tests/db/oltp</span><span class="string">.</span><span class="comment">lua</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">host=10</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">201</span><span class="string">.</span><span class="comment">36</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">port=8066</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">user=ecuser</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">password=ecuser</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">db=dbtest1a</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">tables</span><span class="literal">-</span><span class="comment">count=10</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">table</span><span class="literal">-</span><span class="comment">size=500000</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">report</span><span class="literal">-</span><span class="comment">interval=10</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">rand</span><span class="literal">-</span><span class="comment">init=on</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">requests=0</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">test</span><span class="literal">-</span><span class="comment">mode=nontrx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">nontrx</span><span class="literal">-</span><span class="comment">mode=select</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">read</span><span class="literal">-</span><span class="comment">only=off</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">time=120</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">num</span><span class="literal">-</span><span class="comment">threads=128</span> <span class="comment">run</span></div><div class="line"></div><div class="line"><span class="string">.</span><span class="comment">/bin/sysbench</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">test=</span><span class="string">.</span><span class="comment">/share/tests/db/oltp</span><span class="string">.</span><span class="comment">lua</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">host=10</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">201</span><span class="string">.</span><span class="comment">36</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">port=8066</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">user=ecuser</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">password=ecuser</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">db=dbtest1a</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">tables</span><span class="literal">-</span><span class="comment">count=10</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">table</span><span class="literal">-</span><span class="comment">size=500000</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">report</span><span class="literal">-</span><span class="comment">interval=10</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">rand</span><span class="literal">-</span><span class="comment">init=on</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">requests=0</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">test</span><span class="literal">-</span><span class="comment">mode=nontrx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">nontrx</span><span class="literal">-</span><span class="comment">mode=select</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">read</span><span class="literal">-</span><span class="comment">only=off</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">time=120</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">num</span><span class="literal">-</span><span class="comment">threads=128</span> <span class="comment">cleanup</span></div></pre></td></tr></table></figure>
<p>然而<code>oltp-test-mode=nontrx</code>一直没有跟着我预期的去走，在mysql general log里面看到的sql记录与<code>complex</code>模式相同。所以上面示例中的<code>--oltp-test-mode=nontrx --oltp-nontrx-mode=select</code>可以删掉。</p>
<p><strong>update: </strong><br>sysbench作者 akopytov 对我这个疑问有了回复：<a href="https://github.com/akopytov/sysbench/issues/34" target="_blank" rel="external">https://github.com/akopytov/sysbench/issues/34</a> ，原来sysbench 0.5版本去掉了这个选项，因为作者正在准备1.0版本，所以也就没有更新0.5版本的doc。网上的博客漫天飞，就没有一个提出来的，也是没谁了。</p>
<p>分析一下oltp.lua脚本内容，可以清楚单个事务各操作的默认比例：select:update_key:update_non_key:delete:insert = 14:1:1:1:1，可通过<code>oltp-point-selects</code>、<code>oltp-simple-ranges</code>、<code>oltp-sum-ranges</code>、<code>oltp-order-ranges</code>、<code>oltp-distinct-ranges</code>，<code>oltp-index-updates</code>、<code>oltp-non-index-updates</code>这些选项去调整读写权重。</p>
<p>同只读测试一样，在atlas,mycat这类中间件测试中如果不加<code>oltp-skip-trx=on</code>，那么所有查询都会发往主库，但如果在有写入的情况下使用<code>--oltp-skip-trx=on</code>跳过BEGIN和COMMIT，会出现问题：</p>
<blockquote>
<p>ALERT: failed to execute MySQL query: <code>INSERT INTO sbtest4 (id, k, c, pad) VALUES (48228,
47329, &#39;82773802508-44916890724-85859319254-67627358653-96425730419-64102446666-75789993135-91202056934-68463872307-28147315305&#39;, 
&#39;13146850449-23153169696-47584324044-14749610547-34267941374&#39;)</code>:<br>ALERT: Error 1062 Duplicate entry ‘48228’ for key ‘PRIMARY’<br>FATAL: failed to execute function `event’: (null)</p>
</blockquote>
<p>原因也很容易理解，每个线程将选择一个随机的表，不加事务的情况下高并发更新（插入）出现重复key的概率很大，但我们压测不在乎这些数据，所以需要跳过这个错误<code>--mysql-ignore-errors=1062</code>，这个问题老外有出过打补丁的方案允许<code>--mysql-ignore-duplicates=on</code>，但作者新加入的忽略错误码这个功能已经取代了它。<code>mysql-ignore-errors</code>选项是0.5版本加入的，但目前没有文档标明，也是我在github上提的 <a href="https://github.com/akopytov/sysbench/issues/23" target="_blank" rel="external">issue</a> 作者回复的。</p>
<p>这里不得不佩服老外的办事效率和责任心，提个疑惑能立马得到回复，反观国内，比如在atlas,mycat项目里提到问题到现在都没人搭理。。。</p>
<h3 id="2-3-只更新"><a href="#2-3-只更新" class="headerlink" title="2.3 只更新"></a>2.3 只更新</h3><p>如果基准测试的时候，你只想比较两个项目的update（或insert）效率，那可以不使用oltp脚本，而直接改用<code>update_index.lua</code>：</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">.</span><span class="comment">/bin/sysbench</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">test=</span><span class="string">.</span><span class="comment">/share/tests/db/update_index</span><span class="string">.</span><span class="comment">lua</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">host=10</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">201</span><span class="string">.</span><span class="comment">36</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">port=8066</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">user=ecuser</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">password=ecuser</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">db=dbtest1a</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">tables</span><span class="literal">-</span><span class="comment">count=10</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">table</span><span class="literal">-</span><span class="comment">size=500000</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">report</span><span class="literal">-</span><span class="comment">interval=10</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">rand</span><span class="literal">-</span><span class="comment">init=on</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">requests=0</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">read</span><span class="literal">-</span><span class="comment">only=off</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">time=120</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">num</span><span class="literal">-</span><span class="comment">threads=128</span> <span class="comment">\</span></div><div class="line"><span class="title">[</span> <span class="comment">prepare</span> <span class="comment">|</span> <span class="comment">run</span> <span class="comment">|</span> <span class="comment">cleanup</span> <span class="title">]</span></div></pre></td></tr></table></figure>
<p>此时像<code>oltp-read-only=off</code>许多参数都失效了。需要说明的是这里 (非)索引更新，不是where条件根据索引去查找更新，而是更新索引列上的值。</p>
<h2 id="3-结果解读"><a href="#3-结果解读" class="headerlink" title="3. 结果解读"></a>3. 结果解读</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">sysbench <span class="number">0.5</span>:  multi-threaded <span class="built_in">system</span> evaluation benchmark</div><div class="line"></div><div class="line">Running the test with following option<span class="variable">s:</span></div><div class="line">Number of thread<span class="variable">s:</span> <span class="number">128</span></div><div class="line">Report intermediate results every <span class="number">20</span> second(s)</div><div class="line">Initializing random <span class="keyword">number</span> generator from timer.</div><div class="line"></div><div class="line">Random <span class="keyword">number</span> generator seed <span class="keyword">is</span> <span class="number">0</span> <span class="built_in">and</span> will <span class="keyword">be</span> ignored</div><div class="line"></div><div class="line"></div><div class="line">Initializing worker threads...</div><div class="line"></div><div class="line">Threads started!</div><div class="line"></div><div class="line">[  <span class="number">20</span>s] thread<span class="variable">s:</span> <span class="number">128</span>, <span class="keyword">tp</span><span class="variable">s:</span> <span class="number">2354.54</span>, <span class="keyword">read</span><span class="variable">s:</span> <span class="number">33035.89</span>, <span class="keyword">write</span><span class="variable">s:</span> <span class="number">9423.39</span>, response time: <span class="number">66.80</span>ms (<span class="number">95</span>%), error<span class="variable">s:</span> <span class="number">0.00</span>, reconnect<span class="variable">s:</span>  <span class="number">0.00</span></div><div class="line">[  <span class="number">40</span>s] thread<span class="variable">s:</span> <span class="number">128</span>, <span class="keyword">tp</span><span class="variable">s:</span> <span class="number">2377.75</span>, <span class="keyword">read</span><span class="variable">s:</span> <span class="number">33274.26</span>, <span class="keyword">write</span><span class="variable">s:</span> <span class="number">9507.55</span>, response time: <span class="number">66.88</span>ms (<span class="number">95</span>%), error<span class="variable">s:</span> <span class="number">0.00</span>, reconnect<span class="variable">s:</span>  <span class="number">0.00</span></div><div class="line">[  <span class="number">60</span>s] thread<span class="variable">s:</span> <span class="number">128</span>, <span class="keyword">tp</span><span class="variable">s:</span> <span class="number">2401.35</span>, <span class="keyword">read</span><span class="variable">s:</span> <span class="number">33615.30</span>, <span class="keyword">write</span><span class="variable">s:</span> <span class="number">9607.40</span>, response time: <span class="number">66.40</span>ms (<span class="number">95</span>%), error<span class="variable">s:</span> <span class="number">0.00</span>, reconnect<span class="variable">s:</span>  <span class="number">0.00</span></div><div class="line">[  <span class="number">80</span>s] thread<span class="variable">s:</span> <span class="number">128</span>, <span class="keyword">tp</span><span class="variable">s:</span> <span class="number">2381.20</span>, <span class="keyword">read</span><span class="variable">s:</span> <span class="number">33331.50</span>, <span class="keyword">write</span><span class="variable">s:</span> <span class="number">9522.55</span>, response time: <span class="number">67.30</span>ms (<span class="number">95</span>%), error<span class="variable">s:</span> <span class="number">0.00</span>, reconnect<span class="variable">s:</span>  <span class="number">0.00</span></div><div class="line">[ <span class="number">100</span>s] thread<span class="variable">s:</span> <span class="number">128</span>, <span class="keyword">tp</span><span class="variable">s:</span> <span class="number">2388.85</span>, <span class="keyword">read</span><span class="variable">s:</span> <span class="number">33446.10</span>, <span class="keyword">write</span><span class="variable">s:</span> <span class="number">9556.35</span>, response time: <span class="number">67.00</span>ms (<span class="number">95</span>%), error<span class="variable">s:</span> <span class="number">0.00</span>, reconnect<span class="variable">s:</span>  <span class="number">0.00</span></div><div class="line">[ <span class="number">120</span>s] thread<span class="variable">s:</span> <span class="number">128</span>, <span class="keyword">tp</span><span class="variable">s:</span> <span class="number">2386.40</span>, <span class="keyword">read</span><span class="variable">s:</span> <span class="number">33421.35</span>, <span class="keyword">write</span><span class="variable">s:</span> <span class="number">9545.35</span>, response time: <span class="number">66.94</span>ms (<span class="number">95</span>%), error<span class="variable">s:</span> <span class="number">0.00</span>, reconnect<span class="variable">s:</span>  <span class="number">0.00</span></div><div class="line">OLTP test statistic<span class="variable">s:</span></div><div class="line">    queries performed:</div><div class="line">        <span class="keyword">read</span>:                            <span class="number">4003048</span>  //总select数量</div><div class="line">        <span class="keyword">write</span>:                           <span class="number">1143728</span>  //总<span class="keyword">update</span>、<span class="keyword">insert</span>、<span class="keyword">delete</span>语句数量</div><div class="line">        other:                           <span class="number">571864</span>   //commit、unlock tables以及其他mutex的数量</div><div class="line">        tota<span class="variable">l:</span>                           <span class="number">5718640</span></div><div class="line">    transaction<span class="variable">s:</span>                        <span class="number">285932</span> (<span class="number">2382.10</span> per sec.) //通常需要关注的数字(TPS)</div><div class="line">    <span class="keyword">read</span>/<span class="keyword">write</span> request<span class="variable">s:</span>                 <span class="number">5146776</span> (<span class="number">42877.85</span> per sec.)</div><div class="line">    other operation<span class="variable">s:</span>                    <span class="number">571864</span> (<span class="number">4764.21</span> per sec.)</div><div class="line">    ignored error<span class="variable">s:</span>                      <span class="number">0</span>      (<span class="number">0.00</span> per sec.) //忽略的错误数</div><div class="line">    reconnect<span class="variable">s:</span>                          <span class="number">0</span>      (<span class="number">0.00</span> per sec.)</div><div class="line"></div><div class="line">General statistic<span class="variable">s:</span></div><div class="line">    total time:                          <span class="number">120.0334</span>s //即<span class="built_in">max</span>-time指定的压测实际</div><div class="line">    total <span class="keyword">number</span> of event<span class="variable">s:</span>              <span class="number">285932</span>   //总的事件数，一般与transactions相同</div><div class="line">    total time taken by event execution: <span class="number">15362.6623</span>s</div><div class="line">    response time:</div><div class="line">         <span class="built_in">min</span>:                                 <span class="number">17.60</span>ms</div><div class="line">         av<span class="variable">g:</span>                                 <span class="number">53.73</span>ms //<span class="number">95</span>%的语句的平均响应时间</div><div class="line">         <span class="built_in">max</span>:                                <span class="number">252.90</span>ms</div><div class="line">         approx.  <span class="number">95</span> percentile:              <span class="number">66.88</span>ms</div><div class="line"></div><div class="line">Threads fairnes<span class="variable">s:</span></div><div class="line">    events (avg/stddev):           <span class="number">2233.8438</span>/<span class="number">9.04</span></div><div class="line">    execution time (avg/stddev):   <span class="number">120.0208</span>/<span class="number">0.01</span></div></pre></td></tr></table></figure>
<p>我们一般关注的用于绘图的指标主要有：</p>
<ul>
<li>response time avg: 平均响应时间。（后面的95%的大小可以通过<code>--percentile=98</code>的方式去更改）</li>
<li>transactions: 精确的说是这一项后面的TPS 。但如果使用了<code>-oltp-skip-trx=on</code>，这项事务数恒为0，需要用<code>total number of events</code> 去除以总时间，得到tps（其实还可以分为读tps和写tps）</li>
<li>read/write requests: 用它除以总时间，得到吞吐量QPS</li>
<li>当然还有一些系统层面的cpu,io,mem相关指标</li>
</ul>
<p>sysbench还可以对文件系统IO测试，CPU性能测试，以及内存分配与传输速度测试，这里就不介绍了。</p>
<p>总结起来sysbench的缺点就是，模拟的表结构太简单，不像tpcc-mysql那样完整的事务系统。但对于性能压测对比还是很有用的，因为sysbench使用的环境参数限制是一样的。</p>
<h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><ul>
<li><a href="https://www.percona.com/docs/wiki/benchmark:sysbench:olpt.lua" target="_blank" rel="external">Percona sysbench oltp.lua</a></li>
<li><a href="http://imysql.com/wp-content/uploads/2014/10/sysbench-manual.pdf" target="_blank" rel="external">sysbench manual 0.4</a></li>
<li><a href="http://blog.csdn.net/zbszhangbosen/article/details/8236331" target="_blank" rel="external">sysbench介绍与使用</a></li>
<li><a href="http://verynull.com/2016/01/29/sysbench%E6%B5%8B%E8%AF%95mysql%E6%80%A7%E8%83%BD/" target="_blank" rel="external">sysbench测试mysql性能</a></li>
<li><a href="http://mingxinglai.com/cn/2013/07/sysbench/" target="_blank" rel="external">sysbench 0.5使用手册</a></li>
</ul>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2016/03/28/mysql-sysbench">http://seanlook.com/2016/03/28/mysql-sysbench</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[记一次Mac mini折腾过程（鼠键共享，更换SSD）]]></title>
      <url>http://seanlook.com/2016/01/18/mac-mini-zturn/</url>
      <content type="html"><![CDATA[<p>从公司网管那捣鼓来一个“遗弃” Mac mini，说其它人觉得用起来太卡，正好我的工作PC( CPU 4×i3，MEM 8G, HDD 500G)软件开多了也觉得有些卡，特别是我使用浏览器的习惯不太好，每次搜索统一结果都要打开好多标签页对比，文章性质的觉得有用想将来记录下来就没关闭页面，一两个星期下来只Chrome使用的内存就达到4G多。不用也浪费，于是就拿Mac mini分摊一下压力。</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/macmini-a1347.jpg" alt="macmini-a1347.jpg"></p>
<p>刚拿到手时心想得有多不堪配置才使得的Mac mini卡到嫌弃的地步，看了下底面的型号，A1347——这是2014年底出的新款，没有我想象的那么旧，还好。于是找来显示器、鼠键准备开用了（在某宝上买根八字电源线）。</p>
<p>但是开机密码没有啊！虽然简单重装是个办法，但我还是想看看里面现在是什么样的，杀鸡焉用牛刀。直接Crack root…</p>
<hr>
<h1 id="1-破解Mac-root密码"><a href="#1-破解Mac-root密码" class="headerlink" title="1. 破解Mac root密码"></a>1. 破解Mac root密码</h1><p>找到这篇文章 <a href="http://wowking.blog.51cto.com/1638252/753774" target="_blank" rel="external">http://wowking.blog.51cto.com/1638252/753774</a> 。我们平头百姓手头哪会有刻录的Mac OS光盘，而且也没移动光驱，所以方法一就不考虑了。方法二是单用户模式，毕竟 OS X 也是*nix血统，命令行几个命令倒难不到我。</p>
<p>可是众所周知，Mac的键盘跟普通键盘是不一样的，开机启动的时候<code>command + S</code>在一般美式键盘下到底能不能进入单用户模式呢？嗯，行的，按下mini的开机按钮之后不断 <code>win + S</code>。进入Single user model之后提示符#root&gt;，逐步输入以下命令：</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 执行硬盘检测（只读）, 这一步可以省略</span></div><div class="line">/sbin/fsck -y</div><div class="line"></div><div class="line"><span class="meta"># 加载文件系统（读/写）</span></div><div class="line">/sbin/mount -uaw</div><div class="line"></div><div class="line"><span class="meta"># 删除初始化设置时的OSX生成的隐藏文件”.applesetupdone”</span></div><div class="line">rm /<span class="keyword">var</span>/db/.AppleSetupDone</div><div class="line"></div><div class="line"><span class="meta"># 重启</span></div><div class="line">reboot</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>重启后开机画面会指导你创建一个新的<strong>管理员</strong>账号，然后这个新的账号密码登陆。就是这么简单，接下来删用户抹除一切使用痕迹😄。</p>
<p>进去之后着实令我窃喜：OS X Yosemite, 2.6 GHZ Intel Core i5, 8G DDR3, Intel Iris 1536 MB, 1TB HDD，就这配置比得上我当前的Win PC了，高兴得捡了块宝似的。优胜美地系统与我自己的Mac Book Pro一样，无缝立马开始用。</p>
<p>然而面临的一个问题来了，现在2台工作电脑，配有2套鼠标键盘，切换太不方便了。于是我用大腿想了想，嗯，应该有专门的多台电脑间共享鼠键的软件。啪啪啪几下锁定两款<code>Sharemouse</code>、<code>Synergy</code>。</p>
<hr>
<h1 id="2-跨平台共享鼠标键盘-synergy"><a href="#2-跨平台共享鼠标键盘-synergy" class="headerlink" title="2. 跨平台共享鼠标键盘-synergy"></a>2. 跨平台共享鼠标键盘-synergy</h1><p>先来简单说一下Sharemouse，收费，但你懂的，但这东西毕竟用的人少，要分别在在windows和Mac两个平台上找到相同版本的破解版是多么不容易。中间折腾就不说了，成功使用 V2.0.53 版本。但号称的拖拽文件我始终没看到，我猜还是不同系统的缘故。sharemouse是有阉割了拖拽和加密功能的免费版的，而且配置超级简单，基本上只要在同一局域网，各自把软件装上，就可以用其中随便哪一电脑的鼠键来回在两个显示器之间滑动，而且还有dimmy效果。（抱歉，因为文章是后写的，没截图）</p>
<p><a href="http://synergy-project.org/download/free/" target="_blank" rel="external">Synergy</a>也是鼎鼎大名的一款，而且开源、跨平台，也能复制剪切版和拖拽文件，据说它是谷歌工程师标配，因为他们也有在多台主机间控制电脑困扰。</p>
<p>但synergy公司也很奇葩，工具开源，但最新版的下载不免费，你要支付之后才能看到新版下载页面（旧版本免费开放，但你明知道有bug而且已解决，纠结吧少年）。我想原因大概是synergy既要遵守开源协议，但又要维持收入吧。奇怪的是网上竟然很少有人把它共享下载。当然，如果你不嫌麻烦，可以去 <a href="https://github.com/symless/synergy" target="_blank" rel="external">https://github.com/symless/synergy</a> 下载源码，自己编译，synergy还很友好的提供了编译指南…点到为止，我也不想再浪费无谓的折腾时间。</p>
<p>这里分享v1.7.4版本下载，链接: <a href="http://pan.baidu.com/s/1mhbaLza" target="_blank" rel="external">http://pan.baidu.com/s/1mhbaLza</a> 密码: m4d7</p>
<p>我现在一直使用的是synergy，鼠键接在Windows主机，但有一个问题没解决：synergy即使加入了Mac mini（用户）开机启动，但用户没输密码登陆之前，是不会启动synergy的，所以还是要另外接一套鼠键来输密码，随后synergy接管，衰，不知谁有更好的办法？</p>
<p>下面简单介绍配置过程。</p>
<h2 id="windows作服务端"><a href="#windows作服务端" class="headerlink" title="windows作服务端"></a>windows作服务端</h2><p>synergy跟sharemouse很大不同在于，sharemouse是不分Server和Client的，鼠键可以插在任意一台电脑上，而synergy要求鼠键在Server，需要鼠键的其它电脑可以没有。</p>
<ol>
<li><p>勾选 【Server】，可以看到当前ip<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/macmini-synergy-server.png" alt="macmini-synergy-server"></p>
</li>
<li><p>点击 【设置服务端】，默认最中间显示器代表当前电脑<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/macmini-synergy-server-settings.png" alt="macmini-synergy-server-settings"></p>
</li>
</ol>
<p>从右上角拖一个到你想要展示的相对位置，双击编辑 【屏幕名】（即其它电脑的主机名）</p>
<h2 id="mac做客户端"><a href="#mac做客户端" class="headerlink" title="mac做客户端"></a>mac做客户端</h2><ol>
<li>在mac【设置】里选择【安全与隐私】，点击【隐私】选项卡，【辅助功能】，勾选右边的 Synergy。</li>
</ol>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/macmini-synergy-client-pre.png" alt="macmini-synergy-client-pre.jpg"></p>
<ol>
<li>勾选【Client】，输入上一节看到的服务端ip。</li>
</ol>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/macmini-synergy-client.png" alt="macmini-synergy-client.jpg"></p>
<p>同时注意 screen name 就是上一节要填入的屏幕名，也是主机名啦。<br>不要忘了 start，看到 starting cocoa loop 就正常了，享受 “一键” 的快感吧。</p>
<p>偷偷的往后瞥了一眼，那个同事还说2套鼠键来回用。。。</p>
<p>多说一句，synergy或sharemouse跟kvm切换器不同，不能实现kvm switch的屏幕扩展、录像等功能，kvm switch显示器也是共用的。</p>
<p>一切似乎都完美了，开开心心的typing, browsing了2个星期，卡！一直盯着那个圈转啊转啊。Mac mini上任务也不算多，活动监视器也没看到CPU消耗大户。</p>
<p>这就是这台Mac mini被抛弃的原因吗？难道我也要放弃它吗？我陷入了深深的沉思。</p>
<p>网上查了查“Mac mini 换固态硬盘”，有大批的文章。一不做二不休，给Mac mini拆机换SSD ！</p>
<hr>
<h1 id="3-Mac-mini换SSD"><a href="#3-Mac-mini换SSD" class="headerlink" title="3. Mac mini换SSD"></a>3. Mac mini换SSD</h1><p>跟小吴关系好，要来一个SATA接口的128G三星固态硬盘850 EVO，查了3篇文章对着看，精确每一步，这么mini的mini，拆坏一个零件或者掉个螺丝，赔不起…</p>
<p>就是这几篇了：</p>
<ol>
<li><a href="http://www.feng.com/iPhone/news/2015-08-12/Match-the-Mac-mini-tutorial-2014-low-SSD-solid-state-drives_621487.shtml" target="_blank" rel="external">教程：2014款低配Mac mini换SSD固态硬盘</a>  (主要看这个，作者好有耐心)</li>
<li><a href="http://bbs.feng.com/read-htm-tid-9010944.html" target="_blank" rel="external">2014款mac mini 拆机 更换ssd 升级硬盘 固态硬盘 记录教程</a></li>
<li>这还有个不是2014款的<a href="http://www.tudou.com/programs/view/Y25qE4t8kNY/" target="_blank" rel="external">拆解视频</a> (没看过，写文章的时候才搜到)</li>
</ol>
<p>但是有个问题，旧的HDD换下来，新的SSD装上去，系统资料什么的可都没了。</p>
<p>解决这个问题方法可多了：</p>
<ol>
<li>有硬盘盒的话最方便。用Superduper或者Carbon Copy Cloner工具直接把源OSX系统+数据整盘镜像到你的SSD中，换好之后开机直接可以用了。</li>
<li>先手动备份（拷贝）文件到其它系统/硬盘，换上SSD后用U盘全新安装OSX，恢复数据。</li>
</ol>
<p>好吧，好像也没有那么多方法。虽然第一种比较通用而且技术含量高，但因为这台Mac并没用多久，文稿和软件不多，备份恢复容易，于是我选择了第2种。</p>
<p>另外又多说一句，Mac mini因为零部件排版紧密，没有台式机或笔记本那么多插拔的口子，CPU和内存是焊死在主板上的，所以是换不了滴。</p>
<p>接下来就是心灵手巧的我，漫长的两个小时的肢解和还原过程了，此处略去一万字。</p>
<p>拆的时候<strong>螺丝按顺序分开放</strong>，脑子记好零件位置，不确定之前先拍个照好还原，其它也没什么了。附图：</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/macmini-ssd-1.jpg" alt="macmini-change-ssd-1"><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/macmini-ssd-2.jpg" alt="macmini-change-ssd-2"></p>
<p>几点说明：</p>
<ol>
<li>第一步打开黑色后盖，用刀口起子或者硬薄片轻轻在下方撬动。早前一直想转开它（老版）</li>
<li>用到两种螺丝刀 T6H和T9，JK 6089-A</li>
<li>第3步取下wifi天线，有3根线各自连接的圆圈比较难取，我是用镊子夹住网上提的。取天线的时候往后小幅度摇摆拉拽。</li>
<li>第4步说的取风扇排线，我是用手一边向上空提排线，一边镊子的小尖尖在下面翘。它的排线是从上空往下“按”的，跟平常印象里的“插”不一样。这个地方堵了好久</li>
<li>第六步把主板撬出来很关键了。千万注意啊，是<strong>水平</strong>的往出口方向使劲，“推”出来，文中说“撬”有点误导。我是以下面做支点撬，那两个孔让我给弄坏了😓，还好不太要紧。</li>
<li>装回去文章倒着往前看就是了</li>
</ol>
<p>不得不说换完之后，很有成就感。下面就是装系统，感受一下要上天的ssd了。</p>
<h1 id="4-U盘安装OS-X"><a href="#4-U盘安装OS-X" class="headerlink" title="4. U盘安装OS X"></a>4. U盘安装OS X</h1><p>跟用U盘安装windows还是有点不同的，要先在一台Mac电脑上格式化U盘。参考这里<a href="http://www.iplaysoft.com/osx-yosemite-usb-install-drive.html" target="_blank" rel="external">U盘全新安装OS X</a></p>
<ol>
<li>下载苹果官方 OS X Yosemite 正式版，解压得到 “Install OS X Yosemite.app”，拷贝到【应用程序】目录中</li>
<li>使用Mac的【磁盘工具】，将U盘分区划成“Mac OS扩展(日志式)”、“GUID分区表”</li>
<li><p>在终端里执行下面的命令</p>
<pre><code>sudo /Applications/Install\ OS\ X\ Yosemite.app/Contents/Resources/createinstallmedia --volume \
/Volumes/Untitled --applicationpath /Applications/Install\ OS\ X\ Yosemite.app --nointeraction
</code></pre><p> 上面<code>/Volumes/Untitled</code>是U盘的名字。回车后，系统会提示你输入管理员密码，接下来就是等待系统开始制作启动盘了。</p>
</li>
<li><p>从U盘启动安装 OS X<br>在Mac mini上插上U盘，启动Mac，然后一直按住【option】键（即Alt键，不行就重启多试几次）。<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/macmini-osx-u-install.jpg" alt="macmini-osx-u-install.jpg"></p>
</li>
<li><p>在进入刚进入安装过程后，要先对ssd盘格式化才能看到它。接下来就按照 <a href="http://tu.pcpop.com/all-771688.htm" target="_blank" rel="external">向导</a> 就可以完成安装了。建议appleID完成后再添加。</p>
</li>
</ol>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2016/01/18/mac-mini-zturn/">http://seanlook.com/2016/01/18/mac-mini-zturn/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[生产环境使用 pt-table-checksum 检查MySQL数据一致性]]></title>
      <url>http://seanlook.com/2015/12/29/mysql_replica_pt-table-checksum/</url>
      <content type="html"><![CDATA[<p>公司数据中心从托管机房迁移到阿里云，需要对mysql迁移（Replication）后的数据一致性进行校验，但又不能对生产环境使用造成影响，pt-table-checksum 成为了绝佳也是唯一的检查工具。</p>
<p><code>pt-table-checksum</code> 是 Percona-Toolkit 的组件之一，用于检测MySQL主、从库的数据是否一致。其原理是在主库执行基于statement的sql语句来生成主库数据块的checksum，把相同的sql语句传递到从库执行，并在从库上计算相同数据块的checksum，最后，比较主从库上相同数据块的checksum值，由此判断主从数据是否一致。检测过程根据唯一索引将表按row切分为块（chunk），以为单位计算，可以避免锁表。检测时会自动判断复制延迟、 master的负载， 超过阀值后会自动将检测暂停，减小对线上服务的影响。</p>
<p><code>pt-table-checksum</code> 默认情况下可以应对绝大部分场景，官方说，即使上千个库、上万亿的行，它依然可以很好的工作，这源自于设计很简单，一次检查一个表，不需要太多的内存和多余的操作；必要时，<code>pt-table-checksum</code> 会根据服务器负载动态改变 chunk 大小，减少从库的延迟。</p>
<p>为了减少对数据库的干预，<code>pt-table-checksum</code>还会自动侦测并连接到从库，当然如果失败，可以指定<code>--recursion-method</code>选项来告诉从库在哪里。它的易用性还体现在，复制若有延迟，在从库 checksum 会暂停直到赶上主库的计算时间点（也通过选项<code>--</code>设定一个可容忍的延迟最大值，超过这个值也认为不一致）。 </p>
<p>为了保证主数据库服务的安全，该工具实现了许多保护措施：</p>
<ol>
<li>自动设置 <code>innodb_lock_wait_timeout</code> 为1s，避免引起</li>
<li>默认当数据库有25个以上的并发查询时，<code>pt-table-checksum</code>会暂停。可以设置 <code>--max-load</code> 选项来设置这个阀值</li>
<li>当用 Ctrl+C 停止任务后，工具会正常的完成当前 chunk 检测，下次使用 <code>--resume</code> 选项启动可以恢复继续下一个 chunk</li>
</ol>
<h2 id="工作过程"><a href="#工作过程" class="headerlink" title="工作过程"></a>工作过程</h2><p>直接看 <a href="http://www.nettedfish.com/blog/2013/06/04/check-replication-consistency-by-pt-table-checksum/" target="_blank" rel="external">nettedfish</a> 的说明：</p>
<blockquote>
<p>1. 连接到主库：pt工具连接到主库，然后自动发现主库的所有从库。默认采用show full processlist来查找从库，但是这只有在主从实例端口相同的情况下才有效。<br>3. 查找主库或者从库是否有复制过滤规则：这是为了安全而默认检查的选项。你可以关闭这个检查，但是这可能导致checksum的sql语句要么不会同步到从库，要么到了从库发现从库没有要被checksum的表，这都会导致从库同步卡库。<br>5. 开始获取表，一个个的计算。<br>6. 如果是表的第一个chunk，那么chunk-size一般为1000；如果不是表的第一个chunk，那么采用19步中分析出的结果。<br>7. 检查表结构，进行数据类型转换等，生成checksum的sql语句。<br>8. 根据表上的索引和数据的分布，选择最合适的split表的方法。<br>9. 开始checksum表。<br>10. 默认在chunk一个表之前，先删除上次这个表相关的计算结果。除非–resume。<br>14. 根据explain的结果，判断chunk的size是否超过了你定义的chunk-size的上限。如果超过了，为了不影响线上性能，这个chunk将被忽略。<br>15. 把要checksum的行加上for update锁，并计算。<br>17-18. 把计算结果存储到master_crc master_count列中。<br>19. 调整下一个chunk的大小。<br>20. 等待从库追上主库。如果没有延迟备份的从库在运行，最好检查所有的从库，如果发现延迟最大的从库延迟超过max-lag秒，pt工具在这里将暂停。<br>21. 如果发现主库的max-load超过某个阈值，pt工具在这里将暂停。<br>22. 继续下一个chunk，直到这个table被chunk完毕。<br>23-24. 等待从库执行完checksum，便于生成汇总的统计结果。每个表汇总并统计一次。<br>25-26. 循环每个表，直到结束。<br>校验结束后，在每个从库上，执行如下的sql语句即可看到是否有主从不一致发生： </p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> percona.checksums <span class="keyword">where</span> master_cnt &lt;&gt; this_cnt <span class="keyword">OR</span> master_crc &lt;&gt; this_crc <span class="keyword">OR</span> </div><div class="line"><span class="keyword">ISNULL</span>(master_crc) &lt;&gt; <span class="keyword">ISNULL</span>(this_crc) \G</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="你需要知道的选项"><a href="#你需要知道的选项" class="headerlink" title="你需要知道的选项"></a>你需要知道的选项</h2><ul>
<li><p><code>--replicate-check</code>：执行完 checksum 查询在percona.checksums表中，不一定马上查看结果呀 —— yes则马上比较chunk的crc32值并输出DIFFS列，否则不输出。默认yes，如果指定为<code>--noreplicate-check</code>，一般后续使用下面的<code>--replicate-check-only</code>去输出DIFF结果。</p>
</li>
<li><p><code>--replicate-check-only</code>：不在主从库做 checksum 查询，只在原有 <code>percona.checksums</code> 表中查询结果，并输出数据不一致的信息。周期性的检测一致性时可能用到。</p>
</li>
<li><p><code>--nocheck-binlog-format</code>：不检测日志格式。这个选项对于 ROW 模式的复制很重要，因为<code>pt-table-checksum</code>会在 Master和Slave 上设置<code>binlog_format=STATEMENT</code>（确保从库也会执行 checksum SQL），MySQL限制从库是无法设置的，所以假如行复制从库，再作为主库复制出新从库时（A-&gt;B-&gt;C），B的checksums数据将无法传输。（没验证）</p>
</li>
<li><p><code>--replicate=</code> 指定 checksum 计算结果存到哪个库表里，如果没有指定，默认是 percona.checksums 。<br>但是我们检查使用的mysql用户一般是没有 create table 权限的，所以你可能需要先手动创建：</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> percona;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> percona.checksums (</div><div class="line">    db <span class="built_in">CHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    tbl <span class="built_in">CHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    <span class="keyword">chunk</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    chunk_time <span class="built_in">FLOAT</span> <span class="literal">NULL</span>,</div><div class="line">    chunk_index <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="literal">NULL</span>,</div><div class="line">    lower_boundary <span class="built_in">TEXT</span> <span class="literal">NULL</span>,</div><div class="line">    upper_boundary <span class="built_in">TEXT</span> <span class="literal">NULL</span>,</div><div class="line">    this_crc <span class="built_in">CHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    this_cnt <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    master_crc <span class="built_in">CHAR</span>(<span class="number">40</span>) <span class="literal">NULL</span>,</div><div class="line">    master_cnt <span class="built_in">INT</span> <span class="literal">NULL</span>,</div><div class="line">    ts <span class="keyword">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</div><div class="line">    PRIMARY <span class="keyword">KEY</span> (db,tbl,<span class="keyword">chunk</span>),</div><div class="line">    <span class="keyword">INDEX</span> ts_db_tbl(ts,db,tbl)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>生产环境中数据库用户权限一般都是有严格管理的，假如连接用户是<code>repl_user</code>（即直接用复制用户来检查），它应该额外赋予对其它库的 SELECT ，LOCK TABLES 权限，如果后续要用 pt-table-sync 就就需要写权限了。对percona库有写权限：</p>
<pre><code>GRANT ALL PRIVILEGEES on percona.* to repl_user@&apos;%&apos; IDENTIFIED BY &apos;repl_pass&apos;;
GRANT SELECT,LOCK TABLES,PROCESS,SUPER on *.* to repl_user@&apos;%&apos;;
</code></pre><p>注：</p>
<ol>
<li>为了减少不必要的麻烦，确保你的 repl_user@’xxx’ 用户能同时登陆主库和从库</li>
<li><code>--create-replicate-table</code> 选项会自动创建 percona.checksums 表，但也意味着赋予额外的 <code>CREATE TABLE</code>权限给 percona_tk@’xxx’ 用户。默认yes</li>
<li>PROCESS用于自动发现从库信息，SUPER权限用于set binlog_format。</li>
</ol>
<ul>
<li><p><code>--no-check-replication-filters</code> 表示不需要检查 Master 配置里是否指定了 Filter。 默认会检查，如果配置了 Filter，如 replicate_do_db,replicate-wild-ignore-table,binlog_ignore_db 等，在从库checksum就与遇到表不存在而报错退出，所以官方默认是yes（<code>--check-replication-filters</code>）但我们实际在检测中时指定<code>--databases=</code>，所以就不存在这个问题，干脆不检测</p>
</li>
<li><p><code>--empty-replicate-table</code>：每个表checksum开始前，清空它之前的检测数据（不影响其它表的checksum数据），默认yes。当然如果使用<code>--resume</code>启动检测数据不会清空。<br>当启用<code>--noempty-replicate-table</code>即不清空时，不计算计算chunk,只计算。</p>
</li>
<li><p><code>--databases=</code>，<code>-d</code>：要检查的数据库，逗号分隔。用脚趾头想也知道 <code>--databases-regex</code> 正则匹配要检测的数据库，<code>--ignore-databases[-regex]</code>忽略检查的库。Filter选项。</p>
</li>
<li><p><code>--tables=</code>，<code>-t</code>：要检查的表，逗号分隔。如果要检查的表分布在不同的db中，可以用<code>--tables=dbname1.table1,dbnamd2.table2</code>的形式。同理有<code>--tables-regex</code>，<code>--ignore-tables</code>，<code>--ignore-tables-regex</code>。<code>--replicate</code>指定的checksum表始终会被过滤。</p>
</li>
<li><p><code>--recursion-method</code>：发现从库的方式。pt-table-checksum 默认可以在主库的 <code>processlist</code> 中找到从库复制进程，从而识别出有哪些从库，但如果使用是非标准3306端口，会导致找不到从库信息。此时就会自动采用<code>host</code>方式，但需要提前在从库 my.cnf 里面配置<code>report_host</code>、<code>report_port</code>信息，如：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">report_host</span> = MASTER_HOST</div><div class="line"><span class="attr">report_port</span> = <span class="number">13306</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>最终极的办法是<code>dsn</code>，dsn指定的是某个表（如 percona.dsns ），表行记录是改主库的（多个）从库的连接信息。适用以下任一情形：</p>
<ol>
<li>主库不能自动发现从库</li>
<li>不想在从库添加额外配置（因为要重启）</li>
<li>主从检测连接用户信息不一样</li>
<li>多个从库时只想验证指定从库的一致</li>
</ol>
<p>我比较倾向使用DSN的方式。这个dsns表只需要在执行 <code>pt-table-checksum</code> 命令的服务器上能够访问到就行。这里纠正一个认识，网上很多人说 pt-table-checksum 要在主库上执行，其实不是的，我的mysql实例比较多，只需在某一台服务器上安装percona-toolkit，这台服务能够同时访问主库和从库就行了。具体用法见后面实例。</p>
<h2 id="检测实例"><a href="#检测实例" class="headerlink" title="检测实例"></a>检测实例</h2><h3 id="同网段间主从一致检查"><a href="#同网段间主从一致检查" class="headerlink" title="同网段间主从一致检查"></a>同网段间主从一致检查</h3><p>场景：</p>
<ol>
<li>标准端口3306，只检查某一个库的关键表</li>
<li>一主一从，binlog<strong>不</strong>是ROW模式</li>
<li>同网段复制，percona_tk@’192.168.5.%’ 具备该有的权限：<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GRANT</span> ALL PRIVILEGEES <span class="keyword">on</span> repl_user.* <span class="keyword">to</span> repl_user@<span class="string">'192.168.5.%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'repl_pass'</span>;</div><div class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>,<span class="keyword">LOCK</span> <span class="keyword">TABLES</span>,PROCESS,SUPER <span class="keyword">on</span> *.* <span class="keyword">to</span> repl_user@<span class="string">'192.168.5.%'</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这是最简单的方式，把要连接和检查的信息交代就行了：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># pt-<span class="keyword">table</span>-checksum <span class="comment">h=MASTER_HOST,u=repl_user,p=</span><span class="comment">'repl_pass'</span><span class="comment">,P=3306 \</span></div><div class="line">--databases=d_ts_profile --tables=t_user,t_user_detail,t_user_group --nocheck-replication-filters</div></pre></td></tr></table></figure></p>
<p>如果是首次运行，会在主库自动创建 percona.checksums 表。</p>
<p>输出结果：</p>
<figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Replica lag is<span class="number"> 2307 </span>seconds on mysql-5.  Waiting.</div><div class="line">Checksumming d_ts_profile.t_user_account:   3% 54:48 remain</div><div class="line">            TS ERRORS  DIFFS     ROWS  CHUNKS SKIPPED    TIME TABLE</div><div class="line">12-18T16:07:48     <span class="number"> 0 </span>    <span class="number"> 0 </span> <span class="number"> 313641 </span>     <span class="number"> 9 </span>     <span class="number"> 0 </span>146.417 d_ts_profile.t_user</div><div class="line">12-18T16:08:00     <span class="number"> 0 </span>    <span class="number"> 0 </span> <span class="number"> 397734 </span>    <span class="number"> 12 </span>     <span class="number"> 0 </span> 11.747 d_ts_profile.t_user_detail</div><div class="line">12-18T16:08:24     <span class="number"> 0 </span>    <span class="number"> 0 </span><span class="number"> 1668327 </span>    <span class="number"> 20 </span>     <span class="number"> 0 </span> 23.941 d_ts_profile.t_user_group</div></pre></td></tr></table></figure>
<ul>
<li>TS ：完成检查的时间戳。</li>
<li>ERRORS ：检查时候发生错误和警告的数量。 </li>
<li>DIFFS ：不一致的chunk数量。当指定 <code>--no-replicate-check</code> 即检查完但不立即输出结果时，会一直为0；当指定 <code>--replicate-check-only</code> 即不检查只从checksums表中计算crc32，且只显示不一致的信息（毕竟输出的大部分应该是一致的，容易造成干扰）。</li>
<li>ROWS ：比对的表行数。</li>
<li>CHUNKS ：被划分到表中的块的数目。</li>
<li>SKIPPED ：由于错误或警告或过大，则跳过块的数目。</li>
<li>TIME ：执行的时间。</li>
<li>TABLE ：被检查的表名</li>
</ul>
<h3 id="使用dsn跨数据中心检测"><a href="#使用dsn跨数据中心检测" class="headerlink" title="使用dsn跨数据中心检测"></a>使用dsn跨数据中心检测</h3><p>场景：</p>
<ol>
<li>非标准端口13306，只检查以 d_ts 开头的所有库</li>
<li>一主二从，binlog<strong>是</strong>ROW模式，其中一从在阿里云ECS上，主库是无法直接访问该从库的</li>
<li>检测用的账号因为不是%，所以不一样</li>
<li>以下是我环境的情况<br>MASTER_HOST:13306 主库<br>REPLICA_HOST:3306    从库<br>PTCHECK_HOST pt-table-checksum所在服务器<br>DSN_DBHOST，记录从库（连接）dsns的数据库</li>
</ol>
<p>最优的方式就是dsn指定从库了。在从库或从库同网段主机里装上 percona-toolkit。</p>
<p>在DSN_DBHOST 数据库实例上创建DSNs表：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">database</span> percona;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`percona`</span>.<span class="string">`dsns`</span> (</div><div class="line"><span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line"><span class="string">`parent_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`dsn`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">GRANT</span> ALL PRIVILEGEES <span class="keyword">on</span> percona.* <span class="keyword">to</span> percona_tk@<span class="string">'PTCHECK_HOST'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'percona_pass'</span>;</div></pre></td></tr></table></figure>
<p>如果有多个实例要检查，可以创建多个类似的dsns表。上面的percona_tk用户只是用来访问dsn库。插入从库信息：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> percona;</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dsns(dsn) <span class="keyword">values</span>(<span class="string">'h=REPLICA_HOST,P=3306,u=repl_user,p=repl_pass'</span>);</div></pre></td></tr></table></figure>
<p>DSNs记录 dsn 列格式如 <code>h=REPLICA_HOST,u=repl_user,p=repl_pass</code></p>
<p>在 PTCHECK_HOST 上执行检查命令：</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># pt-table-checksum --replicate=percona.checksums --nocheck-replication-filters --no-check-binlog-format \</div><div class="line">h=MASTER_HOST,u=repl_user,p=<span class="string">'repl_pass'</span>,P=<span class="number">13306</span> --databases-regex=d_ts.* \</div><div class="line">--recursion-<span class="function"><span class="keyword">method</span> <span class="title">dsn</span>=<span class="title">h</span>=<span class="title">DSN_DBHOST</span>,<span class="title">u</span>=<span class="title">percona_tk</span>,<span class="title">p</span>='<span class="title">percona_pass</span>',<span class="title">P</span>=3306,<span class="title">D</span>=<span class="title">percona</span>,<span class="title">t</span>=<span class="title">dsn</span></span></div></pre></td></tr></table></figure>
<p>选项的意思就不多说了。</p>
<p>检测完如果一致，其实是求个心安，特别是在做数据迁移的时候。如果不一致，那就需要借助 <code>pt-table-sync</code> 工具了，不作介绍。</p>
<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><ol>
<li><p>Diffs cannot be detected because no slaves were found<br>不能自动找到从库，确认processlist或host或dsns方式用对了。</p>
</li>
<li><p>Cannot connect to h=slave1.<em>*</em>.com,p=…,u=percona_user<br>可以在<code>pt-table-checksum</code>命令前加<code>PTDEBUG=1</code>来看详细的执行过程，如端口、用户名、权限错误。</p>
</li>
<li><p>Waiting for the –replicate table to replicate to XXX<br>问题出在 percona.checksums 表在从库不存在，根本原因是没有从主库同步过来，所以看一下从库是否延迟严重。</p>
</li>
<li><p>Pausing because Threads_running=25<br>反复打印出类似上面停止检查的信息。这是因为当前数据库正在运行的线程数大于默认25，pt-table-checksum 为了减少对库的压力暂停检查了。等数据库压力过了就好了，或者也可以直接 Ctrl+C 终端，下一次加上<code>--resume</code>继续执行，或者加大<code>--max-load=</code>值。</p>
</li>
<li><p>字符集问题</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Error checksumming table Error executing checksum query: DBD::mysql::st execute failed: Illegal mix of collations</div><div class="line">12-17T14:48:04 Error checksumming table d<span class="emphasis">_ec_</span>cs.t<span class="emphasis">_online_</span>cs: Error executing checksum query: </div><div class="line">DBD::mysql::st execute failed: Illegal mix of collations for operation 'concat_ws' [for Statement </div><div class="line">"REPLACE INTO <span class="code">`percona`</span>.<span class="code">`ali_checksum`</span> (db, tbl, chunk, chunk<span class="emphasis">_index, lower_</span>boundary, upper<span class="emphasis">_boundary, this_</span>cnt, this<span class="emphasis">_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*) AS cnt, COALESCE(LOWER(CONV(BIT_</span>XOR(CAST(CRC32(CONCAT<span class="emphasis">_WS('#', `f_</span>cs<span class="emphasis">_id`, `f_</span>corp<span class="emphasis">_id`, `f_</span>valid<span class="code">`, `</span>f<span class="emphasis">_show_</span>name<span class="code">`, `</span>f<span class="emphasis">_online_</span>msg<span class="code">`, `</span>f<span class="emphasis">_offline_</span>msg<span class="code">`, `</span>f<span class="emphasis">_show_</span>mobile<span class="code">`, `</span>f<span class="emphasis">_group_</span>id<span class="code">`, `</span>f<span class="emphasis">_qq`, `f_</span>show<span class="emphasis">_qq`, `f_</span>msn<span class="code">`, `</span>f<span class="emphasis">_show_</span>msn<span class="code">`, `</span>f<span class="emphasis">_sms_</span>online<span class="code">`, `</span>f<span class="emphasis">_scheme`, `f_</span>tel<span class="code">`, `</span>f<span class="emphasis">_telno`, `f_</span>show<span class="emphasis">_tel`, `f_</span>contact<span class="code">`, `</span>f<span class="emphasis">_mobile`, `f_</span>position<span class="code">`, `</span>f<span class="emphasis">_other1`, `f_</span>other2<span class="code">`, `</span>f<span class="emphasis">_other_</span>text1<span class="code">`, `</span>f<span class="emphasis">_other_</span>text2<span class="code">`, `</span>f<span class="emphasis">_email`, `f_</span>qq<span class="emphasis">_first`, `f_</span>qq<span class="emphasis">_first_</span>type<span class="code">`, `</span>f<span class="emphasis">_aids_</span>open<span class="code">`, `</span>f<span class="emphasis">_aids_</span>qq<span class="code">`, `</span>f<span class="emphasis">_aids_</span>crmqq<span class="code">`, `</span>f<span class="emphasis">_aids_</span>yahoo<span class="code">`, `</span>f<span class="emphasis">_aids_</span>skype<span class="code">`, `</span>f<span class="emphasis">_aids_</span>aliww<span class="code">`, `</span>f<span class="emphasis">_aids_</span>msn<span class="code">`, `</span>f<span class="emphasis">_aids_</span>alibaba<span class="code">`, `</span>f<span class="emphasis">_aids_</span>alitrade<span class="code">`, CONCAT(ISNULL(`</span>f<span class="emphasis">_show_</span>name<span class="code">`), ISNULL(`</span>f<span class="emphasis">_group_</span>id<span class="code">`), ISNULL(`</span>f<span class="emphasis">_qq`), ISNULL(`f_</span>show<span class="emphasis">_qq`), ISNULL(`f_</span>sms<span class="emphasis">_online`), ISNULL(`f_</span>other<span class="emphasis">_text1`), ISNULL(`f_</span>other<span class="emphasis">_text2`), ISNULL(`f_</span>email<span class="code">`)) )) AS UNSIGNED)), 10, 16)), 0) AS crc FROM `</span>d<span class="emphasis">_ec_</span>cs<span class="code">`.`</span>t<span class="emphasis">_online_</span>cs` </div><div class="line">/<span class="emphasis">*checksum table*</span>/" with ParamValues: 0='d<span class="emphasis">_ts_</span>profile', 1='t<span class="emphasis">_user_</span>account', 2=1, 3=undef, 4=undef, 5=undef] at /usr/bin/pt-table-checksum line 10520.</div></pre></td></tr></table></figure>
</li>
</ol>
<p>是个bug，暂时无法解决，<a href="https://bugs.launchpad.net/percona-toolkit/+bug/1427552" target="_blank" rel="external">Illegal mix of collations for operation ‘concat_ws’</a>。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.percona.com/doc/percona-toolkit/2.2/pt-table-checksum.html" target="_blank" rel="external">pt-table-checksum</a></li>
<li><a href="http://www.nettedfish.com/blog/2013/06/04/check-replication-consistency-by-pt-table-checksum/" target="_blank" rel="external">用pt-table-checksum校验数据一致性</a></li>
<li><a href="http://blog.csdn.net/melody_mr/article/details/45224249" target="_blank" rel="external">使用pt-table-checksum及pt-table-sync校验复制一致性详细介绍</a></li>
<li><a href="http://imysql.com/2015/04/19/mysql-faq-pt-table-checksum-use-case.shtml" target="_blank" rel="external">Pausing because Threads_running=0</a></li>
</ul>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2015/12/29/mysql_replica_pt-table-checksum/">http://seanlook.com/2015/12/29/mysql_replica_pt-table-checksum/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用 Xtrabackup 在线对MySQL做主从复制]]></title>
      <url>http://seanlook.com/2015/12/14/mysql-replicas/</url>
      <content type="html"><![CDATA[<h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><h3 id="1-1-xtrabackup"><a href="#1-1-xtrabackup" class="headerlink" title="1.1 xtrabackup"></a>1.1 xtrabackup</h3><p>mysqldump对于导出10G以下的数据库或几个表，还是适用的，而且更快捷。一旦数据量达到100-500G，无论是对原库的压力还是导出的性能，mysqldump就力不从心了。Percona-Xtrabackup备份工具，是实现MySQL在线热备工作的不二选择，可进行全量、增量、单表备份和还原。（但当数据量更大时，可能需要考虑分库分表，或使用 LVM 快照来加快备份速度了）</p>
<p>2.2版本 xtrabackup 能对InnoDB和XtraDB存储引擎的数据库非阻塞地备份，innobackupex通过perl封装了一层xtrabackup，对MyISAM的备份通过加表读锁的方式实现。2.3版本 xtrabackup 命令直接支持MyISAM引擎。</p>
<p>XtraBackup优势 ：</p>
<ol>
<li>无需停止数据库进行InnoDB热备</li>
<li>增量备份MySQL</li>
<li>流压缩到传输到其它服务器</li>
<li>能比较容易地创建主从同步</li>
<li>备份MySQL时不会增大服务器负载</li>
</ol>
<h3 id="1-2-replication"><a href="#1-2-replication" class="headerlink" title="1.2 replication"></a>1.2 replication</h3><ol>
<li><p><strong>为什么要做主从复制？</strong><br>我想这是要在实施以前要想清楚的问题。是为了实现读写分离，减轻主库负载或数据分析？ 为了数据安全，做备份恢复？主从切换做高可用？<br>大部分场景下，以上三个问号一主一从都能够解决，而且任何生产环境都建议你至少要有一个从库，假如你的读操作压力特别大，甚至要做一主多从，还可以不同的slave扮演不同的角色，例如使用不同的索引，或者不同的存储引擎，或使用一个小内存server做slave只用于备份。（当然slave太多也会对master的负载和网络带宽造成压力，此时可以考虑级联复制，即 A-&gt;B-&gt;C ）</p>
<p> 还有需要考虑的是，一主一从，一旦做了主从切换，不通过其它HA手段干预的话，业务访问的还是原IP，而且原主库很容易就作废了。于是 主-主 复制就产生了，凭借各自不同的 server-id ，可以避免 “A的变化同步到B，B应用变化又同步到A” 这样循环复制的问题。但建议是，主主复制，其中一个主库强制设置为只读，主从切换后架构依然是可用的。</p>
<p> 复制过程是slave主动向master拉取，而不是master去推的，所以理想情况下做搭建主从时不需要master做出任何改变甚至停服，slave失败也不影响主库。</p>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p><strong>复制类型</strong></p>
<ul>
<li>基于语句的复制：<code>STATEMENT</code>，在主服务器上执行的SQL语句，在从服务器上执行同样的语句，有可能会由于SQL执行上下文环境不同而是数据不一致，例如调用NOW()函数。MySQL在5.7.7以前默认采用基于语句的复制，在 5.7.7 及以后版本默认改用 row-based。   </li>
<li>基于行的复制：<code>ROW</code>，把改变的内容复制过去，而不是把命令在从服务器上执行一遍。从mysql5.0开始支持，能够严格保证数据完全一致，但此时用<code>mysqlbinlog</code>去分析日志就没啥意义。因为任何一条update语句，都会把涉及到的行数据全部set值，所以binlog文件会比较大。<br>（遇到的一个坑是，迁移时，从库改正了字段默认值定义，但数据在主库更改后，即使产生的新数据默认值是正确的，但基于行的复制依然用不正确的值字段全部更新了）</li>
<li>混合类型的复制: <code>MIXED</code>，默认采用基于语句的复制，一旦发现基于语句的无法精确的复制时，就会采用基于行的复制。</li>
</ul>
<p>mysql系统库<code>mysql</code>库里面表的日志记录格式需要说明：在通过如INSERT、UPDATE、DELETE、TRUNCATE等方式直接修改数据的语句，使用<code>binlog_format</code>指定的方式记录，但使用GRANT、ALTER、CREATE、RENAME等改动的mysql库里数据的，会强制使用<code>statement-based</code>方式记录binlog。</p>
<p>可以在线修改二进制日志类型，如<code>SET SESSION binlog_format=MIXED;</code>，需要<code>SUPER</code>权限。</p>
<p> 复制类型还可以分为 异步复制和半同步复制。<br> 通常没说明指的都是异步，即主库执行完Commit后，在主库写入Binlog日志后即可成功返回客户端，无需等等Binlog日志传送给从库，一旦主库宕机，有可能会丢失日志。而半同步复制，是等待其中一个从库也接收到Binlog事务并成功写入Relay Log之后，才返回Commit操作成功给客户端；如此半同步就保证了事务成功提交后至少有两份日志记录，一份在主库Binlog上，另一份在从库的Relay Log上，从而进一步保证数据完整性；半同步复制很大程度取决于主从网络RTT（往返时延），以插件 semisync_master/semisync_slave 形式存在。</p>
</li>
</ol>
<ol>
<li><strong>原理</strong><br>(1) master将改变记录到二进制日志(binary log)中（这些记录叫做二进制日志事件，binary log events）；<br>(2) slave将master的binary log events拷贝到它的中继日志(relay log)；<br>(3) slave重做中继日志中的事件，将改变反映它自己的数据。</li>
</ol>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-replica-concept.jpg" alt="mysql-replication"></p>
<ul>
<li>该过程的第一部分就是master记录二进制日志。在每个事务更新数据完成之前，master在二进制日志记录这些改变。MySQL将事务串行的写入二进制日志，即使事务中的语句都是交叉执行的。在事件写入二进制日志完成后，master通知存储引擎提交事务。</li>
<li>下一步将master的binary log拷贝到它自己的中继日志。首先，slave开始一个工作线程——I/O线程。I/O线程在master上打开一个普通的连接，请求从指定日志文件的指定位置之后的日志内容，然后开始binlog dump process。Binlog dump process从master的二进制日志中读取事件，如果已经跟上master，它会睡眠并等待master产生新的事件。I/O线程将这些事件写入中继日志。</li>
<li><p>SQL slave thread（SQL从线程）处理该过程的最后一步。SQL线程从中继日志读取事件，并重放其中的事件而更新slave的数据，使其与master中的数据一致。只要该线程与I/O线程保持一致，中继日志通常会位于OS的缓存中，所以中继日志的开销很小。</p>
<p>此外，在master中也有一个工作线程：和其它MySQL的连接一样，slave在master中打开一个连接也会使得master开始一个线程。复制过程有一个很重要的限制——复制在slave上是串行化的，也就是说master上的并行更新操作不能在slave上并行操作。</p>
</li>
</ul>
<p>补充:</p>
<ul>
<li>mysql 5.7开始加入了多源复制，这个特性对同时有很多个mysql实例是很有用的，阿里云RDS（迁移）实现了类似的方式。</li>
<li>从MySQL 5.6.2开始，mysql binlog支持checksum校验，并且5.6.6默认启用（CRC32），这对自己模拟实现mysql复制的场景有影响。</li>
</ul>
<p><strong>下面开始配置主从</strong>：</p>
<p>　　主从版本一致—&gt;主库授权复制帐号—&gt;确保开启binlog及主从server_id唯一—&gt;xtrabackup恢复到从库—&gt;记录xtrabackup_binlog_info中binlog名称及偏移量—&gt;从库change master to —&gt;slave start—&gt;检查两个yes</p>
<h2 id="2-创建复制账号"><a href="#2-创建复制账号" class="headerlink" title="2. 创建复制账号"></a>2. 创建复制账号</h2><p>在主库上</p>
<pre><code>mysql&gt; GRANT REPLICATION SLAVE ON *.* TO &apos;slave_ali&apos;@&apos;192.168.5.%&apos; IDENTIFIED BY &apos;slave_ali_pass&apos;;  
mysql&gt; FLUSH PRIVILEGES;
</code></pre><h2 id="3-使用Percona-Xtrabackup恢复数据"><a href="#3-使用Percona-Xtrabackup恢复数据" class="headerlink" title="3. 使用Percona-Xtrabackup恢复数据"></a>3. 使用Percona-Xtrabackup恢复数据</h2><p>这里假设比较简单的情况：全量备份，全量恢复，不涉及增量。</p>
<p>安装和具体使用，见<a href="">文章</a>。</p>
<p>赋予备份用户权限：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql&gt; <span class="keyword">CREATE</span> USER <span class="string">'bkpuser'</span>@<span class="string">'localhost'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'bkppass'</span>;</div><div class="line">mysql&gt; GRANT RELOAD, LOCK TABLES, REPLICATION CLIENT,PROCESS,SUPER <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'bkpuser'</span>@<span class="string">'localhost'</span>;</div><div class="line">mysql&gt; FLUSH PRIVILEGES;</div></pre></td></tr></table></figure></p>
<p>完整的选项使用请执行innobackupex –-help，这里只介绍使用常用的选项进行完整备份及增量备份和还原。</p>
<p>这一节是把数据恢复到从库，借此记录一下xtrabackup的使用（用了云之后，备份技能都丢了~）。生产环境你应该是早就有了xtrabackup的备份，做从库时只需要把备份拷过来，解压恢复。</p>
<p>假设 MySQL 安装目录在<code>/opt/mysql</code>，my.cnf配置文件<code>/opt/mysql/my.cnf</code>，端口3306，数据目录<code>/opt/mysql_data</code>，sock位于<code>/opt/mysql_data/mysql.sock</code>。备份数据放在<code>/data/backup/mysql/</code>。</p>
<h3 id="3-1-全量备份"><a href="#3-1-全量备份" class="headerlink" title="3.1 全量备份"></a>3.1 全量备份</h3><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="string">export </span><span class="string">BKP_PASS=</span><span class="string">"bkppass"</span></div><div class="line">$ <span class="string">innobackupex </span><span class="built_in">--defaults-file=/opt/mysql/my.cnf</span> <span class="built_in">--host=localhost</span> <span class="built_in">--port=3306</span> <span class="built_in">--user=bkpuser</span> <span class="built_in">--password=$&#123;BKP_PASS&#125;</span> /<span class="string">data/</span><span class="string">backup/</span><span class="string">mysql</span></div></pre></td></tr></table></figure>
<p>默认会以当天 日期+时间 戳命名备份目录，如 2015-09-16_00-00-02。一般会对它进行tar压缩，由于tar只能单进程，所以往往这个压缩过程会比备份过程耗时2倍还多。拷贝到需要恢复（做从库）的目录。</p>
<pre><code>如果手头有一份未压缩的全备数据，要在另一台恢复，其实还不如直接 rsync 过来，将近400G的数据压缩与解压缩过程特别漫长。
</code></pre><h3 id="3-2-全量恢复"><a href="#3-2-全量恢复" class="headerlink" title="3.2 全量恢复"></a>3.2 全量恢复</h3><p>在恢复的数据库服务器（从库）上：</p>
<pre><code><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">恢复准备</div><div class="line">$ innobackupex --use-memory=<span class="number">16</span>G --apply-log <span class="number">2015</span><span class="number">-09</span><span class="number">-16</span>_00<span class="number">-00</span><span class="number">-02</span></div><div class="line"></div><div class="line">确认数据库是关闭的，并且datadir，目录下为空</div><div class="line">$ innobackupex --defaults-file=/opt/mysql/my.cnf --use-memory=<span class="number">16</span>G --copy-back <span class="number">2015</span><span class="number">-09</span><span class="number">-16</span>_00<span class="number">-00</span><span class="number">-02</span></div></pre></td></tr></table></figure>

第一步是恢复准备，apply-log应用全备时 log sequence number 之后的数据，完了后会输出类似 InnoDB: Last MySQL binlog file position 0 262484673, file name ./mysql-bin.000135 的信息，告诉我们了后面的从库应该从哪个地方开始复制。时间不会很长，但最好用screen之类的软件放到后台执行，以免终端断开，功亏一篑。

第二步使用新的my.cnf文件，将完整的mysql数据文件拷贝到datadir下。
</code></pre><h2 id="4-做从库"><a href="#4-做从库" class="headerlink" title="4. 做从库"></a>4. 做从库</h2><p>上面恢复过程最后一步<code>apply-log</code>完成之后，会得到一个lsn position 和binlog文件名：262484673、mysql-bin.000135。下面开始从库制作。</p>
<p>一般在<code>copy-back</code>之后需要修改数据文件目录的属性：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># chown -R mysql.mysql /opt/mysql_data</span></div></pre></td></tr></table></figure></p>
<h3 id="4-1-my-cnf"><a href="#4-1-my-cnf" class="headerlink" title="4.1 my.cnf"></a>4.1 my.cnf</h3><p>从库的配置文件简单一点可以从主库拷贝过来，但根据需要，要注意以下几处</p>
<ul>
<li><p>server-id一定不能与主库相同<br>否则，会出现如下错误：<br>Slave: received end packet FROM server, apparent master shutdown</p>
</li>
<li><p>从库一般作为只读库使用，所以为安全起见，设置只读 <code>set global read_only=1</code>;<br>可以在从服务器的 my.cnf 里加入<code>read-only</code>参数来实现这一点，唯一需要注意的一点事read-only仅对没有super权限的用户有效。所以最好核对一下连接从服务器的用户，确保其没有super权限。</p>
</li>
<li><p>关于从库的事件<br>MYSQL Replication 可以很好的达到你的预期：从库的事件不会自己去执行，主库会把event执行的结果直接同步。在statement模式下，复制的是 event BODY 里的SQL，在row模式下是主库事件执行完成后影响的行精确复制。</p>
<p>  从库 event_scheduler 参数是被忽略的，并且每个event 状态会是 SLAVESIDE_DISABLED ，但CREATE/ALTER EVENT等操作语句是会复制。主从切换后，从库事件状态会变成ENABLE。</p>
</li>
<li><p>参数调整<br>从库是不允许写入的，否则数据就不一致了。从库实例的配置可以不要主库那么高，比如原16G的buffer pool，根据用途，从库可以设到4-8G（当时前提是将来你也不打算把它切换为主库用）。<br>相应的，read_buffer_size，sort_buffer_size, query_cache_size 这些读相关参数可以略微增大。当然我一般都懒得去改。</p>
</li>
<li><p>skip-slave-start<br>主从创建完成后，默认情况下次启动从库，会自动启动复制进程，一般这也正是我们需要的，但在维护阶段时你可能不想从库启动后立即开始复制，<code>--skip-slave-start</code>选项可以帮到你。</p>
</li>
<li><p>log-slave-updates<br>正常情况从库是不需要写回放日志产生的binlog，无形中增加服务器压力。但如果你想要实现级联复制即 <code>A -&gt; B -&gt; C</code> ，B同时是A的从库，也是C的主库，就需要开启 log-bin 和 log-slave-updates 。</p>
<p>  另外，建议显示设置 <code>log-bin=mysql-bin</code> 确保主从正常切换。 <code>show variables like &#39;log%&#39;</code> 查看当前值。</p>
</li>
<li><p>关于过滤表见<a href="">mysql-replica-filter</a></p>
</li>
<li><p>sync_binlog<br>For the greatest possible durability and consistency in a replication setup using InnoDB with transactions, you should use innodb_flush_log_at_trx_commit=1 and sync_binlog=1 in the master my.cnf file.</p>
<p>  上面的话同时也意味着性能最低。可以在这埋点，假如出现慢的情况，把两参数调成2。</p>
</li>
</ul>
<h3 id="4-2-启动从库"><a href="#4-2-启动从库" class="headerlink" title="4.2 启动从库"></a>4.2 启动从库</h3><p>启动数据库，注意看日志<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># <span class="regexp">/opt/my</span>sql<span class="regexp">/bin/my</span>sqld_safe --defaults-<span class="keyword">file</span>=<span class="regexp">/opt/my</span>sql<span class="regexp">/my.cnf &amp;</span></div></pre></td></tr></table></figure></p>
<p>提示：如果你不确定这个库是谁的从库，保守起见加上<code>--skip-slave-start</code>启动，兴许能防止数据不一致。</p>
<h3 id="4-3-change-master"><a href="#4-3-change-master" class="headerlink" title="4.3 change master"></a>4.3 change master</h3><p>在从库上</p>
<pre><code>$ mysql -uslave_ali -p&apos;slave_ali_pass&apos; -S /opt/mysql_data/mysql.sock
mysql&gt; change master to master_host=MASTER_HOST, master_port=3306, 
       master_user=&apos;slave_ali&apos;,master_password=&apos;slave_ali_pass&apos;,
       master_log_file=&apos;mysql-bin.000135&apos;, master_log_pos=262484673;
</code></pre><p>上面的 master_log_file 和 master_log_pos 即是输出的值，也可以在新的数据目录下<code>xtrabackup_binlog_info</code>找到信息。</p>
<pre><code>mysql&gt; show slave status\G
mysql&gt; start slave;
mysql&gt; show slave status\G
</code></pre><h3 id="4-4-验证同步延迟"><a href="#4-4-验证同步延迟" class="headerlink" title="4.4 验证同步延迟"></a>4.4 验证同步延迟</h3><p>从库执行 show slave status\G<br>节选：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">      Slave_IO_State:</span> Waiting for master to send event</div><div class="line"><span class="attr">      Master_Log_File:</span> mysql-bin<span class="number">.000004</span></div><div class="line"><span class="attr">  Read_Master_Log_Pos:</span> <span class="number">931</span></div><div class="line"><span class="attr">       Relay_Log_File:</span> slave1-relay-bin<span class="number">.000056</span></div><div class="line"><span class="attr">        Relay_Log_Pos:</span> <span class="number">950</span></div><div class="line"><span class="attr">Relay_Master_Log_File:</span> mysql-bin<span class="number">.000004</span></div><div class="line"><span class="attr">     Slave_IO_Running:</span> <span class="literal">Yes</span></div><div class="line"><span class="attr">    Slave_SQL_Running:</span> <span class="literal">Yes</span></div><div class="line"><span class="attr">   Exec_Master_Log_Pos:</span> <span class="number">931</span></div><div class="line"><span class="attr">      Relay_Log_Space:</span> <span class="number">408</span></div><div class="line"><span class="attr">Seconds_Behind_Master:</span> <span class="number">0</span></div></pre></td></tr></table></figure></p>
<ul>
<li><code>Master_Log_File</code>： I/O线程当前正在读取的主服务器二进制日志文件的名称</li>
<li><code>Read_Master_Log_Pos</code>：本机I/O线程读取主服务器二进制日志位置<br>上面2各值，与在主库执行<code>show master status;</code>看到的值如果基本接近，说明从库<em>IO线程</em>已经赶上了主库的binlog。</li>
<li><code>Relay_Master_Log_File</code>: 由SQL线程执行的包含多数近期事件的主服务器二进制日志文件的名称</li>
<li><p><code>Exec_Master_Log_Pos</code>: SQL线程执行来自master的二进制日志最后一个事件位置<br>与上面的<code>Relay_Master_Log_File</code>一起，同<code>Master_Log_File</code>、<code>Read_Master_Log_Pos</code>比较，能看到<em>SQL线程</em>是否已经赶上从库本地的IO线程。</p>
</li>
<li><p><code>Slave_IO_Running</code>：I/O线程是否启动并成功连接到主服务器上<br>一般和下面的<code>Slave_IO_Running</code>和<code>Seconds_Behind_Master</code>一起监控主从健康状态</p>
</li>
<li><code>Slave_SQL_Running</code>：SQL线程是否启动</li>
<li><code>Seconds_Behind_Master</code>: 从属服务器“落后”多少秒<br>官网的解释是：The number of seconds that the slave SQL thread is behind processing the master binary log。但是当 SBM 为 0 时也不代表一定没有延迟，因为可能因为网络慢的缘故，从库的IO线程传输binlog太慢，它的SQL线程应用日志很容易就赶上relay log，但实际主库产生的binlog比传输的快，就会造成为0的假象。<br>有时你反复status会发现 Seconds_Behind_Master 的值在0与一个很大的数之间波动，有可能是主库上执行了一个非常大的event，没执行完毕的时候从库SBM显示为0，event执行完成并传输完binlog后，就会显示SBM非常巨大。（我在从机房迁移mysql到阿里云上部分库老出现这种情况，应该跟网络和大event都有关系）。<br>另外，relay log 中event记录的时间戳是主库上的时间戳，而SQL thread的时间戳是从库上的，如果主库和从库的时间偏差较大，那么这个SBM的意义就基本不存在了。</li>
</ul>
<h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h2><ul>
<li><a href="http://blog.csdn.net/hguisu/article/details/7325124" target="_blank" rel="external">高性能Mysql主从架构的复制原理及配置详解</a></li>
<li><a href="https://www.percona.com/blog/2013/01/09/how-does-mysql-replication-really-work/" target="_blank" rel="external">How does MySQL Replication really work?</a></li>
<li><a href="https://segmentfault.com/a/1190000003063874" target="_blank" rel="external">XtraBackup不停机不锁表搭建MySQL主从同步实践</a></li>
<li><a href="http://www.simlinux.com/archives/236.html" target="_blank" rel="external">MySQL复制原理与配置</a></li>
<li><a href="http://dev.mysql.com/doc/refman/5.6/en/replication-administration-status.html" target="_blank" rel="external">许多模糊的内容还是看官网的</a></li>
</ul>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2015/12/14/mysql-replicas/">http://seanlook.com/2015/12/14/mysql-replicas/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[南山南]]></title>
      <url>http://seanlook.com/2015/11/01/nan-shan-hike/</url>
      <content type="html"><![CDATA[<p>今天11月1号，深圳的天气正好从这一天凉了起来，傍晚回住处的公交车上给家里打了个电话，是爸爸接的，说家里已经有点冷了。</p>
<p>现在对冷没什么概念了，深圳是一个没有冬天的城市，一件外套就能过冬。也就是今天起风了出门才稍稍感觉到凉，昨天还热的不行呢——那是因为去爬山了。</p>
<p>南山，2年前来这里的第一个月就听说过，但两次上过梧桐山，上半年爬过凤凰山，就偏偏离自己最近的南山未曾到访。山虽然不高，但一直放着不去还能再找到人陪我去不成，于是就响应党组织号召，登山去。</p>
<p>周六下午，小明从公司过去，而我从家里坐公交过去，照计划的时间应该2点半可以集合，无奈在深大转车多等了20分钟，结果是小明跟其他人一起先从海关登山口上山，先到山顶者有奖，我晚十分钟到出发点，去追他们。出乎意料，迈进登山口就一直上台阶，上啊上啊上，T恤已经全湿了，我竟然还穿着紧身牛仔裤！（其实主要考虑到晚上吃饭方便）。由于平时也打打球，体力不算太差，20分钟上到了全程海拔一半的样子，还没追上，双腿力量也下降了，正好碰到没跟上大部队的两个人，就一起走了。后半程坡也小了很多，吹来一丝微风能感觉到背上一阵凉意。此时群里已经有人到观景台发图了，但奇怪的是那么一大波上去怎么才有2个人发图，原来拼的不仅仅是体力，还有手机信号……</p>
<p>三点半时基本上都到顶了，风景还不错，能看到深圳湾大桥（据说晚上很美），和对面的香港。</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/nan-hilltop.jpg" alt="nan-hilltop.jpg"></p>
<p>团体里大部分我是认识的，有我以前的同事，和球场上认识的伙伴。虽然我已离职近4个月，但我党组织关系还在TP，也交了党费，这才有机会和他们一起出来。还有经费，号召大家买书，于是买了《摄影的艺术》《皮囊》等，小明也为他单反买了本，我看中的是他那本室内装饰和川菜食谱，嘿嘿。</p>
<a id="more"></a>
<p>爬完山当然还有活动，自助餐——不是平时想象的哪种自助餐。蛇口是富人区，自助的当然是海鲜之类的，与大饱口福和四海一家有点像，除了种类没有后面两家多，味道和环境都还不错，感受一下。</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/nan-food.jpg" alt="nan-food.jpg"></p>
<p>原本以为5点半开吃，顶多2小时回去了（因为人多而且还有些不熟的），结果听说海上世界就在附近，反正刚刚为了吃回本，肚子都撑了，就走着去了。哦，想起原来当天是万圣节，可不热闹了。</p>
<p>常去的南山腐败地，一个海岸城，一个欢乐海岸，怎么能漏了海上世界，也是早有听说却没来过。一路望去，好多歪果仁，而且装扮忒吓人。海上世界最中心有一艘“船”叫明华号，当然甲板上开着各种餐厅。无意听到人说8点整有水秀表演，几个大男人在一顿狂拍后，终于等来了 water show 。短短的三分钟！</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/nan-show.jpg" alt="nan-show.jpg"></p>
<p>周六算是疯了一天，周日计划还是学点东西，上午9点起来看了看puppet视频，下午去公司简单加了个班。上周经理不在，杂事一大堆，也是身不由己，也是欠了很多技术债。</p>
<p>最后，晚上做了顿饭，忙活2个小时——可是三个人的两顿饭菜啊，不过挺有成就感的，因为吃完了……</p>
<hr>
<p>11月，你好！</p>
<hr>
<p>本文链接地址： <a href="http://seanlook.com/2015/11/01/nan-shan-hike/">http://seanlook.com/2015/11/01/nan-shan-hike/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[周末腐败地]]></title>
      <url>http://seanlook.com/2015/10/25/weekends-badminton-ktv/</url>
      <content type="html"><![CDATA[<p>下午一点钟才起来，今天本来也没什么安排，算不上睡懒觉，毕竟昨晚四点钟才睡。</p>
<p>昨天（周六）公司写字楼的物业举办了一届羽毛球赛，七点钟就起来坐地铁来到侨城东，看来公司包的场地是华侨城锦绣花园的一个社区羽毛球馆，果然住着一群有钱人。我八点35到场，热个身，大概9点钟开始抽签，抽了个7号，也就是其他谁也抽到7号那就与我对打。运气太背了，一个估计有170斤的对手笑呵呵的站在我面前。人家力气大，专打我后场球，我手臂疼痛感还没恢复，被秒了。</p>
<p>剩下没事只给我司的人拍照了。哎，虽然我手机拍照效果一般，但也不差，pp拍出来噪点严重，不清晰。然后觉得反正现在也没事，物业方也没找到合适的裁判，我就顺口应了句“我来吧”，裁女单。额，场面有多和谐我就不讲了，双方是挽着手上场的。本以为完事了，结果，又要裁男单，裁复赛，最后决赛。当时我想现在空下这么多场地，好好练几个球，可大家都不愿意顶替我去裁。最后前三甲决赛，就我一个喊着，“13比11，这一局比赛结束”——决赛果然精彩，双方咬着分不放。因为是循环赛，按最后每人赢的局数定名次，三人打了七局。这还是我第一次当裁判呢。</p>
<p>回来时都12点多了，又困又累，一同事顺路就开车送我到了西乡。本以为可以冲个澡，睡四五个小时，结果，公司客户在投诉网站使用很慢，远程到公司找了一个小时原因没结果，还趴在桌上睡着了。（程序员节还出事情呢？）</p>
<a id="more"></a>
<p>等我醒来，室友几个约好了去民治聚餐，公司催命电话又打过来了，好在运维现在不止我一个，就让星星（我领导）去解决了。</p>
<hr>
<p>真的很庆幸能有这么一群玩耍的朋友，我们七个是13年一同进TP的，离职只剩2个了，每次好久没约，就在群里吼一句，大家都不约而同的来了。乔帮主说的对，平时工作压力大，到了这，咱们就吹牛逼，自黑，互相调侃。好家伙，一顿饭能从下午五点半吃到十点，然后转战楼上KTV。我向来不喜欢唱歌这样的场所，但去也就去了，大家都自己人，不会唱歌瞎吼也没事（雷军的Are you OK都有人点，我还怕什么），玩玩骰子也可以。</p>
<p>玩的真的很疯，但也很开心。几个人里面，有一对已经领证了，我们都看过他们的分分合合，在桌上听他吹自己的理想规划，心想结婚了就是不一样；另一个也是我理工同届了，经常一起开玩笑，他刚从TP离职去了一加；还有威哥，互相说对方做的饭不好吃；还有勤快的小明，善于自黑强哥，花痴文，正在创业的韦爷。</p>
<p>到凌晨1点半实在是困了，一晚上嗓子哑了，芥末也吃了，圆满了。打个优步回到家，看似还清醒，贫民窟的百万富翁，没5分钟我就睡着了，醒来就一点了。</p>
<p>晚上又去蹭原公司场地打球，不想宅家，提前把晚上的汤煲好——这样的周末过得才有意义。</p>
<hr>
<p>本文链接地址： <a href="http://seanlook.com/2015/10/25/weekends-badminton-ktv/">http://seanlook.com/2015/10/25/weekends-badminton-ktv/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在女性眼里，男人会做饭是种什么体验？]]></title>
      <url>http://seanlook.com/2015/10/21/what-do-women-think-of-men-who-can-cook/</url>
      <content type="html"><![CDATA[<p>原文地址：<a href="https://www.quora.com/What-do-women-think-of-men-who-can-cook" target="_blank" rel="external">https://www.quora.com/What-do-women-think-of-men-who-can-cook</a><br>作者：<a href="https://www.quora.com/Shambhavi-Tripathi" target="_blank" rel="external">Shambhavi Tripathi</a><br>翻译：<a href="http://seanlook.com">Seanlook</a></p>
<h1 id="What-do-women-think-of-men-who-can-cook"><a href="#What-do-women-think-of-men-who-can-cook" class="headerlink" title="What do women think of men who can cook?"></a>What do women think of men who can cook?</h1><p>这个问题很有意思，我想我可以很好的回答这个问题，因为我有幸认识这些人。</p>
<p>我的弟弟和我的两个好朋友都很擅长做饭，所以我将以他们为原型来回答。</p>
<p>在我回答之前呢，我想提一下我自己算得上是一个极度偏执的人，因为我很爱吃。我就是个吃货（素食），我的味蕾从未被满足过，并且7×24小时不间断的寻找美食。然而，我自己对下厨一无所知，甚至麦琪面都下不好。好了，接下来让我来开始回答，在我看来男人会做饭是怎样的。<br>   <img src="https://qph.is.quoracdn.net/main-qimg-add9126874364a433c43fef58eca6ea9?convert_to_webp=true" alt=""><br>   (Image Credits: <a href="http://blog.sembrodesigns.com/tag/fathers-day/" target="_blank" rel="external">Fathers day Archives | Kitchen Remodeling</a>)</p>
<a id="more"></a>
<ol>
<li><p>他们对很小的细节感兴趣<br>大部分人去餐厅时会怎样做？好吧，我来告诉你我一般怎么做。要么根据我自己喜好点几种特定成分的菜（例如奶酪），要么心情好的时候，根据菜单上的图片来点一些新菜式。是的，这就是我点菜的水平。现在当我和我弟或者喜欢做饭的朋友一起出去时，他们会这样做：大声念出菜名，同时也会念出它包含些什么（无论菜名后面的括号里写的是什么）。他们会尝试想象一下如果自己做出来会是什么味道。如果他们还不满足于念出菜名，有可能还会叫来服务员，询问各种细节，比如制作的过程，那道菜通常要提前准备什么。他们对这个太感兴趣了！与此同时，我只好不耐烦的看这看那，心想，为什么他就不能随便点任何想吃的东西呢？</p>
</li>
<li><p>他们极度追求完美<br>当他们为你刚做好一道鲜汁四溢佳肴，你如狼似虎的吃着，“天呐，不能更好吃了，太美味了，简直了！”。但当他们尝了一下，脸上摆出的奇怪的表情，我至今都没理解什么意思，他们会然后点评了一下小的不足并记在脑子里避免将来还犯同样的错误。</p>
</li>
<li><p>他们很性感<br>我们很爱看一个男人在做饭，真的很难不爱上一个厨房里的男人。看着他用双手创造出精美的一道菜，如此动人。它超过了其它赏赐，他们做饭的姿态透着某种性感。看着他们为你准备一顿早餐或者一杯咖啡，绝对可以大幅度拉高性感指数。<br><img src="https://qph.is.quoracdn.net/main-qimg-dd5b1ae907feed29ebf3d60fdef322cd?convert_to_webp=true" alt=""><br>(Image Credits: <a href="http://howardfalco.com/08/7-powerful-things-to-say-to-your-spouse-or-significant-other/istock_000018935400large/" target="_blank" rel="external">istock_000018935400large - Howard Falco</a>) </p>
</li>
<li><p>他们经常给你的生活带来新体验<br>他们总乐意去发明新的菜式，也会学习各种你可能从没听过的烹饪方法。他们给你的生活带来新花样，这是可遇不可求的品质。</p>
</li>
<li><p>他们觉得“做饭是女人的工作”这种想法很荒谬<br>这些人理解的下厨，是没有那么多局限的，这件事不仅仅限制只有女性才能做，他们完全打破这个令人愤怒的事实（印度除外），他们乐意并且为做出爱心饭菜的行为感到高兴。</p>
</li>
<li><p>他们可以时刻为你做吃的<br>无论是中午还是半夜，只要你在他们面前表达意愿，想要他做东西给你吃，放心吧，他绝对不会拒绝你。甚至半夜在家里，我的胃由于饿在咕咕叫的时候，我请求正在忙其它事情的弟弟做点吃的，他从未说一个不字。相反，他总能带来你怎么也想不通他是如何利用以前一样的食材，做出完全超乎意料的东西来。谢谢老弟：P</p>
</li>
<li><p>他们身体比我们健康<br>拥有大量关于各式食物的知识，他们知道哪种食物是健康的，哪种可能对身体不好甚至是有害的。所以他们通过推荐相对均衡、健康的饮食习惯，让自己和身边的人也安全健康起来。</p>
</li>
<li><p>他们很擅长打开一个话题，特别是在陌生场合<br>全世界到处遍布食物，当你以一名游客或者其它身份出现在一个陌生地点时，这些会做饭的人会很轻易的跟当地人搭上话，和他们一起旅游会感到很轻松，因为他们总知道怎样不会冷场，不感到尴尬，跟陌生人可以很友好的交流。</p>
</li>
<li><p>他们是天底下所有妈妈的“菜”<br>把他们介绍给你妈妈认识，并告诉说他会做饭，恐怕她听不进其它事情了。你妈妈将会对他印象深刻，甚至开始讨论关于菜式做法之类的事情。几乎每位母亲都爱这一点，你妈妈可能还会对你吼道：“向他学习！你甚至连杯茶都泡不好。”。</p>
</li>
<li><p>他们绝不会要求我进厨房（最后但我喜欢）<br>由于他们知道我对做饭没有一点概念，所以我可以很舒适的待在任意地方。他们从不会指指点点，也不会让你上前帮忙，依然总是会做出美味佳肴来满足我和身边的人。</p>
</li>
</ol>
<blockquote>
<p>MEN WHO CAN COOK ARE AMAZING AND A BLESSING. THEY ARE INTERNATIONALLY IN DEMAND AND TOTALLY RESPECTE.</p>
</blockquote>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2015/10/21/what-do-women-think-of-men-who-can-cook/">http://seanlook.com/2015/10/21/what-do-women-think-of-men-who-can-cook/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[回家看看（国庆）]]></title>
      <url>http://seanlook.com/2015/09/30/the-way-home-20151001/</url>
      <content type="html"><![CDATA[<p>汽车在公路上一路奔驰，车厢内很安静，大部分人闭目休息，能确定的是司机是清醒的，而我在后面靠窗的位置，取掉眼镜，不太清晰的望着窗外。一片片无人问津小树林，一片片因下雨而污浊的池塘水，一片片村庄、农田……﻿</p>
<p>是的，老毛病又犯了，又要发感慨了。﻿﻿</p>
<p>昨天这个时候还在深圳地铁上，忙忙碌碌，人挤人。每天朝七晚九，周末睡不醒，完全没有7月份换工作那会儿打了鸡血一样，与自己的约定也始终没坚持。早在一个月前，实在想不到国庆去哪，也是因为种种压力，澳门的计划，四川的计划，没法任性的说走就走，于是就选择了回家，去见见老同学们，去参加婚礼，去看看父母，去看看自己。﻿﻿</p>
<p>昨天在列车上，看完了『侣行1』，作者带我们去探寻索马里的恐怖之都摩加迪沙，体验被枪抵住胸膛的心跳；带我们去北极的奥伊米亚康，在地冻天寒的雪地上露营；还深入乌克兰切尔诺贝利核电站，挑战核辐射恐惧；最后去感受毁灭与美学兼具的马鲁姆火山，看岩浆翻滚，体验生死，把命交给爱人。当然，不必羡慕，不必自悔，但哪怕我们生活做出他们百分之一的改变，至少深藏一颗不羁的内心，不要再一成不变，不要再泥潭深陷，就会变得不再慵懒，变得有趣。﻿﻿</p>
<p>能折腾，有信仰，这是我对他们四人团队的极简总结。而这正是我还没走出的迷途，Yes和No用错地方。﻿﻿</p>
<a id="more"></a>
<p>人一生会遇到形形色色的人，相信每个人背后都有故事。这些人会对你产生重大影响的人，一双手都可以数的过来，而时常能陪在身边的更是屈指可数。与他们去经历欢笑与泪水，去经历生死与难忘，这样才懂得珍惜，不会恶语相向。很喜欢道士下山范伟讲的那段话，“人生七十古来稀，十年少小，十年老弱，还有五十年，五十年再分成日夜，只有二十五年的光景了，再加上 刮风下雨，三灾六病，人这一辈子 还能剩下多少好日子。”。工作，努力尽心就好，对自己做的事情负责；生活，本应多样。(写完这段，良辰都想吐了)﻿﻿</p>
<p>火车上还看电影『遗弃』，差一点陷入平常悬疑片的路子，特别是女主开始怀疑自己的时候，好了，不剧透了，小电影里值得一看。﻿﻿</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/child-school.jpg" alt="child-school.jpg"></p>
<p>凌晨1点到的九江，以亲友马上过来接我为由，逃离出站口过分“热烈”的拉客仪式，不下十个说有小妹儿的，“我们这都这么叫”，终于在一公里开外的地方找到一个宾馆，尼玛，还是双标。抓紧时间睡了四个小时就滚了。</p>
<hr>
<p>本文链接地址： <a href="http://seanlook.com/2015/09/30/the-way-home-20151001/">http://seanlook.com/2015/09/30/the-way-home-20151001/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nice is not nice]]></title>
      <url>http://seanlook.com/2015/07/14/nice-is-not-nice/</url>
      <content type="html"><![CDATA[<p>看到身边朋友在玩一个叫 nice 的应用，也试用了一把。</p>
<p>从下载量来说它是LOFTER的2倍，它们都可以划分为图片社交。这样说对于网易乐乎来说是不公平的，lofter定位是轻博客，类似于国外的tumblr，生产高质量的内容，尤其是图片。（jianshu倾向于文字，类似国外的medium）</p>
<p>而nice呢，注重图片几乎到放弃文字的地步，简单的通过打标签来注解图片，炫耀的意思不言而喻，而恰好它打的是陌生人社交的牌，大家都互相不认识，不会引起熟人间拉仇恨的嫌疑。陌生人之间也丝毫不吝啬自己的赞，这种低成本却又能给对方带来好感的点赞行为，实际都是虚伪在作怪。我因为应用要求上传了一个阿狸的头像，几分钟内也能收到十多个赞，我当时都蒙了。但是确实喜欢听到被点赞的通知，这大概能解释为什么女生偏爱这个app——全nice内容无非就是自拍照、吃的什么、逛街——无特效，不发图。</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/nice-app.jpg" alt="nice-app.jpg"></p>
<a id="more"></a>
<p>在nice里，你会发现所有人都过着小资生活。它不是一个发泄的场地，也不适合记录生活，因为它是短暂的，一个人可能接触nice一到两个月基本就淡出了。有时候想想用nice的人其实是自私的，因为你的图（背后）往往不止你一人，但因为几乎全来自陌生人点赞，满足的是个人的虚荣心，而图中那一刻的其他人无非是个陪衬。不然为何不发惹朋友圈呢……</p>
<p>可能有人出来批判我了，女生爱美怎么啦，注孤生。也许我喜欢的只是对生活一种简简单单的表达。你为何不愿在朋友圈发同样的，难道是因为缺少标签的功能吗，no！ 难道是文艺青年号称要逃离朋友圈，也不对！一万个哈姆雷特！</p>
<p>在nice久了，刷够了别人的美图，忍不住自己也要上图。要有上图的资本，就要打破原来的计划去寻找“素材”，会不会对身边平凡的生活感到厌倦——我YY的。</p>
<p>人人都有爱美之心，无可厚非，但吸取更有营养的内容，增加自己的涵养，戒除浮躁，懂心交流，才是高情商的选择。</p>
<p>–<br>玛德，在dropbox上下个插图搞了一个小时</p>
<hr>
<p>本文链接地址： <a href="http://seanlook.com/2015/07/14/nice-is-not-nice/">http://seanlook.com/2015/07/14/nice-is-not-nice/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[EC的第一天]]></title>
      <url>http://seanlook.com/2015/07/07/ec-the-first-day/</url>
      <content type="html"><![CDATA[<p>第一天入职 <a href="www.scrm.com">EC</a>，总体感觉还不错，就是不知道日后的工作怎样。eva给我们五个介绍了公司的制度和福利，公共免费wifi，下午四点下午茶有水果，办公电脑不限网（中午休息时间竟然有人直接打dota，还有看动漫的）。sunny跟我们签的2年合同。好了夸完说说其他的感受。</p>
<p>公司产品——EC营客通。主要这一个产品，有web、PC、android、IOS平台，而且主要卖点是与腾讯qq无缝连接，同时也能连接手机通讯录、邮箱、excel，号称“连接一切”，不然怎么叫 Easy Connection 。试用了移动端，其实功能很简单:支持各种数据来源的导入，加比较全的手机通讯录功能，，再加定时提醒功能（这不是最近我在试用的 『滴答清单』的功能吗），最后是外勤签到和统计的功能。并没有多少先进的科学方法，或令人眼前一亮的新功能。</p>
<p>PC端的功能稍微复杂一点，但界面简直就是qq的副本，没了qq秀和游戏广告。这不禁让我想到了企业qq RTX，四像四不像。我想ec存在的价值在于，让员工有意识的通过工具去区分工作和生活。至于要做中国的Salesforce，路途还非常非常遥远，因为它“不止连接”。</p>
<p>至于我很早就了解到的纷享销客，内部培训的时候除了说方向不一样外，还有贬低对手的意思，什么操作性crm与分析型crm。试用了一把，纷享销客也有分析统计预测的功能，走的路线确实完全不一样，似乎fxiaoke更注重于流程审批、知识共享、外勤签到等功能。究竟哪一个是以后的方向，还是各自结合，还很难说。salesforce估值400多亿肯定是有它的道理，如果2年之内没达到sf现在的原型，就很难有更大发展了。</p>
<a id="more"></a>
<p>晕，怎么上班第一天胡乱评价自家产品。</p>
<p>以后上下班要挤地铁高峰期了，告别了班车福利，似乎以前坐班车从窗户旁看到了公车上的自己。</p>
<p>现在在想，第二份工作要给自己角色上一个怎样的转变呢，我隐约的感觉到不在甘于这个小弟的角色，而是需要主动在运维团队里推进工作、提出建设性意见的人。听桂哥和超哥的意思，以后工作的关键词大概是kvm, docker, zabbix, saltstack，还是希望能够接触到数据库、开发和架构方面的内容。加油↖(^ω^)↗！</p>
<hr>
<p>本文链接地址： <a href="http://seanlook.com/2015/07/07/ec-the-first-day/">http://seanlook.com/2015/07/07/ec-the-first-day/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解答一个关于日志系统的思路]]></title>
      <url>http://seanlook.com/2015/06/09/gongshi-logsystem-elk-preview/</url>
      <content type="html"><![CDATA[<p>在一个群里看到一个面试题，试着去解答一下，毕竟正好花时间了解过日志这方面的内容。</p>
<blockquote>
<p>希望能达到的使用场景：</p>
<p>在写业务逻辑时也能进行结构化的log, 并且log被转移到一个数据库， 一个UI前端以这个log数据库为支持， 可以可视化各种指标， 并且保留未来可以对指标进行alarm的可能性</p>
<p>希望从两个方面考虑这个问题：</p>
<ol>
<li>技术通路实现。 在每一步会用些什么技术?  一些核心组件比如log采集和log数据库有哪些已有方案， 是否有优劣？</li>
<li>从运维角度看， 这套系统可能在哪些方面有需要考量的地方。 比如log采集是否会影响业务进程？ log数据库的运维可能遇到哪些问题？</li>
</ol>
</blockquote>
<p>可以看出问题提出者比较在意解决这些问题过程中的思维方式和学习能力，弱化实践经验的要求。</p>
<p>首先根据要求确认一下要达到效果：</p>
<ol>
<li>log日志采集</li>
<li>log存储</li>
<li>log展示</li>
<li>alarm报警(附加)</li>
</ol>
<h2 id="1-确定日志流向-架构"><a href="#1-确定日志流向-架构" class="headerlink" title="1 确定日志流向/架构"></a>1 确定日志流向/架构</h2><p>因为一开始脑海里也不知道原型是怎样的，就是以前用过linux自带的rsyslog功能感觉很类似：在日志服务器上通过配置rsyslog存入mysql的插件，而其它的各个服务器上默认rsyslog都是开启的，修改conf的系统日志、mail、cron等不输出到本地，而是指向mysql数据库。前端通过loganalyzer从数据库获取数据，图形化显示（简陋到不想说了。。。），但是显示的柱形图/饼图没有什么意义，默认对系统messages处理比较方便，要记录nginx或业务逻辑的log还需做其它额外操作。</p>
<p>但rsyslog并不是一无是处，它的整个架构特别是消息队列的设计，跟后面要讲的许多分布式日志系统是很像的。所以脑海里日记采集的原型出来了：</p>
<ul>
<li>业务逻辑的日志输出到文件file，服务上的日志采集客户端agent实时监控这个logfile，作为输入；日志中心服务器server接受来自agent的消息，存入后端数据库。另有一个UI从这个数据库取得数据显示，并提供搜索、统计图表。</li>
<li>然而有以下几个问题需要考虑，这也就是为什么出现各种开源解决方案：<ol>
<li>日志产生数量过大，不能及时发送到server怎么办<br>可以使用队列或redis来缓冲</li>
<li>日志中心服务器server故障怎么办，肯定不能丢失日志，即可靠性<br>有的解决办法是对 log server 做集群，通过zookeeper来同步配置；有的是在agent上本地暂时存放，等恢复后重新传输，redis就可以承担这个角色</li>
<li>考虑到这个日志平台的可扩展性，新的日志来源input不一定是file，比如rsyslog<br>至少需要支持常用的input</li>
<li>是否支持过滤功能<br>filter可以在日志发送之前就把不匹配的日志内容排除掉</li>
<li>log结构化<br>收集的日志初始是一长字符串，为了后面使用方便，需要将日志结构化存储（后面会有说明）</li>
<li>存储采用关系型数据库对海量日志存储，性能肯定很大问题<br>log日志存储没有一致性的要求，甚至可以说一条日志根本就没意义，而是需要通过大量的日志，通过分析、比较趋势具备用处。于是日志的存储各显大招，主流有两种：hadoop分布式文件系统HDFS，elasticsearch（后面简称es）全文搜索引擎，它们都具备很强的可伸缩性和多节点高可用性</li>
<li>由于存储方式的不同，数据分析与展示也就有各自的阵营<br>HDFS一般采用MapReduce处理数据，es既可以通过其丰富的插件显示或搜索数据，也可以通过推荐使用的kibana来展示数据</li>
</ol>
</li>
</ul>
<p>总结下来大致流程图如下：<br><a id="more"></a><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/gongshi-log-elk-preview.png" alt=""></p>
<h2 id="2-log结构化"><a href="#2-log结构化" class="headerlink" title="2 log结构化"></a>2 log结构化</h2><p>当然可能你一直存在这样一个疑问：log的结构化问题处理</p>
<p>代码里logger的内容大概是timestamp,log_level,module,message… ，一下是nginx的access示例：</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">172.16.30.88</span> - <span class="string">[08/Jun/2015:00:08:38 +0800]</span> <span class="string">"<span class="keyword">POST</span> /notice/statement_findStatementVByPage.htm?1433637553824 HTTP/1.1"</span> </div><div class="line"><span class="number">200</span> <span class="number">114</span> <span class="string">"http://service.tp-link.net/"</span> <span class="string">"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)"</span></div></pre></td></tr></table></figure>
<p>处理这条非结构话的字符串或消息，无非就是在它发送到日志中心之前格式化，像最简单的rsyslog处理方法是通过数据库表字段Mapping来存放，而es则是通过编写Grok规则来结构化，如将IP、日期、请求方式、响应状态码、响应时间等组合成json字符串。（然而Grok写起来是非常痛苦的，以至于官方github上专门维护了一份通用规则表）</p>
<p>可以说上面提到的各项内容从采集、存储、分析、展示，几乎在所有大型分布式日志系统中都可以找到各自的实现。而具体开源项目的选型，主要根据侧重功能、数据量级、管理复杂度、社区或文档的完善程度等来决定。</p>
<h2 id="3-对运维带来的影响"><a href="#3-对运维带来的影响" class="headerlink" title="3 对运维带来的影响"></a>3 对运维带来的影响</h2><p>是否选用这一套日志管理系统，从运维角度看，需要考虑以下因素</p>
<ol>
<li><p>日志采集是否影响原有进程<br>应该这样说，业务代码的log是记录到文件的，日志采集进程也是是直接从文件读取，所以外部是不会影响（不包括占用系统资源）。但，记录日志势必会损耗一定的性能，建议做法是通过配置文件设定是否打开日志，优化做法是日志缓存、异步记录、仅记录有价值的日志。</p>
</li>
<li><p>log数据库的运维可能会遇到的问题<br>比较容易出现问题的就是log数据存储出现单点故障、性能不达标，这两方面顾虑都可以通过多节点集群来解决，而且要能够实现添加或去除节点对外透明（即可扩展性）。HDFS和es都可以满足这个要求。<br>具体到es，还可能遇到索引分区的问题，定义以timestamp或module或日志类型等索引，这个需要具体深入了解业务需求了。</p>
</li>
<li><p>运维成本</p>
<ul>
<li>维护复杂程度，包括学习成本，文档是否完善，能否自定义插件，社区是否成熟涉及到出异常能否快速解决</li>
<li>部署是否方便，通过salt或docker能否方便的完成部署</li>
<li>资源，即引入这一套系统，所需要投入的基础设施</li>
</ul>
</li>
<li><p>与docker结合的使用</p>
<ul>
<li>日志默认是写到docker自己的文件系统上，记录或收集方式需要考虑</li>
<li>在host映射volume，日志写到host，日志收集方法不变</li>
<li>docker自身提供日志写入host的系统日志messages功能，日志改收集message</li>
<li>或者, 写插件，agent直接从docker stdout输入</li>
<li>将日志收集agent端封装在docker images里，统一从registry拉取运行，达到自动化部署</li>
</ul>
</li>
<li><p>可靠性与伸缩性<br>上面也已经提到，agent日志传输失败需要能够暂时存在本地，等待重传；存储查询遇到性能问题有叫成熟的优化方案，如添加节点或优化es索引</p>
</li>
<li><p>对日志系统进行监控<br>日志收集（进程）出现异常，能通过系统本身或其它监控平台报警。还要考虑恢复所用的时间。</p>
</li>
<li><p>日志系统里定义阈值，能否及时告警<br>系统自带当然更好，如果没有实现指标告警的难易程度。（不幸的是，logstash有告警插件。。）</p>
</li>
<li><p>实时性分析要求<br>即提交一个查询log请求，能够在秒级响应请求结果，图示化显示趋势。</p>
</li>
<li><p>日志保留周期<br>对日志存储端来说这是个小问题，但是在agent服务器上日志文件是持续增大的，是否需要定期echo一下。</p>
</li>
<li><p>认证访问<br>我们不会把日志数据公布给任何人，架设在内网还要，如果在公网，一是最好能ssl加密，而是有登录验证。这个在logstash没有看到相关的内容，可能需要自己实现</p>
</li>
</ol>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>因为曾经在一次技术沙龙上听到有人分享过logstash，所以一提日志管理时就想到了它，从而比较方便了知道了一个日志采集、存储、分析、展示系统的一个大致技术和架构。然后问google “logstash alternative”发现类似的开源/商业的技术可谓是百花齐放，flume，kafka，chukwa，fluent等（上面几个都有了解比较过，架构与上面的图片相似，有的是采用消息订阅的方式，有的结合hadoop使用分析TB级数据的）。</p>
<p>一开始也是为了避免过早的陷入细节，就把上面几个框架记录了下各自的偏重的适用场景、优缺点、管理复杂度，然后自己搭了一套LEK（Logstash、Elasticsearch、Kibana）环境体验了一把，比起枯燥的看架构原理，更有成就感。从功能上来LEK说刚好可以达到所提要求，而且在github上的logstash的star有4000多个，大有一统江湖之势，新浪有结合docker在使用logstash，在一个交流群里问到也有人在用。（因为各版本兼容性问题，官网原文文档是最完善的。但logstash也有诸如内存占用偏高等问题，都有积极维护的插件来解决）</p>
<p>最后结合自己以前的经验，思考了一下日后运维工作中可能会涉及到的问题，包括监控和自动化、高可用等方面。</p>
<p><strong>补充</strong><br>后来知道还有使用OpenTSDB这种时间序列数据库去存放日志的方案，有机会研究一下。</p>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2015/06/09/gongshi-logsystem-elk-preview/">http://seanlook.com/2015/06/09/gongshi-logsystem-elk-preview/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nginx做负载均衡器以及proxy缓存配置]]></title>
      <url>http://seanlook.com/2015/06/02/nginx-cache-check/</url>
      <content type="html"><![CDATA[<p>关于nginx的安装和基本配置请参考<a href="http://seanlook.com/2015/05/17/nginx-install-and-config">nginx</a>，本文在原基础上完成以下几个功能：</p>
<ul>
<li>结合proxy和upstream模块实现nginx负载均衡</li>
<li>结合<code>nginx_upstream_check_module</code>模块实现后端服务器的健康检查</li>
<li>使用<code>nginx-sticky-module</code>扩展模块实现Cookie会话黏贴（session-sticky效果）</li>
<li>使用proxy模块实现静态文件缓存</li>
<li>使用<code>ngx_cache_purge</code>实现更强大的缓存清除功能</li>
</ul>
<h1 id="1-安装及模块说明"><a href="#1-安装及模块说明" class="headerlink" title="1. 安装及模块说明"></a>1. 安装及模块说明</h1><p>上面提到的3个模块都属于第三方扩展模块，需要提前下好源码，然后编译时通过<code>--add-moudle=src_path</code>一起安装。</p>
<p>注意：</p>
<ul>
<li>使用 nginx_upstream_check_module(简记为m1) 时要先为nginx打上相应版本的patch，我的nginx版本为 1.6.3，所以patch对应 m1 解压后目录下的<code>check_1.5.12+.patch</code>，所以进入nginx源码目录，执行 patch -p1 …（见下方示例）</li>
<li>nginx-sticky-module-ng(简记为m2) 模块可以单独使用，但是因为m1监控检查的方式是依赖于m2的，所以要使用m2，还要对m1打上patch，进入m2源码目录，执行 patch -p0…</li>
</ul>
<p>编译示例：（CentOS 6.5 x86_64, nginx 1.6.3）</p>
<pre><code># yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl--devel pcre pcre-devel

# cd nginx-1.6.3
# patch -p1 &lt; ../nginx_upstream_check_module-0.3.0/check_1.5.12+.patch

# cd ../nginx-sticky-module-ng-1.2.5
# patch -p0 &lt; ../nginx_upstream_check_module-0.3.0/nginx-sticky-module.patch

# ./configure --prefix=/usr/local/nginx-1.6 --with-pcre 
--with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module --with-http_realip_module 
--add-module=../nginx_upstream_check_module-0.3.0 --add-module=../nginx-sticky-module-ng-1.2.5 --add-module=../ngx_cache_purge-2.3
# make &amp;&amp; make install
</code></pre><p>如果你想在已安装好的nginx上添加第三方模块，依然需要重新编译，但为了不覆盖你原有的配置，请不要make install，而是直接拷贝可执行文件：<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># nginx -V              <span class="comment">//可以看到原来的编译选项，下面用到</span></span></div><div class="line"><span class="meta"># ./configure ... --add-<span class="meta-keyword">module</span>=..       <span class="comment">//你的第三方模块</span></span></div><div class="line"><span class="meta"># make           <span class="comment">//make后不要install，改用手动拷贝。先备份</span></span></div><div class="line"><span class="meta"># cp objs/nginx /usr/local/nginx<span class="number">-1.6</span>/sbin/nginx</span></div></pre></td></tr></table></figure></p>
<h1 id="2-nginx-sticky-module"><a href="#2-nginx-sticky-module" class="headerlink" title="2. nginx-sticky-module"></a>2. nginx-sticky-module</h1><p>项目地址：<a href="https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng" target="_blank" rel="external">https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng</a> </p>
<p>这个模块的作用是通过cookie黏贴的方式将来自同一个客户端（浏览器）的请求发送到同一个后端服务器上处理，这样一定程度上可以解决多个backend servers的session同步的问题 —— 因为不再需要同步，而RR轮询模式必须要运维人员自己考虑session同步的实现。</p>
<p>另外内置的 ip_hash 也可以实现根据客户端IP来分发请求，但它很容易造成负载不均衡的情况，而如果nginx前面有CDN网络或者来自同一局域网的访问，它接收的客户端IP是一样的，容易造成负载不均衡现象。淘宝Tengine的 ngx_http_upstream_session_sticky_module 也是类似的功能。nginx-sticky-module的cookie过期时间，默认浏览器关闭就过期，也就是会话方式。</p>
<p>这个模块并不合适不支持 Cookie 或手动禁用了cookie的浏览器，此时默认sticky就会切换成RR。它不能与ip_hash同时使用。</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/nginx-lb-sticky.jpg" alt="nginx-lb-sticky.jpg"></p>
<a id="more"></a>
<h2 id="2-1-sticky配置"><a href="#2-1-sticky配置" class="headerlink" title="2.1 sticky配置"></a>2.1 sticky配置</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">upstream <span class="keyword">backend </span>&#123;</div><div class="line">    server <span class="number">172</span>.<span class="number">29</span>.<span class="number">88</span>.<span class="number">226</span>:<span class="number">8080</span> weight=<span class="number">1</span><span class="comment">;</span></div><div class="line">    server <span class="number">172</span>.<span class="number">29</span>.<span class="number">88</span>.<span class="number">227</span>:<span class="number">8080</span> weight=<span class="number">1</span><span class="comment">;</span></div><div class="line">    sticky<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置起来超级简单，一般来说一个<code>sticky</code>指令就够了。</p>
<p><code>sticky [name=route] [domain=.foo.bar] [path=/] [expires=1h] [hash=index|md5|sha1] [no_fallback];</code>：</p>
<ul>
<li><code>name</code>: 可以为任何的 string 字符,默认是 route</li>
<li><code>domain</code>：哪些域名下可以使用这个 cookie </li>
<li><code>path</code>：哪些路径对启用 sticky，例如 path/test，那么只有 test 这个目录才会使用 sticky 做负载均衡</li>
<li><code>expires</code>：cookie 过期时间，默认浏览器关闭就过期，也就是会话方式。</li>
<li><code>no_fallbackup</code>：如果设置了这个，cookie 对应的服务器宕机了，那么将会返回502（bad gateway 或者 proxy error），建议不启用</li>
</ul>
<p>你在查看<a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html" target="_blank" rel="external">官方文档</a>可能会注意到里面也有个 sticky 指令，要说它们的作用几乎是一样的，但是你可能注意到<code>This directive is available as part of our commercial subscription.</code>的说明 —— 这是nginx商业版本里才有的特性。包括后面的<code>check</code>指令，在nginx的商业版本里也有对应的<code>health_check</code>（配在 location ）实现几乎一样的监控检查功能。</p>
<h2 id="2-2-load-balance其它调度方案"><a href="#2-2-load-balance其它调度方案" class="headerlink" title="2.2 load-balance其它调度方案"></a>2.2 load-balance其它调度方案</h2><p>这里顺带介绍一下nginx的负载均衡模块支持的其它调度算法：</p>
<ul>
<li><code>轮询</code>（默认） ： 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，故障系统被自动剔除，使用户访问不受影响。Weight 指定轮询权值，Weight值越大，分配到的访问机率越高，主要用于后端每个服务器性能不均的情况下。</li>
<li><code>ip_hash</code> ： 每个请求按访问IP的hash结果分配，这样来自同一个IP的访客固定访问一个后端服务器，有效解决了动态网页存在的session共享问题。当然如果这个节点不可用了，会发到下个节点，而此时没有session同步的话就注销掉了。</li>
<li><code>least_conn</code> ： 请求被发送到当前活跃连接最少的realserver上。会考虑weight的值。</li>
<li><code>url_hash</code> ： 此方法按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。Nginx本身是不支持url_hash的，如果需要使用这种调度算法，必须安装Nginx 的hash软件包 nginx_upstream_hash 。</li>
<li><code>fair</code> ： 这是比上面两个更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx本身是不支持fair的，如果需要使用这种调度算法，必须下载Nginx的 upstream_fair 模块。</li>
</ul>
<h1 id="3-负载均衡与健康检查"><a href="#3-负载均衡与健康检查" class="headerlink" title="3. 负载均衡与健康检查"></a>3. 负载均衡与健康检查</h1><p>严格来说，nginx自带是没有针对负载均衡后端节点的健康检查的，但是可以通过默认自带的 ngx_http_proxy_module 模块和 ngx_http_upstream_module 模块中的相关指令来完成当后端节点出现故障时，自动切换到下一个节点来提供访问。</p>
<h2 id="3-1-load-balance示例"><a href="#3-1-load-balance示例" class="headerlink" title="3.1 load-balance示例"></a>3.1 load-balance示例</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">upstream backend &#123;</div><div class="line">    ip_hash<span class="comment">;</span></div><div class="line">    server <span class="number">172.29</span><span class="meta">.88</span><span class="meta">.226</span>:<span class="number">8080</span> weight <span class="number">2</span><span class="comment">;</span></div><div class="line">    server <span class="number">172.29</span><span class="meta">.88</span><span class="meta">.226</span>:<span class="number">8080</span> weight=<span class="number">1</span> max_fails=<span class="number">2</span> fail_timeout=30s <span class="comment">;</span></div><div class="line">    server <span class="number">172.29</span><span class="meta">.88</span><span class="meta">.227</span>:<span class="number">8080</span> backup<span class="comment">;</span></div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://backend<span class="comment">;</span></div><div class="line">        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504<span class="comment">;</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>weight</code> ： 轮询权值也是可以用在ip_hash的，默认值为1</li>
<li><code>max_fails</code> ： 允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误。</li>
<li><code>fail_timeout</code> ： 有两层含义，一是在 30s 时间内最多容许 2 次失败；二是在经历了 2 次失败以后，30s时间内不分配请求到这台服务器。</li>
<li><code>backup</code> ： 预留的备份机器。当其他所有的非backup机器出现故障的时候，才会请求backup机器，因此这台机器的压力最轻。（为什么我的1.6.3版本里配置backup启动nginx时说<code>invalid parameter &quot;backup&quot;</code>？）</li>
<li><p><code>max_conns</code>： 限制同时连接到某台后端服务器的连接数，默认为0即无限制。因为<code>queue</code>指令是commercial，所以还是保持默认吧。</p>
</li>
<li><p><code>proxy_next_upstream</code> ： 这个指令属于 http_proxy 模块的，指定后端返回什么样的异常响应时，使用另一个realserver</p>
</li>
</ul>
<h2 id="3-2-nginx-upstream-check-module"><a href="#3-2-nginx-upstream-check-module" class="headerlink" title="3.2 nginx_upstream_check_module"></a>3.2 nginx_upstream_check_module</h2><p>nginx_upstream_check_module 是专门提供负载均衡器内节点的健康检查的外部模块，由淘宝的姚伟斌大神开发，通过它可以用来检测后端 realserver 的健康状态。如果后端 realserver 不可用，则后面的请求就不会转发到该节点上，并持续检查几点的状态。在淘宝自己的 tengine 上是自带了该模块。项目地址：<a href="https://github.com/yaoweibin/nginx_upstream_check_module" target="_blank" rel="external">https://github.com/yaoweibin/nginx_upstream_check_module</a> 。</p>
<p>下面的是一个带后端监控检查的 nginx.conf 配置：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">upstream backend &#123;</div><div class="line">    sticky;     # or simple round-robin</div><div class="line">    server <span class="number">172.29.88.226:8080</span> weight=<span class="number">2</span>;</div><div class="line">    server <span class="number">172.29.88.226:8081</span> weight=<span class="number">1</span> max_fails=<span class="number">2</span> fail_timeout=30s ;</div><div class="line">    server <span class="number">172.29.88.227:8080</span> weight=<span class="number">1</span> max_fails=<span class="number">2</span> fail_timeout=30s ;</div><div class="line">    server <span class="number">172.29.88.227:8081</span>;</div><div class="line">    </div><div class="line">    check interval=<span class="number">5000</span> rise=<span class="number">2</span> fall=<span class="number">3</span> timeout=<span class="number">1000</span> type=http;</div><div class="line">    check_http_send <span class="string">"<span class="keyword">HEAD</span> / HTTP/1.0\r\n\r\n"</span>;</div><div class="line">    check_http_expect_alive http_2xx http_3xx;</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://backend;</div><div class="line">    &#125;</div><div class="line">    location /status &#123;</div><div class="line">        check_status;</div><div class="line">        access_log   off;</div><div class="line">        allow <span class="number">172.29.73.23</span>;</div><div class="line">        deny all;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>上面配置的意思是，对name这个负载均衡条目中的所有节点，每个5秒检测一次，请求2次正常则标记 realserver状态为up，如果检测 3 次都失败，则标记 realserver的状态为down，超时时间为1秒。</p>
<p>check指令只能出现在upstream中：</p>
<ul>
<li><code>interval</code> ： 向后端发送的健康检查包的间隔。</li>
<li><code>fall</code> ： 如果连续失败次数达到fall_count，服务器就被认为是down。</li>
<li><code>rise</code> ： 如果连续成功次数达到rise_count，服务器就被认为是up。</li>
<li><code>timeout</code> ： 后端健康请求的超时时间。</li>
<li><code>default_down</code> ： 设定初始时服务器的状态，如果是true，就说明默认是down的，如果是false，就是up的。默认值是true，也就是一开始服务器认为是不可用，要等健康检查包达到一定成功次数以后才会被认为是健康的。</li>
<li><code>type</code>：健康检查包的类型，现在支持以下多种类型<ul>
<li><code>tcp</code>：简单的tcp连接，如果连接成功，就说明后端正常。</li>
<li><code>http</code>：发送HTTP请求，通过后端的回复包的状态来判断后端是否存活。</li>
<li><code>ajp</code>：向后端发送AJP协议的Cping包，通过接收Cpong包来判断后端是否存活。</li>
<li><code>ssl_hello</code>：发送一个初始的SSL hello包并接受服务器的SSL hello包。</li>
<li><code>mysql</code>: 向mysql服务器连接，通过接收服务器的greeting包来判断后端是否存活。</li>
<li><code>fastcgi</code>：发送一个fastcgi请求，通过接受解析fastcgi响应来判断后端是否存活</li>
</ul>
</li>
<li><code>port</code>: 指定后端服务器的检查端口。你可以指定不同于真实服务的后端服务器的端口，比如后端提供的是443端口的应用，你可以去检查80端口的状态来判断后端健康状况。默认是0，表示跟后端server提供真实服务的端口一样。该选项出现于Tengine-1.4.0。</li>
</ul>
<p>如果 type 为 http ，你还可以使用<code>check_http_send</code>来配置http监控检查包发送的请求内容，为了减少传输数据量，推荐采用 HEAD 方法。当采用长连接进行健康检查时，需在该指令中添加keep-alive请求头，如： <code>HEAD / HTTP/1.1\r\nConnection: keep-alive\r\n\r\n</code> 。当采用 GET 方法的情况下，请求uri的size不宜过大，确保可以在1个interval内传输完成，否则会被健康检查模块视为后端服务器或网络异常。</p>
<p><code>check_http_expect_alive</code>指定HTTP回复的成功状态，默认认为 2XX 和 3XX 的状态是健康的。</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/nginx-check-upstream.png" alt="nginx-check-upstream"></p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/nginx-sticky-cookie.png" alt="nginx-sticky-cookie.png"></p>
<h1 id="4-nginx的proxy缓存使用"><a href="#4-nginx的proxy缓存使用" class="headerlink" title="4. nginx的proxy缓存使用"></a>4. nginx的proxy缓存使用</h1><p>nginx的页面缓存功能与上面的负载均衡和健康检查是没有关系的，放在这里一是因为懒得再起一篇文章，二是再有load-balance的地方一般都会启用缓存的。</p>
<p>缓存也就是将js、css、image等静态文件从tomcat缓存到nginx指定的缓存目录下，既可以减轻tomcat负担，也可以加快访问速度，但这样缓存及时清理成为了一个问题，所以需要 <code>ngx_cache_purge</code> 这个模块来在过期时间未到之前，手动清理缓存。（这里有篇 <a href="http://quenlang.blog.51cto.com/4813803/1570671" target="_blank" rel="external">文章</a>，对比使用缓存、不使用缓存、使用动静分离三种情况下，高并发性能比较。使用代理缓存功能性能会高出很多倍）</p>
<figure class="highlight nsis"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">    ... // <span class="variable">$upstream_cache_status</span>记录缓存命中率</div><div class="line">    log_format  main  '<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] <span class="string">"<span class="variable">$request</span>"</span> '</div><div class="line">                      '<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> <span class="string">"<span class="variable">$http_referer</span>"</span> '</div><div class="line">                      '<span class="string">"<span class="variable">$http_user_agent</span>"</span> <span class="string">"<span class="variable">$http_x_forwarded_for</span>"</span>'</div><div class="line">                      '<span class="string">"<span class="variable">$upstream_cache_status</span>"</span>'<span class="comment">;</span></div><div class="line"></div><div class="line">    proxy_temp_path   /usr/local/nginx-<span class="number">1.6</span>/proxy_temp<span class="comment">;</span></div><div class="line">    proxy_cache_path /usr/local/nginx-<span class="number">1.6</span>/proxy_cache levels=<span class="number">1</span>:<span class="number">2</span> keys_zone=cache_one:<span class="number">100</span>m inactive=<span class="number">2</span>d max_size=<span class="number">2</span>g<span class="comment">;</span></div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        listen       <span class="number">80</span><span class="comment">; </span></div><div class="line">        server_name  ittest.example.com<span class="comment">;</span></div><div class="line">        root   html<span class="comment">;</span></div><div class="line">        index  index.html index.htm index.jsp<span class="comment">;</span></div><div class="line"></div><div class="line">        location ~ .*\.(gif|jpg|png|html|css|js|ico|swf|pdf)(.*) &#123;</div><div class="line">            proxy_pass  http://backend<span class="comment">;</span></div><div class="line">            proxy_redirect <span class="literal">off</span><span class="comment">;</span></div><div class="line">            proxy_set_header Host <span class="variable">$host</span><span class="comment">;</span></div><div class="line">            proxy_set_header   X-Real-IP   <span class="variable">$remote_addr</span><span class="comment">;</span></div><div class="line">            proxy_set_header   X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span><span class="comment">;</span></div><div class="line"></div><div class="line">            proxy_cache cache_one<span class="comment">;</span></div><div class="line">            add_header Nginx-Cache <span class="variable">$upstream_cache_status</span><span class="comment">;</span></div><div class="line">            proxy_cache_valid  <span class="number">200</span> <span class="number">304</span> <span class="number">301</span> <span class="number">302</span> <span class="number">8</span>h<span class="comment">;</span></div><div class="line">            proxy_cache_valid <span class="number">404</span> <span class="number">1</span>m<span class="comment">;</span></div><div class="line">            proxy_cache_valid  any <span class="number">2</span>d<span class="comment">;</span></div><div class="line">            proxy_cache_key <span class="variable">$host</span><span class="variable">$uri</span><span class="variable">$is_args</span><span class="variable">$args</span><span class="comment">;</span></div><div class="line">            expires <span class="number">30</span>d<span class="comment">;</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        location ~ /purge(/.*) &#123;</div><div class="line">            <span class="comment">#设置只允许指定的IP或IP段才可以清除URL缓存。</span></div><div class="line">            allow   <span class="number">127.0</span>.<span class="number">0.1</span><span class="comment">;</span></div><div class="line">            allow   <span class="number">172.29</span>.<span class="number">73.0</span>/<span class="number">24</span><span class="comment">;</span></div><div class="line">            deny    <span class="literal">all</span><span class="comment">;</span></div><div class="line">            proxy_cache_purge  cache_one <span class="variable">$host</span><span class="variable">$1</span><span class="variable">$is_args</span><span class="variable">$args</span><span class="comment">;</span></div><div class="line">            error_page <span class="number">405</span> =<span class="number">200</span> /purge<span class="variable">$1</span><span class="comment">;</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>说明</p>
<ul>
<li><code>proxy_temp_path</code> ： 缓存临时目录。后端的响应并不直接返回客户端，而是先写到一个临时文件中，然后被rename一下当做缓存放在 proxy_cache_path 。0.8.9版本以后允许temp和cache两个目录在不同文件系统上（分区），然而为了减少性能损失还是建议把它们设成一个文件系统上。</li>
<li><p><code>proxy_cache_path ...</code> ： 设置缓存目录，目录里的文件名是 cache_key 的MD5值。<br><code>levels=1:2 keys_zone=cache_one:50m</code>表示采用2级目录结构，Web缓存区名称为cache_one，内存缓存空间大小为100MB，这个缓冲zone可以被多次使用。文件系统上看到的缓存文件名类似于 /usr/local/nginx-1.6/proxy_cache/<strong>c</strong>/<strong>29</strong>/b7f54b2df7773722d382f4809d650<strong>29c</strong> 。<br><code>inactive=2d max_size=2g</code>表示2天没有被访问的内容自动清除，硬盘最大缓存空间为2GB，超过这个大学将清除最近最少使用的数据。</p>
</li>
<li><p><code>proxy_cache</code> ： 引用前面定义的缓存区 cache_one</p>
</li>
<li><code>proxy_cache_key</code> ： 定义cache_key</li>
<li><code>proxy_cache_valid</code> ： 为不同的响应状态码设置不同的缓存时间，比如200、302等正常结果可以缓存的时间长点，而404、500等缓存时间设置短一些，这个时间到了文件就会过期，而不论是否刚被访问过。</li>
<li><code>expires</code> ： 在响应头里设置<code>Expires:</code>或<code>Cache-Control:max-age</code>，返回给客户端的浏览器缓存失效时间。</li>
</ul>
<p>关于缓存的失效期限上面有三个选项：<code>X-Accel-Expires</code>、<code>inactive</code>、<code>proxy_cache_valid</code>、<code>expires</code>，它们之间是有优先级的，按上面的顺序如果在header里设置 X-Accel-Expires 则它的优先级最高，否则inactive优先级最高。更多资料请参考 <a href="http://www.ttlsa.com/nginx/nginx-cache-priority/" target="_blank" rel="external">nginx缓存优先级</a> 或<a href="http://fann.im/blog/2014/12/09/nginx-proxy_cache_valid/" target="_blank" rel="external">这里</a>。<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/nginx-cache-hit.png" alt="nginx-cache-hit.png"></p>
<h2 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h2><p>上述配置的<code>proxy_cache_purge</code>指令用于方便的清除缓存，但必须按照第三方的 ngx_cache_purge 模块才能使用，项目地址：<a href="https://github.com/FRiCKLE/ngx_cache_purge/" target="_blank" rel="external">https://github.com/FRiCKLE/ngx_cache_purge/</a> 。</p>
<p>使用 ngx_cache_purge 模块清除缓存有2种办法（直接删除缓存目录下的文件也算一种办法）：</p>
<ol>
<li><p>echo发送PURGE指令<br><code>proxy_cache_purge PURGE from 127.0.0.1</code>表示只允许在来自本地的清除指令</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># echo -e 'PURGE / HTTP/<span class="number">1.0</span>\r\n' | nc <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">80</span></div></pre></td></tr></table></figure>
</li>
<li><p>GET方式请求URL<br>即使用配置文件中的<code>location ~ /purge(/.*)</code>，浏览器访问<code>http://ittest.example.com/purge/your/may/path</code>来清除缓存，或者<code>echo -e &#39;GET /purge/ HTTP/1.0\r\n&#39; | nc ittest.example.com 80</code></p>
</li>
</ol>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/nginx-cache-purge.png" alt="nginx-cache-purge.png"></p>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html" target="_blank" rel="external">official documentation</a></li>
<li><a href="http://nolinux.blog.51cto.com/4824967/1594029" target="_blank" rel="external">Nginx实战系列之功能篇—-后端节点健康检查</a></li>
<li><a href="http://tengine.taobao.org/document_cn/http_upstream_check_cn.html" target="_blank" rel="external">Tengine nginx_upstream_check_module</a></li>
<li><a href="http://quenlang.blog.51cto.com/4813803/1570352" target="_blank" rel="external">nginx反向代理tomcat集群做负载均衡缓存</a></li>
<li><a href="http://www.ttlsa.com/nginx/nginx-high-performance-caching/" target="_blank" rel="external">web内容缓存 nginx高性能缓存详解</a></li>
<li><a href="http://www.ttlsa.com/nginx/nginx-modules-nginx-sticky-module/" target="_blank" rel="external">使用nginx sticky实现基于cookie的负载均衡</a></li>
</ul>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2015/05/22/nginx-cache-check/">http://seanlook.com/2015/05/22/nginx-cache-check/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nginx配置ssl加密（单双向认证、部分https）]]></title>
      <url>http://seanlook.com/2015/05/28/nginx-ssl/</url>
      <content type="html"><![CDATA[<p>nginx下配置ssl本来是很简单的，无论是去认证中心买SSL安全证书还是自签署证书，但最近公司OA的一个需求，得以有个机会实际折腾一番。一开始采用的是全站加密，所有访问http:80的请求强制转换（rewrite）到https，后来自动化测试结果说响应速度太慢，https比http慢慢30倍，心想怎么可能，鬼知道他们怎么测的。所以就试了一下部分页面https（不能只针对某类动态请求才加密）和双向认证。下面分节介绍。</p>
<p>默认nginx是没有安装ssl模块的，需要编译安装nginx时加入<code>--with-http_ssl_module</code>选项。</p>
<p>关于SSL/TLS原理请参考 <a href="http://segmentfault.com/a/1190000002554673" target="_blank" rel="external">这里</a>，如果你只是想测试或者自签发ssl证书，参考 <a href="http://seanlook.com/2015/01/18/openssl-self-sign-ca/">这里</a> 。</p>
<p><strong>提示</strong>：nignx到后端服务器由于一般是内网，所以不加密。</p>
<h1 id="1-全站ssl"><a href="#1-全站ssl" class="headerlink" title="1. 全站ssl"></a>1. 全站ssl</h1><p>全站做ssl是最常见的一个使用场景，默认端口443，而且一般是单向认证。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">        <span class="attribute">listen</span> <span class="number">443</span>;</div><div class="line">        <span class="attribute">server_name</span> example.com;</div><div class="line"></div><div class="line">        <span class="attribute">root</span> /apps/www;</div><div class="line">        <span class="attribute">index</span> index.html index.htm;</div><div class="line"></div><div class="line">        <span class="attribute">ssl</span> <span class="literal">on</span>;</div><div class="line">        <span class="attribute">ssl_certificate</span> ../SSL/ittest.pem;</div><div class="line">        <span class="attribute">ssl_certificate_key</span> ../SSL/ittest.key;</div><div class="line"></div><div class="line"><span class="comment">#        ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;</span></div><div class="line"><span class="comment">#        ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</span></div><div class="line"><span class="comment">#        ssl_prefer_server_ciphers on;</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果想把http的请求强制转到https的话：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">  <span class="attribute">listen</span>      <span class="number">80</span>;</div><div class="line">  <span class="attribute">server_name</span> example.me;</div><div class="line">  <span class="attribute">rewrite</span>    <span class="regexp"> ^</span>   https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>? <span class="literal">permanent</span>;</div><div class="line"></div><div class="line"><span class="comment">### 使用return的效率会更高 </span></div><div class="line"><span class="comment">#  return 301 https://$server_name$request_uri;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>ssl_certificate</code>证书其实是个公钥，它会被发送到连接服务器的每个客户端，<code>ssl_certificate_key</code>私钥是用来解密的，所以它的权限要得到保护但nginx的主进程能够读取。当然私钥和证书可以放在一个证书文件中，这种方式也只有公钥证书才发送到client。</p>
<a id="more"></a>
<p><code>ssl_protocols</code>指令用于启动特定的加密协议，nginx在1.1.13和1.0.12版本后默认是<code>ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2</code>，TLSv1.1与TLSv1.2要确保OpenSSL &gt;= 1.0.1 ，SSLv3 现在还有很多地方在用但有不少被攻击的漏洞。</p>
<p><code>ssl_ciphers</code>选择加密套件，不同的浏览器所支持的套件（和顺序）可能会不同。这里指定的是OpenSSL库能够识别的写法，你可以通过 <code>openssl -v cipher &#39;RC4:HIGH:!aNULL:!MD5&#39;</code>（后面是你所指定的套件加密算法） 来看所支持算法。</p>
<p><code>ssl_prefer_server_ciphers on</code>设置协商加密算法时，优先使用我们服务端的加密套件，而不是客户端浏览器的加密套件。</p>
<h2 id="https优化参数"><a href="#https优化参数" class="headerlink" title="https优化参数"></a>https优化参数</h2><ul>
<li><code>ssl_session_cache shared:SSL:10m;</code> : 设置ssl/tls会话缓存的类型和大小。如果设置了这个参数一般是<code>shared</code>，<code>buildin</code>可能会参数内存碎片，默认是<code>none</code>，和<code>off</code>差不多，停用缓存。如<code>shared:SSL:10m</code>表示我所有的nginx工作进程共享ssl会话缓存，官网介绍说1M可以存放约4000个sessions。 详细参考serverfault上的问答<a href="http://serverfault.com/questions/695258/when-shoud-i-use-ssl-session-cache-paramter-in-nginx-ssl-settings" target="_blank" rel="external">ssl_session_cache</a>。</li>
<li><code>ssl_session_timeout</code> ： 客户端可以重用会话缓存中ssl参数的过期时间，内网系统默认5分钟太短了，可以设成<code>30m</code>即30分钟甚至<code>4h</code>。</li>
</ul>
<p>设置较长的<code>keepalive_timeout</code>也可以减少请求ssl会话协商的开销，但同时得考虑线程的并发数了。</p>
<p><strong>提示</strong>：在生成证书请求csr文件时，如果输入了密码，nginx每次启动时都会提示输入这个密码，可以使用私钥来生成解密后的key来代替，效果是一样的，达到免密码重启的效果：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl rsa -<span class="keyword">in</span> ittest.<span class="built_in">key</span> -out ittest_unsecure.<span class="built_in">key</span></div></pre></td></tr></table></figure></p>
<h2 id="导入证书"><a href="#导入证书" class="headerlink" title="导入证书"></a>导入证书</h2><p>如果你是找一个知名的ssl证书颁发机构如VeriSign、Wosign、StartSSL签发的证书，浏览器已经内置并信任了这些根证书，如果你是自建C或获得二级CA授权，都需要将CA证书添加到浏览器，这样在访问站点时才不会显示不安全连接。各个浏览的添加方法不在本文探讨范围内。</p>
<h1 id="2-部分页面ssl"><a href="#2-部分页面ssl" class="headerlink" title="2. 部分页面ssl"></a>2. 部分页面ssl</h1><p>一个站点并不是所有信息都是非常机密的，如网上商城，一般的商品浏览可以不通过https，而用户登录以及支付的时候就强制经过https传输，这样用户访问速度和安全性都得到兼顾。</p>
<p>但是请注意不要理解错了，是对页面加密而不能针对某个请求加密，一个页面或地址栏的URL一般会发起许多请求的，包括css/png/js等静态文件和动态的java或php请求，所以要加密的内容包含页面内的其它资源文件，否则就会出现http与https内容混合的问题。在http页面混有https内容时，页面排版不会发生乱排现象；在https页面中包含以http方式引入的图片、js等资源时，浏览器为了安全起见会阻止加载。</p>
<p>下面是只对<code>example.com/account/login</code>登录页面进行加密的栗子：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">root</span> /apps/www;</div><div class="line"><span class="attribute">index</span> index.html index.htm;</div><div class="line"></div><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span>      <span class="number">80</span>;</div><div class="line">    <span class="attribute">server_name</span> example.com;</div><div class="line"></div><div class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /account/login &#123;</div><div class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^</span> https://<span class="variable">$server_name</span>:443<span class="variable">$request_uri</span>? <span class="literal">permanent</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">proxy_pass</span>  http://localhost:8080;</div><div class="line">  </div><div class="line">        <span class="comment">### Set headers ####</span></div><div class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">        <span class="attribute">proxy_redirect</span>     <span class="literal">off</span>; </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</div><div class="line">    <span class="attribute">server_name</span> example.com;</div><div class="line"></div><div class="line">    <span class="attribute">ssl</span> <span class="literal">on</span>;</div><div class="line">    <span class="attribute">ssl_certificate</span> ../SSL/ittest.pem;</div><div class="line">    <span class="attribute">ssl_certificate_key</span> ../SSL/ittest.key;</div><div class="line">    <span class="attribute">ssl_protocols</span> SSLv3 TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</div><div class="line">    <span class="attribute">ssl_ciphers</span> ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</div><div class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</div><div class="line"></div><div class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /account/login &#123;</div><div class="line">        <span class="attribute">proxy_pass</span>  http://localhost:8080;</div><div class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">        <span class="attribute">proxy_redirect</span>     <span class="literal">off</span>; </div><div class="line"></div><div class="line">        <span class="comment">### Most PHP, Python, Rails, Java App can use this header -&gt; https ###</span></div><div class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto  <span class="variable">$scheme</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">rewrite</span> <span class="regexp"> ^</span>  http://<span class="variable">$server_name</span><span class="variable">$request_uri</span>? <span class="literal">permanent</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关于rewrite与location的写法参考<a href="http://seanlook.com/2015/05/17/nginx-location-rewrite/">这里</a>。当浏览器访问<code>http://example.com/account/login.xx</code>时，被301到<code>https://example.com/account/login.xx</code>，在这个ssl加密的虚拟主机里也匹配到<code>/account/login</code>，反向代理到后端服务器，后面的传输过程是没有https的。这个login.xx页面下的其它资源也是经过https请求nginx的，登录成功后跳转到首页时的链接使用http，这个可能需要开发代码里面控制。</p>
<ul>
<li>上面配置中使用了<code>proxy_set_header X-Forwarded-Proto  $scheme</code>，在jsp页面使用<code>request.getScheme()</code>得到的是https 。如果不把请求的$scheme协议设置在header里，后端jsp页面会一直认为是http，将导致响应异常。</li>
<li>ssl配置块还有个与不加密的80端口类似的<code>location /</code>，它的作用是当用户直接通过https访问首页时，自动跳转到不加密端口，你可以去掉它允许用户这样做。</li>
</ul>
<h1 id="3-实现双向ssl认证"><a href="#3-实现双向ssl认证" class="headerlink" title="3. 实现双向ssl认证"></a>3. 实现双向ssl认证</h1><p>上面的两种配置都是去认证被访问的站点域名是否真实可信，并对传输过程加密，但服务器端并没有认证客户端是否可信。（实际上除非特别重要的场景，也没必要去认证访问者，除非像银行U盾这样的情况）</p>
<p>要实现双向认证HTTPS，nginx服务器上必须导入CA证书（根证书/中间级证书），因为现在是由服务器端通过CA去验证客户端的信息。还有必须在申请服务器证书的同时，用同样的方法生成客户证书。取得客户证书后，还要将它转换成浏览器识别的格式（大部分浏览器都认识PKCS12格式）：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl pkcs12 -export -clcerts -<span class="keyword">in</span> client<span class="selector-class">.crt</span> -inkey client<span class="selector-class">.key</span> -out client.p12</div></pre></td></tr></table></figure></p>
<p>然后把这个<code>client.p12</code>发给你相信的人，让它导入到浏览器中，访问站点建立连接的时候nginx会要求客户端把这个证书发给自己验证，如果没有这个证书就拒绝访问。</p>
<p>同时别忘了在 nginx.conf 里配置信任的CA：（如果是二级CA，请把根CA放在后面，形成CA证书链）<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">    proxy_ignore_client_abort <span class="keyword">on</span>；</div><div class="line"></div><div class="line">    ssl <span class="keyword">on</span>;</div><div class="line">    ...</div><div class="line">    ssl_verify_client <span class="keyword">on</span>;</div><div class="line">    ssl_verify_depth <span class="number">2</span>;</div><div class="line">    ssl_client_certificate ../SSL/ca-chain.pem;</div><div class="line"></div><div class="line"><span class="comment"># 在双向location下加入：</span></div><div class="line">    proxy_set_header X-SSL-Client-Cert $ssl_client_cert;</div></pre></td></tr></table></figure></p>
<h2 id="拓展：使用geo模块"><a href="#拓展：使用geo模块" class="headerlink" title="拓展：使用geo模块"></a>拓展：使用geo模块</h2><p>nginx默认安装了一个<code>ngx_http_geo_module</code>，这个geo模块可以根据客户端IP来创建变量的值，用在如来自172.29.73.0/24段的IP访问login时使用双向认证，其它段使用一般的单向认证。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">geo</span> <span class="variable">$duplexing_user</span> &#123;</div><div class="line">    <span class="attribute">default</span> <span class="number">1</span>;</div><div class="line">    <span class="attribute">include</span> geo.conf;  <span class="comment"># 注意在0.6.7版本以后，include是相对于nginx.conf所在目录而言的</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>语法 <code>geo [$address] $variable { … }</code>，位于http段，默认地址是<code>$reoute_addr</code>，假设 <code>conf/geo.conf</code> 内容：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/<span class="number">32</span>    LOCAL;  # 本地</div><div class="line"><span class="number">172.29</span><span class="number">.73</span><span class="number">.23</span>/<span class="number">32</span> SEAN;   # 某个IP</div><div class="line"><span class="number">172.29</span><span class="number">.73</span><span class="number">.0</span>/<span class="number">24</span>  <span class="number">1</span>;      # IP段，可以按国家或地域定义后面的不同的值</div></pre></td></tr></table></figure></p>
<p>需要配置另外一个虚拟主机server{ssl 445}，里面使用上面双向认证的写法，然后在80或443里使用变量<code>$duplexing_user</code>去判断，如果为1就rewrite到445，否则rewrite到443。具体用法可以参考<a href="http://www.ttlsa.com/nginx/using-nginx-geo-method/" target="_blank" rel="external">nginx geo使用方法</a>。</p>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://blog.csdn.net/na_tion/article/details/17334669" target="_blank" rel="external">Nginx部署部分https与部分http</a></li>
<li><a href="https://www.zhoufengjie.cn/?p=185" target="_blank" rel="external">Linux+Nginx/Apache/Tomcat新增SSL证书，开启https访问教程</a></li>
<li><a href="https://www.sinosky.org/ssl-and-spdy-enabled.html" target="_blank" rel="external">SSL &amp; SPDY 已全面部署</a></li>
<li><a href="http://han.guokai.blog.163.com/blog/static/136718271201211631456811/" target="_blank" rel="external">SSL证书与Https应用部署小结  </a></li>
<li><a href="http://nginx.org/en/docs/http/ngx_http_ssl_module.html" target="_blank" rel="external">ngx_http_ssl_module docs</a></li>
<li><a href="https://bjornjohansen.no/optimizing-https-nginx" target="_blank" rel="external">Optimizing HTTPS on Nginx</a></li>
<li><a href="http://zhangge.net/4861.html" target="_blank" rel="external">http://zhangge.net/4861.html</a></li>
<li><a href="http://blog.chinaunix.net/uid-192074-id-3135733.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-192074-id-3135733.html</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx+Keepalived实现站点高可用]]></title>
      <url>http://seanlook.com/2015/05/18/nginx-keepalived-ha/</url>
      <content type="html"><![CDATA[<p>公司内部 OA 系统要做线上高可用，避免单点故障，所以计划使用2台虚拟机通过 Keepalived 工具来实现 nginx 的高可用（High Avaiability），达到一台nginx入口服务器宕机，另一台备机自动接管服务的效果。（nginx做反向代理，实现后端应用服务器的负载均衡）快速搭建请直接跳至 第2节。</p>
<h1 id="1-Keepalived介绍"><a href="#1-Keepalived介绍" class="headerlink" title="1. Keepalived介绍"></a>1. Keepalived介绍</h1><p>Keepalived是一个基于VRRP协议来实现的服务高可用方案，可以利用其来避免IP单点故障，类似的工具还有heartbeat、corosync、pacemaker。但是它一般不会单独出现，而是与其它负载均衡技术（如lvs、haproxy、nginx）一起工作来达到集群的高可用。</p>
<h2 id="1-1-VRRP协议"><a href="#1-1-VRRP协议" class="headerlink" title="1.1 VRRP协议"></a>1.1 VRRP协议</h2><p>VRRP全称 Virtual Router Redundancy Protocol，即 <a href="http://en.wikipedia.org/wiki/VRRP" target="_blank" rel="external">虚拟路由冗余协议</a>。可以认为它是实现路由器高可用的容错协议，即将N台提供相同功能的路由器组成一个路由器组(Router Group)，这个组里面有一个master和多个backup，但在外界看来就像一台一样，构成虚拟路由器，拥有一个虚拟IP（vip，也就是路由器所在局域网内其他机器的默认路由），占有这个IP的master实际负责ARP相应和转发IP数据包，组中的其它路由器作为备份的角色处于待命状态。master会发组播消息，当backup在超时时间内收不到vrrp包时就认为master宕掉了，这时就需要根据VRRP的优先级来选举一个backup当master，保证路由器的高可用。</p>
<p>在VRRP协议实现里，虚拟路由器使用 00-00-5E-00-01-XX 作为<em>虚拟</em>MAC地址，XX就是唯一的 VRID （Virtual Router IDentifier），这个地址同一时间只有一个物理路由器占用。在虚拟路由器里面的物理路由器组里面通过多播IP地址 224.0.0.18 来定时发送通告消息。每个Router都有一个 1-255 之间的优先级别，级别最高的（highest priority）将成为主控（master）路由器。通过降低master的优先权可以让处于backup状态的路由器抢占（pro-empt）主路由器的状态，两个backup优先级相同的IP地址较大者为master，接管虚拟IP。</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/nginx-keepalived-vrrp.jpg" alt="nginx-keepalived-vrrp.jpg"></p>
<h3 id="与heartbeat-corosync等比较"><a href="#与heartbeat-corosync等比较" class="headerlink" title="与heartbeat/corosync等比较"></a>与heartbeat/corosync等比较</h3><p>直接摘抄自 <a href="http://www.linuxidc.com/Linux/2013-08/89227.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2013-08/89227.htm</a> ：</p>
<a id="more"></a>
<blockquote>
<p>Heartbeat、Corosync、Keepalived这三个集群组件我们到底选哪个好，首先我想说明的是，Heartbeat、Corosync是属于同一类型，Keepalived与Heartbeat、Corosync，根本不是同一类型的。Keepalived使用的vrrp协议方式，虚拟路由冗余协议 (Virtual Router Redundancy Protocol，简称VRRP)；Heartbeat或Corosync是基于主机或网络服务的高可用方式；简单的说就是，Keepalived的目的是模拟路由器的高可用，Heartbeat或Corosync的目的是实现Service的高可用。</p>
<p>所以一般Keepalived是实现前端高可用，常用的前端高可用的组合有，就是我们常见的LVS+Keepalived、Nginx+Keepalived、HAproxy+Keepalived。而Heartbeat或Corosync是实现服务的高可用，常见的组合有Heartbeat v3(Corosync)+Pacemaker+NFS+Httpd 实现Web服务器的高可用、Heartbeat v3(Corosync)+Pacemaker+NFS+MySQL 实现MySQL服务器的高可用。总结一下，Keepalived中实现轻量级的高可用，一般用于前端高可用，且不需要共享存储，一般常用于两个节点的高可用。而Heartbeat(或Corosync)一般用于服务的高可用，且需要共享存储，一般用于多节点的高可用。这个问题我们说明白了。</p>
<p>又有博友会问了，那heartbaet与corosync我们又应该选择哪个好啊，我想说我们一般用corosync，因为corosync的运行机制更优于heartbeat，就连从heartbeat分离出来的pacemaker都说在以后的开发当中更倾向于corosync，所以现在corosync+pacemaker是最佳组合。</p>
</blockquote>
<h2 id="1-2-Keepalived-nginx"><a href="#1-2-Keepalived-nginx" class="headerlink" title="1.2 Keepalived + nginx"></a>1.2 Keepalived + nginx</h2><p>keepalived可以认为是VRRP协议在Linux上的实现，主要有三个模块，分别是core、check和vrrp。core模块为keepalived的核心，负责主进程的启动、维护以及全局配置文件的加载和解析。check负责健康检查，包括常见的各种检查方式。vrrp模块是来实现VRRP协议的。本文基于如下的拓扑图：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">                   +-------------+</div><div class="line">                   |<span class="string">    uplink   </span>|</div><div class="line">                   +-------------+</div><div class="line">                          |<span class="string"></span></div><div class="line">                          +</div><div class="line">    MASTER            keep|<span class="string">alived         BACKUP</span></div><div class="line">172.29.88.224      172.29.88.222      172.29.88.225</div><div class="line">+-------------+    +-------------+    +-------------+</div><div class="line">|<span class="string">   nginx01   </span>|<span class="string">----</span>|<span class="string">  virtualIP  </span>|<span class="string">----</span>|<span class="string">   nginx02   </span>|</div><div class="line">+-------------+    +-------------+    +-------------+</div><div class="line">                          |<span class="string"></span></div><div class="line">       +------------------+------------------+</div><div class="line">       |<span class="string">                  </span>|<span class="string">                  </span>|</div><div class="line">+-------------+    +-------------+    +-------------+</div><div class="line">|<span class="string">    web01    </span>|<span class="string">    </span>|<span class="string">    web02    </span>|<span class="string">    </span>|<span class="string">    web03    </span>|</div><div class="line">+-------------+    +-------------+    +-------------+</div></pre></td></tr></table></figure>
<h1 id="2-keepalived实现nginx高可用"><a href="#2-keepalived实现nginx高可用" class="headerlink" title="2. keepalived实现nginx高可用"></a>2. keepalived实现nginx高可用</h1><h2 id="2-1安装"><a href="#2-1安装" class="headerlink" title="2.1安装"></a>2.1安装</h2><p>我的环境是CentOS 6.2 X86_64，直接通过yum方式安装最简单：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># yum install -y keepalived</div><div class="line"># keepalived -v</div><div class="line">Keepalived v1<span class="number">.2</span><span class="number">.13</span> (<span class="number">03</span>/<span class="number">19</span>,<span class="number">2015</span>)</div></pre></td></tr></table></figure></p>
<h2 id="2-2-nginx监控脚本"><a href="#2-2-nginx监控脚本" class="headerlink" title="2.2 nginx监控脚本"></a>2.2 nginx监控脚本</h2><p>该脚本检测ngnix的运行状态，并在nginx进程不存在时尝试重新启动ngnix，如果启动失败则停止keepalived，准备让其它机器接管。</p>
<p><code>/etc/keepalived/check_nginx.sh</code> ：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">counter=$(ps -C nginx --no-heading|wc <span class="_">-l</span>)</div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;counter&#125;</span>"</span> = <span class="string">"0"</span> ]; <span class="keyword">then</span></div><div class="line">    /usr/<span class="built_in">local</span>/bin/nginx</div><div class="line">    sleep 2</div><div class="line">    counter=$(ps -C nginx --no-heading|wc <span class="_">-l</span>)</div><div class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;counter&#125;</span>"</span> = <span class="string">"0"</span> ]; <span class="keyword">then</span></div><div class="line">        /etc/init.d/keepalived stop</div><div class="line">    <span class="keyword">fi</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure></p>
<p>你也可以根据自己的业务需求，总结出在什么情形下关闭keepalived，如 curl 主页连续2个3s没有响应则切换：<br>(感谢网友对这个脚本提出的几处语法错误，已修正)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># curl -IL http://localhost/member/login.htm</span></div><div class="line"><span class="comment"># curl --data "memberName=fengkan&amp;password=22" http://localhost/member/login.htm</span></div><div class="line"></div><div class="line">count=0</div><div class="line"><span class="keyword">for</span> (( k=0; k&lt;2; k++ ))</div><div class="line"><span class="keyword">do</span></div><div class="line">    check_code=$( curl --connect-timeout 3 <span class="_">-s</span>L -w <span class="string">"%&#123;http_code&#125;\\n"</span> http://localhost/login.html -o /dev/null )</div><div class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$check_code</span>"</span> != <span class="string">"200"</span> ]; <span class="keyword">then</span></div><div class="line">        count=$(expr <span class="variable">$count</span> + 1)</div><div class="line">        sleep 3</div><div class="line">        <span class="built_in">continue</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">        count=0</div><div class="line">        <span class="built_in">break</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$count</span>"</span> != <span class="string">"0"</span> ]; <span class="keyword">then</span></div><div class="line"><span class="comment">#   /etc/init.d/keepalived stop</span></div><div class="line">    <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure></p>
<h2 id="2-3-keepalived-conf"><a href="#2-3-keepalived-conf" class="headerlink" title="2.3 keepalived.conf"></a>2.3 keepalived.conf</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">! Configuration File for keepalived</div><div class="line">global_defs &#123;</div><div class="line">    notification_email &#123;</div><div class="line">        zhouxiao@example.com</div><div class="line">        itsection@example.com</div><div class="line">    &#125;</div><div class="line">    notification_email_from itsection@example.com</div><div class="line">    smtp_server mail.example.com</div><div class="line">    smtp_connect_timeout <span class="number">30</span></div><div class="line">    router_id LVS_DEVEL</div><div class="line">&#125;</div><div class="line"></div><div class="line">vrrp_script chk_nginx &#123;</div><div class="line">#    script <span class="string">"killall -0 nginx"</span></div><div class="line">    script <span class="string">"/etc/keepalived/check_nginx.sh"</span></div><div class="line">    interval <span class="number">2</span></div><div class="line">    weight <span class="number">-5</span></div><div class="line">    fall <span class="number">3</span>  </div><div class="line">    rise <span class="number">2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">vrrp_instance VI_1 &#123;</div><div class="line">    <span class="section">state</span> MASTER</div><div class="line">    interface eth0</div><div class="line">    mcast_src_ip <span class="number">172.29</span><span class="number">.88</span><span class="number">.224</span></div><div class="line">    virtual_router_id <span class="number">51</span></div><div class="line">    priority <span class="number">101</span></div><div class="line">    advert_int <span class="number">2</span></div><div class="line">    authentication &#123;</div><div class="line">        auth_type PASS</div><div class="line">        auth_pass <span class="number">1111</span></div><div class="line">    &#125;</div><div class="line">    virtual_ipaddress &#123;</div><div class="line">        <span class="number">172.29</span><span class="number">.88</span><span class="number">.222</span></div><div class="line">    &#125;</div><div class="line">    track_script &#123;</div><div class="line">       chk_nginx</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在其它备机BACKUP上，只需要改变 <code>state MASTER</code> -&gt; <code>state BACKUP</code>，<code>priority 101</code> -&gt; <code>priority 100</code>，<code>mcast_src_ip 172.29.88.224</code> -&gt; <code>mcast_src_ip 172.29.88.225</code>即可。</p>
<pre><code>service keepalived restart
</code></pre><h2 id="2-4-配置选项说明"><a href="#2-4-配置选项说明" class="headerlink" title="2.4 配置选项说明"></a>2.4 配置选项说明</h2><p><strong>global_defs</strong></p>
<ul>
<li><code>notification_email</code> ： keepalived在发生诸如切换操作时需要发送email通知地址，后面的 smtp_server 相比也都知道是邮件服务器地址。也可以通过其它方式报警，毕竟邮件不是实时通知的。</li>
<li><code>router_id</code> ： 机器标识，通常可设为hostname。故障发生时，邮件通知会用到</li>
</ul>
<p><strong>vrrp_instance</strong></p>
<ul>
<li><code>state</code> ： 指定instance(Initial)的初始状态，就是说在配置好后，这台服务器的初始状态就是这里指定的，但这里指定的不算，还是得要通过竞选通过优先级来确定。如果这里设置为MASTER，但如若他的优先级不及另外一台，那么这台在发送通告时，会发送自己的优先级，另外一台发现优先级不如自己的高，那么他会就回抢占为MASTER</li>
<li><code>interface</code> ： 实例绑定的网卡，因为在配置虚拟IP的时候必须是在已有的网卡上添加的</li>
<li><code>mcast_src_ip</code> ： 发送多播数据包时的源IP地址，这里注意了，这里实际上就是在那个地址上发送VRRP通告，这个非常重要，一定要选择稳定的网卡端口来发送，这里相当于heartbeat的心跳端口，如果没有设置那么就用默认的绑定的网卡的IP，也就是interface指定的IP地址</li>
<li><code>virtual_router_id</code> ： 这里设置VRID，这里非常重要，相同的VRID为一个组，他将决定多播的MAC地址</li>
<li><code>priority</code> ： 设置本节点的优先级，优先级高的为master</li>
<li><code>advert_int</code> ： 检查间隔，默认为1秒。这就是VRRP的定时器，MASTER每隔这样一个时间间隔，就会发送一个advertisement报文以通知组内其他路由器自己工作正常</li>
<li><code>authentication</code> ： 定义认证方式和密码，主从必须一样</li>
<li><code>virtual_ipaddress</code> ： 这里设置的就是VIP，也就是虚拟IP地址，他随着state的变化而增加删除，当state为master的时候就添加，当state为backup的时候删除，这里主要是有优先级来决定的，和state设置的值没有多大关系，这里可以设置多个IP地址</li>
<li><code>track_script</code> ： 引用VRRP脚本，即在 vrrp_script 部分指定的名字。定期运行它们来改变优先级，并最终引发主备切换。</li>
</ul>
<p><strong>vrrp_script</strong><br>告诉 keepalived 在什么情况下切换，所以尤为重要。可以有多个 vrrp_script</p>
<ul>
<li><code>script</code> ： 自己写的检测脚本。也可以是一行命令如<code>killall -0 nginx</code></li>
<li><code>interval 2</code> ： 每2s检测一次</li>
<li><code>weight -5</code> ： 检测失败（脚本返回非0）则优先级 -5</li>
<li><code>fall 2</code> ： 检测连续 2 次失败才算确定是真失败。会用weight减少优先级（1-255之间）</li>
<li><code>rise 1</code> ： 检测 1 次成功就算成功。但不修改优先级</li>
</ul>
<p>这里要提示一下script一般有2种写法：</p>
<ol>
<li>通过脚本执行的返回结果，改变优先级，keepalived继续发送通告消息，backup比较优先级再决定</li>
<li>脚本里面检测到异常，直接关闭keepalived进程，backup机器接收不到advertisement会抢占IP</li>
</ol>
<p>上文 vrrp_script 配置部分，<code>killall -0 nginx</code>属于第1种情况，<code>/etc/keepalived/check_nginx.sh</code>属于第2种情况（脚本中关闭keepalived）。个人更倾向于通过shell脚本判断，但有异常时exit 1，正常退出exit 0，然后keepalived根据动态调整的 vrrp_instance 优先级选举决定是否抢占VIP：</p>
<ul>
<li>如果脚本执行结果为0，并且weight配置的值大于0，则优先级相应的增加</li>
<li>如果脚本执行结果非0，并且weight配置的值小于0，则优先级相应的减少</li>
</ul>
<p>其他情况，原本配置的优先级不变，即配置文件中priority对应的值。</p>
<p>提示：</p>
<ol>
<li>优先级不会不断的提高或者降低</li>
<li>可以编写多个检测脚本并为每个检测脚本设置不同的weight（在配置中列出就行）</li>
<li>不管提高优先级还是降低优先级，最终优先级的范围是在[1,254]，不会出现优先级小于等于0或者优先级大于等于255的情况</li>
<li>在MASTER节点的 vrrp_instance 中 配置 <code>nopreempt</code> ，当它异常恢复后，即使它 prio 更高也不会抢占，这样可以避免正常情况下做无谓的切换</li>
</ol>
<p>以上可以做到利用脚本检测业务进程的状态，并动态调整优先级从而实现主备切换。</p>
<p><strong>配置结束</strong></p>
<p>在默认的keepalive.conf里面还有 virtual_server,real_server 这样的配置，我们这用不到，它是为lvs准备的。 <code>notify</code> 可以定义在切换成MASTER或BACKUP时执行的脚本，如有需求请自行google。</p>
<p>notify</p>
<h2 id="2-5-nginx配置"><a href="#2-5-nginx配置" class="headerlink" title="2.5 nginx配置"></a>2.5 nginx配置</h2><p>当然nginx没有什么可配置的，因为它与keepalived并没有联系。但记住，2台nginx服务器上的配置应该是完全一样的（rsync同步），这样才能做到对用户透明，nginx.conf 里面的 <code>server_name</code> 尽量使用域名来代替，然后dns解析这个域名到虚拟IP 172.29.88.222。</p>
<p>更多关于nginx内容配置请参考 <a href="http://seanlook.com/2015/05/17/nginx-install-and-config/">这里</a> 。</p>
<h1 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h1><p>根据上面的配置，初始化状态：172.29.88.224 (itoatest1,MASTER,101)，172.29.88.222（itoatest2,BACKUP,100），nginx和keepalived都启动，虚拟IP 172.29.88.222 在 itoatest1 上：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用ip命令配置的地址，ifconfig查看不了</span></div><div class="line">[root@itoatest1 nginx-<span class="number">1.6</span>]<span class="comment"># ip a|grep eth0</span></div><div class="line"><span class="number">2</span>: eth0: <span class="variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="number">1500</span> qdisc pfifo_fast <span class="keyword">state</span> UP qlen <span class="number">1000</span></div><div class="line">    <span class="keyword">inet</span> <span class="number">172.29</span>.<span class="number">88.224</span>/<span class="number">24</span> brd <span class="number">172.29</span>.<span class="number">88.255</span> scope <span class="keyword">global</span> eth0</div><div class="line">    <span class="keyword">inet</span> <span class="number">172.29</span>.<span class="number">88.222</span>/<span class="number">32</span> scope <span class="keyword">global</span> eth0</div></pre></td></tr></table></figure></p>
<p>浏览器访问 172.29.88.222 或域名，OK。</p>
<p>直接关闭 itoatest1 上的nginx：<code>/usr/local/nginx-1.6/sbin/nginx -s stop</code>：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost keepalived]<span class="comment"># ip a|grep eth0</span></div><div class="line"><span class="number">2</span>: eth0: <span class="variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="number">1500</span> qdisc pfifo_fast <span class="keyword">state</span> UP qlen <span class="number">1000</span></div><div class="line">    <span class="keyword">inet</span> <span class="number">172.29</span>.<span class="number">88.224</span>/<span class="number">24</span> brd <span class="number">172.29</span>.<span class="number">88.255</span> scope <span class="keyword">global</span> eth0</div></pre></td></tr></table></figure></p>
<p>vip消失，漂移到 itoatest2：</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/nginx-keepalived-vip.png" alt="nginx-keepalived-vip.png"></p>
<p>同时可以看到两台服务器上 <code>/var/log/messages</code>：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">## <span class="selector-tag">itoatest1</span></div><div class="line"><span class="selector-tag">Jun</span>  5 16<span class="selector-pseudo">:44</span><span class="selector-pseudo">:01</span> <span class="selector-tag">itoatest1</span> <span class="selector-tag">Keepalived_vrrp</span><span class="selector-attr">[44875]</span>: <span class="selector-tag">VRRP_Instance</span>(<span class="selector-tag">VI_1</span>) <span class="selector-tag">Sending</span> <span class="selector-tag">gratuitous</span> <span class="selector-tag">ARPs</span> <span class="selector-tag">on</span> <span class="selector-tag">eth0</span> <span class="selector-tag">for</span> 172<span class="selector-class">.29</span><span class="selector-class">.88</span><span class="selector-class">.222</span></div><div class="line"><span class="selector-tag">Jun</span>  5 16<span class="selector-pseudo">:44</span><span class="selector-pseudo">:06</span> <span class="selector-tag">itoatest1</span> <span class="selector-tag">Keepalived_vrrp</span><span class="selector-attr">[44875]</span>: <span class="selector-tag">VRRP_Instance</span>(<span class="selector-tag">VI_1</span>) <span class="selector-tag">Sending</span> <span class="selector-tag">gratuitous</span> <span class="selector-tag">ARPs</span> <span class="selector-tag">on</span> <span class="selector-tag">eth0</span> <span class="selector-tag">for</span> 172<span class="selector-class">.29</span><span class="selector-class">.88</span><span class="selector-class">.222</span></div><div class="line"><span class="selector-tag">Jun</span>  5 16<span class="selector-pseudo">:44</span><span class="selector-pseudo">:46</span> <span class="selector-tag">itoatest1</span> <span class="selector-tag">Keepalived_vrrp</span><span class="selector-attr">[44875]</span>: <span class="selector-tag">VRRP_Script</span>(<span class="selector-tag">chk_nginx</span>) <span class="selector-tag">failed</span></div><div class="line"><span class="selector-tag">Jun</span>  5 16<span class="selector-pseudo">:44</span><span class="selector-pseudo">:48</span> <span class="selector-tag">itoatest1</span> <span class="selector-tag">Keepalived_vrrp</span><span class="selector-attr">[44875]</span>: <span class="selector-tag">VRRP_Instance</span>(<span class="selector-tag">VI_1</span>) <span class="selector-tag">Received</span> <span class="selector-tag">higher</span> <span class="selector-tag">prio</span> <span class="selector-tag">advert</span></div><div class="line"><span class="selector-tag">Jun</span>  5 16<span class="selector-pseudo">:44</span><span class="selector-pseudo">:48</span> <span class="selector-tag">itoatest1</span> <span class="selector-tag">Keepalived_vrrp</span><span class="selector-attr">[44875]</span>: <span class="selector-tag">VRRP_Instance</span>(<span class="selector-tag">VI_1</span>) <span class="selector-tag">Entering</span> <span class="selector-tag">BACKUP</span> <span class="selector-tag">STATE</span></div><div class="line"><span class="selector-tag">Jun</span>  5 16<span class="selector-pseudo">:44</span><span class="selector-pseudo">:48</span> <span class="selector-tag">itoatest1</span> <span class="selector-tag">Keepalived_vrrp</span><span class="selector-attr">[44875]</span>: <span class="selector-tag">VRRP_Instance</span>(<span class="selector-tag">VI_1</span>) <span class="selector-tag">removing</span> <span class="selector-tag">protocol</span> <span class="selector-tag">VIPs</span>.</div><div class="line"><span class="selector-tag">Jun</span>  5 16<span class="selector-pseudo">:44</span><span class="selector-pseudo">:48</span> <span class="selector-tag">itoatest1</span> <span class="selector-tag">Keepalived_healthcheckers</span><span class="selector-attr">[44874]</span>: <span class="selector-tag">Netlink</span> <span class="selector-tag">reflector</span> <span class="selector-tag">reports</span> <span class="selector-tag">IP</span> 172<span class="selector-class">.29</span><span class="selector-class">.88</span><span class="selector-class">.222</span> <span class="selector-tag">removed</span></div><div class="line"></div><div class="line">## <span class="selector-tag">itoatest2</span></div><div class="line"><span class="selector-tag">Jun</span>  5 16<span class="selector-pseudo">:44</span><span class="selector-pseudo">:00</span> <span class="selector-tag">itoatest2</span> <span class="selector-tag">Keepalived_vrrp</span><span class="selector-attr">[35555]</span>: <span class="selector-tag">VRRP_Instance</span>(<span class="selector-tag">VI_1</span>) <span class="selector-tag">Transition</span> <span class="selector-tag">to</span> <span class="selector-tag">MASTER</span> <span class="selector-tag">STATE</span></div><div class="line"><span class="selector-tag">Jun</span>  5 16<span class="selector-pseudo">:44</span><span class="selector-pseudo">:00</span> <span class="selector-tag">itoatest2</span> <span class="selector-tag">Keepalived_vrrp</span><span class="selector-attr">[35555]</span>: <span class="selector-tag">VRRP_Instance</span>(<span class="selector-tag">VI_1</span>) <span class="selector-tag">Received</span> <span class="selector-tag">higher</span> <span class="selector-tag">prio</span> <span class="selector-tag">advert</span></div><div class="line"><span class="selector-tag">Jun</span>  5 16<span class="selector-pseudo">:44</span><span class="selector-pseudo">:00</span> <span class="selector-tag">itoatest2</span> <span class="selector-tag">Keepalived_vrrp</span><span class="selector-attr">[35555]</span>: <span class="selector-tag">VRRP_Instance</span>(<span class="selector-tag">VI_1</span>) <span class="selector-tag">Entering</span> <span class="selector-tag">BACKUP</span> <span class="selector-tag">STATE</span></div><div class="line"><span class="selector-tag">Jun</span>  5 16<span class="selector-pseudo">:44</span><span class="selector-pseudo">:48</span> <span class="selector-tag">itoatest2</span> <span class="selector-tag">Keepalived_vrrp</span><span class="selector-attr">[35555]</span>: <span class="selector-tag">VRRP_Instance</span>(<span class="selector-tag">VI_1</span>) <span class="selector-tag">forcing</span> <span class="selector-tag">a</span> <span class="selector-tag">new</span> <span class="selector-tag">MASTER</span> <span class="selector-tag">election</span></div><div class="line"><span class="selector-tag">Jun</span>  5 16<span class="selector-pseudo">:44</span><span class="selector-pseudo">:48</span> <span class="selector-tag">itoatest2</span> <span class="selector-tag">Keepalived_vrrp</span><span class="selector-attr">[35555]</span>: <span class="selector-tag">VRRP_Instance</span>(<span class="selector-tag">VI_1</span>) <span class="selector-tag">forcing</span> <span class="selector-tag">a</span> <span class="selector-tag">new</span> <span class="selector-tag">MASTER</span> <span class="selector-tag">election</span></div><div class="line"><span class="selector-tag">Jun</span>  5 16<span class="selector-pseudo">:44</span><span class="selector-pseudo">:49</span> <span class="selector-tag">itoatest2</span> <span class="selector-tag">Keepalived_vrrp</span><span class="selector-attr">[35555]</span>: <span class="selector-tag">VRRP_Instance</span>(<span class="selector-tag">VI_1</span>) <span class="selector-tag">Transition</span> <span class="selector-tag">to</span> <span class="selector-tag">MASTER</span> <span class="selector-tag">STATE</span></div><div class="line"><span class="selector-tag">Jun</span>  5 16<span class="selector-pseudo">:44</span><span class="selector-pseudo">:50</span> <span class="selector-tag">itoatest2</span> <span class="selector-tag">Keepalived_vrrp</span><span class="selector-attr">[35555]</span>: <span class="selector-tag">VRRP_Instance</span>(<span class="selector-tag">VI_1</span>) <span class="selector-tag">Entering</span> <span class="selector-tag">MASTER</span> <span class="selector-tag">STATE</span></div><div class="line"><span class="selector-tag">Jun</span>  5 16<span class="selector-pseudo">:44</span><span class="selector-pseudo">:50</span> <span class="selector-tag">itoatest2</span> <span class="selector-tag">Keepalived_vrrp</span><span class="selector-attr">[35555]</span>: <span class="selector-tag">VRRP_Instance</span>(<span class="selector-tag">VI_1</span>) <span class="selector-tag">setting</span> <span class="selector-tag">protocol</span> <span class="selector-tag">VIPs</span>.</div><div class="line"><span class="selector-tag">Jun</span>  5 16<span class="selector-pseudo">:44</span><span class="selector-pseudo">:50</span> <span class="selector-tag">itoatest2</span> <span class="selector-tag">Keepalived_vrrp</span><span class="selector-attr">[35555]</span>: <span class="selector-tag">VRRP_Instance</span>(<span class="selector-tag">VI_1</span>) <span class="selector-tag">Sending</span> <span class="selector-tag">gratuitous</span> <span class="selector-tag">ARPs</span> <span class="selector-tag">on</span> <span class="selector-tag">eth0</span> <span class="selector-tag">for</span> 172<span class="selector-class">.29</span><span class="selector-class">.88</span><span class="selector-class">.222</span></div><div class="line"><span class="selector-tag">Jun</span>  5 16<span class="selector-pseudo">:44</span><span class="selector-pseudo">:50</span> <span class="selector-tag">itoatest2</span> <span class="selector-tag">Keepalived_healthcheckers</span><span class="selector-attr">[35554]</span>: <span class="selector-tag">Netlink</span> <span class="selector-tag">reflector</span> <span class="selector-tag">reports</span> <span class="selector-tag">IP</span> 172<span class="selector-class">.29</span><span class="selector-class">.88</span><span class="selector-class">.222</span> <span class="selector-tag">added</span></div><div class="line"><span class="selector-tag">Jun</span>  5 16<span class="selector-pseudo">:44</span><span class="selector-pseudo">:55</span> <span class="selector-tag">itoatest2</span> <span class="selector-tag">Keepalived_vrrp</span><span class="selector-attr">[35555]</span>: <span class="selector-tag">VRRP_Instance</span>(<span class="selector-tag">VI_1</span>) <span class="selector-tag">Sending</span> <span class="selector-tag">gratuitous</span> <span class="selector-tag">ARPs</span> <span class="selector-tag">on</span> <span class="selector-tag">eth0</span> <span class="selector-tag">for</span> 172<span class="selector-class">.29</span><span class="selector-class">.88</span><span class="selector-class">.222</span></div></pre></td></tr></table></figure></p>
<p>你也可以通过在两台服务器上抓包来查看 优先级priority 的变化：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">## <span class="selector-tag">itoatest1</span> 上</div><div class="line">## 直接输出，或后加 <span class="selector-tag">-w</span> <span class="selector-tag">itoatest-kl</span><span class="selector-class">.cap</span>存入文件用<span class="selector-tag">wireshark</span>查看</div><div class="line"># <span class="selector-tag">tcpdump</span> <span class="selector-tag">-vvv</span> <span class="selector-tag">-n</span> <span class="selector-tag">-i</span> <span class="selector-tag">eth0</span> <span class="selector-tag">dst</span> 224<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.18</span> <span class="selector-tag">and</span> <span class="selector-tag">src</span> 172<span class="selector-class">.29</span><span class="selector-class">.88</span><span class="selector-class">.224</span></div></pre></td></tr></table></figure></p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/nginx-keepalived-prio.png" alt="nginx-keepalived-prio.png"></p>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://debugo.com/keepalived-nginx/" target="_blank" rel="external">使用Keepalived实现Nginx高可用性</a></li>
<li><a href="http://nginx.com/resources/admin-guide/nginx-ha-keepalived/" target="_blank" rel="external">High Availability Support Based on keepalived</a></li>
<li><a href="https://www.centos.bz/2012/02/nginx-keepalived-high-availability/" target="_blank" rel="external">nginx+keepalived实现双机热备的高可用</a></li>
<li><a href="http://atong.blog.51cto.com/2393905/1351709" target="_blank" rel="external">LVS原理详解及部署之五：LVS+keepalived实现负载均衡&amp;高可用</a></li>
<li><a href="http://xxrenzhe.blog.51cto.com/4036116/1405571" target="_blank" rel="external">Keepalived双主模型中vrrp_script中权重改变故障排查</a></li>
<li><a href="http://zhaoyuqiang.blog.51cto.com/6328846/1166840" target="_blank" rel="external">虚拟路由器冗余协议【原理篇】VRRP详解</a></li>
<li><a href="http://bbs.ywlm.net/thread-845-1-1.html" target="_blank" rel="external">Keepalived原理与实战精讲</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nginx配置location总结及rewrite规则写法]]></title>
      <url>http://seanlook.com/2015/05/17/nginx-location-rewrite/</url>
      <content type="html"><![CDATA[<h1 id="1-location正则写法"><a href="#1-location正则写法" class="headerlink" title="1. location正则写法"></a>1. location正则写法</h1><p>一个示例：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">location</span>  <span class="title">= / &#123;</span></div><div class="line">  # 精确匹配 / ，主机名后面不能带任何字符串</div><div class="line">  [ configuration A ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">location</span>  <span class="title">/ &#123;</span></div><div class="line">  # 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求</div><div class="line">  # 但是正则和最长字符串会优先匹配</div><div class="line">  [ configuration B ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">location</span> <span class="title">/documents</span>/ &#123;</div><div class="line">  <span class="comment"># 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索</span></div><div class="line">  <span class="comment"># 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span></div><div class="line">  [ configuration C ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">location</span> <span class="title">~ /documents</span>/Abc &#123;</div><div class="line">  <span class="comment"># 匹配任何以 /documents/Abc 开头的地址，匹配符合以后，还要继续往下搜索</span></div><div class="line">  <span class="comment"># 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span></div><div class="line">  [ configuration CC ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">location</span> <span class="title">^~ /images</span>/ &#123;</div><div class="line">  <span class="comment"># 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。</span></div><div class="line">  [ configuration D ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">location</span> <span class="title">~* \.(gif</span>|jpg|jpeg)$ &#123;</div><div class="line">  <span class="comment"># 匹配所有以 gif,jpg或jpeg 结尾的请求</span></div><div class="line">  <span class="comment"># 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则</span></div><div class="line">  [ configuration E ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">location</span> <span class="title">/images</span>/ &#123;</div><div class="line">  <span class="comment"># 字符匹配到 /images/，继续往下，会发现 ^~ 存在</span></div><div class="line">  [ configuration F ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">location</span> <span class="title">/images</span>/abc &#123;</div><div class="line">  <span class="comment"># 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在</span></div><div class="line">  <span class="comment"># F与G的放置顺序是没有关系的</span></div><div class="line">  [ configuration G ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">location</span> <span class="title">~ /images</span>/abc/ &#123;</div><div class="line">  <span class="comment"># 只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用</span></div><div class="line">    [ configuration H ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">location</span> <span class="title">~* /js</span>/.*/\.js</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>已<code>=</code>开头表示精确匹配<br>如 A 中只匹配根目录结尾的请求，后面不能带任何字符串。</li>
<li><code>^~</code> 开头表示uri以某个常规字符串开头，不是正则匹配</li>
<li>~ 开头表示区分大小写的正则匹配;</li>
<li>~* 开头表示不区分大小写的正则匹配</li>
<li>/ 通用匹配, 如果没有其它匹配,任何请求都会匹配到</li>
</ul>
<p>顺序 no优先级：<br>(location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location ~,~* 正则顺序) &gt; (location 部分起始路径) &gt; (/)</p>
<p>上面的匹配结果<br>按照上面的location写法，以下的匹配示例成立：</p>
<ul>
<li>/ -&gt; config A<br>精确完全匹配，即使/index.html也匹配不了</li>
<li>/downloads/download.html -&gt; config B<br>匹配B以后，往下没有任何匹配，采用B</li>
<li>/images/1.gif -&gt; configuration D<br>匹配到F，往下匹配到D，停止往下</li>
<li>/images/abc/def -&gt; config D<br>最长匹配到G，往下匹配D，停止往下<br>你可以看到 任何以/images/开头的都会匹配到D并停止，FG写在这里是没有任何意义的，H是永远轮不到的，这里只是为了说明匹配顺序</li>
<li>/documents/document.html -&gt; config C<br>匹配到C，往下没有任何匹配，采用C</li>
<li>/documents/1.jpg -&gt; configuration E<br>匹配到C，往下正则匹配到E</li>
<li>/documents/Abc.jpg -&gt; config CC<br>最长匹配到C，往下正则顺序匹配到CC，不会往下到E</li>
</ul>
<h2 id="实际使用建议"><a href="#实际使用建议" class="headerlink" title="实际使用建议"></a>实际使用建议</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">所以实际使用中，个人觉得至少有三个匹配规则定义，如下：</div><div class="line"><span class="comment">#直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。</span></div><div class="line"><span class="comment">#这里是直接转发给后端应用服务器了，也可以是一个静态首页</span></div><div class="line"><span class="comment"># 第一个必选规则</span></div><div class="line"><span class="keyword">location</span> <span class="title">= / &#123;</span></div><div class="line">    proxy_pass http://tomcat:<span class="number">8080</span>/index</div><div class="line">&#125;</div><div class="line"><span class="comment"># 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项</span></div><div class="line"><span class="comment"># 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用</span></div><div class="line"><span class="keyword">location</span> <span class="title">^~ /static</span>/ &#123;</div><div class="line">    root /webroot/static/;</div><div class="line">&#125;</div><div class="line"><span class="keyword">location</span> <span class="title">~* \.(gif</span>|jpg|jpeg|png|css|js|ico)$ &#123;</div><div class="line">    root /webroot/res/;</div><div class="line">&#125;</div><div class="line"><span class="comment">#第三个规则就是通用规则，用来转发动态请求到后端应用服务器</span></div><div class="line"><span class="comment">#非静态文件请求就默认是动态请求，自己根据实际把握</span></div><div class="line"><span class="comment">#毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了</span></div><div class="line"><span class="keyword">location</span> <span class="title">/ &#123;</span></div><div class="line">    proxy_pass http://tomcat:<span class="number">8080</span>/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://tengine.taobao.org/book/chapter_02.html" target="_blank" rel="external">http://tengine.taobao.org/book/chapter_02.html</a><br><a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html" target="_blank" rel="external">http://nginx.org/en/docs/http/ngx_http_rewrite_module.html</a></p>
<h1 id="2-Rewrite规则"><a href="#2-Rewrite规则" class="headerlink" title="2. Rewrite规则"></a>2. Rewrite规则</h1><p>rewrite功能就是，使用nginx提供的全局变量或自己设置的变量，结合正则表达式和标志位实现url重写以及重定向。rewrite只能放在server{},location{},if{}中，并且只能对域名后边的除去传递的参数外的字符串起作用，例如 <code>http://seanlook.com/a/we/index.php?id=1&amp;u=str</code> 只对/a/we/index.php重写。语法<code>rewrite regex replacement [flag];</code></p>
<p>如果相对域名或参数字符串起作用，可以使用全局变量匹配，也可以使用proxy_pass反向代理。</p>
<p>表明看rewrite和location功能有点像，都能实现跳转，主要区别在于rewrite是在同一域名内更改获取资源的路径，而location是对一类路径做控制访问或反向代理，可以proxy_pass到其他机器。很多情况下rewrite也会写在location里，它们的执行顺序是：</p>
<ol>
<li>执行server块的rewrite指令</li>
<li>执行location匹配</li>
<li>执行选定的location中的rewrite指令</li>
</ol>
<p>如果其中某步URI被重写，则重新循环执行1-3，直到找到真实存在的文件；循环超过10次，则返回500 Internal Server Error错误。</p>
<h2 id="2-1-flag标志位"><a href="#2-1-flag标志位" class="headerlink" title="2.1 flag标志位"></a>2.1 flag标志位</h2><ul>
<li><code>last</code> : 相当于Apache的[L]标记，表示完成rewrite</li>
<li><code>break</code> : 停止执行当前虚拟主机的后续rewrite指令集</li>
<li><code>redirect</code> : 返回302临时重定向，地址栏会显示跳转后的地址</li>
<li><code>permanent</code> : 返回301永久重定向，地址栏会显示跳转后的地址</li>
</ul>
<p>因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解：</p>
<ol>
<li>last一般写在server和if中，而break一般使用在location中</li>
<li>last不终止<em>重写后</em>的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配</li>
<li>break和last都能组织继续执行后面的rewrite指令</li>
</ol>
<h2 id="2-2-if指令与全局变量"><a href="#2-2-if指令与全局变量" class="headerlink" title="2.2 if指令与全局变量"></a>2.2 if指令与全局变量</h2><p><strong>if判断指令</strong><br>语法为<code>if(condition){...}</code>，对给定的条件condition进行判断。如果为真，大括号内的rewrite指令将被执行，if条件(conditon)可以是如下任何内容：</p>
<ul>
<li>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false</li>
<li>直接比较变量和内容时，使用<code>=</code>或<code>!=</code></li>
<li><code>~</code>正则表达式匹配，<code>~*</code>不区分大小写的匹配，<code>!~</code>区分大小写的不匹配</li>
</ul>
<p><code>-f</code>和<code>!-f</code>用来判断是否存在文件<br><code>-d</code>和<code>!-d</code>用来判断是否存在目录<br><code>-e</code>和<code>!-e</code>用来判断是否存在文件或目录<br><code>-x</code>和<code>!-x</code>用来判断文件是否可执行</p>
<p>例如：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ MSIE) &#123;</div><div class="line">    rewrite ^(.*)$ /msie/<span class="variable">$1</span> <span class="keyword">break</span>;</div><div class="line">&#125; <span class="comment">//如果UA包含"MSIE"，rewrite请求到/msid/目录下</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="variable">$http_cookie</span> ~* <span class="string">"id=([^;]+)(?:;|$)"</span>) &#123;</div><div class="line">    <span class="keyword">set</span> <span class="variable">$id</span> <span class="variable">$1</span>;</div><div class="line"> &#125; <span class="comment">//如果cookie匹配正则，设置变量$id等于正则引用部分</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="variable">$request_method</span> = <span class="keyword">POST</span>) &#123;</div><div class="line">    <span class="keyword">return</span> 405;</div><div class="line">&#125; <span class="comment">//如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="variable">$slow</span>) &#123;</div><div class="line">    limit_rate 10k;</div><div class="line">&#125; <span class="comment">//限速，$slow可以通过 set 指令设置</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (!-f <span class="variable">$request_filename</span>)&#123;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    proxy_pass  http:<span class="comment">//127.0.0.1;</span></div><div class="line">&#125; <span class="comment">//如果请求的文件名不存在，则反向代理到localhost 。这里的break也是停止rewrite检查</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="variable">$args</span> ~ <span class="keyword">post</span>=140)&#123;</div><div class="line">    rewrite ^ http:<span class="comment">//example.com/ permanent;</span></div><div class="line">&#125; <span class="comment">//如果query string中包含"post=140"，永久重定向到example.com</span></div><div class="line"></div><div class="line">location ~* \.(gif|jpg|png|swf|flv)$ &#123;</div><div class="line">    valid_referers none blocked www.jefflei.com www.leizhenfang.com;</div><div class="line">    <span class="keyword">if</span> (<span class="variable">$invalid_referer</span>) &#123;</div><div class="line">        <span class="keyword">return</span> 404;</div><div class="line">    &#125; <span class="comment">//防盗链</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>全局变量</strong><br>下面是可以用作if判断的全局变量</p>
<ul>
<li><code>$args</code> ： #这个变量等于请求行中的参数，同<code>$query_string</code></li>
<li><code>$content_length</code> ： 请求头中的Content-length字段。</li>
<li><code>$content_type</code> ： 请求头中的Content-Type字段。</li>
<li><code>$document_root</code> ： 当前请求在root指令中指定的值。</li>
<li><code>$host</code> ： 请求主机头字段，否则为服务器名称。</li>
<li><code>$http_user_agent</code> ： 客户端agent信息</li>
<li><code>$http_cookie</code> ： 客户端cookie信息</li>
<li><code>$limit_rate</code> ： 这个变量可以限制连接速率。</li>
<li><code>$request_method</code> ： 客户端请求的动作，通常为GET或POST。</li>
<li><code>$remote_addr</code> ： 客户端的IP地址。</li>
<li><code>$remote_port</code> ： 客户端的端口。</li>
<li><code>$remote_user</code> ： 已经经过Auth Basic Module验证的用户名。</li>
<li><code>$request_filename</code> ： 当前请求的文件路径，由root或alias指令与URI请求生成。</li>
<li><code>$scheme</code> ： HTTP方法（如http，https）。</li>
<li><code>$server_protocol</code> ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</li>
<li><code>$server_addr</code> ： 服务器地址，在完成一次系统调用后可以确定这个值。</li>
<li><code>$server_name</code> ： 服务器名称。</li>
<li><code>$server_port</code> ： 请求到达服务器的端口号。</li>
<li><code>$request_uri</code> ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</li>
<li><code>$uri</code> ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。</li>
<li><code>$document_uri</code> ： 与$uri相同。</li>
</ul>
<p>例：<code>http://localhost:88/test1/test2/test.php</code><br>$host：localhost<br>$server_port：88<br>$request_uri：<a href="http://localhost:88/test1/test2/test.php" target="_blank" rel="external">http://localhost:88/test1/test2/test.php</a><br>$document_uri：/test1/test2/test.php<br>$document_root：/var/www/html<br>$request_filename：/var/www/html/test1/test2/test.php</p>
<h2 id="2-3-常用正则"><a href="#2-3-常用正则" class="headerlink" title="2.3 常用正则"></a>2.3 常用正则</h2><ul>
<li><code>.</code> ： 匹配除换行符以外的任意字符</li>
<li><code>?</code> ： 重复0次或1次</li>
<li><code>+</code> ： 重复1次或更多次</li>
<li><code>*</code> ： 重复0次或更多次</li>
<li><code>\d</code> ：匹配数字</li>
<li><code>^</code> ： 匹配字符串的开始</li>
<li><code>$</code> ： 匹配字符串的介绍</li>
<li><code>{n}</code> ： 重复n次</li>
<li><code>{n,}</code> ： 重复n次或更多次</li>
<li><code>[c]</code> ： 匹配单个字符c</li>
<li><code>[a-z]</code> ： 匹配a-z小写字母的任意一个</li>
</ul>
<p>小括号<code>()</code>之间匹配的内容，可以在后面通过<code>$1</code>来引用，<code>$2</code>表示的是前面第二个<code>()</code>里的内容。正则里面容易让人困惑的是<code>\</code>转义特殊字符。</p>
<h2 id="2-4-rewrite实例"><a href="#2-4-rewrite实例" class="headerlink" title="2.4 rewrite实例"></a>2.4 rewrite实例</h2><p><em>例1</em>：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="section">http</span> &#123;</div><div class="line">    <span class="comment"># 定义image日志格式</span></div><div class="line">    <span class="attribute">log_format</span> imagelog <span class="string">'[<span class="variable">$time_local</span>] '</span> <span class="variable">$image_file</span> <span class="string">' '</span> <span class="variable">$image_type</span> <span class="string">' '</span> <span class="variable">$body_bytes_sent</span> <span class="string">' '</span> <span class="variable">$status</span>;</div><div class="line">    <span class="comment"># 开启重写日志</span></div><div class="line">    <span class="attribute">rewrite_log</span> <span class="literal">on</span>;</div><div class="line"></div><div class="line">    <span class="section">server</span> &#123;</div><div class="line">        <span class="attribute">root</span> /home/www;</div><div class="line"></div><div class="line">        <span class="attribute">location</span> / &#123;</div><div class="line">                <span class="comment"># 重写规则信息</span></div><div class="line">                <span class="attribute">error_log</span> logs/rewrite.log <span class="literal">notice</span>;</div><div class="line">                <span class="comment"># 注意这里要用‘’单引号引起来，避免&#123;&#125;</span></div><div class="line">                <span class="attribute">rewrite</span> <span class="string">'^/images/([a-z]&#123;2&#125;)/([a-z0-9]&#123;5&#125;)/(.*)\.(png|jpg|gif)$'</span> /data?file=<span class="variable">$3</span>.<span class="variable">$4</span>;</div><div class="line">                <span class="comment"># 注意不能在上面这条规则后面加上“last”参数，否则下面的set指令不会执行</span></div><div class="line">                <span class="attribute">set</span> <span class="variable">$image_file</span> <span class="variable">$3</span>;</div><div class="line">                <span class="attribute">set</span> <span class="variable">$image_type</span> <span class="variable">$4</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="attribute">location</span> /data &#123;</div><div class="line">                <span class="comment"># 指定针对图片的日志格式，来分析图片类型和大小</span></div><div class="line">                <span class="attribute">access_log</span> logs/images.log mian;</div><div class="line">                <span class="attribute">root</span> /data/images;</div><div class="line">                <span class="comment"># 应用前面定义的变量。判断首先文件在不在，不在再判断目录在不在，如果还不在就跳转到最后一个url里</span></div><div class="line">                <span class="attribute">try_files</span> /<span class="variable">$arg_file</span> /image404.html;</div><div class="line">        &#125;</div><div class="line">        <span class="attribute">location</span> = /image404.html &#123;</div><div class="line">                <span class="comment"># 图片不存在返回特定的信息</span></div><div class="line">                <span class="attribute">return</span> <span class="number">404</span> <span class="string">"image not found\n"</span>;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对形如<code>/images/ef/uh7b3/test.png</code>的请求，重写到<code>/data?file=test.png</code>，于是匹配到<code>location /data</code>，先看<code>/data/images/test.png</code>文件存不存在，如果存在则正常响应，如果不存在则重写tryfiles到新的image404 location，直接返回404状态码。</p>
<p><em>例2</em>：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rewrite ^<span class="regexp">/images/</span>(.*)<span class="number">_</span>(\d+)x(\d+)\.(png<span class="params">|jpg|</span>gif)$ /resizer/$1.$4?width=$2&amp;height=$3? last;</div></pre></td></tr></table></figure></p>
<p>对形如<code>/images/bla_500x400.jpg</code>的文件请求，重写到<code>/resizer/bla.jpg?width=500&amp;height=400</code>地址，并会继续尝试匹配location。</p>
<p><em>例3</em>：<br>见 <a href="http://seanlook.com/2015/05/28/nginx-ssl">ssl部分页面加密</a> 。</p>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://www.nginx.cn/216.html" target="_blank" rel="external">http://www.nginx.cn/216.html</a></li>
<li><a href="http://www.ttlsa.com/nginx/nginx-rewriting-rules-guide/" target="_blank" rel="external">http://www.ttlsa.com/nginx/nginx-rewriting-rules-guide/</a></li>
<li>老僧系列nginx之rewrite规则快速上手</li>
<li><a href="http://fantefei.blog.51cto.com/2229719/919431" target="_blank" rel="external">http://fantefei.blog.51cto.com/2229719/919431</a>   </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nginx服务器安装及配置文件详解]]></title>
      <url>http://seanlook.com/2015/05/17/nginx-install-and-config/</url>
      <content type="html"><![CDATA[<p>nginx在工作中已经有好几个环境在使用了，每次都是重新去网上扒博客，各种编译配置，今天自己也整理一份安装文档和nginx.conf配置选项的说明，留作以后参考。像负载均衡配置（包括健康检查）、缓存（包括清空缓存）配置实例，请参考 <a href="http://seanlook.com/2015/05/17/nginx-install-and-config">http://seanlook.com/2015/05/17/nginx-install-and-config</a> ，ssl加密请参考 <a href="http://seanlook.com/2015/05/28/nginx-ssl/">http://seanlook.com/2015/05/28/nginx-ssl/</a> 。</p>
<h1 id="1-安装nginx"><a href="#1-安装nginx" class="headerlink" title="1. 安装nginx"></a>1. 安装nginx</h1><h2 id="1-1-选择稳定版本"><a href="#1-1-选择稳定版本" class="headerlink" title="1.1 选择稳定版本"></a>1.1 选择稳定版本</h2><p>我们编译安装nginx来定制自己的模块，机器CentOS 6.2 x86_64。首先安装缺少的依赖包：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel</span></div></pre></td></tr></table></figure></p>
<p>这些软件包如果yum上没有的话可以下载源码来编译安装，只是要注意编译时默认安装的目录，确保下面在安装nginx时能够找到这些动态库文件（ldconfig）。</p>
<p>从 <a href="http://nginx.org/en/download.html" target="_blank" rel="external">http://nginx.org/en/download.html</a> 下载稳定版<code>nginx-1.6.3.tar.gz</code>到<code>/usr/local/src</code>下解压。</p>
<p>为了后续准备我们另外下载2个插件模块：<a href="https://github.com/yaoweibin/nginx_upstream_check_module/releases" target="_blank" rel="external">nginx_upstream_check_module-0.3.0.tar.gz</a> —— 检查后端服务器的状态，<a href="https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/downloads" target="_blank" rel="external">nginx-goodies-nginx-sticky-module-ng-bd312d586752.tar.gz</a>（建议在/usr/local/src下解压后将目录重命名为<code>nginx-sticky-module-ng-1.2.5</code>） —— 后端做负载均衡解决session sticky问题（与upstream_check模块结合使用需要另外打补丁，请参考<a href="http://seanlook.com/2015/06/02/nginx-cache-check/">nginx负载均衡配置实战</a>）。</p>
<p>请注意插件与nginx的版本兼容问题，一般插件越新越好，nginx不用追新，稳定第一。nginx-1.4.7，nginx-sticky-module-1.1，nginx_upstream_check_module-0.2.0，这个搭配也没问题。sticky-1.1与nginx-1.6版本由于更新没跟上编译出错。（可以直接使用Tengine，默认就包括了这些模块）</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@cachets nginx-<span class="number">1.6</span>.<span class="number">3</span>]<span class="comment"># pwd</span></div><div class="line">/usr/local/src/nginx-<span class="number">1.6</span>.<span class="number">3</span></div><div class="line">[root@cachets nginx-<span class="number">1.6</span>.<span class="number">3</span>]<span class="comment"># ./configure --prefix=/usr/local/nginx-1.6 --with-pcre \</span></div><div class="line">&gt; --<span class="keyword">with</span>-http_stub_status_module --<span class="keyword">with</span>-http_ssl_module <span class="string">\</span></div><div class="line">&gt; --<span class="keyword">with</span>-http_gzip_static_module --<span class="keyword">with</span>-http_realip_module <span class="string">\</span></div><div class="line">&gt; --add-<span class="built_in">module</span>=../nginx_upstream_check_module-<span class="number">0.3</span>.<span class="number">0</span></div><div class="line"></div><div class="line">[root@cachets nginx-<span class="number">1.6</span>.<span class="number">3</span>]<span class="comment"># make &amp;&amp; make install</span></div></pre></td></tr></table></figure>
<h2 id="1-2-常用编译选项说明"><a href="#1-2-常用编译选项说明" class="headerlink" title="1.2 常用编译选项说明"></a>1.2 常用编译选项说明</h2><p>nginx大部分常用模块，编译时<code>./configure --help</code>以<code>--without</code>开头的都默认安装。</p>
<ul>
<li><code>--prefix=PATH</code> ： 指定nginx的安装目录。默认 <code>/usr/local/nginx</code></li>
<li><code>--conf-path=PATH</code> ： 设置nginx.conf配置文件的路径。nginx允许使用不同的配置文件启动，通过命令行中的-c选项。默认为<em>prefix/conf/nginx.conf</em></li>
<li><code>--user=name</code>： 设置nginx工作进程的用户。安装完成后，可以随时在nginx.conf配置文件更改user指令。默认的用户名是nobody。<code>--group=name</code>类似</li>
<li><code>--with-pcre</code> ： 设置PCRE库的源码路径，如果已通过yum方式安装，使用<code>--with-pcre</code>自动找到库文件。使用<code>--with-pcre=PATH</code>时，需要从PCRE网站下载pcre库的源码（版本4.4 - 8.30）并解压，剩下的就交给Nginx的<code>./configure</code>和<code>make</code>来完成。perl正则表达式使用在<code>location</code>指令和 <code>ngx_http_rewrite_module</code>模块中。</li>
<li><code>--with-zlib=PATH</code> ： 指定 zlib（版本1.1.3 - 1.2.5）的源码解压目录。在默认就启用的网络传输压缩模块<code>ngx_http_gzip_module</code>时需要使用zlib 。</li>
<li><code>--with-http_ssl_module</code> ： 使用https协议模块。默认情况下，该模块没有被构建。前提是openssl与openssl-devel已安装</li>
<li><code>--with-http_stub_status_module</code> ： 用来监控 Nginx 的当前状态</li>
<li><code>--with-http_realip_module</code> ： 通过这个模块允许我们改变客户端请求头中客户端IP地址值(例如X-Real-IP 或 X-Forwarded-For)，意义在于能够使得后台服务器记录原始客户端的IP地址</li>
<li><code>--add-module=PATH</code> ： 添加第三方外部模块，如nginx-sticky-module-ng或缓存模块。每次添加新的模块都要重新编译（Tengine可以在新加入module时无需重新编译）</li>
</ul>
<a id="more"></a>
<p><strong>再提供一种编译方案</strong>：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">./configure <span class="string">\</span></div><div class="line">&gt; --prefix=/usr <span class="string">\</span></div><div class="line">&gt; --sbin-path=/usr/sbin/nginx <span class="string">\</span></div><div class="line">&gt; --conf-path=/etc/nginx/nginx.conf <span class="string">\</span></div><div class="line">&gt; --error-log-path=/<span class="keyword">var</span>/log/nginx/error.log <span class="string">\</span></div><div class="line">&gt; --http-log-path=/<span class="keyword">var</span>/log/nginx/access.log <span class="string">\</span></div><div class="line">&gt; --pid-path=/<span class="keyword">var</span>/run/nginx/nginx.pid  <span class="string">\</span></div><div class="line">&gt; --lock-path=/<span class="keyword">var</span>/lock/nginx.lock <span class="string">\</span>   </div><div class="line">&gt; --user=nginx <span class="string">\</span></div><div class="line">&gt; --group=nginx <span class="string">\</span></div><div class="line">&gt; --<span class="keyword">with</span>-http_ssl_module <span class="string">\</span></div><div class="line">&gt; --<span class="keyword">with</span>-http_stub_status_module <span class="string">\</span></div><div class="line">&gt; --<span class="keyword">with</span>-http_gzip_static_module <span class="string">\</span></div><div class="line">&gt; --http-client-body-temp-path=<span class="regexp">/var/tmp/nginx/client/</span> <span class="string">\</span></div><div class="line">&gt; --http-proxy-temp-path=<span class="regexp">/var/tmp/nginx/proxy/</span> <span class="string">\</span></div><div class="line">&gt; --http-fastcgi-temp-path=<span class="regexp">/var/tmp/nginx/fcgi/</span> <span class="string">\</span></div><div class="line">&gt; --http-uwsgi-temp-path=/<span class="keyword">var</span>/tmp/nginx/uwsgi <span class="string">\</span></div><div class="line">&gt; --<span class="keyword">with</span>-pcre=../pcre-<span class="number">7.8</span></div><div class="line">&gt; --<span class="keyword">with</span>-zlib=../zlib-<span class="number">1.2</span>.<span class="number">3</span></div></pre></td></tr></table></figure></p>
<h2 id="1-3-启动关闭nginx"><a href="#1-3-启动关闭nginx" class="headerlink" title="1.3 启动关闭nginx"></a>1.3 启动关闭nginx</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">## 检查配置文件是否正确</span></div><div class="line"><span class="meta"># /usr/local/nginx-1.6/sbin/nginx -t </span></div><div class="line"><span class="meta"># ./sbin/nginx -V     # 可以看到编译选项</span></div><div class="line"></div><div class="line"><span class="meta">## 启动、关闭</span></div><div class="line"><span class="meta"># ./sbin/nginx        # 默认配置文件 conf/nginx.conf，-c 指定</span></div><div class="line"><span class="meta"># ./sbin/nginx -s stop</span></div><div class="line">或 pkill nginx</div><div class="line"></div><div class="line"><span class="meta">## 重启，不会改变启动时指定的配置文件</span></div><div class="line"><span class="meta"># ./sbin/nginx -s reload</span></div><div class="line">或 kill -HUP `cat /usr/local/nginx<span class="number">-1.6</span>/logs/nginx.pid`</div></pre></td></tr></table></figure>
<p>当然也可以将 nginx 作为系统服务管理，下载 <a href="http://sean-images.qiniudn.com/nginx" target="_blank" rel="external">nginx</a> 到<code>/etc/init.d/</code>，修改里面的路径然后赋予可执行权限。<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># service nginx &#123;start|<span class="type">stop</span>|<span class="type">status</span>|<span class="type">restart</span>|<span class="type">reload</span>|<span class="type">configtest</span>&#125;</div></pre></td></tr></table></figure></p>
<h2 id="1-4-yum安装"><a href="#1-4-yum安装" class="headerlink" title="1.4 yum安装"></a>1.4 yum安装</h2><p>—- 2015-05-22更新<br>yum安装rpm包会比编译安装简单很多，默认会安装许多模块，但缺点是如果你想以后安装第三方模块那就没办法了。<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vi /etc/yum.repo.d/nginx.repo </span></div><div class="line"><span class="section">[nginx]</span> </div><div class="line"><span class="attr">name</span>=nginx repo </div><div class="line"><span class="attr">baseurl</span>=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/ </div><div class="line"><span class="attr">gpgcheck</span>=<span class="number">0</span> </div><div class="line"><span class="attr">enabled</span>=<span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>剩下的就<code>yum install nginx</code>搞定，也可以<code>yum install nginx-1.6.3</code>安装指定版本（前提是你去packages里看到有对应的版本，默认是最新版稳定版）。</p>
<h1 id="2-nginx-conf配置文件"><a href="#2-nginx-conf配置文件" class="headerlink" title="2. nginx.conf配置文件"></a>2. nginx.conf配置文件</h1><p>Nginx配置文件主要分成四部分：main（全局设置）、server（主机设置）、upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）和 location（URL匹配特定位置后的设置），每部分包含若干个指令。main部分设置的指令将影响其它所有部分的设置；server部分的指令主要用于指定虚拟主机域名、IP和端口；upstream的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；location部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。他们之间的关系式：server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。</p>
<p>当前nginx支持的几个指令上下文：</p>
<h2 id="2-1-通用"><a href="#2-1-通用" class="headerlink" title="2.1 通用"></a>2.1 通用</h2><p>下面的<code>nginx.conf</code>简单的实现nginx在前端做反向代理服务器的例子，处理js、png等静态文件，jsp等动态请求转发到其它服务器tomcat：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">user</span>  www www;</div><div class="line"><span class="attribute">worker_processes</span>  <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="attribute">error_log</span>  logs/error.log;</div><div class="line"><span class="comment">#error_log  logs/error.log  notice;</span></div><div class="line"><span class="comment">#error_log  logs/error.log  info;</span></div><div class="line"></div><div class="line"><span class="attribute">pid</span>        logs/nginx.pid;</div><div class="line"></div><div class="line"></div><div class="line"><span class="section">events</span> &#123;</div><div class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;</div><div class="line">    <span class="attribute">worker_connections</span>  <span class="number">2048</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="section">http</span> &#123;</div><div class="line">    <span class="attribute">include</span>       mime.types;</div><div class="line">    <span class="attribute">default_type</span>  application/octet-stream;</div><div class="line"></div><div class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></div><div class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></div><div class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></div><div class="line"></div><div class="line">    <span class="comment">#access_log  logs/access.log  main;</span></div><div class="line"></div><div class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</div><div class="line">    <span class="comment"># tcp_nopush     on;</span></div><div class="line"></div><div class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</div><div class="line"></div><div class="line">  <span class="comment"># gzip压缩功能设置</span></div><div class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</div><div class="line">    <span class="attribute">gzip_min_length</span> <span class="number">1k</span>;</div><div class="line">    <span class="attribute">gzip_buffers</span>    <span class="number">4</span> <span class="number">16k</span>;</div><div class="line">    <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">0</span>;</div><div class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">6</span>;</div><div class="line">    <span class="attribute">gzip_types</span> text/html text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;</div><div class="line">    <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</div><div class="line">  </div><div class="line">  <span class="comment"># http_proxy 设置</span></div><div class="line">    <span class="attribute">client_max_body_size</span>   <span class="number">10m</span>;</div><div class="line">    <span class="attribute">client_body_buffer_size</span>   <span class="number">128k</span>;</div><div class="line">    <span class="attribute">proxy_connect_timeout</span>   <span class="number">75</span>;</div><div class="line">    <span class="attribute">proxy_send_timeout</span>   <span class="number">75</span>;</div><div class="line">    <span class="attribute">proxy_read_timeout</span>   <span class="number">75</span>;</div><div class="line">    <span class="attribute">proxy_buffer_size</span>   <span class="number">4k</span>;</div><div class="line">    <span class="attribute">proxy_buffers</span>   <span class="number">4</span> <span class="number">32k</span>;</div><div class="line">    <span class="attribute">proxy_busy_buffers_size</span>   <span class="number">64k</span>;</div><div class="line">    <span class="attribute">proxy_temp_file_write_size</span>  <span class="number">64k</span>;</div><div class="line">    <span class="attribute">proxy_temp_path</span>   /usr/local/nginx/proxy_temp <span class="number">1</span> <span class="number">2</span>;</div><div class="line"></div><div class="line">  <span class="comment"># 设定负载均衡后台服务器列表 </span></div><div class="line">    <span class="attribute">upstream</span>  backend  &#123; </div><div class="line">              <span class="comment">#ip_hash; </span></div><div class="line">              <span class="attribute">server</span>   <span class="number">192.168.10.100:8080</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">30s</span> ;  </div><div class="line">              <span class="attribute">server</span>   <span class="number">192.168.10.101:8080</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">30s</span> ;  </div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="comment"># 很重要的虚拟主机配置</span></div><div class="line">    <span class="section">server</span> &#123;</div><div class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</div><div class="line">        <span class="attribute">server_name</span>  itoatest.example.com;</div><div class="line">        <span class="attribute">root</span>   /apps/oaapp;</div><div class="line"></div><div class="line">        <span class="attribute">charset</span> utf-<span class="number">8</span>;</div><div class="line">        <span class="attribute">access_log</span>  logs/host.access.log  main;</div><div class="line"></div><div class="line">        <span class="comment">#对 / 所有做负载均衡+反向代理</span></div><div class="line">        <span class="attribute">location</span> / &#123;</div><div class="line">            <span class="attribute">root</span>   /apps/oaapp;</div><div class="line">            <span class="attribute">index</span>  index.jsp index.html index.htm;</div><div class="line"></div><div class="line">            <span class="attribute">proxy_pass</span>        http://backend;  </div><div class="line">            <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</div><div class="line">            <span class="comment"># 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></div><div class="line">            <span class="attribute">proxy_set_header</span>  Host  <span class="variable">$host</span>;</div><div class="line">            <span class="attribute">proxy_set_header</span>  X-Real-IP  <span class="variable">$remote_addr</span>;  </div><div class="line">            <span class="attribute">proxy_set_header</span>  X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">            <span class="attribute">proxy_next_upstream</span> <span class="literal">error</span> timeout invalid_header http_500 http_502 http_503 http_504;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">#静态文件，nginx自己处理，不去backend请求tomcat</span></div><div class="line">        <span class="attribute">location</span>  <span class="regexp">~* /download/</span> &#123;  </div><div class="line">            <span class="attribute">root</span> /apps/oa/fs;  </div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="attribute">location</span> <span class="regexp">~ .*\.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)$</span>   </div><div class="line">        &#123;   </div><div class="line">            <span class="attribute">root</span> /apps/oaapp;   </div><div class="line">            <span class="attribute">expires</span>      <span class="number">7d</span>; </div><div class="line">        &#125;</div><div class="line">       	<span class="attribute">location</span> /nginx_status &#123;</div><div class="line">            <span class="attribute">stub_status</span> <span class="literal">on</span>;</div><div class="line">            <span class="attribute">access_log</span> <span class="literal">off</span>;</div><div class="line">            <span class="attribute">allow</span> <span class="number">192.168.10.0</span>/<span class="number">24</span>;</div><div class="line">            <span class="attribute">deny</span> all;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="attribute">location</span> <span class="regexp">~ ^/(WEB-INF)/</span> &#123;   </div><div class="line">            <span class="attribute">deny</span> all;   </div><div class="line">        &#125;</div><div class="line">        <span class="comment">#error_page  404              /404.html;</span></div><div class="line"></div><div class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></div><div class="line">        <span class="comment">#</span></div><div class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</div><div class="line">        <span class="attribute">location</span> = /50x.html &#123;</div><div class="line">            <span class="attribute">root</span>   html;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="comment">## 其它虚拟主机，server 指令开始</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="2-2-常用指令说明"><a href="#2-2-常用指令说明" class="headerlink" title="2.2 常用指令说明"></a>2.2 常用指令说明</h2><h3 id="2-2-1-main全局配置"><a href="#2-2-1-main全局配置" class="headerlink" title="2.2.1 main全局配置"></a>2.2.1 main全局配置</h3><p>nginx在运行时与具体业务功能（比如http服务或者email服务代理）无关的一些参数，比如工作进程数，运行的身份等。</p>
<ul>
<li><p><code>woker_processes 2</code><br>在配置文件的顶级<em>main</em>部分，worker角色的工作进程的个数，master进程是接收并分配请求给worker处理。这个数值简单一点可以设置为cpu的核数<code>grep ^processor /proc/cpuinfo | wc -l</code>，也是 auto 值，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。</p>
</li>
<li><p><code>worker_cpu_affinity</code><br>也是写在<em>main</em>部分。在高并发情况下，通过设置cpu粘性来降低由于多CPU核切换造成的寄存器等现场重建带来的性能损耗。如<code>worker_cpu_affinity 0001 0010 0100 1000;</code> （四核）。</p>
</li>
<li><p><code>worker_connections 2048</code><br>写在<em>events</em>部分。每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。nginx作为反向代理服务器，计算公式 <code>最大连接数 = worker_processes * worker_connections/4</code>，所以这里客户端最大连接数是1024，这个可以增到到8192都没关系，看情况而定，但不能超过后面的<code>worker_rlimit_nofile</code>。当nginx作为http服务器时，计算公式里面是除以2。</p>
</li>
<li><p><code>worker_rlimit_nofile 10240</code><br>写在<em>main</em>部分。默认是没有设置，可以限制为操作系统最大的限制65535。</p>
</li>
<li><p><code>use epoll</code><br>写在<code>events</code>部分。在Linux操作系统下，nginx默认使用epoll事件模型，得益于此，nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。在操作系统不支持这些高效模型时才使用select。</p>
</li>
</ul>
<h3 id="2-2-2-http服务器"><a href="#2-2-2-http服务器" class="headerlink" title="2.2.2 http服务器"></a>2.2.2 http服务器</h3><p>与提供http服务相关的一些配置参数。例如：是否使用keepalive啊，是否使用gzip进行压缩等。</p>
<ul>
<li><p><code>sendfile on</code><br>开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，减少用户空间到内核空间的上下文切换。对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。</p>
</li>
<li><p><code>keepalive_timeout 65</code> : 长连接超时时间，单位是秒，这个参数很敏感，涉及浏览器的种类、后端服务器的超时设置、操作系统的设置，可以另外起一片文章了。长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，65s内没上传完成会导致失败。如果设置时间过长，用户又多，长时间保持连接会占用大量资源。</p>
</li>
<li><p><code>send_timeout</code> : 用于指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接。</p>
</li>
<li><p><code>client_max_body_size 10m</code><br>允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值</p>
</li>
<li><code>client_body_buffer_size 128k</code><br>缓冲区代理缓冲用户端请求的最大字节数</li>
</ul>
<p><strong>模块http_proxy：</strong><br>这个模块实现的是nginx作为反向代理服务器的功能，包括缓存功能（另见<a href="http://seanlook.com/2015/06/02/nginx-cache-check/">文章</a>）</p>
<ul>
<li><code>proxy_connect_timeout 60</code><br>nginx跟后端服务器连接超时时间(代理连接超时)</li>
<li><p><code>proxy_read_timeout 60</code><br>连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)</p>
</li>
<li><p><code>proxy_buffer_size 4k</code><br>设置代理服务器（nginx）从后端realserver读取并保存用户<strong>头</strong>信息的缓冲区大小，默认与proxy_buffers大小相同，其实可以将这个指令值设的小一点</p>
</li>
<li><p><code>proxy_buffers 4 32k</code><br>proxy_buffers缓冲区，nginx针对单个连接缓存来自后端realserver的<strong>响应</strong>，网页平均在32k以下的话，这样设置</p>
</li>
<li><p><code>proxy_busy_buffers_size 64k</code><br>高负荷下缓冲大小（proxy_buffers*2）</p>
</li>
<li><p><code>proxy_max_temp_file_size</code><br>当 proxy_buffers 放不下后端服务器的响应内容时，会将一部分保存到硬盘的临时文件中，这个值用来设置最大临时文件大小，默认1024M，它与 proxy_cache 没有关系。大于这个值，将从upstream服务器传回。设置为0禁用。</p>
</li>
<li><p><code>proxy_temp_file_write_size 64k</code><br>当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。<code>proxy_temp_path</code>（可以在编译的时候）指定写到哪那个目录。</p>
</li>
</ul>
<p>proxy_pass，proxy_redirect见 location 部分。</p>
<p><strong>模块http_gzip：</strong></p>
<ul>
<li><code>gzip on</code> : 开启gzip压缩输出，减少网络传输。<ul>
<li><code>gzip_min_length 1k</code> ： 设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。默认值是20。建议设置成大于1k的字节数，小于1k可能会越压越大。</li>
<li><code>gzip_buffers 4 16k</code> ： 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，安装原始数据大小以16k为单位的4倍申请内存。</li>
<li><code>gzip_http_version 1.0</code> ： 用于识别 http 协议的版本，早期的浏览器不支持 Gzip 压缩，用户就会看到乱码，所以为了支持前期版本加上了这个选项，如果你用了 Nginx 的反向代理并期望也启用 Gzip 压缩的话，由于末端通信是 http/1.0，故请设置为 1.0。</li>
<li><code>gzip_comp_level 6</code> ： gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)</li>
<li><code>gzip_types</code> ：匹配mime类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。</li>
<li><code>gzip_proxied any</code> ： Nginx作为反向代理的时候启用，决定开启或者关闭后端服务器返回的结果是否压缩，匹配的前提是后端服务器必须要返回包含”Via”的 header头。</li>
<li><code>gzip_vary on</code> ： 和http头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过gzip压缩的页面，例如，用Squid缓存经过Nginx压缩的数据。。</li>
</ul>
</li>
</ul>
<h3 id="2-2-3-server虚拟主机"><a href="#2-2-3-server虚拟主机" class="headerlink" title="2.2.3 server虚拟主机"></a>2.2.3 server虚拟主机</h3><p>http服务上支持若干虚拟主机。每个虚拟主机一个对应的server配置项，配置项里面包含该虚拟主机相关的配置。在提供mail服务的代理时，也可以建立若干server。每个server通过监听地址或端口来区分。</p>
<ul>
<li><p><code>listen</code><br>监听端口，默认80，小于1024的要以root启动。可以为<code>listen *:80</code>、<code>listen 127.0.0.1:80</code>等形式。</p>
</li>
<li><p><code>server_name</code><br>服务器名，如<code>localhost</code>、<code>www.example.com</code>，可以通过正则匹配。</p>
</li>
</ul>
<p><strong>模块http_stream</strong><br>这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡，<code>upstream</code>后接负载均衡器的名字，后端realserver以 <code>host:port options;</code> 方式组织在 {} 中。如果后端被代理的只有一台，也可以直接写在 proxy_pass 。</p>
<h3 id="2-2-4-location"><a href="#2-2-4-location" class="headerlink" title="2.2.4 location"></a>2.2.4 location</h3><p>http服务中，某些特定的URL对应的一系列配置项。</p>
<ul>
<li><p><code>root /var/www/html</code><br>定义服务器的默认网站根目录位置。如果<code>location</code>URL匹配的是子目录或文件，<code>root</code>没什么作用，一般放在<code>server</code>指令里面或<code>/</code>下。</p>
</li>
<li><p><code>index index.jsp index.html index.htm</code><br>定义路径下默认访问的文件名，一般跟着<code>root</code>放</p>
</li>
<li><p><code>proxy_pass http:/backend</code><br>请求转向backend定义的服务器列表，即反向代理，对应<code>upstream</code>负载均衡器。也可以<code>proxy_pass http://ip:port</code>。</p>
</li>
<li><p><code>proxy_redirect off;</code><br><code>proxy_set_header Host $host;</code><br><code>proxy_set_header X-Real-IP $remote_addr;</code><br><code>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</code><br>这四个暂且这样设，如果深究的话，每一个都涉及到很复杂的内容，也将通过另一篇文章来解读。</p>
</li>
</ul>
<p>关于location匹配规则的写法，可以说尤为关键且基础的，参考文章 <a href="http://seanlook.com/2015/05/17/nginx-location-rewrite/">nginx配置location总结及rewrite规则写法</a>;</p>
<h2 id="2-3-其它"><a href="#2-3-其它" class="headerlink" title="2.3 其它"></a>2.3 其它</h2><h3 id="2-3-1-访问控制-allow-deny"><a href="#2-3-1-访问控制-allow-deny" class="headerlink" title="2.3.1 访问控制 allow/deny"></a>2.3.1 访问控制 allow/deny</h3><p>Nginx 的访问控制模块默认就会安装，而且写法也非常简单，可以分别有多个allow,deny，允许或禁止某个ip或ip段访问，依次满足任何一个规则就停止往下匹配。如：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">location</span> /nginx-status &#123;</div><div class="line">  <span class="attribute">stub_status</span> <span class="literal">on</span>;</div><div class="line">  <span class="attribute">access_log</span> <span class="literal">off</span>;</div><div class="line"><span class="comment">#  auth_basic   "NginxStatus";</span></div><div class="line"><span class="comment">#  auth_basic_user_file   /usr/local/nginx-1.6/htpasswd;</span></div><div class="line"></div><div class="line">  <span class="attribute">allow</span> <span class="number">192.168.10.100</span>;</div><div class="line">  <span class="attribute">allow</span> <span class="number">172.29.73.0</span>/<span class="number">24</span>;</div><div class="line">  <span class="attribute">deny</span> all;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们也常用 httpd-devel 工具的 htpasswd 来为访问的路径设置登录密码：<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># htpasswd -c htpasswd admin</span></div><div class="line"><span class="keyword">New</span> passwd:</div><div class="line">Re-<span class="built_in">type</span> <span class="keyword">new</span> password:</div><div class="line">Adding password <span class="keyword">for</span> user admin</div><div class="line"></div><div class="line"><span class="meta"># htpasswd htpasswd admin    <span class="comment">//修改admin密码</span></span></div><div class="line"><span class="meta"># htpasswd htpasswd sean    <span class="comment">//多添加一个认证用户</span></span></div></pre></td></tr></table></figure></p>
<p>这样就生成了默认使用CRYPT加密的密码文件。打开上面nginx-status的两行注释，重启nginx生效。</p>
<h3 id="2-3-2-列出目录-autoindex"><a href="#2-3-2-列出目录-autoindex" class="headerlink" title="2.3.2 列出目录 autoindex"></a>2.3.2 列出目录 autoindex</h3><p>Nginx默认是不允许列出整个目录的。如需此功能，打开nginx.conf文件，在location，server 或 http段中加入<code>autoindex on;</code>，另外两个参数最好也加上去:</p>
<ul>
<li><code>autoindex_exact_size off;</code> 默认为on，显示出文件的确切大小，单位是bytes。改为off后，显示出文件的大概大小，单位是kB或者MB或者GB</li>
<li><code>autoindex_localtime on;</code><br>默认为off，显示的文件时间为GMT时间。改为on后，显示的文件时间为文件的服务器时间<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">location</span> /images &#123;</div><div class="line">  <span class="attribute">root</span>   /var/www/nginx-default/images;</div><div class="line">  <span class="attribute">autoindex</span> <span class="literal">on</span>;</div><div class="line">  <span class="attribute">autoindex_exact_size</span> <span class="literal">off</span>;</div><div class="line">  <span class="attribute">autoindex_localtime</span> <span class="literal">on</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://liuqunying.blog.51cto.com/3984207/1420556" target="_blank" rel="external">http://liuqunying.blog.51cto.com/3984207/1420556</a></li>
<li><a href="http://nginx.org/en/docs/ngx_core_module.html#worker_cpu_affinity" target="_blank" rel="external">http://nginx.org/en/docs/ngx_core_module.html#worker_cpu_affinity</a></li>
<li><a href="http://wiki.nginx.org/HttpCoreModule#sendfile" target="_blank" rel="external">http://wiki.nginx.org/HttpCoreModule#sendfile</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[仿豆丁网文件在线浏览解决方案搭建]]></title>
      <url>http://seanlook.com/2015/05/13/pdf2swf-preview/</url>
      <content type="html"><![CDATA[<p>在公司OA和CRM系统遇到要实现在线查看word/jpg等文件的功能，按照开发小组的要求搭建了一套解决方案：OpenOffice + JodConvertor  + SWFTool+ FlexPaper，其中OpenOffice + JodConvertor用于将文档转化为PDF格式文档，SwfTool用于将PDF转化为SWF文档，FlexPaper用于展示。使用这个解决方案的最大好处就是跨平台且较为简单。</p>
<h2 id="1-1-安装openoffice"><a href="#1-1-安装openoffice" class="headerlink" title="1.1 安装openoffice"></a>1.1 安装openoffice</h2><p>openoffice需要jdk的支持，而且默认已经安装，如果没有，手动下载<code>Apache_OpenOffice_4.0.1_Linux_x86-64_install-rpm_zh-CN.tar.gz</code>到<code>/usr/local/src</code>（CentOS 6.4 x86_64）：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># tar -zxf Apache_OpenOffice_4.0.1_Linux_x86-64_install-rpm_zh-CN.tar.gz</span></div><div class="line"><span class="meta"># cd zh-CN/RPMS</span></div><div class="line"><span class="meta"># rpm –ivh *.rpm</span></div></pre></td></tr></table></figure></p>
<p><strong>拷贝字体</strong><br>安装完成后把windows（<code>c:\windows\fonts</code>）下的一些常用字体拷贝到 <code>/opt/openoffice4/share/fonts/truetype</code> 目录下，如Arial, Calibri, Courier New, Consolas等，如果你想正确的保留原doc的中文字体，还需要把 黑体、微软雅黑、宋体 常规、新宋体 常规、幼圆、隶书、楷体 等中文字体拷贝进去（重启进程后生效）。</p>
<p><strong>启动后台进程</strong><br>切换至普通用户，如wxcrm启动转换进程：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="regexp">/opt/</span>openoffice4<span class="regexp">/program/</span>soffice -headless -accept=<span class="string">"socket,host=127.0.0.1,port=8100;urp;"</span> -nofirststartwizard &amp;</div><div class="line"></div><div class="line"><span class="comment"># ps –ef | grep soffice</span></div></pre></td></tr></table></figure></p>
<h2 id="1-2-解压jodconverter"><a href="#1-2-解压jodconverter" class="headerlink" title="1.2 解压jodconverter"></a>1.2 解压jodconverter</h2><p>JODConverter是一个java的OpenDucument文件转换器，可以进行许多文件格式的转换工具，它利用OpenOffice来进行转换工作，它能完成以下转换：</p>
<ol>
<li>Microsoft Office格式转换为OpenDucument，以及OpenDucument转换为Microsoft Office</li>
<li>OpenDucument转换为PDF，Word、Excel、PowerPoint转换为PDF，RTF转换为PDF等。</li>
</ol>
<p>从 <a href="http://sourceforge.net/projects/jodconverter/files/JODConverter/2.2.2/" target="_blank" rel="external">http://sourceforge.net/projects/jodconverter/files/JODConverter/2.2.2/</a> 下载<code>jodconverter-2.2.2.zip</code>解压到 /opt 目录下<code>/opt/jodconverter-2.2.2/</code>。手动转换测试，使用到的文件是安装包内的lib/jodconverter-cli-2.2.2.jar：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar /opt/jodconverter-<span class="number">2.2</span>.<span class="number">2</span>/<span class="class"><span class="keyword">lib</span>/<span class="title">jodconverter</span>-<span class="title">cli</span>-2.2.2.<span class="title">jar</span> /<span class="title">home</span>/<span class="title">oa</span>/<span class="title">docker</span>.<span class="title">docx</span> /<span class="title">home</span>/<span class="title">oa</span>/<span class="title">docker</span>.<span class="title">pdf</span></span></div></pre></td></tr></table></figure></p>
<p>至此doc等文件格式可以成功转换成pdf。</p>
<h2 id="2-1-swftool"><a href="#2-1-swftool" class="headerlink" title="2.1 swftool"></a>2.1 swftool</h2><p>swftool可以将pdf/jpg等转换成swf格式。搜索下载<code>swftools-0.9.1.tar.gz</code>（0.9.2在安装时可能需要错误处理）：</p>
<a id="more"></a>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># yum install gcc* automake zlib-devel libjpeg-devel giflib-devel freetype-devel</span></div><div class="line"><span class="meta"># tar vxzf swftools-0.9.1.tar.gz</span></div><div class="line"><span class="meta"># cd swftools-0.9.1</span></div><div class="line"></div><div class="line"><span class="meta"># ./configure --prefix=/usr/local/swftools</span></div><div class="line"><span class="meta"># make &amp;&amp; make install</span></div></pre></td></tr></table></figure>
<p>至此已安装完预览功能，可以通过：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/bin/pdf2swf -t docker4<span class="selector-class">.pdf</span> -o docker4<span class="selector-class">.swf</span> -T <span class="number">9</span> -f -z</div></pre></td></tr></table></figure></p>
<p>测试转换。<code>-t</code> 后接待转换的pdf文件路径，<code>-o</code>接输出文件路径和名称，<code>-T 9</code> 设置使用flash版本9，这个设置主要是为了跟FlexPaper的版本对应； <code>-f</code> 保留字体，<code>-z</code>使用zlib进行压缩，这是最常用的几个命令，其他命令可以从SWF官网了解。</p>
<h2 id="2-2-安装xpdf语言包"><a href="#2-2-安装xpdf语言包" class="headerlink" title="2.2 安装xpdf语言包"></a>2.2 安装xpdf语言包</h2><p>在转换包含中文的PDF文档成swf时，常常会因为缺少所需的字体而出现乱码，或者干脆就没有文字，就需要使用到xpdf的字体库。<br>到 <a href="http://www.foolabs.com/xpdf/download.html" target="_blank" rel="external">http://www.foolabs.com/xpdf/download.html</a> 下载<code>xpdf-chinese-simplified.tar.gz</code>，解压到<code>/usr/local</code>下，编辑add-to-xpdfrc文件，如下：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># vi /usr/local/xpdf-chinese-simplified/add-to-xpdfrc</span></div><div class="line"><span class="meta">#----- begin Chinese Simplified support package (2011-sep-02)</span></div><div class="line">cidToUnicode    Adobe-GB1       <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/xpdf-chinese-simplified/</span>Adobe-GB1.cidToUnicode</div><div class="line">unicodeMap      ISO<span class="number">-2022</span>-CN     <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/xpdf-chinese-simplified/</span>ISO<span class="number">-2022</span>-CN.unicodeMap</div><div class="line">unicodeMap      EUC-CN          <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/xpdf-chinese-simplified/</span>EUC-CN.unicodeMap</div><div class="line">unicodeMap      GBK             <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/xpdf-chinese-simplified/</span>GBK.unicodeMap</div><div class="line">cMapDir         Adobe-GB1       <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/xpdf-chinese-simplified/</span>CMap</div><div class="line">toUnicodeDir                    <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/xpdf-chinese-simplified/</span>CMap</div><div class="line"></div><div class="line">fontDir <span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/fonts/</span>win</div><div class="line">displayCIDFontTT    Adobe-GB1    <span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/fonts/</span>win/SIMHEI.ttf</div><div class="line">displayCIDFontTT    Adobe-GB1    <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/xpdf-chinese-simplified/</span>CMap/gbsn00lp.ttf</div><div class="line">displayCIDFontTT    Adobe-GB1    <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/xpdf-chinese-simplified/</span>CMap/gkai00mp.ttf</div></pre></td></tr></table></figure></p>
<p>可以使用xftp将常用的中文字体上传到/usr/share/fonts/win，如宋体、微软雅黑、黑体、楷体等。另外去 <a href="http://www.nginxs.com/download/font.zip" target="_blank" rel="external">网上下载</a> gkai00mp.ttf、gbsn00lp.ttf简体中文放到上面正确的路径下，参考<a href="http://shitouququ.blog.51cto.com/24569/1252930。" target="_blank" rel="external">http://shitouququ.blog.51cto.com/24569/1252930。</a></p>
<p>转换时加上<code>-s languagedir=/usr/local/xpdf-chinese-simplified/</code>来加载语言包路径。</p>
<p>另外据同事说在 windows 平台安装和转换效果会好一点，没有验证。</p>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://shitouququ.blog.51cto.com/24569/1252930" target="_blank" rel="external">linux安装openoffice与SWFtools工具</a></li>
<li><a href="http://blog.csdn.net/xingkong22star/article/details/38269613" target="_blank" rel="external">仿豆丁网在线浏览文件方案openoffice.org 3+swftools+flexpaper</a></li>
<li><a href="http://wiki.swftools.org/wiki/Installation" target="_blank" rel="external">swftools Installation</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[lsyncd实时同步搭建指南——取代rsync+inotify]]></title>
      <url>http://seanlook.com/2015/05/06/lsyncd-synchronize-realtime/</url>
      <content type="html"><![CDATA[<h1 id="1-几大实时同步工具比较"><a href="#1-几大实时同步工具比较" class="headerlink" title="1. 几大实时同步工具比较"></a>1. 几大实时同步工具比较</h1><h2 id="1-1-inotify-rsync"><a href="#1-1-inotify-rsync" class="headerlink" title="1.1 inotify + rsync"></a>1.1 inotify + rsync</h2><p>最近一直在寻求生产服务服务器上的同步替代方案，原先使用的是<code>inotify +  rsync</code>，但随着文件数量的增大到100W+，目录下的文件列表就达20M，在网络状况不佳或者限速的情况下，变更的文件可能10来个才几M，却因此要发送的文件列表就达20M，严重减低的带宽的使用效率以及同步效率；更为要紧的是，加入inotifywait在5s内监控到10个小文件发生变化，便会触发10个rsync同步操作，结果就是真正需要传输的才2-3M的文件，比对的文件列表就达200M。使用这两个组合的好处在于，它们都是最基本的软件，可以通过不同选项做到很精确的控制，比如排除同步的目录，同步多个模块或同步到多个主机。</p>
<p>搭建过程参考 <a href="http://seanlook.com/2014/12/12/rsync_inotify_setup/">Linux下同步工具inotify+rsync使用详解</a> 。</p>
<h2 id="1-2-sersync"><a href="#1-2-sersync" class="headerlink" title="1.2 sersync"></a>1.2 sersync</h2><p>后来听同事说 <a href="http://www.ccvita.com/422.html" target="_blank" rel="external">sersync</a> 这么个工具可以提高同步的性能，也解决了同步大文件时出现异常的问题，所以就尝试了一下。sersync是国内的一个开发者开源出来的，使用c++编写，采用多线程的方式进行同步，失败后还有重传机制，对临时文件过滤，自带crontab定时同步功能。网上看到有人说性能还不错，说一下我的观点：</p>
<ul>
<li>国产开源，文档不是很全，在2011年之后就没更新了（googlecode都要快关闭了，其实可以转交其他人维护），网上关于它的使用和讨论都止于10年了</li>
<li>采用xml配置文件的方式，可读性比较好，但是有些原生的有些功能没有实现就没法使用了</li>
<li>无法实现多目录同步，只能通过多个配置文件启动多个进程</li>
<li>文件排除功能太弱。这个要看需求，不是每个人都需要排除子目录。而对于我的环境中，这个功能很重要，而且排除的规则较多</li>
<li>虽然提供插件的功能，但很鸡肋，因为软件本身没有持续更新，也没有看到贡献有其它插件出现（可能是我知识面不够，还用不到里面的refreshCDN plugin）。</li>
</ul>
<p>虽然不懂c++，但大致看了下源码 <a href="http://code.google.com/p/sersync/source/browse/FileSynchronize.cpp" target="_blank" rel="external">FileSynchronize</a>，拼接rsync命令大概在273行左右，最后一个函数就是排除选项，简单一点可以将<code>--exclude=</code>改成<code>--eclude-from</code>来灵活控制。有机会再改吧。</p>
<p>另外，在作者的文章 <a href="http://hi.baidu.com/johntech/item/a4a2060ecf3053c6905718e1" target="_blank" rel="external">Sersync服务器同步程序 项目简介与设计框架</a> 评论中，说能解决上面 <code>rsync + inotify</code>中所描述的问题。阅读了下源码，这个应该是没有解决，因为在拼接rsync命令时，后面的目的地址始终是针对module的，只要执行rsync命令，就会对整个目录进行遍历，发送要比对的文件列表，然后再发送变化的文件。sersync只是减少了监听的事件，减少了rsync的次数——这已经是很大的改进，但每次rsync没办法改变。（如有其它看法可与我讨论）</p>
<p>其实我们也不能要求每一个软件功能都十分健全，关键是看能否满足我们当下的特定的需求。所谓好的架构不是设计出来的，而是进化来的。目前使用<code>sersync2</code>没什么问题，而且看了它的设计思路应该是比较科学的，特别是过滤队列的设计。双向同步看起来也是可以实现。</p>
<h2 id="1-3-lsyncd"><a href="#1-3-lsyncd" class="headerlink" title="1.3 lsyncd"></a>1.3 lsyncd</h2><p>废话说这么多，本文就是介绍它了。有些博客说lsyncd是谷歌开源的，实际不是了，只是托管在了googlecode上而已，幸运的是已经迁移到github了：<a href="https://github.com/axkibe/lsyncd" target="_blank" rel="external">https://github.com/axkibe/lsyncd</a> 。</p>
<a id="more"></a>
<p>Lysncd 实际上是lua语言封装了 inotify 和 rsync 工具，采用了 Linux 内核（2.6.13 及以后）里的 inotify 触发机制，然后通过rsync去差异同步，达到实时的效果。我认为它最令人称道的特性是，完美解决了 <code>inotify + rsync</code>海量文件同步带来的文件频繁发送文件列表的问题 —— 通过时间延迟或累计触发事件次数实现。另外，它的配置方式很简单，lua本身就是一种配置语言，可读性非常强。lsyncd也有多种工作模式可以选择，本地目录cp，本地目录rsync，远程目录rsyncssh。</p>
<p>实现简单高效的本地目录同步备份（网络存储挂载也当作本地目录），一个命令搞定。</p>
<h1 id="2-使用-lsyncd-本地目录实时备份"><a href="#2-使用-lsyncd-本地目录实时备份" class="headerlink" title="2. 使用 lsyncd 本地目录实时备份"></a>2. 使用 lsyncd 本地目录实时备份</h1><p>这一节实现的功能是，本地目录source实时同步到另一个目录target，而在source下有大量的文件，并且有部分目录和临时文件不需要同步。</p>
<h2 id="2-1-安装lsyncd"><a href="#2-1-安装lsyncd" class="headerlink" title="2.1 安装lsyncd"></a>2.1 安装lsyncd</h2><p>安装<code>lsyncd</code>极为简单，已经收录在ubuntu的官方镜像源里，直接通过<code>apt-get install lsyncd</code>就可以。<br>在Redhat系（我的环境是CentOS 6.2 x86_64 ），可以手动去下载 <a href="ftp://195.220.108.108/linux/fedora/linux/updates/21/x86_64/l/lsyncd-2.1.5-6.fc21.x86_64.rpm" target="_blank" rel="external">lsyncd-2.1.5-6.fc21.x86_64.rpm</a>，但首先你得安装两个依赖<code>yum install lua lua-devel</code>。也可以通过在线安装，需要<code>epel-release</code>扩展包：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span></div><div class="line"><span class="meta"># yum install lsyncd</span></div></pre></td></tr></table></figure></p>
<p><strong>源码编译安装</strong><br>从源码编译安装可以使用最新版的lsyncd程序，但必须要相应的依赖库文件和编译工具：<code>yum install lua lua-devel asciidoc cmake</code>。</p>
<p>从 <a href="http://code.google.com/p/lsyncd/downloads/list" target="_blank" rel="external">googlecode lsyncd</a> 上下载的<code>lsyncd-2.1.5.tar.gz</code>，直接<code>./configure</code>、<code>make &amp;&amp; make install</code>就可以了。</p>
<p>从github上下载<a href="https://github.com/axkibe/lsyncd/archive/master.zip" target="_blank" rel="external">lsyncd-master.zip</a> 的2.1.5版本使用的是 cmake 编译工具，无法<code>./configure</code>：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># uzip lsyncd-master.zip</span></div><div class="line"><span class="meta"># cd lsyncd-master</span></div><div class="line"><span class="meta"># cmake -DCMAKE_INSTALL_PREFIX=/usr/local/lsyncd-2.1.5</span></div><div class="line"><span class="meta"># make &amp;&amp; make install</span></div></pre></td></tr></table></figure></p>
<p>我这个版本编译时有个小bug，如果按照<code>INSTALL</code>在<code>build</code>目录中make，会提示：<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[<span class="number">100</span>%] Generating doc/lsyncd<span class="number">.1</span></div><div class="line">Updating the manpage</div><div class="line">a2x: failed: source file <span class="keyword">not</span> found: doc/lsyncd<span class="number">.1</span>.txt</div><div class="line"><span class="built_in">make</span>[<span class="number">2</span>]: *** [doc/lsyncd<span class="number">.1</span>] <span class="built_in">Error</span> <span class="number">1</span></div><div class="line"><span class="built_in">make</span>[<span class="number">1</span>]: *** [CMakeFiles/manpage.dir/all] <span class="built_in">Error</span> <span class="number">2</span></div><div class="line"><span class="built_in">make</span>: *** [all] <span class="built_in">Error</span> <span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>解决办法是要么直接在解压目录下cmake，不要<code>mkdir build</code>，要么在<code>CMakeList.txt</code>中搜索<code>doc</code>字符串，在前面加上<code>${PROJECT_SOURCE_DIR}</code>。</p>
<h2 id="2-2-lsyncd-conf"><a href="#2-2-lsyncd-conf" class="headerlink" title="2.2 lsyncd.conf"></a>2.2 lsyncd.conf</h2><p>下面都是在编译安装的情况下操作。</p>
<h3 id="2-2-1-lsyncd同步配置"><a href="#2-2-1-lsyncd同步配置" class="headerlink" title="2.2.1 lsyncd同步配置"></a>2.2.1 lsyncd同步配置</h3><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cd /usr/local/lsyncd-2.1.5</span></div><div class="line"><span class="comment"># mkdir etc var</span></div><div class="line"><span class="comment"># vi etc/lsyncd.conf</span></div><div class="line">settings &#123;</div><div class="line">    <span class="attr">logfile</span>      =<span class="string">"/usr/local/lsyncd-2.1.5/var/lsyncd.log"</span>,</div><div class="line">    <span class="attr">statusFile</span>   =<span class="string">"/usr/local/lsyncd-2.1.5/var/lsyncd.status"</span>,</div><div class="line">    <span class="attr">inotifyMode</span>  = <span class="string">"CloseWrite"</span>,</div><div class="line">    <span class="attr">maxProcesses</span> = <span class="number">7</span>,</div><div class="line">    -- <span class="attr">nodaemon</span> =<span class="literal">true</span>,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">sync &#123;</div><div class="line">    default.rsync,</div><div class="line">    <span class="attr">source</span>    = <span class="string">"/tmp/src"</span>,</div><div class="line">    <span class="attr">target</span>    = <span class="string">"/tmp/dest"</span>,</div><div class="line">    -- <span class="attr">excludeFrom</span> = <span class="string">"/etc/rsyncd.d/rsync_exclude.lst"</span>,</div><div class="line">    <span class="attr">rsync</span>     = &#123;</div><div class="line">        <span class="attr">binary</span>    = <span class="string">"/usr/bin/rsync"</span>,</div><div class="line">        <span class="attr">archive</span>   = <span class="literal">true</span>,</div><div class="line">        <span class="attr">compress</span>  = <span class="literal">true</span>,</div><div class="line">        <span class="attr">verbose</span>   = <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>到这启动 lsycnd 就可以完成实时同步了，默认的许多参数可以满足绝大部分需求，非常简单。</p>
<h3 id="2-2-2-lsyncd-conf配置选项说明"><a href="#2-2-2-lsyncd-conf配置选项说明" class="headerlink" title="2.2.2 lsyncd.conf配置选项说明"></a>2.2.2 lsyncd.conf配置选项说明</h3><p><strong>settings</strong><br>里面是全局设置，<code>--</code>开头表示注释，下面是几个常用选项说明：</p>
<ul>
<li><code>logfile</code> 定义日志文件</li>
<li><code>stausFile</code> 定义状态文件</li>
<li><code>nodaemon=true</code> 表示不启用守护模式，默认</li>
<li><code>statusInterval</code> 将lsyncd的状态写入上面的statusFile的间隔，默认10秒</li>
<li><code>inotifyMode</code> 指定inotify监控的事件，默认是<code>CloseWrite</code>，还可以是<code>Modify</code>或<code>CloseWrite or Modify</code></li>
<li><code>maxProcesses</code> 同步进程的最大个数。假如同时有20个文件需要同步，而<code>maxProcesses = 8</code>，则最大能看到有8个rysnc进程</li>
<li><code>maxDelays</code> 累计到多少所监控的事件激活一次同步，即使后面的<code>delay</code>延迟时间还未到</li>
</ul>
<p><strong>sync</strong><br>里面是定义同步参数，可以继续使用<code>maxDelays</code>来重写settings的全局变量。一般第一个参数指定<code>lsyncd</code>以什么模式运行：<code>rsync</code>、<code>rsyncssh</code>、<code>direct</code>三种模式：</p>
<ul>
<li><p><code>default.rsync</code> ：本地目录间同步，使用rsync，也可以达到使用ssh形式的远程rsync效果，或daemon方式连接远程rsyncd进程；<br><code>default.direct</code> ：本地目录间同步，使用<code>cp</code>、<code>rm</code>等命令完成差异文件备份；<br><code>default.rsyncssh</code> ：同步到远程主机目录，rsync的ssh模式，需要使用key来认证</p>
</li>
<li><p><code>source</code> 同步的源目录，使用绝对路径。</p>
</li>
<li><p><code>target</code> 定义目的地址.对应不同的模式有几种写法：<br><code>/tmp/dest</code> ：本地目录同步，可用于<code>direct</code>和<code>rsync</code>模式<br><code>172.29.88.223:/tmp/dest</code> ：同步到远程服务器目录，可用于<code>rsync</code>和<code>rsyncssh</code>模式，拼接的命令类似于<code>/usr/bin/rsync -ltsd --delete --include-from=- --exclude=* SOURCE TARGET</code>，剩下的就是rsync的内容了，比如指定username，免密码同步<br><code>172.29.88.223::module</code> ：同步到远程服务器目录，用于<code>rsync</code>模式<br>三种模式的示例会在后面给出。</p>
</li>
<li><p><code>init</code> 这是一个优化选项，当<code>init = false</code>，只同步进程启动以后发生改动事件的文件，原有的目录即使有差异也不会同步。默认是<code>true</code></p>
</li>
<li><p><code>delay</code> 累计事件，等待rsync同步延时时间，默认15秒（最大累计到1000个不可合并的事件）。也就是15s内监控目录下发生的改动，会累积到一次rsync同步，避免过于频繁的同步。（可合并的意思是，15s内两次修改了同一文件，最后只同步最新的文件）</p>
</li>
<li><code>excludeFrom</code> 排除选项，后面指定排除的列表文件，如<code>excludeFrom = &quot;/etc/lsyncd.exclude&quot;</code>，如果是简单的排除，可以使用<code>exclude = LIST</code>。<br>这里的排除规则写法与原生rsync有点不同，更为简单：<ul>
<li>监控路径里的任何部分匹配到一个文本，都会被排除，例如<code>/bin/foo/bar</code>可以匹配规则<code>foo</code></li>
<li>如果规则以斜线<code>/</code>开头，则从头开始要匹配全部</li>
<li>如果规则以<code>/</code>结尾，则要匹配监控路径的末尾</li>
<li><code>?</code>匹配任何字符，但不包括<code>/</code></li>
<li><code>*</code>匹配0或多个字符，但不包括<code>/</code></li>
<li><code>**</code>匹配0或多个字符，可以是<code>/</code></li>
</ul>
</li>
</ul>
<ul>
<li><code>delete</code> 为了保持target与souce完全同步，Lsyncd默认会<code>delete = true</code>来允许同步删除。它除了<code>false</code>，还有<code>startup</code>、<code>running</code>值，请参考 <a href="https://github.com/axkibe/lsyncd/wiki/Lsyncd%202.1.x%20%E2%80%96%20Layer%204%20Config%20%E2%80%96%20Default%20Behavior" target="_blank" rel="external">Lsyncd 2.1.x ‖ Layer 4 Config ‖ Default Behavior</a>。</li>
</ul>
<p><strong>rsync</strong><br>（提示一下，<code>delete</code>和<code>exclude</code>本来都是<strong>rsync</strong>的选项，上面是配置在<strong>sync</strong>中的，我想这样做的原因是为了减少rsync的开销）</p>
<ul>
<li><code>bwlimit</code> 限速，单位kb/s，与rsync相同（这么重要的选项在文档里竟然没有标出）</li>
<li><code>compress</code> 压缩传输默认为<code>true</code>。在带宽与cpu负载之间权衡，本地目录同步可以考虑把它设为<code>false</code></li>
<li><code>perms</code> 默认保留文件权限。</li>
<li>其它rsync的选项</li>
</ul>
<p>其它还有rsyncssh模式独有的配置项，如<code>host</code>、<code>targetdir</code>、<code>rsync_path</code>、<code>password_file</code>，见后文示例。<code>rsyncOps={&quot;-avz&quot;,&quot;--delete&quot;}</code>这样的写法在2.1.*版本已经不支持。</p>
<p><code>lsyncd.conf</code>可以有多个<code>sync</code>，各自的source，各自的target，各自的模式，互不影响。</p>
<h2 id="2-3-启动lsyncd"><a href="#2-3-启动lsyncd" class="headerlink" title="2.3 启动lsyncd"></a>2.3 启动lsyncd</h2><p>使用命令加载配置文件，启动守护进程，自动同步目录操作。</p>
<pre><code>lsyncd -log Exec /usr/local/lsyncd-2.1.5/etc/lsyncd.conf
</code></pre><h2 id="2-4-lsyncd-conf其它模式示例"><a href="#2-4-lsyncd-conf其它模式示例" class="headerlink" title="2.4 lsyncd.conf其它模式示例"></a>2.4 lsyncd.conf其它模式示例</h2><p>以下配置本人都已经过验证可行，必须根据实际需要裁剪配置：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">settings &#123;</div><div class="line">    <span class="attr">logfile</span> =<span class="string">"/usr/local/lsyncd-2.1.5/var/lsyncd.log"</span>,</div><div class="line">    <span class="attr">statusFile</span> =<span class="string">"/usr/local/lsyncd-2.1.5/var/lsyncd.status"</span>,</div><div class="line">    <span class="attr">inotifyMode</span> = <span class="string">"CloseWrite"</span>,</div><div class="line">    <span class="attr">maxProcesses</span> = <span class="number">8</span>,</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">-- I. 本地目录同步，direct：cp/rm/mv。 适用：<span class="number">500</span>+万文件，变动不大</div><div class="line">sync &#123;</div><div class="line">    default.direct,</div><div class="line">    <span class="attr">source</span>    = <span class="string">"/tmp/src"</span>,</div><div class="line">    <span class="attr">target</span>    = <span class="string">"/tmp/dest"</span>,</div><div class="line">    <span class="attr">delay</span> = <span class="number">1</span></div><div class="line">    <span class="attr">maxProcesses</span> = <span class="number">1</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">-- II. 本地目录同步，rsync模式：rsync</div><div class="line">sync &#123;</div><div class="line">    default.rsync,</div><div class="line">    <span class="attr">source</span>    = <span class="string">"/tmp/src"</span>,</div><div class="line">    <span class="attr">target</span>    = <span class="string">"/tmp/dest1"</span>,</div><div class="line">    <span class="attr">excludeFrom</span> = <span class="string">"/etc/rsyncd.d/rsync_exclude.lst"</span>,</div><div class="line">    <span class="attr">rsync</span>     = &#123;</div><div class="line">        <span class="attr">binary</span> = <span class="string">"/usr/bin/rsync"</span>,</div><div class="line">        <span class="attr">archive</span> = <span class="literal">true</span>,</div><div class="line">        <span class="attr">compress</span> = <span class="literal">true</span>,</div><div class="line">        <span class="attr">bwlimit</span>   = <span class="number">2000</span></div><div class="line">        &#125; </div><div class="line">    &#125;</div><div class="line"></div><div class="line">-- III. 远程目录同步，rsync模式 + rsyncd daemon</div><div class="line">sync &#123;</div><div class="line">    default.rsync,</div><div class="line">    <span class="attr">source</span>    = <span class="string">"/tmp/src"</span>,</div><div class="line">    <span class="attr">target</span>    = <span class="string">"syncuser@172.29.88.223::module1"</span>,</div><div class="line">    <span class="attr">delete="running",</span></div><div class="line">    <span class="attr">exclude</span> = &#123; <span class="string">".*"</span>, <span class="string">".tmp"</span> &#125;,</div><div class="line">    <span class="attr">delay</span> = <span class="number">30</span>,</div><div class="line">    <span class="attr">init</span> = <span class="literal">false</span>,</div><div class="line">    <span class="attr">rsync</span>     = &#123;</div><div class="line">        <span class="attr">binary</span> = <span class="string">"/usr/bin/rsync"</span>,</div><div class="line">        <span class="attr">archive</span> = <span class="literal">true</span>,</div><div class="line">        <span class="attr">compress</span> = <span class="literal">true</span>,</div><div class="line">        <span class="attr">verbose</span>   = <span class="literal">true</span>,</div><div class="line">        <span class="attr">password_file</span> = <span class="string">"/etc/rsyncd.d/rsync.pwd"</span>,</div><div class="line">        <span class="attr">_extra</span>    = &#123;<span class="string">"--bwlimit=200"</span>&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">-- IV. 远程目录同步，rsync模式 + ssh shell</div><div class="line">sync &#123;</div><div class="line">    default.rsync,</div><div class="line">    <span class="attr">source</span>    = <span class="string">"/tmp/src"</span>,</div><div class="line">    <span class="attr">target</span>    = <span class="string">"172.29.88.223:/tmp/dest"</span>,</div><div class="line">    -- <span class="attr">target</span>    = <span class="string">"root@172.29.88.223:/remote/dest"</span>,</div><div class="line">    -- 上面target，注意如果是普通用户，必须拥有写权限</div><div class="line">    <span class="attr">maxDelays</span> = <span class="number">5</span>,</div><div class="line">    <span class="attr">delay</span> = <span class="number">30</span>,</div><div class="line">    -- <span class="attr">init</span> = <span class="literal">true</span>,</div><div class="line">    <span class="attr">rsync</span>     = &#123;</div><div class="line">        <span class="attr">binary</span> = <span class="string">"/usr/bin/rsync"</span>,</div><div class="line">        <span class="attr">archive</span> = <span class="literal">true</span>,</div><div class="line">        <span class="attr">compress</span> = <span class="literal">true</span>,</div><div class="line">        <span class="attr">bwlimit</span>   = <span class="number">2000</span></div><div class="line">        -- <span class="attr">rsh</span> = <span class="string">"/usr/bin/ssh -p 22 -o StrictHostKeyChecking=no"</span></div><div class="line">        -- 如果要指定其它端口，请用上面的rsh</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">-- V. 远程目录同步，rsync模式 + rsyncssh，效果与上面相同</div><div class="line">sync &#123;</div><div class="line">    default.rsyncssh,</div><div class="line">    <span class="attr">source</span>    = <span class="string">"/tmp/src2"</span>,</div><div class="line">    <span class="attr">host</span>      = <span class="string">"172.29.88.223"</span>,</div><div class="line">    <span class="attr">targetdir</span> = <span class="string">"/remote/dir"</span>,</div><div class="line">    <span class="attr">excludeFrom</span> = <span class="string">"/etc/rsyncd.d/rsync_exclude.lst"</span>,</div><div class="line">    -- <span class="attr">maxDelays</span> = <span class="number">5</span>,</div><div class="line">    <span class="attr">delay</span> = <span class="number">0</span>,</div><div class="line">    -- <span class="attr">init</span> = <span class="literal">false</span>,</div><div class="line">    <span class="attr">rsync</span>    = &#123;</div><div class="line">        <span class="attr">binary</span> = <span class="string">"/usr/bin/rsync"</span>,</div><div class="line">        <span class="attr">archive</span> = <span class="literal">true</span>,</div><div class="line">        <span class="attr">compress</span> = <span class="literal">true</span>,</div><div class="line">        <span class="attr">verbose</span>   = <span class="literal">true</span>,</div><div class="line">        <span class="attr">_extra</span> = &#123;<span class="string">"--bwlimit=2000"</span>&#125;,</div><div class="line">        &#125;,</div><div class="line">    <span class="attr">ssh</span>      = &#123;</div><div class="line">        <span class="attr">port</span>  =  <span class="number">1234</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>上面的内容几乎涵盖了所有同步的模式，其中第<code>III</code>个要求像rsync一样配置rsyncd服务端，见本文开头。第<code>IV</code>、<code>V</code>配置ssh方式同步，达到的效果相同，但实际同步时你会发现每次同步都会提示输入ssh的密码，可以通过以下方法解决：</p>
<p>在远端被同步的服务器上开启ssh无密码登录，请注意用户身份：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">user$ ssh-keygen -t rsa</div><div class="line">一路回车...</div><div class="line">user$ cd ~/<span class="selector-class">.ssh</span></div><div class="line">user$ cat id_rsa<span class="selector-class">.pub</span> &gt;&gt; authorized_keys</div></pre></td></tr></table></figure></p>
<p>把<code>id_rsa</code>私钥拷贝到执行lsyncd的机器上<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">user<span class="variable">$ </span>chmod <span class="number">600</span> ~<span class="regexp">/.ssh/id</span>_rsa</div><div class="line">测试能否无密码登录</div><div class="line">user<span class="variable">$ </span>ssh user<span class="variable">@172</span>.<span class="number">29.88</span>.<span class="number">223</span></div></pre></td></tr></table></figure></p>
<h1 id="3-lsyncd的其它功能"><a href="#3-lsyncd的其它功能" class="headerlink" title="3. lsyncd的其它功能"></a>3. lsyncd的其它功能</h1><p><code>lsyncd</code>的功能不仅仅是同步，官方手册 <a href="https://github.com/axkibe/lsyncd/wiki/Lsyncd%202.1.x%20%E2%80%96%20Layer%202%20Config%20%E2%80%96%20Advanced%20onAction" target="_blank" rel="external">Lsyncd 2.1.x ‖ Layer 2 Config ‖ Advanced onAction</a> 高级功能提到，还可以监控某个目录下的文件，根据触发的事件自己定义要执行的命令，example是监控某个某个目录，只要是有jpg、gif、png格式的文件参数，就把它们转成pdf，然后同步到另一个目录。正好在我运维的一个项目中有这个需求，现在都是在java代码里转换，还容易出现异常，通过lsyncd可以代替这样的功能。但，门槛在于要会一点点lua语言（根据官方example还是可以写出来）。</p>
<p>另外偶然想到个问题，同时设置了<code>maxDelays</code>和<code>delay</code>，当监控目录一直没有文件变化了，也会发生同步操作，虽然没有可rsync的文件。</p>
<p>TO-DO：</p>
<ul>
<li>其它同步工具：<a href="http://www.chinaxing.org/articles/linux/2013/04/18/2013-04-18-incrond-and-csync2.html" target="_blank" rel="external">csync2</a>，clsync，btsync，drdb 。</li>
<li>lsyncd双向同步：<a href="https://github.com/axkibe/lsyncd/wiki/Faq" target="_blank" rel="external">GlusterFS</a></li>
</ul>
<p><strong>参考</strong></p>
<ul>
<li><a href="https://github.com/axkibe/lsyncd/wiki/Manual-to-Lsyncd-2.1.x" target="_blank" rel="external">Lsyncd21Manual</a> （本文很大一部分翻译自官网手册）</li>
<li><a href="http://www.cnblogs.com/ivistn/p/3906897.html" target="_blank" rel="external">使用lsyncd配置数据库备份多异地同步</a></li>
<li><a href="http://ju.outofmemory.cn/entry/87237" target="_blank" rel="external">如何实时同步大量小文件</a></li>
<li><a href="http://weekyuan.blog.51cto.com/2389856/1334324" target="_blank" rel="external">Lsyncd 测试远程、本地目录自动同步</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[五一回来了]]></title>
      <url>http://seanlook.com/2015/05/03/feel-wuyi-back/</url>
      <content type="html"><![CDATA[<p>———————— 只是无聊，轻松的写点东西，在 LOFTER上是不需要写标题的</p>
<p>失算了，下午四点到了汽车站，没能买到16:10的汽车，最早也要晚上六点到深圳侨社那班。这原本打算七点就可到深圳，淡定的去会展中心吃个饭啥的，说话算数太不好意思了。</p>
<p>两个小时的等车时间真够无聊的，比在哥哥家里兼工作室要好些。这两天说过来玩，其实也是带任务来的——为哥哥的天猫手表店拍实物图片，借我的MAC一用做背景。我问他卡斯曼、卡西欧官方没给你宝贝图片吗，他说不是，是想拍出自己的特色放在介绍里。千篇一律大家都去旗舰店买了，谁来照顾我们的手表店。想想也是，现在都讲究情怀！看到房间里单反、灯光箱、360度转动盘（不晓得是个什么gui），我几百块的小叶紫檀貔貅手串都派上用场了。看到用心到连饭都没时间煮的份上，我要不要帮忙推广一下呢。</p>
<p>本来打算是今天早点回深圳，可听他说下午还有几块手表要拍，大概要2个小时，我又怎么能无耻的坚持带走电脑呢。临走的时候，哥跟我在qq上说了一句“大老远让你从深圳跑中山来，也没弄点好吃的（也没带你去珠海玩——自己脑补的），太忙太赶了”。八月份再过来，那时候丽景名筑的房子也装修好了，开个入住仪式。昨天也去新房子看了一眼，线路已经全部埋好了，正在给洗手间做防水测试，厅中间还是一堆沙子，只有天花板刷好了乳石灰。六月份能够装修完成，八月份入住，想想那个时候过去，大飘窗、高低儿童床、乐视tv，比现在这个出租屋要好的多了去。可是，可是，这意味着一个很大的问题，哥哥收入用于装修屋子（简单八万的样子），家里在建的四层楼房怎么办？ 昨天跟家里视频，老爸正在算这一笔账，告诉我个数字，30-40万，毛坯房。现在在农村修个房子（四层可以俯瞰全村了）的成本，差不多可以在中小城市买一个90平的。老一辈人还是希望待在家里吧。鸭梨好大，只能这么形容了。</p>
<a id="more"></a>
<p>终于上车了，迅速占领了一个排前靠窗的位置坐了下来，正准备戴上耳机听听音乐，一个50来岁的中年人来到旁边坐了下来，他太太坐斜对面靠近走廊。然后问我说几号座位，我坐了他位置，原本他跟他太太一起坐。于是我就说现在不都没按位置坐吗，正跟他讨论如果真有人计较这个时，让就让呗，有个年青人人过来指着大叔的位置说这是他位置。好吧既然有人认真了，我就收一收我这“乡下来”的不按座位乘车的土鳖气息，但大叔为什么要骗我他跟他太太是一起的邻座。算了，小事不提，滚到了最后一排48号，还好不是正中间走廊的位置，不然一个急刹车就该跟司机say hi了。</p>
<p>不确定到深圳的时间，很抱歉。再写眼睛就花了。ps:刚才汽车颠的一下我敢说飞出了一米高。</p>
<p>——零点更新</p>
<p>等车2个小时不说，路上竟然堵车，虎门大桥原本20分钟的路程竟然走了一个多小时，到晚上将近十点才落车，下车的地方也真特么偏僻，来回半天都没见着竹子林地铁站，果断叫了个的士，到深大地铁站转地铁。法克，那司机竟给绕，原本走深南大道起步价的路程，省省的开到30块，差评投诉！连翻不顺！洗洗睡。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[五一去哪儿]]></title>
      <url>http://seanlook.com/2015/05/01/feel-wuyi-go/</url>
      <content type="html"><![CDATA[<p>五一去哪儿，我实在想不到更俗的标题了。去中山。说实在真不想去，我哥非要我带Mac回去让他拍照，给手表做陪衬。ps: 汽车就七个人，车厢也特么烂了，晃晃感觉要散了😳</p>
<p>反正车上无聊，随便说说什么吧！昨晚，嗯，应该是失眠了。第二天睡到下午起来，窝在家里没事做（早知道就不那么快把《权利的游戏》看完了），五点的时候我竟然跑去公司加班了！</p>
<p>加班也没做啥事，帮另一个同事调通了一个网络，然后在自己博客上更新了篇文章。赖到将近晚上八点半才走，本想在猫眼买张西乡天虹『左耳』的电影票，但没位置，想到一天没怎么吃饭（在公司吃了几包肉松饼和华夫饼干），在家门口沃尔玛楼下的爱尚堡点了份豪华午餐，坐了半个多小时起身才回去。晚上走在小区了，总有股淡淡的花香，却从来说不出名字，风吹的头发飘起，真的不是一般爽呢。但因为已经有十点多了，还是加快步伐推开了乌漆抹黑的家门，另外两个室友，一个回宜昌老家参加哥哥婚礼去了，一个去了阴盛阳衰的川大同学会。</p>
<p>虽然今天还要赶车，但早睡这种事情很少发生在我身上。于是打开了电视，体育频道一个人没啥看的，央视一台播放什么劳动光荣的纪录片，五分钟换台了，想想还是去看宣传了很久的芒果台『真正男子汉』。额，杜海涛给我们的笑星形象永远不那么容易消失，这是节目，但也是在军队里，看着他总觉特意的去达到一种节目效果，他来部队参加训练是减肥。王宝强，真是个逗比，在教官检查违禁物品时宝宝那种呆萌老土的模样，笑抽了我，而且在后面打靶时的表现，蛮喜欢他的，他来部队是为了还原『士兵突击』里的许三多形象，想做一名真正的战士，这让我想到了不久前看过吴京的战狼，几次有一种每人都应该去参军的经历。我有个表弟（表哥？），就在去年过年时还跟我一起睡过，五年当兵回来，看他手持真枪的照片，威风凛凛。刘昊然，17岁，想在军队里完成他的成人礼，这名演员以后必火。袁弘，教官说他是一匹还没被驯服的野马，有血性，真男人。郭晓东，40岁的人，有过当兵的经历，可是带病参训，老婆不错😱。张丰毅，将近60岁的人，看过他不少电影，不是折腾，是表率。</p>
<a id="more"></a>
<p>看完已经零点半了，什么，明天（5.2）去中山的东西还没收拾，可怕的拖延症。然后就是下了『澳门风云2』『天将雄狮』在手机上打发车上的时间，给充电宝充电、收拾衣服什么的。到了两点多，躺在床上却睡不着觉，空调开着第二天就闹肚子，不开又微热。眼睛眯着眯着，突然有个想法或想说什么，就打开笔记就记录了下来，好奇怪。其中有一个就是突然有个做APP的点子，想法不错，五一假后再查查资料。</p>
<p>现在汽车正在路上飞驰，也坐满了人，旁边那个人的肉能不能不要碰我。就这样，再写下去手机电量怕是不足以支撑一部电影了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iscsi网络存储介绍及客户端配置操作]]></title>
      <url>http://seanlook.com/2015/04/28/iscsi-san-initiator/</url>
      <content type="html"><![CDATA[<p>本文不介绍iSCSI服务端的搭建过程，不然就会很累赘。主题就是怎么去完成iscsi网络存储的挂载过程，并顺带介绍一些必要的概念。</p>
<h1 id="1-iscsi介绍与initiator安装"><a href="#1-iscsi介绍与initiator安装" class="headerlink" title="1. iscsi介绍与initiator安装"></a>1. iscsi介绍与initiator安装</h1><h2 id="1-1-iSCSI介绍"><a href="#1-1-iSCSI介绍" class="headerlink" title="1.1 iSCSI介绍"></a>1.1 iSCSI介绍</h2><p>iSCSI简单来说，就是把SCSI指令通过TCP/IP协议封装起来，在以太网中传输。iSCSI 可以实现在IP网络上传递和运行SCSI协议，使其能够在诸如高速千兆以太网上进行数据存取，实现了数据的网际传递和管理。基于iSCSI建立的存储区域网（SAN）与基于光纤的FC-SAN相比，具有很好的性价比。</p>
<p>iSCSI属于端到端的会话层协议，它定义的是SCSI到TCP/IP的映射（如下图），即Initiator将SCSI指令和数据封装成iSCSI协议数据单元，向下提交给TCP层，最后封装成IP数据包在IP网络上传输，到达Target后通过解封装还原成SCSI指令和数据，再由存储控制器发送到指定的驱动器，从而实现SCSI命令和数据在IP网络上的透明传输。它整合了现有的存储协议SCSI和网络协议TCP/IP，实现了存储与TCP/IP网络的无缝融合。在本文中，将把发起器Initiator称为客户端，将目标器Target称为服务端以方便理解。</p>
<p><img src="http://sean-images.qiniudn.com/iscsi-protocal-arch.gif" alt="iscsi-protocal-arch.gif"></p>
<p>iSCSI 服务端和客户端的通讯就是一个在网络上封包和解包的过程，在网络的一端，数据包被封装成包括TCP/IP头、iSCSI 识别包和SCSI 数据三部分内容，传输到网络另一端时，这三部分内容分别被顺序地解开。为了保证安全，iSCSI 有约定操作顺序。在首次运行时，客户端（initiator）设备需要登录到服务端（target）中。任何一个接收到没有执行登录过程的客户端的iSCSI PDU （iSCSI rotocol Data Units，iSCSI 协议数据单元）服务端都将生成一个协议错误，并且关闭连接。在关闭会话之前，服务端可能发送回一个被驳回的iSCSI PDU。</p>
<p>在工作时，iSCSI使SCSI数据块由原来的SCSI总线连接扩展到internet上，这一过程有些产品通过硬件来实现，这种硬件产品被简称为TOE（TCP Offload Engine），随着近年来服务器芯片技术的不断发展，服务器处理能力日益强劲，目前更为普遍的是通过软件来实现SCSI数据块的封装过程。这种软件通常被称为iSCSI Initiator软件/驱动。Initiator软件可以将以太网卡虚拟为iSCSI卡，接受和发送iSCSI数据报文，通过普通以太网卡来进行网络连接，但是需要占用CPU资源。另外的TOE和HBA连接转换方式都需要专门的硬件设备来完成，虽然相对昂贵但执行效率高，也可以减轻主机CPU的负载。本文客户端采用Initiator驱动的连接方式。</p>
<h2 id="1-2-Initiator安装"><a href="#1-2-Initiator安装" class="headerlink" title="1.2 Initiator安装"></a>1.2 Initiator安装</h2><p>在Linux 2.6内核中提供了iscsi驱动，iSCSI 驱动（driver）使主机拥有了通过IP网络访问存储的能力，但还需要一个具体的客户端工具（Linux用户空间组件）初始化iSCSI驱动，即<code>iscsi-initiator-utils</code>，也是大家常说的open-iscsi。</p>
<a id="more"></a>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># rpm -qa|grep iscsi</div><div class="line">iscsi-initiator-utils<span class="number">-6.2</span><span class="number">.0</span><span class="number">.873</span><span class="number">-10.</span>el6.x86_64</div><div class="line">iscsi-initiator-utils-devel<span class="number">-6.2</span><span class="number">.0</span><span class="number">.873</span><span class="number">-10.</span>el6.x86_64</div><div class="line"># rpm -qi iscsi-initiator-utils</div><div class="line">（yum install iscsi-initiator-utils iscsi-initiator-utils-devel）</div></pre></td></tr></table></figure>
<p>这个安装将<code>iscsid</code>、<code>iscsiadm</code>安装到 /sbin 目录下，它还将把默认的配置文件安装到<code>/etc/iscsi/</code>目录下：</p>
<ul>
<li><code>/etc/iscsi/iscsid.conf</code>：所有刚发起的iSCSI session默认都将使用这个文件中的参数设定。</li>
<li><code>/etc/iscsi/initiatorname.iscsi</code>：软件iSCSI initiator的intiator名称配置文件。</li>
</ul>
<p>确保iscsid和iscsi两个服务器开机自启动，<code>chkconfig --list |grep iscsi</code>，在iscsi启动的时候，iscsid和iscsiadm会读取这两个配置文件。</p>
<p>service iscsid [status|start]<br>service iscsi status        查看iscisi的信息，只有在连接成功后才输出<br>这里可能遇到start始终没有启动成功的信息输出，请继续往下执行discovery，一般会启动iscsid。</p>
<h2 id="1-3-open-iscsi-initiator说明"><a href="#1-3-open-iscsi-initiator说明" class="headerlink" title="1.3 open-iscsi initiator说明"></a>1.3 open-iscsi initiator说明</h2><p>open-iscsi包括两个守护进程iscsid和iscsi，其中iscsid是主进程，iscsi进程则主要负责根据配置在系统启动时进行发起端（Initiator）到服务端（target）的登录，建立发起端与服务端的会话，使主机在启动后即可使用通过iSCSI提供服务的存储设备。 </p>
<p>iscsid进程实现iSCSI协议的控制路径以及相关管理功能。例如守护进程（指iscsid）可配置为在系统启动时基于持久化的iSCSI数据库内容，自动重新开始发现（discovery）目标设备。</p>
<p>Open-iSCSI是通过以下iSCSI数据库文件来实现永久配置的：</p>
<ul>
<li>Discovery (<code>/var/lib/iscsi/send_targets</code>)<br>在 /var/lib/iscsi/send_targets 目录下包含iSCSI portals的配置信息，每个portal对应一个文件，文件名为“iSCSI portal IP，端口号”（例如<code>172.29.88.61,3260</code>）。</li>
<li>Node (<code>/var/lib/iscsi/nodes</code>)<br>在 /var/lib/iscsi/nodes 目录下，生成一个或多个以iSCSI存储服务器上的Target名命名的文件夹如<code>iqn.2000-01.com.synology:themain-3rd.ittest</code>，在该文件夹下有一个文件名为“iSCSI portal IP，编号” （例如<code>172.29.88.62,3260,0</code>）的配置参数文件default，该文件中是initiator登录target时要使用的参数，这些参数的设置是从<code>/etc/iscsi/iscsi.conf</code>中的参数设置继承而来的，可以通过iscsiadm对某一个参数文件进行更改（需要先注销到target的登录）。</li>
</ul>
<p><code>iscsiadm</code>是用来管理（更新、删除、插入、查询）iSCSI配置数据库文件的命令行工具，用户能够用它对iSCSI nodes、sessions、connections和discovery records进行一系列的操作。</p>
<p>iSCSI node是一个在网络上可用的SCSI设备标识符，在open-iscsi中利用术语node表示目标（target）上的门户（portal）。一个target可以有多个portal，portal 由IP地址和端口构成。</p>
<h1 id="2-初次挂载网络存储"><a href="#2-初次挂载网络存储" class="headerlink" title="2. 初次挂载网络存储"></a>2. 初次挂载网络存储</h1><h2 id="2-1-设置InitiatorName"><a href="#2-1-设置InitiatorName" class="headerlink" title="2.1 设置InitiatorName"></a>2.1 设置InitiatorName</h2><p>initiator名称用来唯一标识一个iSCSI Initiator端。保存此名称的配置文件为<code>/etc/iscsi/initiatorname.iscsi</code>：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vi /etc/iscsi/initiatorname.iscsi</span></div><div class="line"><span class="attr">InitiatorName</span>=iqn.<span class="number">2000</span>-<span class="number">01</span>.com.synology:themain-<span class="number">3</span>rd.ittest</div></pre></td></tr></table></figure></p>
<p>注意大小写，同时，必须顶格写，xxxx代表要设置的initiator名称，请遵循iqn命名规范，格式为iqn.domaindate.reverse.domain.name:optional_name。</p>
<h2 id="2-2-iSCSI-Initiator配置"><a href="#2-2-iSCSI-Initiator配置" class="headerlink" title="2.2 iSCSI Initiator配置"></a>2.2 iSCSI Initiator配置</h2><p>iSCSI Initiator的配置文件为<code>/etc/iscsi/iscsid.conf</code>,在iSCSI initiator的iscsid进程启动和执行iscsiadm命令时，将读取这个配置文件的内容，获取与SCSI目标进行交互的相关信息。</p>
<h3 id="2-2-1-添加CHAP认证"><a href="#2-2-1-添加CHAP认证" class="headerlink" title="2.2.1 添加CHAP认证"></a>2.2.1 添加CHAP认证</h3><p>本组下的各个设置项主要用来指定Initiator与target验证方式。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">vi /etc/iscsi/iscsid.conf</div><div class="line"><span class="comment"># To enable CHAP authentication set node.session.auth.authmethod</span></div><div class="line"><span class="keyword">node</span>.<span class="title">session</span>.auth.authmethod = CHAP        去掉注释</div><div class="line"><span class="comment"># To set a CHAP username and password for initiator</span></div><div class="line"><span class="keyword">node</span>.<span class="title">session</span>.auth.username = ittest              修改为网管提供的认证username/password</div><div class="line"><span class="keyword">node</span>.<span class="title">session</span>.auth.password = Storageittest</div></pre></td></tr></table></figure></p>
<p>上面是在我的环境中最为简单的一种CHAP（Challenge Handshake Authentication Protocol）认证方式，而且只验证的节点会话initiator端。其实iSCSI验证可以是双向的，根据服务端的设置，可以验证节点会话的target端（username_in），验证发现会话的CHAP initiator，验证发现会话的CHAP target。（节点会话node.session即登录认证，发现会话discovery.sendtargets即查看）</p>
<h3 id="2-2-2-其他配置项"><a href="#2-2-2-其他配置项" class="headerlink" title="2.2.2 其他配置项"></a>2.2.2 其他配置项</h3><p>处理CHAP认证需要关注外，其它的都保持默认即可，但是你需要知道可以修改如:</p>
<ol>
<li>设置initiator与target端交互的超时时间</li>
<li>设置iscsid重试登录节点的次数</li>
<li>是否开机启动iscsid等待</li>
</ol>
<h2 id="2-3-扫描并登录到iqn连接"><a href="#2-3-扫描并登录到iqn连接" class="headerlink" title="2.3 扫描并登录到iqn连接"></a>2.3 扫描并登录到iqn连接</h2><p>open-iscsi initiator-utils提供的管理命令为<code>iscsiadm</code>，此命令包括discovery、node、session几种模式，分别处理不同的情况。在客户端使用Target提供的存储空间前，必须在服务器上通过Initiator软件执行以下步骤：发现目标设备 –&gt; 登录目标设备 –&gt; 与目标设备建立会话，下面分别说明通过各个命令进行说明。</p>
<h3 id="2-3-1-discovery-sendtargets"><a href="#2-3-1-discovery-sendtargets" class="headerlink" title="2.3.1 discovery sendtargets"></a>2.3.1 discovery sendtargets</h3><p>可以通过sendtargets方式（根据iscsi服务器端使用的方式不同还有slp、isns）发现属于你的iqn（iSCSI Qualified Name）：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iscsiadm -m discovery -t sendtargets -p <span class="number">172.29</span><span class="meta">.88</span><span class="meta">.62</span></div><div class="line">iscsiadm -m discovery -t sendtargets -p <span class="number">172.29</span><span class="meta">.88</span><span class="meta">.62</span>:<span class="number">3260</span> |grep ittest</div></pre></td></tr></table></figure></p>
<p>默认端口3260。discovery之前会自动启动iscsid服务，有时候<code>service iscsid start</code>启动没反应，可以通过这种方式启动服务。<br>此命令查询目标门户（Portal）为172.29.88.62:3260上的目标，查找成功后，返回相应的target ID，同时在<code>/var/lib/iscsi/send_targets</code>和 <code>/var/lib/iscsi/nodes</code>目录下记录相应的门户和节点信息。使用<code>iscsiadm -m node</code>命令，可以查看到发现的节点记录。</p>
<h3 id="2-3-2-node-session-login"><a href="#2-3-2-node-session-login" class="headerlink" title="2.3.2 node session login"></a>2.3.2 node session login</h3><p>在完成目标发现后，即可以登录到相应的节点，使用目标设备提供的存储空间：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># <span class="selector-tag">iscsiadm</span> <span class="selector-tag">-m</span> <span class="selector-tag">node</span> <span class="selector-tag">-T</span> <span class="selector-tag">iqn</span><span class="selector-class">.2000-01</span><span class="selector-class">.com</span><span class="selector-class">.synology</span><span class="selector-pseudo">:themain-3rd.ittest</span> <span class="selector-tag">-p</span> 172<span class="selector-class">.29</span><span class="selector-class">.88</span><span class="selector-class">.62</span> <span class="selector-tag">--login</span></div></pre></td></tr></table></figure></p>
<p><code>-T</code>后面跟target名称，<code>--login</code>等同于<code>-l</code>，</p>
<p>登录目标节点成功后，即建立了initiator与target之间的会话（session），同时target提供的存储设备也挂载到主机中，在/dev目录下生成一个新的设备文件类似于sdb、sdc等。使用<code>iscsiadm -m session -P 3</code>（与<code>service iscsi status</code>相同）来查看连接会话信息。</p>
<h2 id="2-4-使用磁盘-—-lvm"><a href="#2-4-使用磁盘-—-lvm" class="headerlink" title="2.4 使用磁盘 — lvm"></a>2.4 使用磁盘 — lvm</h2><p>LVM是非常流行的可修改磁盘分区大小的管理方式，可以根据你的需要使用使用lvm管理磁盘。<br>假设新存储的设备路径为<code>/dev/sdb</code><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">pvcreate <span class="regexp">/dev/</span>sdb                    <span class="comment">## 在新存储上建立物理卷</span></div><div class="line">pvdisplay                                   <span class="comment">## 查看物理卷状态</span></div><div class="line">vgcreate vg_ittest <span class="regexp">/dev/</span>sdb      <span class="comment">## 在该物理卷上建立名为vg_test的卷组</span></div><div class="line">vgdisplay                                   <span class="comment">## 查看已建立的卷组状态</span></div><div class="line">lvcreate -l <span class="number">100</span>%FREE -n lv_static vg_ittest</div></pre></td></tr></table></figure></p>
<p>在vg_ittest卷组上建立名为lv_static的逻辑卷，-L可指定分区大小，此处-l表示使用全部空间<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vgscan或lvdisplay                     <span class="meta">## 查看逻辑卷的状态</span></div><div class="line">vgchange -ay                            <span class="meta">## 使卷组处于激活状态</span></div><div class="line">mkfs.ext4 <span class="meta-keyword">/dev/</span>mapper/vg_ittest-lv_static            <span class="meta">## 格式化已创建的逻辑卷，文件系统格式为ext4</span></div></pre></td></tr></table></figure></p>
<p>格式化完毕后，使用mount命令挂载即可：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mount -o acl,rw <span class="regexp">/dev/m</span>apper<span class="regexp">/vg_ittest-lv_static  /i</span>scsi    <span class="comment">## /iscsi为事先建立的挂载点</span></div></pre></td></tr></table></figure></p>
<p>也可以根据需求划分成多个分区挂载。</p>
<p><strong>开机自动挂载</strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi /etc/rc.d/rc<span class="selector-class">.local</span></div><div class="line">iscsiadm -m node -T iqn.<span class="number">2000</span>-<span class="number">01</span><span class="selector-class">.com</span><span class="selector-class">.synology</span>:themain-<span class="number">3</span>rd<span class="selector-class">.ittest</span> -<span class="selector-tag">p</span> <span class="number">172.29</span>.<span class="number">88.62</span> --login</div><div class="line">vgchange -ay &amp;&amp; mount -o acl,rw /dev/mapper/vg_ittest-lv_static /iscsi</div></pre></td></tr></table></figure></p>
<h1 id="3-维护操作"><a href="#3-维护操作" class="headerlink" title="3. 维护操作"></a>3. 维护操作</h1><h2 id="3-1-正常断开重连网络存储"><a href="#3-1-正常断开重连网络存储" class="headerlink" title="3.1 正常断开重连网络存储"></a>3.1 正常断开重连网络存储</h2><p>因为磁盘上就是数据（一般网络存储用于备份），因此尽量减少异常断开存储的可能性，所以保险起见先卸载，再断开连接(<code>-u</code>)。<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># umount /iscsi</span></div><div class="line"><span class="meta"># vgchange -an &amp;&amp; vgscan</span></div><div class="line"><span class="meta"># iscsiadm -m session</span></div><div class="line"><span class="meta"># iscsiadm -m node -T iqn.2000-01.com.synology:themain-3rd.ittest -p 172.29.88.62 --logout</span></div></pre></td></tr></table></figure></p>
<h2 id="3-2-异常断开恢复"><a href="#3-2-异常断开恢复" class="headerlink" title="3.2 异常断开恢复"></a>3.2 异常断开恢复</h2><p>如果使用LVM管理磁盘，由于网络中断，或主机突然关机，会导致网络存储异常断开，下次启动后重新连接可能会报如下错误：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vgscan</span></div><div class="line"> Reading all physical volumes.  This may take a <span class="keyword">while</span>...</div><div class="line"> /dev/backupdrive1/backup: <span class="built_in">read</span> failed <span class="keyword">after</span> <span class="number">0</span> <span class="keyword">of</span> <span class="number">4096</span> <span class="keyword">at</span> <span class="number">319836585984</span>: Input/output <span class="keyword">error</span></div><div class="line"> /dev/backupdrive1/backup: <span class="built_in">read</span> failed <span class="keyword">after</span> <span class="number">0</span> <span class="keyword">of</span> <span class="number">4096</span> <span class="keyword">at</span> <span class="number">319836643328</span>: Input/output <span class="keyword">error</span></div><div class="line"> /dev/backupdrive1/backup: <span class="built_in">read</span> failed <span class="keyword">after</span> <span class="number">0</span> <span class="keyword">of</span> <span class="number">4096</span> <span class="keyword">at</span> <span class="number">0</span>: Input/output <span class="keyword">error</span></div><div class="line"> /dev/backupdrive1/backup: <span class="built_in">read</span> failed <span class="keyword">after</span> <span class="number">0</span> <span class="keyword">of</span> <span class="number">4096</span> <span class="keyword">at</span> <span class="number">4096</span>: Input/output <span class="keyword">error</span></div><div class="line"> Found volume group <span class="string">"backupdrive1"</span> using metadata type lvm2</div><div class="line"> Found volume group <span class="string">"networkdrive"</span> using metadata type lvm2</div></pre></td></tr></table></figure></p>
<p>产生原因就是，在卷组（VG）失活（deactivate）之前就移除了外部的LVM设备。在你断开连接之前，需要保证以下命令被执行：<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vgchange -an volume_group_name</span></div></pre></td></tr></table></figure></p>
<p>解决方案就是，（假设你已经用<code>vgchange -ay vg</code>命令来激活卷组，但仍有 Input/output error 的错误信息。）执行命令<code>vgchange -an volume group name</code>，移除外部设备，稍候几分钟后再执行以下命令：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># vgscan</span></div><div class="line"><span class="meta"># vgchange -ay volume_group_name</span></div></pre></td></tr></table></figure></p>
<h2 id="3-3-进程数超标"><a href="#3-3-进程数超标" class="headerlink" title="3.3 进程数超标"></a>3.3 进程数超标</h2><p>iscsi存储使用正常，但<code>ps -ef|grep iscsi</code>则包含200+以上的类似于<code>[iscsi_q_112]</code>进程，并且无法kill，使用<code>service iscsi status</code>不断输出类似：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">iscsiadm: could <span class="keyword">not</span> <span class="built_in">read</span> session targetname: <span class="number">5</span></div><div class="line">iscsiadm: could <span class="keyword">not</span> find session <span class="built_in">info for</span> session30</div><div class="line">iscsiadm: could <span class="keyword">not</span> <span class="built_in">read</span> session targetname: <span class="number">5</span></div><div class="line">iscsiadm: could <span class="keyword">not</span> find session <span class="built_in">info for</span> session31</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>这个问题很纠结，但重启服务器是可以解决的。网上资料很少，我猜想是iscsid服务端设置认证方面的问题。</p>
<h1 id="4-iscsi的其它常用操作"><a href="#4-iscsi的其它常用操作" class="headerlink" title="4. iscsi的其它常用操作"></a>4. iscsi的其它常用操作</h1><ul>
<li><p>列出所有target<br><code>iscsiadm -m node</code></p>
</li>
<li><p>连接所有target<br><code>iscsiadm -m node -L all</code></p>
</li>
<li><p>连接指定target<br><code>iscsiadm -m node -T iqn.... -p 172.29.88.62 --login</code></p>
</li>
<li><p>使用如下命令可以查看配置信息<br><code>iscsiadm -m node -o show -T iqn.2000-01.com.synology:rackstation.exservice-bak</code></p>
</li>
<li><p>查看目前 iSCSI target 连接状态<br><code>iscsiadm -m session</code><br>iscsiadm: No active sessions.<br>(目前没有已连接的 iSCSI target)</p>
</li>
<li><p>断开所有target<br><code>iscsiadm -m node -U all</code></p>
</li>
<li><p>断开指定target<br><code>iscsiadm -m node -T iqn...  -p 172.29.88.62 --logout</code></p>
</li>
<li><p>删除所有node信息<br><code>iscsiadm -m node --op delete</code></p>
</li>
<li><p>删除指定节点（/var/lib/iscsi/nodes目录下，先断开session）<br><code>iscsiadm -m node -o delete -name iqn.2012-01.cn.nayun:test-01</code></p>
</li>
<li><p>删除一个目标（/var/lib/iscsi/send_targets目录下）<br><code>iscsiadm --mode discovery -o delete -p 172.29.88.62:3260</code></p>
</li>
</ul>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://blog.csdn.net/sflsgfs/article/details/9180521" target="_blank" rel="external">CentOS客户端加载ISCSI磁盘</a></li>
<li><a href="http://tagche.blog.51cto.com/649757/267390/" target="_blank" rel="external">linux iscsi initiator 安装配置</a></li>
<li><a href="http://linux.vbird.org/linux_server/0460iscsi.php" target="_blank" rel="external">http://linux.vbird.org/linux_server/0460iscsi.php</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[怎么用pfSense为你的web服务做负载均衡（翻译）]]></title>
      <url>http://seanlook.com/2015/04/24/pfsense-loadbalancer/</url>
      <content type="html"><![CDATA[<p>本文翻译自Howtoforge上的一篇文章 <a href="https://www.howtoforge.com/how-to-use-pfsense-to-load-balance-your-web-servers" target="_blank" rel="external">How To Use pfSense To Load Balance Your Web Servers</a>。注意pfSense的负载均衡有两种：一是设置<a href="https://doc.pfsense.org/index.php/Multi-WAN" target="_blank" rel="external">多个WAN做双线负载均衡</a>，二是本文的为LAN内的<a href="https://doc.pfsense.org/index.php/Inbound_Load_Balancing" target="_blank" rel="external">web服务器做inbound-loadbalancer</a>。</p>
<p>这篇howto中展示了怎么使用pfSense 2.0 为你的多个web服务器配置负载均衡（load balancer）。这里假定在你的网络环境中已经拥有了一个pfSense服务器和2个以上的apache服务器，并且具有一定的pfSense知识。（<em>参考<a href="http://seanlook.com/2015/04/23/pfsense-usage/">图解pfSense软路由系统的使用（NAT功能</a></em>）</p>
<h2 id="1-前提"><a href="#1-前提" class="headerlink" title="1. 前提"></a>1. 前提</h2><ul>
<li>一个安装好的pfSense 2.0 机器（如果它是你的外围防火墙，建议安装在物理机上）</li>
<li>至少2个apache服务器（可以是虚拟机）</li>
<li>确保在apache服务器之间代码文件是同步的（rsync、cororsync或其它可以保持web服务器间文件更新）</li>
</ul>
<h2 id="2-配置pfSense"><a href="#2-配置pfSense" class="headerlink" title="2. 配置pfSense"></a>2. 配置pfSense</h2><p>pfSense可以使用负载均衡的功能让特定的请求压力由多台服务器分担，这对于有多台应用的服务器很有帮助，因为你可以把负载压力分散到其它节点上而不是死磕一个节点。</p>
<h3 id="2-1-Monitor"><a href="#2-1-Monitor" class="headerlink" title="2.1 Monitor"></a>2.1 Monitor</h3><p>我们正式开始。首先点击<code>Services</code> -&gt; <code>Load Balancers</code>，然后选择<code>Monitor</code>标签。</p>
<a id="more"></a>
<p>点击右边的<code>+</code>加号来添加一条记录，输入monitor的名字Name和描述Description（在这个示例名字和描述我都使用<code>ApacheClusterMon</code>），把类型Type设置成<code>HTTP</code>，主机地址Host设置一个还未使用的IP（后面我们将在这个IP上建立虚拟IP，这个虚拟IP会被分配到故障转移failover节点上，注：也有文章说把它设成WAN IP），<code>HTTP Code</code>保存默认的<code>200 OK</code>，然后点击<code>Save</code>保存并且使修改生效<code>Apply Changes</code>。<br><img src="https://www.howtoforge.com/images/using_pfsense_to_load_balance_your_web_servers/image1.jpg" alt="image1.jpg"><br><img src="https://www.howtoforge.com/images/using_pfsense_to_load_balance_your_web_servers/image2.jpg" alt="image2.jpg"></p>
<h3 id="2-2-Pool"><a href="#2-2-Pool" class="headerlink" title="2.2 Pool"></a>2.2 Pool</h3><p>接着建立服务器池server pool。点击<code>Pools</code>标签的<code>+</code>按钮来添加一个池。</p>
<p>在该示例我指定<code>ApacheSrvPool</code>为服务池名称，设置<code>Mode</code>为<code>Load Balance</code>，端口80（。这个端口时你后端服务器的监听端口，你当然可以设定其它应用的其它端口，不一定非是web）。为这个池设定上一步创建的ApacheClusterMon，依次将你的所有web服务器IP添加到这个池中<code>Add to pool</code>，保存并应用。<br><img src="https://www.howtoforge.com/images/using_pfsense_to_load_balance_your_web_servers/image3.jpg" alt="image3.jpg"><br><img src="https://www.howtoforge.com/images/using_pfsense_to_load_balance_your_web_servers/image4.jpg" alt="image4.jpg"></p>
<h3 id="2-3-Virtual-Server"><a href="#2-3-Virtual-Server" class="headerlink" title="2.3 Virtual Server"></a>2.3 Virtual Server</h3><p>最后一步，选择<code>Virtual Servers</code>标签页，点击<code>+</code>来添加一条记录。填写名称<code>ApacheClusterVirtualServer</code>、描述和IP地址，这个IP地址与第1步中说的未使用的IP相同，端口80，所有发送到这个WAN IP:port的连接都会被转发到服务器池中。虚拟服务器池Virtual Server Poll选择上一步创建的。提交并应用。<br><img src="https://www.howtoforge.com/images/using_pfsense_to_load_balance_your_web_servers/image5.jpg" alt="image5.jpg"><br><img src="https://www.howtoforge.com/images/using_pfsense_to_load_balance_your_web_servers/image6.jpg" alt="image6.jpg"></p>
<p>搞定！最后不要忘记为虚拟服务器IP和池添加防火墙规则。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[图解pfSense软路由系统的使用（NAT功能）]]></title>
      <url>http://seanlook.com/2015/04/23/pfsense-usage/</url>
      <content type="html"><![CDATA[<p>pfsense是一款开源的路由和防火墙产品，它基于freebsd系统定制和开发。pfsene拥有友好的web的配置界面，且具有伸缩性强又不失强大性能，在众多开源网络防火墙中属于佼佼者。</p>
<p>2004年，pfsense作为m0n0wall项目（基于freebsd内核的嵌入式软防火墙）的分支项目启动，增加了许多m0n0wall没有的功能(pfSense的官方网站称它为the better m0n0wall).pfSense除了包含宽带路由器的基本功能外,还有以下的特点:</p>
<ul>
<li>基于稳定可靠的FreeBSD操作系统,能适应全天候运行的要求</li>
<li>具有用户认证功能,使用Web网页的认证方式,配合RADIUS可以实现记费功能</li>
<li>完善的防火墙、流量控制和数据包功能,保证了网络的安全,稳定和高速运行</li>
<li>支持多条WAN线路和负载均衡功能,可大幅度提高网络出口带宽,在带宽拥塞时自动分配负载</li>
<li>内置了IPsec 和PPTP VPN功能,实现不同分支机构的远程互联或远程用户安全地访问内部网</li>
<li>支持802.1Q VLAN标准,可以通过软件模拟的方式使得普通网卡能识别802.1Q的标记,同时为多个VLAN的用户提供服务</li>
<li>支持使用额外的软件包来扩展pfSense功能,为用户提供更多的功能(如FTP和透明代理).</li>
<li>详细的日志功能,方便用户对网络出现的事件分析,统计和处理</li>
<li>使用Web管理界面进行配置(支持SSL),支持远程管理和软件版本自动在线升级</li>
</ul>
<p>本文简单介绍pfSense的安装及配置过程，完成一个基本的路由器该有的功能，如访问局外网、设置防火墙规则、配置端口映射。这里演示在ESXi虚拟服务器上，解决IP不足的问题。</p>
<h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><p>首先去 <a href="https://www.pfsense.org/download/" target="_blank" rel="external">https://www.pfsense.org/download/</a> 下载稳定版本的pfSense，如pfSense-LiveCD-2.2.2-RELEASE-amd64.iso.gz（网上看到有人提到这个版本不稳定，我在使用中偶尔也发现突然很慢，建议2.1.5）。在vSphere上创建虚拟机的过程省略，取名01_pfSense，创建虚拟机操作系统时选择“其他 -&gt; FreeBSD 64位”，单CPU,512Mb内存，4G硬盘。将下载的系统解压成iso后挂载到CD/DVD，并“打开电源时连接”。<br>下图是网卡情况：<br>为pfSense分配两个网卡，分别是可以连接公司内网的172.29.88.1/24网段的vSphere_Admin端口组，和IP范围是172.30.31.1/24的内部局域网端口组VM Local。<br><img src="http://sean-images.qiniudn.com/pfsense-vsphere0.png" alt="pfsense-vsphere0.png"></p>
<p>记录下Mac地址<br>外网接口：00:0c:29:36:b6:c2<br>内网接口：00:0c:29:36:b6:cc</p>
<h2 id="安装pfsense"><a href="#安装pfsense" class="headerlink" title="安装pfsense"></a>安装pfsense</h2><p>启动电源后出现欢迎界面，选择<code>1.Boot pfSense [default]</code>，或等待几秒钟自动选择，进入如下界面：<br><img src="http://sean-images.qiniudn.com/pfsense-vsphere1.png" alt="pfsense-vsphere1.png"></p>
<p>输入I，回车，然后是一个蓝屏，开始安装。</p>
<a id="more"></a>
<p>也可以什么都不用管，系统会一直启动从CD启动得到一个完整的pfSense系统，因为没有安装所以在屏幕下方会有一个选项<code>99） Install pfSense to a hard drive, etc.</code>，输入99同样会进入下面的安装操作系统的过程。<br><img src="http://sean-images.qiniudn.com/pfsense-vsphere2.png" alt="pfsense-vsphere2.png"></p>
<p>一路保存默认：<code>&lt; Accept these Settings &gt;</code> → <code>&lt; Quick/Easy InStall &gt;</code> → <code>erase all content &lt; OK &gt;</code> → <code>&lt; Standard Kernel &gt;</code> → <code>&lt; Reboot &gt;</code>。</p>
<p>重启后安装完成，断开CD介质。<br><img src="http://sean-images.qiniudn.com/pfsense-vsphere3.png" alt="pfsense-vsphere3.png"><br>详见见官网文档 <a href="https://doc.pfsense.org/index.php/Installing_pfSense" target="_blank" rel="external">https://doc.pfsense.org/index.php/Installing_pfSense</a> 。</p>
<p>下面开始配置内外网接口。</p>
<h2 id="分配接口"><a href="#分配接口" class="headerlink" title="分配接口"></a>分配接口</h2><p>从上图可以看到系统默认将em0接口当做WAN（外网），em1当做LAN（内部局域网），但我们不确定em0就是在创建虚拟机时分配的外网接口，需要根据MAC地址判断。</p>
<p>选择<code>1) Assgin Interfaces</code>，回车<br>首先询问你是否设置VLAN（用于划分多个子局域网网），Do you want to set up VLANs now [y|n]?，否n：<br><img src="http://sean-images.qiniudn.com/pfsense-vsphere4.png" alt="pfsense-vsphere4.png"><br><img src="http://sean-images.qiniudn.com/pfsense-vsphere4-1.png" alt="pfsense-vsphere4-1.png"></p>
<h2 id="分配IP"><a href="#分配IP" class="headerlink" title="分配IP"></a>分配IP</h2><p>选择<code>2) Set interfce(s) IP address</code>：<br><img src="http://sean-images.qiniudn.com/pfsense-vsphere5.png" alt="pfsense-vsphere5.png"><br>先配置WAN的IP，禁用DHCP,配置地址172.29.88.230/24，网关172.29.88.1，禁用IPV6：<br><img src="http://sean-images.qiniudn.com/pfsense-vsphere5-1.png" alt="pfsense-vsphere5-1.png"><br>再配置LAN，172.30.31.1/24，不配置网关：<br><img src="http://sean-images.qiniudn.com/pfsense-vsphere5-2.png" alt="pfsense-vsphere5-2.png"><br>完成后会提示可以在浏览器打开<code>http://172.30.31.1/</code>，通过webConfigurator来操作pfSense。</p>
<p>已打通两端网络：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">sean@seanubt:</span>~$ ssh admin@<span class="number">172.30</span><span class="meta">.31</span><span class="meta">.1</span> <span class="number">22</span></div><div class="line">Password for admin@pfSense.domain:</div><div class="line">*** Welcome to pfSense <span class="number">2.2</span><span class="meta">.2</span>-RELEASE-pfSense (amd64) on pfSense ***</div><div class="line"></div><div class="line"> WAN (wan)       -&gt; em0        -&gt; v4: <span class="number">172.29</span><span class="meta">.88</span><span class="meta">.230</span>/<span class="number">24</span></div><div class="line"> LAN (lan)       -&gt; em1        -&gt; v4: <span class="number">172.30</span><span class="meta">.31</span><span class="meta">.1</span>/<span class="number">24</span></div><div class="line"> <span class="number">0</span>) Logout (SSH only)                  <span class="number">9</span>) pfTop</div><div class="line"> <span class="number">1</span>) Assign Interfaces                 <span class="number">10</span>) Filter Logs</div><div class="line"> <span class="number">2</span>) Set interface(s) <span class="built_in">IP</span> address       <span class="number">11</span>) Restart webConfigurator</div><div class="line"> <span class="number">3</span>) Reset webConfigurator password    <span class="number">12</span>) pfSense Developer Shell</div><div class="line"> <span class="number">4</span>) Reset to factory defaults         <span class="number">13</span>) Upgrade from console</div><div class="line"> <span class="number">5</span>) Reboot system                     <span class="number">14</span>) Disable Secure Shell (sshd)</div><div class="line"> <span class="number">6</span>) Halt system                       <span class="number">15</span>) Restore recent configuration</div><div class="line"> <span class="number">7</span>) Ping host                         <span class="number">16</span>) Restart PHP-FPM</div><div class="line"> <span class="number">8</span>) Shell</div><div class="line">  </div><div class="line"></div><div class="line"><span class="number">7</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">Enter</span> a host name <span class="keyword">or</span> <span class="built_in">IP</span> address: <span class="number">172.29</span><span class="meta">.88</span><span class="meta">.56</span></div><div class="line"></div><div class="line">PING <span class="number">172.29</span><span class="meta">.88</span><span class="meta">.56</span> (<span class="number">172.29</span><span class="meta">.88</span><span class="meta">.56</span>): <span class="number">56</span> data bytes</div><div class="line"><span class="number">64</span> bytes from <span class="number">172.29</span><span class="meta">.88</span><span class="meta">.56</span>: icmp_seq=<span class="number">0</span> ttl=<span class="number">64</span> time=<span class="number">1.406</span> ms</div><div class="line"><span class="number">64</span> bytes from <span class="number">172.29</span><span class="meta">.88</span><span class="meta">.56</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">1.215</span> ms</div><div class="line"><span class="number">64</span> bytes from <span class="number">172.29</span><span class="meta">.88</span><span class="meta">.56</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">64</span> time=<span class="number">0.480</span> ms</div><div class="line"></div><div class="line">--- <span class="number">172.29</span><span class="meta">.88</span><span class="meta">.56</span> ping statistics ---</div><div class="line"><span class="number">3</span> packets transmitted, <span class="number">3</span> packets received, <span class="number">0.0</span>% packet loss</div><div class="line">round-trip min/avg/max/stddev = <span class="number">0.480</span>/<span class="number">1.034</span>/<span class="number">1.406</span>/<span class="number">0.399</span> ms</div><div class="line"></div><div class="line">Press <span class="keyword">ENTER</span> to continue.</div><div class="line"></div><div class="line">*** Welcome to pfSense <span class="number">2.2</span><span class="meta">.2</span>-RELEASE-pfSense (amd64) on pfSense ***</div><div class="line"></div><div class="line"> WAN (wan)       -&gt; em0        -&gt; v4: <span class="number">172.29</span><span class="meta">.88</span><span class="meta">.230</span>/<span class="number">24</span></div><div class="line"> LAN (lan)       -&gt; em1        -&gt; v4: <span class="number">172.30</span><span class="meta">.31</span><span class="meta">.1</span>/<span class="number">24</span></div><div class="line"> <span class="number">0</span>) Logout (SSH only)                  <span class="number">9</span>) pfTop</div><div class="line"> <span class="number">1</span>) Assign Interfaces                 <span class="number">10</span>) Filter Logs</div><div class="line"> <span class="number">2</span>) Set interface(s) <span class="built_in">IP</span> address       <span class="number">11</span>) Restart webConfigurator</div><div class="line"> <span class="number">3</span>) Reset webConfigurator password    <span class="number">12</span>) pfSense Developer Shell</div><div class="line"> <span class="number">4</span>) Reset to factory defaults         <span class="number">13</span>) Upgrade from console</div><div class="line"> <span class="number">5</span>) Reboot system                     <span class="number">14</span>) Disable Secure Shell (sshd)</div><div class="line"> <span class="number">6</span>) Halt system                       <span class="number">15</span>) Restore recent configuration</div><div class="line"> <span class="number">7</span>) Ping host                         <span class="number">16</span>) Restart PHP-FPM</div><div class="line"> <span class="number">8</span>) Shell</div><div class="line">  </div><div class="line"></div><div class="line"><span class="number">8</span></div><div class="line"></div><div class="line">ping <span class="number">172.30</span><span class="meta">.31</span><span class="meta">.20</span></div><div class="line">PING <span class="number">172.30</span><span class="meta">.31</span><span class="meta">.20</span> (<span class="number">172.30</span><span class="meta">.31</span><span class="meta">.20</span>): <span class="number">56</span> data bytes</div><div class="line"><span class="number">64</span> bytes from <span class="number">172.30</span><span class="meta">.31</span><span class="meta">.20</span>: icmp_seq=<span class="number">0</span> ttl=<span class="number">64</span> time=<span class="number">0.239</span> ms</div><div class="line"><span class="number">64</span> bytes from <span class="number">172.30</span><span class="meta">.31</span><span class="meta">.20</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">0.211</span> ms</div></pre></td></tr></table></figure></p>
<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>172.30.31.1是内部局域网的IP，所以只能通过另一台lan上的服务器的浏览器访问：<br><img src="http://sean-images.qiniudn.com/pfsense-vsphere6.png" alt="pfsense-vsphere6.png"><br>当然这样操作起来很不方便，，而且假如lan上的其它服务器都是linux而且没有图像界面，没办法使用webConfigurator了。端口转发似乎是一个比较好的方案：在某一台lan服务器上添加一个可以通过你的pc端访问的网卡（我这里的172.29.88.206，它的lan接口IP为172.30.31.20），然后使用rinetd工具转发到172.30.31.1。<br>这个方法似乎可选，但需要额外的设置：<br><img src="http://sean-images.qiniudn.com/pfsense-vsphere7.png" alt="pfsense-vsphere7.png"></p>
<blockquote>
<p>An HTTP_REFERER was detected other than what is defined in System -&gt; Advanced (<a href="http://172.29.88.206:8008/index.php?logout" target="_blank" rel="external">http://172.29.88.206:8008/index.php?logout</a>).  You can disable this check if needed in System -&gt; Advanced -&gt; Admin.</p>
</blockquote>
<p>pfSense为了安全起见，不允许任何形式的转发来访问webConfigurator，根据你的需要决定是否关闭这个功能：System -&gt; Advanced -&gt; Admin，勾选Browser HTTP_REFERER enforcement -&gt; Save -&gt; Apply。<br><img src="http://sean-images.qiniudn.com/pfsense-vsphere8.png" alt="pfsense-vsphere8.png"></p>
<p>登陆的用户名默认为admin/pfsense<br><img src="http://sean-images.qiniudn.com/pfsense-vsphere9.png" alt="pfsense-vsphere9.png"></p>
<h2 id="使用配置向导"><a href="#使用配置向导" class="headerlink" title="使用配置向导"></a>使用配置向导</h2><p>前面是通过命令行的方法对接口和IP进行配置，也可以直接通过webGUI向导对WAN和LAN、网关等设置：System -&gt; Setup Wizard，因为太过简单，就不贴图了。<br>在设置WAN接口时（Configure WAN Interface）注意两点：</p>
<ul>
<li>Static IP Configuration 部分设置正确的IP和网关，否则会无法进出网络</li>
<li>RFC1918 Networks 默认是勾选的，这是为了避免WAN上也存在与LAN一样的网段。如果要允许wan的其他主机ping通该pfSense，则去掉勾</li>
</ul>
<p>其它保持为空或默认值。</p>
<h2 id="pfSense的NAT功能"><a href="#pfSense的NAT功能" class="headerlink" title="pfSense的NAT功能"></a>pfSense的NAT功能</h2><p>即Port Forward，目的是为了WAN上的其他机器可以访问LAN内部的服务。<br>Friewall -&gt; NAT<br><img src="http://sean-images.qiniudn.com/pfsense-vsphere10.png" alt="pfsense-vsphere10.png"></p>
<p>端口映射分为单端口和范围端口。但端口容易理解，访问WAN 172.29.88.230:8000 的 数据包都转发到内部LAN 172.30.31.20:8000；范围端口是在 from <em>m</em> to <code>n</code> 的端口范围内的数据包都发送到内部IP的对应端口上，减少规则的数量。<br><img src="http://sean-images.qiniudn.com/pfsense-vsphere11.png" alt="pfsense-vsphere11.png"><br>Save -&gt; Apply Changes，与此同时pfSense会自动在防火墙里添加规则，Firewal -&gt; Rules<br><img src="http://sean-images.qiniudn.com/pfsense-vsphere12.png" alt="pfsense-vsphere12.png"></p>
<h2 id="pfSense做负载均衡"><a href="#pfSense做负载均衡" class="headerlink" title="pfSense做负载均衡"></a>pfSense做负载均衡</h2><h2 id="其它功能"><a href="#其它功能" class="headerlink" title="其它功能"></a>其它功能</h2><p>pfSense还有几大重要的功能，如快速搭建VPN服务器，作为前端负载均衡服务器，流量限制。由于工作中暂未用到，所以就不加说明了。</p>
<p>关于负载均衡见 <a href="http://seanlook.com/2015/04/24/pfsense-loadbalancer/">http://seanlook.com/2015/04/24/pfsense-loadbalancer/</a></p>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://bbs.pceva.com.cn/thread-100070-1-1.html" target="_blank" rel="external">用pfSense搭建ESXi上的软路由</a></li>
<li><a href="http://www.pppei.net/blog/post/331" target="_blank" rel="external">pfsense 企业应用实例</a></li>
<li><a href="http://bbs.m0n0china.org/forumdisplay.php?fid=16" target="_blank" rel="external">pfsense 研究- m0n0wall中国论坛</a></li>
<li><a href="http://44001217.blog.51cto.com/462930/180718" target="_blank" rel="external">PFsense学习 - 端口映射</a></li>
<li><a href="https://doc.pfsense.org/index.php/Multi-WAN_2.0" target="_blank" rel="external">pfSense 2.0 多 WAN 负载均衡设置指南</a> （<a href="http://www.netadmin.com.tw/article_content.aspx?sn=1205110003" target="_blank" rel="external">中文</a>）</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[配置 Oracle 11gR2 在 CentOS6 上开机自启动]]></title>
      <url>http://seanlook.com/2015/04/11/oracle_db_autostart_with_linux/</url>
      <content type="html"><![CDATA[<h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>要达到oracle随开机自启动，一般使用11g自带的dbstart脚本：<code>$ORACLE_HOME/bin/dbstart</code>，但要先修改<code>/etc/oratab</code>的内容，将N改成Y，表示允许实例自启动，假如有2个实例要启动，再写一行：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vi <span class="regexp">/etc/</span>oratab</div><div class="line"><span class="string">EXCRMPROD:</span><span class="regexp">/db/</span>oracle<span class="regexp">/product/</span><span class="number">11.2</span><span class="number">.0</span>/<span class="string">db_1:</span>Y</div></pre></td></tr></table></figure></p>
<p>然后在oracle用户下执行<code>$ORACLE_HOME/bin/dbstart</code>即可启动，日志被记录在<code>$ORACLE_HOME/startup.log</code>。但是，默认情况<code>dbstart</code>和<code>dbshut</code>脚本不能自动启动或关闭监听，所以也要加以修改：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ vi /db/oracle/product/11.2.0/db_1/bin/dbstart</div><div class="line"><span class="comment">## 找到下面的代码(约第80行)，在实际脚本代码的前面</span></div><div class="line"><span class="comment"># First argument is used to bring up Oracle Net Listener</span></div><div class="line">ORACLE_HOME_LISTNER=<span class="variable">$1</span></div><div class="line"><span class="comment">## 将此处的 ORACLE_HOME_LISTNER=$1 修改为 ORACLE_HOME_LISTNER=$ORACLE_HOME</span></div><div class="line"><span class="keyword">if</span> [ ! <span class="variable">$ORACLE_HOME_LISTNER</span> ] ; <span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"ORACLE_HOME_LISTNER is not SET, unable to auto-start Oracle Net Listener"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> ORACLE_HOME"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">LOG=<span class="variable">$ORACLE_HOME_LISTNER</span>/listener.log</div></pre></td></tr></table></figure></p>
<p>同样也修改dbshut脚本（约第50行）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ vi /db/oracle/product/11.2.0/db_1/bin/dbshut</div><div class="line"></div><div class="line"><span class="comment"># The this to bring down Oracle Net Listener</span></div><div class="line">ORACLE_HOME_LISTNER=<span class="variable">$ORACLE_HOME</span></div><div class="line"><span class="keyword">if</span> [ ! <span class="variable">$ORACLE_HOME_LISTNER</span> ] ; <span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"ORACLE_HOME_LISTNER is not SET, unable to auto-stop Oracle Net Listener"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> ORACLE_HOME"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">LOG=<span class="variable">$ORACLE_HOME_LISTNER</span>/listener.log</div></pre></td></tr></table></figure></p>
<h2 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h2><p>这两个脚本在执行时会自动去搜索<code>/etc/oratab</code>文件的内容，将这两个命令分别加入开机启动和关闭脚本里。</p>
<a id="more"></a>
<p><strong>/etc/rc.local</strong><br>Linux系统开机初始化的最后过程会执行该脚本，加入以下内容：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">su - oracle -<span class="keyword">lc</span> <span class="string">"$ORACLE_HOME/bin/dbstart"</span></div></pre></td></tr></table></figure></p>
<p><strong>/etc/rc.local.shutdown</strong><br>这个脚本时系统里没有的，完成的功能是关机自动停止服务，<code>/etc/rc.d/rc.local.shutdown</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="comment"># chkconfig: - 00 00</span></div><div class="line"><span class="comment"># description: Do custom commands before shutdown or reboot</span></div><div class="line"></div><div class="line"><span class="comment">### BEGIN INIT INFO</span></div><div class="line"><span class="comment"># Provides: custom-halt</span></div><div class="line"><span class="comment"># Required-Start:</span></div><div class="line"><span class="comment"># Required-Stop:</span></div><div class="line"><span class="comment"># Default-Start: 0 6</span></div><div class="line"><span class="comment"># Default-Stop:</span></div><div class="line"><span class="comment"># Short-Description: Custom halt commands</span></div><div class="line"><span class="comment"># Description: Do custom commands before shutdown or reboot</span></div><div class="line"><span class="comment">### END INIT INFO</span></div><div class="line"></div><div class="line"><span class="built_in">export</span> ORACLE_BASE=/db/oracle</div><div class="line"><span class="built_in">export</span> ORACLE_HOME=<span class="variable">$ORACLE_BASE</span>/product/11.2.0/db_1</div><div class="line"><span class="built_in">export</span> ORACLE_SID=EXCRMPROD</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ORACLE_HOME</span>/bin</div><div class="line"></div><div class="line">su - oracle -lc <span class="string">"<span class="variable">$ORACLE_HOME</span>/bin/dbshut /dev/null 2&gt;&amp;1"</span></div><div class="line"></div><div class="line"><span class="built_in">exit</span></div></pre></td></tr></table></figure></p>
<p>让它运行在<code>0</code>和<code>6</code>运行级别runlevel：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># chmod 755 /etc/rc.d/rc.local.shutdown</span></div><div class="line"><span class="meta"># ln -s /etc/rc.d/rc.local.shutdown /etc/rc.local.shutdown</span></div><div class="line"><span class="meta"># ln -s /etc/rc.d/rc.local.shutdown /etc/init.d/custom-halt</span></div><div class="line"></div><div class="line"><span class="meta"># chkconfig --add custom-halt</span></div><div class="line"><span class="meta"># chkconfig --level 06 custom-halt on</span></div></pre></td></tr></table></figure></p>
<p>另外网上也有文章不是利用 oracle 自带的 dbstart 来实现自启动，而是自己写 service 脚本，执行 sqlplus 然后运行 shutdown immediate ，个人觉得这有点重复做oracle的事情了；还有把通过类似<code>service oracle start/stop</code>这样的形式去管理，方便是方便一点，但要知道oracle数据库轻易不会频繁重启，如有需要，我们更愿意自己使用<code>sqlplus</code>连上数据库，自己执行<code>shutdown</code>命令，因为对数据库的操作还是以慎重为主，在配置了Active Data Guard等复杂环境下，对备库也不适用，所以这里就没做这个工作。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用vmware vconverter从物理机迁移系统到虚拟机P2V（多图）]]></title>
      <url>http://seanlook.com/2015/04/05/vmware-vcenter-vconverter/</url>
      <content type="html"><![CDATA[<p>本文完整记录了如何从物理服务器，保持所有环境配置信息，纹丝不动的迁移到虚拟机上，俗称 P2V 。采用的工具是VMware公司的 <code>VMware vcenter vconverter standalone</code>，它支持将windows和linux操作系统用作源，可以执行若干转换任务：</p>
<ul>
<li>将正在运行的远程物理机和虚拟机作为虚拟机导入到vCenter Server管理的独立ESX/ESXi或ESX/ESXi主机</li>
<li>将由VMware Workstation或Microsoft Hyper-V Server托管的虚拟机导入到vCenter Server管理的ESX/ESXi主机</li>
<li>将第三方备份或磁盘映像导入到vCenterServer管理的ESX/ESXi主机中</li>
<li>将旧版服务器迁移到新硬件，而不重新安装操作系统或应用程序软件等</li>
<li>完整功能见《Converter Standalone 用户指南》</li>
</ul>
<p>Converter Standalone的组件，只能安装在Windows操作系统上：</p>
<ul>
<li>Converter Standalone Server —— 启用并执行虚拟机的导入和导出</li>
<li>Converter Standalone agent —— Converter Standalone Server会在Windows物理机上安装代理，从而将这些物理机作为虚拟机导入，完成后可以选择自动删除</li>
<li>Converter Standalone client —— 与Converter服务端配合使用，包括看到的用户界面、创建和管理转换任务等</li>
<li>Vmware vCenter Converter引导CD：是单独的组件，可用于在物理机上执行冷克隆</li>
</ul>
<a id="more"></a>
<p>冷克隆可以创建一致的源计算机的精确副本，而我们更多的是进行热克隆，也就是源服务器在迁移过程中会继续工作，这就可能会出现某些文件不一致，但Converter Standalone会在热克隆后将目标虚拟机与与主机同步，同步执行过程是将在初始克隆期间更改的块从源复制到目标。</p>
<p>本文记录的过程是，源主机是 SUSE 11.x 物理机，运行华为的智能呼叫中心应用，因此安装有Oracle数据库，对于数据文件和控制文件的一致性和安全性较高，所以建议先把oracle数据库关闭再操作；目标虚拟服务器是 ESXi 5.1，但我使用的Converter是 5.5-en，操作过程类似。下面正式开始</p>
<p>源主机：172.30.31.0/24<br>ESXi: 172.29.88.0/24，与源主机IP段无法通信<br>Helper VM: 172.29.41.0/24，与上面两个IP段都通</p>
<h2 id="1-设置源和目的主机地址"><a href="#1-设置源和目的主机地址" class="headerlink" title="1. 设置源和目的主机地址"></a>1. 设置源和目的主机地址</h2><p><img src="http://sean-images.qiniudn.com/vmware-converter-0.png" alt="vmware-converter-0.png"></p>
<ul>
<li>Source System</li>
</ul>
<p>选择你要转换的源系统，物理机为 Powered-on machine，填写其他登陆信息：<br><img src="http://sean-images.qiniudn.com/vmware-converter-1.png" alt="vmware-converter-1.png"></p>
<ul>
<li>Destination System<br>填写要在哪个主机上创建虚拟机，也就是ESXi服务器地址:<br><img src="http://sean-images.qiniudn.com/vmware-converter-2.png" alt="vmware-converter-2.png"><br>这两个过程有个简短的拉去主机信息的过程。</li>
</ul>
<h2 id="2-选择目标虚拟机和存放位置"><a href="#2-选择目标虚拟机和存放位置" class="headerlink" title="2. 选择目标虚拟机和存放位置"></a>2. 选择目标虚拟机和存放位置</h2><ul>
<li><p>Destination Virtual Machine<br>目标虚拟机名字默认是源hostname，不用选择folder：<br><img src="http://sean-images.qiniudn.com/vmware-converter-3.png" alt="vmware-converter-3.png"></p>
</li>
<li><p>Destination Location</p>
</li>
</ul>
<p>选择新虚拟机要放在ESXi的哪个Datastore上，请确保有足够的磁盘空间，不能小于源系统实际使用的大小：<br><img src="http://sean-images.qiniudn.com/vmware-converter-4.png" alt="vmware-converter-4.png"></p>
<h2 id="3-为转换任务设置其它选项"><a href="#3-为转换任务设置其它选项" class="headerlink" title="3. 为转换任务设置其它选项"></a>3. 为转换任务设置其它选项</h2><p>这一步尤为关键，直接关乎后面转换的成败。  </p>
<ul>
<li><p>Data to copy<br>设置目标虚拟机的磁盘和分区，我们可以看到自动获取的源分区信息，我这里因为硬盘资源有限，没有遵循默认的 Maintain size，但比Minmun size（在源SUSE下 <code>df -h</code> 看到的used大小）大。<br><img src="http://sean-images.qiniudn.com/vmware-converter-5.png" alt="vmware-converter-5.png"><br>CPU个数和内存大小默认也是与源主机保持一致。</p>
</li>
<li><p>Network<br>网络设置这一块比较纠结。按理说源主机不需要与目的主机的网卡通信，只需要与Helper VM能互通即可，但我一直卡在这走不过去。源主机有2块网卡在使用，最后在这一步只设置了一块能ping同源主机的网卡，迁移完成后再手动添加剂一块网卡。如下是vmware官方知识库的Note：</p>
</li>
</ul>
<blockquote>
<p>In the Conversion wizard, ensure to select the virtual machine portgroup when configuring the network card. This virtual machine portgroup must be connected to the physical network that is routable via port 22 (SSH) in both directions from the source Linux server’s configured network IP address.<br>The IP address entered must be routable to the IP address of the physical Linux source machine. Helper virtual machine IP address should able to ping the physical machine.</p>
</blockquote>
<p><img src="http://sean-images.qiniudn.com/vmware-converter-6-1.png" alt="vmware-converter-6-1.png"></p>
<p>图中看到VM Local是事先在vSphere Server上新建的端口组（portgroup），而且这个虚拟交换机vSwitch没有关联任何物理网卡：<br><img src="http://sean-images.qiniudn.com/vmware-converter-exsi-1.png" alt="vmware-converter-exsi-1.png"></p>
<ul>
<li>Helper VM network<br>Helper VM是做转换时的一个临时操作系统，运行在目的主机上，从源主机拷贝数据。如果转化的时windows，则没有这个vm，取而代之的时再源主机上运行一个agent，所以转换windows要求ESXi与源主机能互通，而转换Linux则只需要设定的Helper VM network能与源主机22端口互通即可。<br><img src="http://sean-images.qiniudn.com/vmware-converter-6-2.png" alt="vmware-converter-6-2.png"></li>
</ul>
<h2 id="4-开始转换"><a href="#4-开始转换" class="headerlink" title="4. 开始转换"></a>4. 开始转换</h2><p>可以看到转换的信息汇总，finish则开始迁移转换过程。<br><img src="http://sean-images.qiniudn.com/vmware-converter-7.png" alt="vmware-converter-7.png"><br><img src="http://sean-images.qiniudn.com/vmware-converter-8-1.png" alt="vmware-converter-8-1.png"><br><img src="http://sean-images.qiniudn.com/vmware-converter-8-2.png" alt="vmware-converter-8-2.png"></p>
<p>测试在ESXi上可以看到会自动创建一台虚拟机并启动。等待转换完成。</p>
<h2 id="5-问题"><a href="#5-问题" class="headerlink" title="5. 问题"></a>5. 问题</h2><p>转换几次失败都是因为网络设置不当，转换到1%时报错：<br><img src="http://sean-images.qiniudn.com/vmware-converter-9.png" alt="vmware-converter-9.png"></p>
<p>Error：event.ObtainHelperVmIpFailedEvent.summary</p>
<p>解决办法就是手动设置HelperVm的IP，并确保能够与源主机通信。如果继续报错，修改目标地址网卡设置，比如去除只剩一个网卡（后续添加），也设置成HelpVm网段。参考 <a href="http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=2033203" target="_blank" rel="external">Convert: converter.fault.HelperVmFailedToObtainIpFault</a> 。</p>
<p>转换Windows Server 2003时还有可能会出现<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Unable tp locate the required Sysprep files. Please upload them under </div><div class="line">c:<span class="string">\documents</span> <span class="keyword">and</span> settings<span class="string">\all</span> users<span class="string">\application</span> data<span class="string">\vmware\vmware</span> vcenter converter standalone<span class="string">\sysprep\svr2003</span> </div><div class="line"><span class="literal">on</span> the converter server machine</div></pre></td></tr></table></figure></p>
<p> 解决办法是，需要下载<a href="http://download.microsoft.com/download/9/6/a/96a40c82-26ca-4b0d-840f-b08233548900/WindowsServer2003-KB926028-v2-x86-CHS.exe" target="_blank" rel="external">WindowsServer2003-KB926028-v2-x86-CHS.exe</a>，在cmd下执行WindowsServer2003-KB926028-v2-x86-CHS –x(不可以用winrar)，解压缩出来2个目录加一堆文件,在SP2QFE目录下找到deploy.cab，再将deploy.cab解压缩(winrar即可),得到10个文件,拷贝到所提示的 svr2003 目录。参考 <a href="http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=2040984" target="_blank" rel="external">Sysprep文件位置和版本 (2040984)</a>。</p>
<h2 id="6-on-windows"><a href="#6-on-windows" class="headerlink" title="6. on windows"></a>6. on windows</h2><p>加入迁移的是windows主机，上面的操作略有不同，主要区别在于没有HelperVm，而是在需要转换的源主机上安装agent。所以要求ESXi与源主机必须能够直接通信才可以迁移。</p>
<p>参考：</p>
<ul>
<li><a href="http://yaabb163.blog.51cto.com/1975905/888856" target="_blank" rel="external">操作VMware vCenter Converter 实现物理机迁移到虚拟机</a></li>
<li><a href="https://www.vmware.com/pdf/convsa_55_guide.pdf" target="_blank" rel="external">VMware vCenter Converter Standalone User’s Guide 5.5</a> （<a href="https://www.vmware.com/files/cn/pdf/support/vsp_vcc_42_admin_guide-PG-CN.pdf" target="_blank" rel="external">中文</a>）</li>
<li><a href="http://www.vmware.com/files/cn/pdf/convsa_43_guide-PG-CN.pdf" target="_blank" rel="external">VMware vCenter Converter Standalone 用户指南 中文4.3</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在Mac在Mac/win7下上使用Vagrant打造本地开发环境]]></title>
      <url>http://seanlook.com/2015/03/25/vagrant/</url>
      <content type="html"><![CDATA[<h1 id="1-vagrant介绍"><a href="#1-vagrant介绍" class="headerlink" title="1. vagrant介绍"></a>1. vagrant介绍</h1><h2 id="1-1-vagrant能做什么"><a href="#1-1-vagrant能做什么" class="headerlink" title="1.1 vagrant能做什么"></a>1.1 vagrant能做什么</h2><p>做Web开发（java/php/python/ruby…）少不了要在本地搭建好开发环境，虽然说目前各种脚本/语言都有对应的Windows版，甚至是一键安装包，但很多时候和Windows环境的兼容性（如配置文件、编译的模块）并不是那么好，麻烦的问题是实际部署的环境通常是Linux，常常还要面临着开发和部署环境不一致，上线前还要大量的调试。而如果让每个开发人员都自己去搭建本地环境，安装虚拟机、下载ISO镜像、选择规格安装创建vm、安装OS、配置，会耗费非常多的时间，如果是团队开发应该要尽量保持每个人的运行环境一致。此时vagrant正式你所需要的。不适用正式环境部署。</p>
<p>vagrant实际上一套虚拟机管理工具，基于Ruby开发，底层支持VirtualBox、VMware甚至AWS、docker等作为虚拟化系统。我们可以通过 Vagrant 封装一个 Linux 的开发环境，分发给团队成员。成员可以在自己喜欢的桌面系统（Mac/Windows/Linux）上开发程序，代码却能统一在封装好的环境里运行，“代码在我机子上运行没有问题”这种说辞将成为历史。</p>
<p>通过上面的介绍如果你还在困惑有virtualbox或vmware为什么还要加入vagrant，纠结于要不要使用，可以参考这个问答 <a href="http://segmentfault.com/q/1010000002623455" target="_blank" rel="external">使用vagrant的意义在哪</a>，另外docker作为后起之秀也可以做vagrant能完成的事情，stackoverflow有关于两位作者讨论各自应用场景的精彩”互掐”，<a href="http://stackoverflow.com/questions/16647069/should-i-use-vagrant-or-docker-io-for-creating-an-isolated-environment" target="_blank" rel="external">传送门→</a> （<a href="http://www.cnblogs.com/vikings-blog/p/3973265.html" target="_blank" rel="external">中文</a>）。</p>
<h2 id="1-2-几个概念"><a href="#1-2-几个概念" class="headerlink" title="1.2 几个概念"></a>1.2 几个概念</h2><ul>
<li><code>Provider</code>：供应商，在这里指Vagrant调用的虚拟化工具。Vagrant本身并没有能力创建虚拟机，它是调用一些虚拟化工具来创建，如VirtualBox、VMWare、Xen、Docker，甚至AWS，这些虚拟化工具只要安装好了，vagrant会自动封装在底层通过统一的命令调用。也就是说使用vagrant时你电脑上还需要安装对应的Provider，默认是免费开源的virtualbox。</li>
</ul>
<a id="more"></a>
<ul>
<li><p><code>Box</code>：可被Vagrant直接使用的虚拟机镜像文件，大小根据内容的不同从200M-2G不等。针对不同的Provider，Box文件的格式是不一样的，从 <a href="https://atlas.hashicorp.com/boxes/search?utm_source=vagrantcloud.com&amp;vagrantcloud=1" target="_blank" rel="external">vagrantcloud.com</a> 你可以找到社区维护的box。</p>
</li>
<li><p><code>Vagrantfile</code>：Vagrant根据Vagrantfile中的配置来创建虚拟机，是Vagrant的核心。在Vagrantfile文件中你需要指明使用哪个Box（可以下载好的或自己制作，或指定在线的URL地址），虚拟机使用的内存大小和CPU，需要预安装哪些软件，虚拟机的网络配置，与host的共享目录等。</p>
</li>
<li><p><code>Provisioner</code>：是Vagrant的插件的一种。大部分现成的box并不是你正好想要的，通过使用你熟悉的provisioner，比如<code>Puppet</code>，可以在你使用<code>vagrant up</code>启动虚拟机时自动的安装软件、修改配置等初始化操作。当然你也可以在最先启动虚拟机后，使用<code>vagrant ssh</code>进去然后手动安装软件，但毕竟不是所有人都是系统管理员，写好Vagrantfile后无需人工干预马上就可以使用vm。目前支持并实现的provisioning有Puppet、Salt、Ansible、Chef这些知名的自动化运维工具，当然需要一定的使用经验；也可以使用shell provisioner，故名思议这个插件就是通过执行shell命令完成统一的作用。</p>
</li>
<li><p><code>Guest Additions</code>：这个是常在下载 base box 介绍里有的，一般用来实现host到vm的端口转发、目录共享，在开发环境上都建议装上以便测试。</p>
</li>
</ul>
<h1 id="2-安装vagrant"><a href="#2-安装vagrant" class="headerlink" title="2. 安装vagrant"></a>2. 安装vagrant</h1><ul>
<li>VirtualBox: 4.3.12，<a href="https://www.virtualbox.org/wiki/Download_Old_Builds_4_3" target="_blank" rel="external">https://www.virtualbox.org/wiki/Download_Old_Builds_4_3</a> 。我上手使用的是4.3.20，折腾出过几个问题，据说说4.3.12版本较稳定。<br>建议选择VirtualBox ，即使你电脑上已经安装VMware Workstation或Fushion，它的vagrant插件还是要收费的</li>
<li>Vagrant: 1.7.1，<a href="http://www.vagrantup.com/downloads-archive.html" target="_blank" rel="external">http://www.vagrantup.com/downloads-archive.html</a></li>
</ul>
<p>选择适合你的平台（Windows、Mac、Linux），下载对应格式的安装包。如Mac下 vagrant_1.7.1.dmg、VirtualBox-4.3.20-96997-OSX.dmg 。</p>
<h1 id="3-使用vagrant打造一个本地开发环境"><a href="#3-使用vagrant打造一个本地开发环境" class="headerlink" title="3. 使用vagrant打造一个本地开发环境"></a>3. 使用vagrant打造一个本地开发环境</h1><p>本文将会演示从 <a href="https://atlas.hashicorp.com/nrel/boxes/CentOS-6.5-x86_64" target="_blank" rel="external">nrel CentOS6.5</a> 开始，安装必要的开发包、python、插件、Puppet，然后打包成一个box分发给团队的全过程。你也可以在别人box的基础上进一步通过Vagrantfile定制自己的环境。</p>
<h2 id="3-1-初始化"><a href="#3-1-初始化" class="headerlink" title="3.1 初始化"></a>3.1 初始化</h2><h3 id="3-1-1-vagrant-box-add-box-name-box-url"><a href="#3-1-1-vagrant-box-add-box-name-box-url" class="headerlink" title="3.1.1 vagrant box add {box-name} {box-url}"></a>3.1.1 vagrant box add {box-name} {box-url}</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ vagrant <span class="built_in">box</span> <span class="built_in">add</span> ct65_00 Downloads/centos65.<span class="built_in">box</span> </div><div class="line">==&gt; <span class="built_in">box</span>: Adding <span class="built_in">box</span> <span class="string">'ct65_00'</span> (v0) <span class="keyword">for</span> provider: </div><div class="line">    <span class="built_in">box</span>: Downloading: file:<span class="comment">///Users/sean/Downloads/centos65.box</span></div><div class="line">==&gt; <span class="built_in">box</span>: Successfully added <span class="built_in">box</span> <span class="string">'ct65_00'</span> (v0) <span class="keyword">for</span> <span class="string">'virtualbox'</span>!</div><div class="line"></div><div class="line">$ ll ~/.vagrant.d/boxes/ct65_00</div><div class="line">$ vagrant <span class="built_in">box</span> list</div><div class="line"></div><div class="line"># vagrant <span class="built_in">box</span> list</div><div class="line">ct65_00   (virtualbox, <span class="number">0</span>)</div><div class="line">centos64-i386  (virtualbox, <span class="number">0</span>)</div></pre></td></tr></table></figure>
<p>这一条命令就是根据给出的box（镜像）文件地址，解压一份到用户目录<code>~/.vagrant.d/boxes/{box-name}/0/virtualbox/</code>下，所以你尽量应该以同一用户来管理进行vagrant所有操作。</p>
<p><em>F**K GFW</em><br>在GFW保护之下，这简单获取box文件反而一开始就难到我们了。官方提供的在线安装在墙外是极为方便的，<code>vagrant box add minimal/centos6</code>便自动从<code>vagrantcloud.com</code>(现更名为<code>https://atlas.hashicorp.com/search/boxes</code>)下载，直接进入第二步。</p>
<p>还有一种方法是，先<code>vagrant init minimal/centos6</code>，然后直接启动<code>vagrant up --provider virtualbox</code>。当然这些都与下载boxes到本地效果是一样的，下载方法就是在vagrantcloud.com上点开你所需要的box版本，然后再URL里加入<code>/providers/virtualbox.box</code>便得到文件地址，如 <a href="https://atlas.hashicorp.com/hashicorp/boxes/precise64" target="_blank" rel="external">https://atlas.hashicorp.com/hashicorp/boxes/precise64</a> 对应的文件为 <a href="https://atlas.hashicorp.com/hashicorp/boxes/precise64/providers/virtualbox.box" target="_blank" rel="external">https://atlas.hashicorp.com/hashicorp/boxes/precise64/providers/virtualbox.box</a> 。</p>
<p>在墙内直接在线安装启动box，会报错：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">The box <span class="string">'ubuntu/trusty64'</span> could <span class="keyword">not</span> be found <span class="keyword">or</span></div><div class="line">could <span class="keyword">not</span> be accessed <span class="keyword">in</span> <span class="keyword">the</span> remote catalog. If this is <span class="keyword">a</span> <span class="keyword">private</span></div><div class="line">box <span class="keyword">on</span> <span class="title">HashiCorp</span><span class="string">'s Atlas, please verify you'</span><span class="title">re</span> <span class="title">logged</span> <span class="title">in</span> <span class="title">via</span></div><div class="line">`vagrant login`. Also, please double-check <span class="keyword">the</span> name. The expanded</div><div class="line"><span class="built_in">URL</span> <span class="keyword">and</span> error message are shown below:</div><div class="line"></div><div class="line"><span class="built_in">URL</span>: [<span class="string">"https://atlas.hashicorp.com/ubuntu/trusty64"</span>]</div><div class="line">Error:</div></pre></td></tr></table></figure></p>
<p>一个办法是ubuntu来 <a href="http://uec-images.ubuntu.com/vagrant/" target="_blank" rel="external">http://uec-images.ubuntu.com/vagrant/</a> 下载，centos来 <a href="http://nrel.github.io/vagrant-boxes/" target="_blank" rel="external">http://nrel.github.io/vagrant-boxes/</a> 下载。我也从墙外下了几个典型的box放到了自己的百度云上共享了:<a href="http://pan.baidu.com/s/1sjHQBa1" target="_blank" rel="external">http://pan.baidu.com/s/1sjHQBa1</a> 。</p>
<p><em>2015-04-01更新：无意间发现现在不用梯子也可以访问了，Happy April Fool’s Day!</em></p>
<h3 id="3-1-2-vagrant-init-box-name"><a href="#3-1-2-vagrant-init-box-name" class="headerlink" title="3.1.2 vagrant init {box-name}"></a>3.1.2 vagrant init {box-name}</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">mkdir</span> ~/vagrant &amp;&amp; <span class="keyword">cd</span> ~/vagrant  //这个目录的目的就是统一管理你的Vagrantfile</div><div class="line">$ vagrant init ct65_00</div><div class="line">A `Vagrantfile` <span class="built_in">has</span> been placed in this directory. You are now</div><div class="line">ready <span class="keyword">to</span> `vagrant <span class="keyword">up</span>` your <span class="keyword">first</span> virtual environment! Please <span class="keyword">read</span></div><div class="line">the comments in the Vagrantfile <span class="keyword">as</span> well <span class="keyword">as</span> documentation <span class="keyword">on</span></div><div class="line">`vagrantup.<span class="keyword">com</span>` <span class="keyword">for</span> more information <span class="keyword">on</span> using Vagrant.</div><div class="line"></div><div class="line">$ <span class="keyword">vi</span> Vagrantfile</div><div class="line">...</div><div class="line">Vagrant.configure(<span class="number">2</span>) <span class="keyword">do</span> |config|</div><div class="line">  config.<span class="keyword">vm</span>.box = <span class="string">"ct65_00"</span></div><div class="line">  onfig.<span class="keyword">vm</span>.network <span class="string">"forwarded_port"</span>, gues<span class="variable">t:</span> <span class="number">80</span>, hos<span class="variable">t:</span> <span class="number">8080</span></div><div class="line">#  config.<span class="keyword">vm</span>.synced_folder <span class="string">"../data"</span>, <span class="string">"/vagrant_data"</span></div><div class="line">  config.<span class="keyword">vm</span>.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |vb|</div><div class="line">    vb.memory = <span class="string">"384"</span></div><div class="line">    vb.cpus = <span class="number">1</span></div><div class="line">  end</div><div class="line">  config.<span class="keyword">vm</span>.<span class="built_in">hostname</span> = <span class="string">"vg-ct65_00.tp-link.net"</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>init只是在当前目录生成一个<code>Vagrantfile</code>文件和<code>.vagrant/</code>目录，可以对它进行修改，比如定义 vm guest machine 的hostname、memory、cpu等，具体有关语法介绍见后文。</p>
<p>用户后面<code>up</code>虚拟机，这个 box-name 与上面add的相同，如果是 base 则可以省略。</p>
<h2 id="3-2-启动虚拟机"><a href="#3-2-启动虚拟机" class="headerlink" title="3.2 启动虚拟机"></a>3.2 启动虚拟机</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># vagrant up</span></div><div class="line"><span class="type">Bringing</span> machine '<span class="keyword">default</span>' up with 'virtualbox' provider...</div><div class="line">==&gt; <span class="keyword">default</span>: <span class="type">Importing</span> base box 'ct65_00'...</div><div class="line">==&gt; <span class="keyword">default</span>: <span class="type">Matching</span> <span class="type">MAC</span> address for <span class="type">NAT</span> networking...</div><div class="line">==&gt; <span class="keyword">default</span>: <span class="type">Setting</span> the name of the <span class="type">VM</span>: v-box_default_1427284884787_97348</div><div class="line">==&gt; <span class="keyword">default</span>: <span class="type">Clearing</span> any previously set network interfaces...</div><div class="line">==&gt; <span class="keyword">default</span>: <span class="type">Preparing</span> network interfaces based on configuration...</div><div class="line">    <span class="keyword">default</span>: <span class="type">Adapter</span> 1: nat</div><div class="line">==&gt; <span class="keyword">default</span>: <span class="type">Forwarding</span> ports...</div><div class="line">    <span class="keyword">default</span>: 22 =&gt; 2222 (<span class="title">adapter</span> 1)</div><div class="line">==&gt; <span class="keyword">default</span>: <span class="type">Booting</span> <span class="type">VM</span>...</div><div class="line">==&gt; <span class="keyword">default</span>: <span class="type">Waiting</span> for machine to boot. <span class="type">This</span> may take a few minutes...</div><div class="line">    <span class="keyword">default</span>: <span class="type">SSH</span> address: 127.0.0.1:2222</div><div class="line">    <span class="keyword">default</span>: <span class="type">SSH</span> username: vagrant</div><div class="line">    <span class="keyword">default</span>: <span class="type">SSH</span> auth method: private key</div><div class="line">    <span class="keyword">default</span>: <span class="type">Warning</span>: <span class="type">Connection</span> timeout. <span class="type">Retrying</span>...</div><div class="line">    <span class="keyword">default</span>: <span class="type">Warning</span>: <span class="type">Connection</span> timeout. <span class="type">Retrying</span>...</div><div class="line">    ...</div><div class="line">    <span class="keyword">default</span>: <span class="type">Warning</span>: <span class="type">Remote</span> connection disconnect. <span class="type">Retrying</span>...</div><div class="line">    <span class="keyword">default</span>: <span class="type">Warning</span>: <span class="type">Remote</span> connection disconnect. <span class="type">Retrying</span>...</div><div class="line">==&gt; <span class="keyword">default</span>: <span class="type">Machine</span> booted and ready!</div><div class="line">==&gt; <span class="keyword">default</span>: <span class="type">Checking</span> for guest additions in <span class="type">VM</span>...</div><div class="line">==&gt; <span class="keyword">default</span>: <span class="type">Mounting</span> shared folders...</div><div class="line">    <span class="keyword">default</span>: /vagrant =&gt; /root/vagrant/v-box/ct65_00</div></pre></td></tr></table></figure>
<p>up过程是默认会根据当前目录下的Vagrantfile来启动vm，如果当前目录没有Vagrantfile，则去上层目录寻找，依次类推。第一次<code>vagrant up ct65_00</code>时会从<code>~/.vagrant.d/boxes</code>中导入相应的box文件到<code>~/VirtualBox VMs/</code>，可以通过<code>vboxmanage showvminfo {VM-ID}</code>看到该虚拟机的配置（Mac上为VBoxManage）。如果你想让虚拟机存储在指定位置，如我的Mac SSD硬盘空间贵，可以运行VirtualBox，手动设置存储/storage的路径。</p>
<p>默认 localhost:2222 转发到 guest:22 以供ssh连接；用户名/密码：vagrant/vagrant；默认共享目录就是host上Vagrantfile所在目录；如果电脑配置比较低导致启动时间比较长，或者VirtualBox启动出错，可能会提示上面的 <a href="http://stackoverflow.com/questions/22575261/vagrant-stuck-connection-timeout-retrying" target="_blank" rel="external">Connection timeout</a> 。</p>
<p>另外提示一下，某次我在Linux上测试，由于Linux host本身也是vSphere虚拟机，通过vagrant启动virtualbox另一个虚拟机（即嵌套），一直Retrying，后来根据上面 stackoverflow 打开了VBox GUI，发现是CPU架构的问题，一直堵塞，所以就不建议虚拟机上再装虚拟机了：<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">VT-x/AMD-V hardware acceleration <span class="keyword">is</span> <span class="keyword">not</span> available <span class="keyword">on</span> your system. Your <span class="number">64</span>-<span class="built_in">bit</span> guest will fail <span class="keyword">to</span> detect a <span class="number">64</span>-<span class="built_in">bit</span> CPU <span class="keyword">and</span> will <span class="keyword">not</span> be able <span class="keyword">to</span> boot.</div></pre></td></tr></table></figure></p>
<h2 id="3-2-连接虚拟机，初始化环境"><a href="#3-2-连接虚拟机，初始化环境" class="headerlink" title="3.2 连接虚拟机，初始化环境"></a>3.2 连接虚拟机，初始化环境</h2><h3 id="vagrant-ssh"><a href="#vagrant-ssh" class="headerlink" title="vagrant ssh"></a>vagrant ssh</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vagrant ssh</div><div class="line">Last login: Tue Mar <span class="number">31</span> <span class="number">02</span>:<span class="number">15</span>:<span class="number">38</span> <span class="number">2015</span> <span class="keyword">from</span> <span class="number">10.0</span>.<span class="number">2.2</span></div><div class="line">Welcome <span class="keyword">to</span> your Vagrant-built <span class="keyword">virtual</span> machine.</div></pre></td></tr></table></figure>
<p>一般建立box时约定的用户名/密码：vagrant/vagrant，root密码也是 vagrant，默认的网络连接方式是Host-Only。</p>
<h3 id="定制你的环境"><a href="#定制你的环境" class="headerlink" title="定制你的环境"></a>定制你的环境</h3><p>如安装jdk，创建用户，解压tomcat，修改server.xml，添加yum源等。这里一步到位，唯一要说明的是tomcat conf/server.xml 的<br><code>&lt;Context path=&quot;&quot; docBase=&quot;/vagrant_data&quot; reloadable=&quot;true&quot; &gt;...</code>应用目录设置为共享目录。</p>
<h2 id="3-3-打包成box"><a href="#3-3-打包成box" class="headerlink" title="3.3 打包成box"></a>3.3 打包成box</h2><h3 id="3-3-1-安装必要软件"><a href="#3-3-1-安装必要软件" class="headerlink" title="3.3.1 安装必要软件"></a>3.3.1 安装必要软件</h3><p>打包是为了分发出去，做扩展用<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># yum install -y lrzsz telnet vim puppet puppetmaster</span></div></pre></td></tr></table></figure></p>
<p>如果你是从0开始建立一个box，当然还需要创建vagrant用户以及public key，具体可以参考<a href="http://blog.csdn.net/samxx8/article/details/38943395" target="_blank" rel="external">如何制作一个vagrant的base box</a>。</p>
<h3 id="3-3-2-安装Virtualbox-Guest-Additions"><a href="#3-3-2-安装Virtualbox-Guest-Additions" class="headerlink" title="3.3.2 安装Virtualbox Guest Additions"></a>3.3.2 安装Virtualbox Guest Additions</h3><p>每个人电脑上安装的Virtualbox版本很可能不一样，<code>vagrant up</code>可能会有提示版本不兼容（同一大版本号还好，可省略这一步），导致host到guest共享目录模块失败，最终无法启动虚拟机。</p>
<p>安装方法可以有 <a href="https://github.com/dotless-de/vagrant-vbguest" target="_blank" rel="external">vagrant-vbguest</a>（注意这是vagrant插件，不是virtualbox插件），使用超级详细，只需执行<code>vagrant plugin install vagrant-vbguest</code>，默认从本地找 VBoxGuestAdditions.iso （各平台路径一般都可以找到），如果没找到则去<code>http://download.virtualbox.org/virtualbox/%{version}/VBoxGuestAdditions_%{version}.iso</code> 下载，直接启动vm便可安装或更新virtualbox guest additions ，甚至可以通过<code>vagrant vbguest</code>命令给正在运行的vm安装，缺点是 plugin install 得连网。下面是手动在vm内部安装：</p>
<p>一般最小化的box不带有CDROM，需要通过VirtualBox图形化界面添加一个DVD/CD存储设备，然后在启动VM后 Devices -&gt; Insert Guest Additions CD 。（相信你可以可以找到办法直接挂载 .iso 文件到vm里面，免去添加多余设备）</p>
<blockquote>
<p>for linux : /usr/share/virtualbox/VBoxGuestAdditions.iso<br>for Mac : /Applications/VirtualBox.app/Contents/MacOS/VBoxGuestAdditions.iso<br>for Windows : %PROGRAMFILES%/Oracle/VirtualBox/VBoxGuestAdditions.iso</p>
</blockquote>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>sudo yum install linux-headers-<span class="variable">$(</span>uname -r) build-essential dkms </div><div class="line"><span class="variable">$ </span>sudo mount /dev/cdrom /media/cdrom</div><div class="line"><span class="variable">$ </span>sudo sh /media/cdrom/VBoxLinuxAdditions.run --nox11</div></pre></td></tr></table></figure>
<p>官方参考：<a href="http://docs.vagrantup.com/v2/virtualbox/boxes.html" target="_blank" rel="external">http://docs.vagrantup.com/v2/virtualbox/boxes.html</a></p>
<h3 id="3-3-3-vagrant-package"><a href="#3-3-3-vagrant-package" class="headerlink" title="3.3.3 vagrant package"></a>3.3.3 vagrant package</h3><p>打包导出：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> vagrant package --output sean-vg-ct65_ts.box</div><div class="line">=<span class="ruby">=&gt; <span class="symbol">default:</span> Attempting graceful shutdown of VM...</span></div><div class="line">=<span class="ruby">=&gt; <span class="symbol">default:</span> Clearing any previously set forwarded ports...</span></div><div class="line">=<span class="ruby">=&gt; <span class="symbol">default:</span> Exporting VM...</span></div><div class="line">=<span class="ruby">=&gt; <span class="symbol">default:</span> Compressing package <span class="symbol">to:</span> /Users/sean/vagrant/sean-vg-ct65_ts.box</span></div></pre></td></tr></table></figure></p>
<p>当前目录下若存在同名package.box则会export失败。打包的来源并不是<code>.vagrant.d</code>而是VirtualBox虚拟机本身，可以通过<code>--base vm-name</code>来指定所导出的虚拟机名称，<code>--vagrantfile file-pathname</code>可以将Vagrantfile直接封进box中。以后就可以把这个 .box 文件分发给开发人员使用了。</p>
<h1 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h1><h2 id="4-1-命令"><a href="#4-1-命令" class="headerlink" title="4.1 命令"></a>4.1 命令</h2><p><code>vagrant suspend</code>将虚拟机置于休眠状态。这时候主机会保存虚拟机的当前状态。再用vagrant up启动虚拟机时能够返回之前工作的状态。这种方式优点是休眠和启动速度都很快，只有几秒钟。缺点是需要额外的磁盘空间来存储当前状态。</p>
<p><code>vagrant halt</code>则是关机。如果想再次启动还是使用vagrant up命令，不过需要多花些时间。</p>
<p><code>vagrant destroy</code>则会将虚拟机从磁盘中删除。如果想重新创建还是使用vagrant up命令。</p>
<p><code>vagrant reload</code>从Vagrantfile重新启动虚拟机。</p>
<p><code>vagrant global-status</code>输出所有虚拟机当前运行状态，关机、已启动等。</p>
<p>另外1.2以上版本的Vagrant还引用了插件机制。可以通过vagrant plugin来添加各种各样的plugin，这给Vagrant的应用带来了更大的灵活性和针对性。比如可以添加vagrant-windows的插件来增加对windows系统的支持，通过添加vagrant-aws插件来实现给AWS创建虚拟机的功能。你也可以编写自己的插件。由于Vagrant是ruby写的一个gem，其插件的编写也是使用的Ruby语言。</p>
<p>关于 Vagrantfile说明以及网络、多机器管理的配置，见 <a href="http://seanlook.com/2015/04/01/vagrantfile/">Varantfile说明</a>。</p>
<h2 id="4-2-问题集"><a href="#4-2-问题集" class="headerlink" title="4.2 问题集"></a>4.2 问题集</h2><ul>
<li><p>选用配置略高一点的电脑做host，否则启动会相当慢而且会提示<code>Warning: Connection timeout. Retrying...</code>，如果在300s内没有boot up，你可能需要启用GUI界面可以帮我们诊断一些启动失败的问题，<code>vb.gui = true</code>。坚决不要在虚拟机里玩vagrant！</p>
</li>
<li><p>不要轻易在VirtualBox图形界面下强行关闭虚拟机，可能会出现意想不到的错误，如 The guest machine entered an invalid state while waiting for it<br>to boot. Valid states are ‘starting, running’. The machine is in the<br>‘poweroff’ state … 针对这个问题的解决办法，<a href="https://github.com/mitchellh/vagrant/issues/2157" target="_blank" rel="external">issue 2175</a> 没能搞定，直接destroy重来。</p>
</li>
<li><p>我在ubuntu trustry 64-bit 安装virtualbox时，提示依赖没装（libgl1-mesa-glx libqt4-network libqt4-opengl libqtcore4 libqtgui4 libxcursor1 libxinerama1 libxmu6 libxt6），<br>使用<code>apt-get install libqt4-opengl</code>来安装上面的依赖，如果报错<code>The following packages have unmet dependencies...</code>，执行<code>apt-get -f install</code> 解决。</p>
</li>
<li><p>安装 virtualbox guest additions 失败<br>在 3.3.2节安装Virtualbox Guest Additions时，运行<code>./media/cdrom/VBoxLinuxAdditions.run</code>后提示：</p>
</li>
</ul>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">The headers <span class="keyword">for</span> <span class="keyword">the</span> current running kernel were <span class="keyword">not</span> found. If <span class="keyword">the</span> following module </div><div class="line">compilation fails <span class="keyword">then</span> this could be <span class="keyword">the</span> reason. The missing package can be probably</div><div class="line"> installed <span class="keyword">with</span> yum install kernel-devel<span class="number">-2.6</span><span class="number">.32</span><span class="number">-431.</span>el6.x86_64</div><div class="line"></div><div class="line">Building <span class="keyword">the</span> main Guest Additions module                   [FAILED]</div><div class="line">...</div></pre></td></tr></table></figure>
<p>关机后启动虚拟机，相应的会提示：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Failed <span class="built_in">to</span> mount <span class="built_in">folders</span> <span class="keyword">in</span> Linux guest. This is usually because <span class="keyword">the</span> <span class="string">"vboxsf"</span> <span class="built_in">file</span> </div><div class="line"><span class="keyword">system</span> is <span class="keyword">not</span> available. Please verify that <span class="keyword">the</span> guest additions are properly </div><div class="line">installed <span class="keyword">in</span> <span class="keyword">the</span> guest <span class="keyword">and</span> can work properly. The <span class="keyword">command</span> <span class="title">attempted</span> <span class="title">was</span>:</div><div class="line"></div><div class="line"></div><div class="line">mount -t vboxsf -o uid=id -u vagrant,gid=getent group vagrant | cut -d: -f3 vagrant /vagrant</div><div class="line">mount -t vboxsf -o uid=id -u vagrant,gid=id -g vagrant vagrant /vagrant</div><div class="line"></div><div class="line">The error output <span class="built_in">from</span> <span class="keyword">the</span> <span class="keyword">last</span> <span class="keyword">command</span> <span class="title">was</span>:</div><div class="line"></div><div class="line">/sbin/mount.vboxsf: mounting failed <span class="keyword">with</span> <span class="keyword">the</span> error: No such device</div></pre></td></tr></table></figure></p>
<p>原因就是旧版本卸载成功但新版本guest additions却因为<code>yum install kernel-devel</code>找不到软件包（No package available）失败。这种情况很少见，kernel-devel 一般都可以装上去解决。如果像我这样提示死活没这个软件包的，换个box吧！</p>
<ul>
<li><p>硬盘扩容<br>进入到虚拟机后，通过<code>df -h</code>你可能看到磁盘空间不足，需要扩容（不允许缩小空间），就可以通过以下方法完成。</p>
<ol>
<li><p>手动方式，与是否使用vagrant无关<br>halt关闭虚拟机虚拟机后，使用 <code>VBoxManage modifyhd box-disk1.vdi --resize 10240</code> 即完成修改。但是如果虚拟机磁盘格式创建时使用的是vmdk，则不支持直接vmdk格式修改，需要通过<code>VBoxManage clonehd box_disk1.vmdk box_disk2.vdi --format VDI</code>转换成vdi格式，然后在图形化VirtualBox中选择这个新的磁盘。另外提醒一句，这里的扩容是修改动态分配的磁盘的虚拟大小而不是实际大小，所以假如resize后的值比预分配的磁盘要小的话，会提示 Progress state: VBOX_E_NOT_SUPPORTED ..VBoxManage: error: Resize hard disk operation for this format is not implemented yet!<br>相关参考：<a href="http://stackoverflow.com/questions/14917353/resizing-disk-space-on-vagrant-box" target="_blank" rel="external">Resizing disk space on vagrant box</a>、<br><a href="http://www.streamwave.com/systems-administration/how-to-extend-your-virtualbox-virtual-hard-drive/" target="_blank" rel="external">VirtualBox VBOX_E_NOT_SUPPORTED Drive Resize Error</a>、<a href="https://gist.github.com/christopher-hopper/9755310" target="_blank" rel="external">Resize a Hard Disk for a Virtual Machine</a> 。</p>
</li>
<li><p>通过Vagrantfile指令修改</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">config</span>.vm.provider <span class="string">"virtualbox"</span> <span class="built_in">do</span> |vb|</div><div class="line">  vb.customize <span class="string">'pre-boot'</span>, [<span class="string">'modifyhd'</span>, <span class="string">'e91678c3-b49b-489b-b280-4e138533252d'</span>, <span class="string">'--resize'</span>, <span class="string">'10240'</span>]</div><div class="line"><span class="built_in">end</span></div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<p>上面那串数字字母，是虚拟磁盘的UUID，可以先通过<code>ps -ef|grep Virtual</code>(Mac, <code>virtualbox</code> in Linux )查到虚拟机UUID，再通过<code>VBoxManage showvminfo {VM UUID}|grep vdi</code>看到这个 disk UUID。参考 <a href="https://github.com/mitchellh/vagrant/issues/2339" target="_blank" rel="external">Add some way to increase disk space from Vagrantfile</a>。<br>扩容完成后把Vagrantfile中对应的部分去掉，以免每次启动都进行这步操作。</p>
<ul>
<li><a href="http://www.cnblogs.com/huang0925/p/3349841.html" target="_blank" rel="external">Hello Vagrant</a></li>
<li><a href="http://segmentfault.com/a/1190000000264347" target="_blank" rel="external">使用 Vagrant 打造跨平台开发环境</a></li>
<li><a href="https://github.com/astaxie/Go-in-Action/blob/master/ebook/zh/01.2.md" target="_blank" rel="external">Vagrant安装配置</a></li>
<li><a href="http://docs.vagrantup.com/v2/virtualbox/boxes.html" target="_blank" rel="external">Creating a Base Box</a></li>
<li><a href="http://blog.csdn.net/samxx8/article/details/38943395" target="_blank" rel="external">如何制作一个vagrant的base box</a></li>
<li><a href="http://blog.icodeu.com/?tag=vagrant" target="_blank" rel="external">http://blog.icodeu.com/?tag=vagrant</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[习惯晚睡]]></title>
      <url>http://seanlook.com/2015/03/14/sleep-late-for-what/</url>
      <content type="html"><![CDATA[<p>很久没有像今天这样坐下来写东西了，也不知道抽的什么风，大上午背着电脑跑到南山图书馆来了，可能是实在想不到大好的周末能做些什么吧。其实也倒不是心血来潮，过年回到深圳以后，很长一段时间都在思考过去，规划以后的方向，零零碎碎的记录了一些，但至今未能成文。但今天不是讲规划，而是——习惯，晚睡的习惯。</p>
<p><img src="http://sean-images.qiniudn.com/overthinking.jpg" alt="overthinking"></p>
<p>作为刚24的满血青年，很多人可能会反驳晚一点睡算什么，此时不任性何时才任性。我倒不是说晚睡不行，问题是我因何而晚睡。最近一直在看池建强老师的《MacTalk-人生元编程》这本书，无论Apple的联合创始人沃茨，还是微软的艾伦，在初期哪一个不是没日没夜的工作。当然咱无法与这些传奇人物比拟，但至少说明熬夜，要值得，如果我是在熬夜积累自己，或能对改善以后的状况，我就觉得值得。</p>
<p>可是现在我们大多数人熬夜在干嘛呢，包括我也有反思自己。</p>
<p>这里先说说我的熬夜习惯从何而来吧。大学时候有电脑开始。那时候除了学业，还有部分学生工作，再有就是qq，往往深夜凌晨一两点还在挂着电脑qq，还记得太晚不睡免得有同学说，特意到了1点左右调成隐身，一边看电影，还一边刷微博。当时有个玩的较好的室友，他的原则是过点（0点）必睡，我还曾与他争论过“到点睡觉，规规矩矩”“大学时不疯狂一下没多大意义”，可是现在我回头想来我也并没有因为比他多熬几个夜而记起怎样怎样刻骨铭心的记忆。现在想来更难以理解的是，我大三大四好像竟然是因为学习任务而熬夜加班加点，甚至考研的时间里依旧毫无规律，噢不，有规律的熬夜，而且愈发厉害熬到3点。这样都能考上的话我就不用坐在这里一边埋怨一边writing了。当然还有部分属于我个人的故事……</p>
<p>也就是这样习惯，毕业后延续到现在，不过较好的一点是没那么严重，平日晚一点到1点，因为考虑到第二天还要上班这样一个事实，一到周末，又毅然决然的熬到凌晨三四点，而大部分情况是在看电影电视，似乎周五的晚上是从11点开始，周六的白天从下午一点开始……</p>
<a id="more"></a>
<p>写到这里，我倒不是谴责自己晚睡这样一个习惯，因为我相信肯定还是有很大一部分人跟我一样有着凌晨一点才睡的习惯，目前跟我一起合租的同事就是两个活生生的例子，更不是告诉自己“熬夜对身体有害”这样一个众所周知的烂道理。有些人熬夜是迫不得已，而我是因为三四年时间形成的习惯。我依然坚持大学里我对室友说的那个观点（前提是我是男的，身体也没什么旧疾），熬夜疯一下可以，问题是干什么。有多少人可以熬夜而不用考虑明天。</p>
<p>最近上班没什么特别的工作，拿出不少时间去简书上看看文章，或搜到某个人博客，就闲来无事的点开Archive列表，随机点开看看。看到人家几年来做的点点滴滴，同龄人群里，我却丝毫想不起那时候我在做什么，依旧是同龄人我现在正在学的东西，人家两三年前就在用了。这也不难解释我现在的处境了。不止一次有过努力追赶别人的想法，可是晚上一回到家，不是迷上电视就是电脑手机。回家前我计划要做的事情实施了吗？这样是会有一点点累，可我24岁的年龄过着如此安逸的生活，这不是我应得的。来自家里的压力，我应该是努力在工作技能上积累，在生活情商上积累，而我没那么多时间，慢慢来…</p>
<p>一个人的努力是孤独的，也是幸运的。毫无理由的晚睡，第二天迷迷糊糊起床，这不是我想要的状态。想要有所作为，可能就因为一个不经意的习惯而磨损了自己的动力。</p>
<p>我想象这样一个场景：</p>
<ul>
<li><p>早上提前30分钟（七点）起来，轻轻松松的洗漱，打扮，然后从容的吃个早饭，车上看看知乎。</p>
</li>
<li><p>上班时间，没事少刷朋友圈，早中晚看几次就行了。中午看看新闻，午休一觉，快速进入工作状态，不能再迷糊半个小时（这也成习惯了吧）。</p>
</li>
<li><p>下午三四点上班累了，走动走动，聊聊天，打打水。眼睛酸了，滴滴眼药水（买了别浪费）</p>
</li>
<li><p>晚上下班车上，听听歌。早的话，跟室友一起买买菜做做饭。</p>
</li>
<li><p>10点以后是自己的时间，我可以舒舒服服的洗个澡，不开电脑，然后看一个半小时的书，或者看看新闻和喜欢的节目，再或者利用好Mac学点东西，写点东西。</p>
</li>
<li><p>周末，九点钟起来。偶尔聚聚，逛逛，但至少拿出一天时间去图书馆，家里真不适合学习、阅读和写作。拿一个晚上去打打球，看看电影什么的。</p>
</li>
</ul>
<p>有人会说，不就是晚睡而已吗，至于这样吗，功利性太强了！</p>
<p>就我目前各方面不稳定因素来说，我觉得有必要这样一个list。把平时和睡前那些零碎时间利用起来，安安静静的坚持多看几书，不再拘泥于自己知道的小圈子，才会发现更多机会。</p>
<p>——闹钟真是一个伟大的发明，它让你放心的入睡，也无情的把你叫醒，为了减轻你的埋怨还允许你贪睡。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[php5.3连接oracle的客户端及pdo_oci模块安装]]></title>
      <url>http://seanlook.com/2015/03/10/install-pdo-oci-oci8-phpext/</url>
      <content type="html"><![CDATA[<p>php连接oracle数据库虽然不是最佳拍档，但组内开发确实有这样需求。如果没有参考合适的文档，这个过程还是挺折磨人的，下面是一个记录，原型是国外的一篇博客 <a href="http://shiki.me/blog/installing-pdo_oci-and-oci8-php-extensions-on-centos-6-4-64bit/" target="_blank" rel="external">Installing PDO_OCI and OCI8 PHP extensions on CentOS 6.4 64bit</a>。</p>
<p>假设你已经安装好php的环境，php版本为5.3，要连接的oracle服务器是 11g R2，操作系统版本CentOS 6.4 x86_64。如果没有安装php，可以通过以下命令安装：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># yum install php php-pdo</span></div><div class="line"><span class="comment"># yum install php-devel php-pear php-fpm php-gd php-ldap \</span></div><div class="line">php-mbstring php-<span class="keyword">xml</span> <span class="title">php-xmlrpc</span>  php- zlib zlib-devel bc libaio glibc</div></pre></td></tr></table></figure></p>
<p>假如web服务器使用apache。</p>
<h2 id="1-安装InstantClient"><a href="#1-安装InstantClient" class="headerlink" title="1. 安装InstantClient"></a>1. 安装InstantClient</h2><p>instantclient是oracle的连接数据库的简单客户端，不用安装一个500Moracle客户端就可以连接oracle数据库，有windows和linux版本。从 <a href="http://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html" target="_blank" rel="external">这里</a> 选择需要的版本下载，只需Basic和Devel两个rpm包。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">安装</div><div class="line"># rpm -ivh oracle-instantclient11<span class="number">.2</span>-basic<span class="number">-11.2</span><span class="number">.0</span><span class="number">.4</span><span class="number">.0</span><span class="number">-1.</span>x86_64.rpm</div><div class="line"># rpm -ivh oracle-instantclient11<span class="number">.2</span>-devel<span class="number">-11.2</span><span class="number">.0</span><span class="number">.4</span><span class="number">.0</span><span class="number">-1.</span>x86_64.rpm</div><div class="line"></div><div class="line">软链接</div><div class="line"># ln -s /usr/include/oracle/<span class="number">11.2</span>/client64 /usr/include/oracle/<span class="number">11.2</span>/client</div><div class="line"># ln -s /usr/lib/oracle/<span class="number">11.2</span>/client64 /usr/lib/oracle/<span class="number">11.2</span>/client</div></pre></td></tr></table></figure></p>
<p>64位系统需要创建32位的软链接，这里可能是一个遗留bug，不然后面编译会出问题。</p>
<p>接下来还要让系统能够找到oracle客户端的库文件，修改LD_LIBRARY_PATH：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vi /etc/profile.d/oracle.sh</span></div><div class="line">export ORACLE_HOME=<span class="regexp">/usr/lib</span><span class="regexp">/oracle/</span><span class="number">11.2</span>/client64</div><div class="line">export LD_LIBRARY_PATH=$ORACLE_HOME/<span class="class"><span class="keyword">lib</span></span></div></pre></td></tr></table></figure></p>
<p>执行<code>source /etc/profile.d/oracle.sh</code>使环境变量生效。</p>
<a id="more"></a>
<h2 id="2-安装PDO-OCI"><a href="#2-安装PDO-OCI" class="headerlink" title="2. 安装PDO_OCI"></a>2. 安装PDO_OCI</h2><p>在连接互联网的情况下，通过pecl在线安装php的扩展非常简单，参考 <a href="http://stackoverflow.com/questions/21936091/how-to-install-oracle-instantclient-and-pdo-oci-on-ubuntu-machine" target="_blank" rel="external">How to install oracle instantclient and pdo_oci on ubuntu machine</a> 。</p>
<p>从<a href="https://pecl.php.net/package/PDO_OCI下载" target="_blank" rel="external">https://pecl.php.net/package/PDO_OCI下载</a> PDO_OCI-1.0.tgz 源文件。<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># wget https://pecl.php.net/get/PDO_OCI-1.0.tgz</span></div><div class="line"><span class="meta"># tar -xvf PDO_OCI-1.0.tgz</span></div><div class="line"><span class="meta"># cd PDO_OCI-1.0</span></div></pre></td></tr></table></figure></p>
<p>由于PDO_OCI很久没有更新，所以下面需要编辑<code>ODI_OCI-1.0</code>文件夹里的<code>config.m4</code>文件来让它支持11g：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在第10行左右找到与下面类似的代码，添加这两行：</span></div><div class="line">elif test -f $PDO_OCI_DIR/<span class="class"><span class="keyword">lib</span>/<span class="title">libclntsh</span>.$<span class="title">SHLIB_SUFFIX_NAME</span>.11.2;</span> <span class="keyword">then</span></div><div class="line">  PDO_OCI_VERSION=<span class="number">11.2</span></div><div class="line"></div><div class="line"><span class="comment"># 在第101行左右添加这几行：</span></div><div class="line"><span class="number">11.2</span>)</div><div class="line">  PHP_ADD_LIBRARY(clntsh, <span class="number">1</span>, PDO_OCI_SHARED_LIBADD)</div><div class="line">  ;;</div></pre></td></tr></table></figure></p>
<p>编译安装pdo_oci扩展：（安装完成后可在 /usr/lib64/php/modules/pdo_oci.so 找到这个模块）<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> phpize</div><div class="line"><span class="symbol">$</span> ./configure --with-pdo-oci=instantclient,/usr,<span class="number">11.2</span></div><div class="line"><span class="symbol">$</span> make</div><div class="line"><span class="symbol">$</span> sudo make install</div></pre></td></tr></table></figure></p>
<p>要启用这个扩展，在<code>/etc/php.d/</code>下新建一个<code>pdo_oci.ini</code>文件，内容：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">extension</span>=pdo_oci.so</div></pre></td></tr></table></figure></p>
<p>验证安装成功：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># php -i|grep oci</span></div><div class="line">看到类似下面的内容则安装成功:</div><div class="line">/etc/php.d/pdo_oci.ini,</div><div class="line">PDO drivers =&gt; oci, sqlite</div><div class="line"></div><div class="line">或</div><div class="line"><span class="meta"># php -m</span></div></pre></td></tr></table></figure></p>
<h2 id="3-安装OCI8"><a href="#3-安装OCI8" class="headerlink" title="3. 安装OCI8"></a>3. 安装OCI8</h2><p>从 <a href="https://pecl.php.net/package/oci8" target="_blank" rel="external">https://pecl.php.net/package/oci8</a> 下载oci8-2.0.8.tgz源文件。<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># wget https://pecl.php.net/get/oci8-2.0.8.tgz</span></div><div class="line"><span class="meta"># tar -xvf oci8-2.0.8.tgz</span></div><div class="line"><span class="meta"># cd oci8-2.0.8</span></div></pre></td></tr></table></figure></p>
<p>编译安装oci8扩展：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># phpize</span></div><div class="line"><span class="meta"># ./configure --with-oci8=shared,instantclient,/usr/lib/oracle/11.2/client64/lib</span></div><div class="line"><span class="meta"># make</span></div><div class="line"><span class="meta"># make install</span></div></pre></td></tr></table></figure></p>
<p>要启用这个扩展，在<code>/etc/php.d/</code>下新建一个<code>oci8.ini</code>文件，内容：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">extension</span>=oci8.so</div></pre></td></tr></table></figure></p>
<p>验证安装成功：<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># php -i|grep oci8</div><div class="line">/etc/php.d/oci8.ini,</div><div class="line">oci8</div><div class="line">oci8.connection_class =&gt; no <span class="keyword">value</span> =&gt; no <span class="keyword">value</span></div><div class="line">oci8.default_prefetch =&gt; <span class="number">100</span> =&gt; <span class="number">100</span></div><div class="line">oci8.events =&gt; <span class="type">Off</span> =&gt; <span class="type">Off</span></div><div class="line">oci8.max_persistent =&gt; -<span class="number">1</span> =&gt; -<span class="number">1</span></div><div class="line">oci8.old_oci_close_semantics =&gt; <span class="type">Off</span> =&gt; <span class="type">Off</span></div><div class="line">oci8.persistent_timeout =&gt; -<span class="number">1</span> =&gt; -<span class="number">1</span></div><div class="line">oci8.ping_interval =&gt; <span class="number">60</span> =&gt; <span class="number">60</span></div><div class="line">oci8.privileged_connect =&gt; <span class="type">Off</span> =&gt; <span class="type">Off</span></div><div class="line">oci8.statement_cache_size =&gt; <span class="number">20</span> =&gt; <span class="number">20</span></div><div class="line"><span class="type">OLDPWD</span> =&gt; /usr/local/src/oci8-<span class="number">2.0</span>.<span class="number">8</span></div><div class="line">_SERVER[<span class="string">"OLDPWD"</span>] =&gt; /usr/local/src/oci8-<span class="number">2.0</span>.<span class="number">8</span></div></pre></td></tr></table></figure></p>
<p>最后别忘了重启逆web服务器如apache，可以通过phpinfo()来确保扩展是否成功安装。</p>
<h2 id="4-测试连接"><a href="#4-测试连接" class="headerlink" title="4. 测试连接"></a>4. 测试连接</h2><p>在你web服务器如apache的php目录下创建<code>testoci.php</code>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"></div><div class="line">$conn = oci_connect(<span class="string">'username'</span>, <span class="string">'password'</span>, <span class="string">'172.29.88.178/DBTEST'</span>);</div><div class="line"></div><div class="line">$stid = oci_parse($conn, <span class="string">'select table_name from user_tables'</span>);</div><div class="line">oci_execute($stid);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;table&gt;\n"</span>;</div><div class="line"><span class="keyword">while</span> (($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) != <span class="keyword">false</span>) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;tr&gt;\n"</span>;</div><div class="line">    <span class="keyword">foreach</span> ($row <span class="keyword">as</span> $item) &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"  &lt;td&gt;"</span>.($item !== <span class="keyword">null</span> ? htmlentities($item, ENT_QUOTES) : <span class="string">"&amp;nbsp;"</span>).<span class="string">"&lt;/td&gt;\n"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;/tr&gt;\n"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;/table&gt;\n"</span>;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>访问这个页面就应该可以得到结果了。</p>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://shiki.me/blog/installing-pdo_oci-and-oci8-php-extensions-on-centos-6-4-64bit/" target="_blank" rel="external">Installing PDO_OCI and OCI8 PHP extensions on CentOS 6.4 64bit</a></li>
<li><a href="http://www.oracle.com/technetwork/cn/articles/dsl/technote-php-instant-090922-zhs.html" target="_blank" rel="external">在 Linux 和 Windows 上安装 PHP 和 Oracle Instant Client</a></li>
<li><a href="http://iceeggplant.blog.51cto.com/1446843/1052512" target="_blank" rel="external">php5.3安装oracle的扩展oci8与pdo_oci</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[rpm或yum安装软件提示error-rpmts_HdrFromFdno-key-ID-BAD]]></title>
      <url>http://seanlook.com/2015/03/02/rpm-yum-recover/</url>
      <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在 CentOS 6.4 x86_64 上无论通过yum或rpm安装软件时，出现以下错误：<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">yum install glibc-devel</div><div class="line">...</div><div class="line"><span class="keyword">error: </span>rpmts_HdrFromFdno: Header V3 RSA/SHA1 Signature, key ID c105b9de: BAD</div><div class="line">...</div><div class="line">Problem opening package *.el6.x86_64.rpm</div></pre></td></tr></table></figure></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><code>rpm -ivh</code>单独去安装软件也提示上面的错误。<code>rpm -qa</code> 无法列出系统中安装过的软件包，但许多库文件和软件命令是存在的。也尝试过<code>rpm --rebuilddb</code>来重建数据库，但情况依然没有得到改善（centos官网说千万不要在系统broken的情况下rebuilddb，不然有可能变成destroy）</p>
<p>由上面的推断可知问题出现在rpm这个软件包管理工具本身，但此时又无法通过rpm来重新安装自己，所以只能找到具体是什么因素导致的。好在官网的这篇较新的文章正好就是解决该BUG：<a href="https://www.centos.org/forums/viewtopic.php?p=214791&amp;f=13#p214791" target="_blank" rel="external">WARNING: nss-softokn-3.14.3-19.el6_6 updates may be broken</a> ：</p>
<p>大致是说当你使用<code>yum update</code>去更新你的系统时，<code>nss-softokn</code>、<code>nss-softokn-freebl</code>和其它软件一起都得到更新，所以不会有问题。但如果单独去更新某一个软件，如<code>yum update nss-softokn</code>或<code>yum install &lt;software&gt;</code>引起它的依赖包也升级，使得<code>nss-softokn</code>和<code>nss-softokn-freebl</code>版本不匹配，就会导致 rpm/yum 全面停止工作，表现就是上面的<code>key .. BAD</code>。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>解决起来也很方便，首先你可以通过<code>cat /var/log/messages|grep nss</code>看到<code>nss-softokn-freebl</code>的版本：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># <span class="selector-tag">cat</span> /<span class="selector-tag">var</span>/<span class="selector-tag">log</span>/<span class="selector-tag">messages</span>|<span class="selector-tag">grep</span> <span class="selector-tag">nss-softokn</span></div><div class="line"><span class="selector-tag">Mar</span>  <span class="selector-tag">2</span> <span class="selector-tag">09</span><span class="selector-pseudo">:56</span><span class="selector-pseudo">:18</span> <span class="selector-tag">poprod</span> <span class="selector-tag">yum</span><span class="selector-attr">[14920]</span>: <span class="selector-tag">Updated</span>: <span class="selector-tag">nss-softokn-3</span><span class="selector-class">.14</span><span class="selector-class">.3-19</span><span class="selector-class">.el6_6</span><span class="selector-class">.x86_64</span></div><div class="line"><span class="selector-tag">Mar</span>  <span class="selector-tag">2</span> <span class="selector-tag">14</span><span class="selector-pseudo">:43</span><span class="selector-pseudo">:29</span> <span class="selector-tag">poprod</span> <span class="selector-tag">yum</span><span class="selector-attr">[33040]</span>: <span class="selector-tag">Installed</span>: <span class="selector-tag">nss-softokn-freebl-3</span><span class="selector-class">.14</span><span class="selector-class">.3-19</span><span class="selector-class">.el6_6</span><span class="selector-class">.x86_64</span></div><div class="line"><span class="selector-tag">Mar</span>  <span class="selector-tag">2</span> <span class="selector-tag">14</span><span class="selector-pseudo">:44</span><span class="selector-pseudo">:14</span> <span class="selector-tag">poprod</span> <span class="selector-tag">yum</span><span class="selector-attr">[33047]</span>: <span class="selector-tag">Installed</span>: <span class="selector-tag">nss-softokn-freebl-3</span><span class="selector-class">.14</span><span class="selector-class">.3-19</span><span class="selector-class">.el6_6</span><span class="selector-class">.x86_64</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>下载 <code>nss-softokn-freebl-3.14.3-19.el6_6.x86_64.rpm</code>：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget ftp:<span class="regexp">//</span><span class="number">195.220</span>.<span class="number">108.108</span><span class="regexp">/linux/</span>centos<span class="regexp">/6.6/u</span>pdates<span class="regexp">/x86_64/</span>Packages<span class="regexp">/nss-softokn-freebl-3.14.3-19.el6_6.x86_64.rpm</span></div></pre></td></tr></table></figure></p>
<p>解压rpm：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm2cpio nss-softokn-freebl<span class="number">-3.14</span><span class="number">.3</span><span class="number">-19.</span>el6_6.x86_64.rpm | cpio -idmv</div></pre></td></tr></table></figure></p>
<p>复制 libfreeblpriv3.* 覆盖旧的库文件：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp .<span class="regexp">/lib64/</span>libfreeblpriv3.* <span class="regexp">/lib64/</span></div><div class="line">cp .<span class="regexp">/lib64/</span>libfreebl3* <span class="regexp">/lib64/</span></div></pre></td></tr></table></figure></p>
<p>试一下 <code>yum install gcc</code> 看能否正常工作，如果不行，继续下一步：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget http:<span class="comment">//mirror.centos.org/centos/6/os/x86_64/Packages/yum-3.2.29-60.el6.centos.noarch.rpm</span></div><div class="line">rpm -ivh --nodeps yum-<span class="number">3.2</span>.<span class="number">29</span>-<span class="number">60</span><span class="selector-class">.el6</span><span class="selector-class">.centos</span><span class="selector-class">.noarch</span><span class="selector-class">.rpm</span></div></pre></td></tr></table></figure></p>
<p>应该就好了：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpm -qa</div><div class="line">yum <span class="keyword">install</span> glibc-devel</div></pre></td></tr></table></figure></p>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://unix.stackexchange.com/questions/179344/big-trouble-rpm-empty-db-install-v3-rsa-sha1-signature-key-bad-yumrepo-erro" target="_blank" rel="external">http://unix.stackexchange.com/questions/179344/big-trouble-rpm-empty-db-install-v3-rsa-sha1-signature-key-bad-yumrepo-erro</a></li>
<li><a href="https://www.centos.org/forums/viewtopic.php?p=214791&amp;f=13#p215140" target="_blank" rel="external">https://www.centos.org/forums/viewtopic.php?p=214791&amp;f=13#p215140</a></li>
<li><a href="http://blog.chinaunix.net/uid-26085226-id-4545167.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-26085226-id-4545167.html</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我为何厌恶百度的产品]]></title>
      <url>http://seanlook.com/2015/02/28/baidu-complain/</url>
      <content type="html"><![CDATA[<p>今天因为使用百度云同步盘出错，导致我的文件永远丢失，忍无可忍<strong>又</strong>给“百度倾听”发了条牢骚。</p>
<p>事情是这样的，我在 MarkdownPad2 修改最近写的3篇文章，文章正好在百度云同步盘的同步目录下，因为一直养成了一边编辑一边<code>Ctrl+S</code>保存的习惯，难道由于这3篇文章反复修改，百度云同步盘竟然支撑不住？弹出窗口大概是说同步出错，需要重启应用（近期出现过好几次），随手点了个确定，MarkdownPad2提示我当前编辑的文件不存在，是否继续保留在窗口，反正文章修改完了，也没多想，duang，悲剧发生了，两个小星期的成果都不见了。还在失落当中……</p>
<p>为什么叫“又”呢，因为在去年1月份的时候也在手机上使用过百度云同步盘，不记得是同步什么，也不是文件丢失。Android版有一个“仅在wifi下同步”的选项，像我这种3G流量哪够同步文件使用啊，当时还觉得挺贴心的，开着应用在后台一上午，中午吃饭拿起手看时，尼玛提示我本月流量已超50多M，也给百度意见反馈写了200多字的声讨书，结果几天后回复的内容不知是从哪摘抄的一段无价值的内容。还有一次是登录注销的问题，20多天后才回复邮件，结尾还不忘带上小米的广告，简直让用户抓狂。（邮件正文就不贴了，每每出现这样的问题都十分狂躁，不少脏话）</p>
<p>我想这样的同步工具最多对于百度是个附属产品，并不能带来多大收益，在团队投入上并不尽心。给我自己的教诲是，选择产品或工具，不能因为公司名声大而就给予信任，一个公司能够把一件事情做好了就会迎来不错的口碑，选择它的主打产品。说到这里不得不继续吐槽了，百度搜索应该是它的命脉了，但对于我用习惯了google来说，没有条件不得不使用百度搜索，索引到的结果，唉~ 大！惊！失！色！</p>
<p>如此种种，不得不让我怀疑百度其他产品的使用问题。</p>
<p>无奈 Dropbox 在国内被封，也只有偶尔在家用电脑时打开VPN才能访问，被百度云同步盘伤过那么多次心之后，感觉再也不会用了，还是老老实实挂VPN吧，虽麻烦但也免去了不必要的担忧。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在ubuntu上部署Kubernetes管理docker集群示例]]></title>
      <url>http://seanlook.com/2015/02/07/docker-kubernetes-deploy2/</url>
      <content type="html"><![CDATA[<p>本文通过实际操作来演示Kubernetes的使用，因为环境有限，集群部署在本地3个ubuntu上，主要包括如下内容：</p>
<ul>
<li>部署环境介绍，以及Kubernetes集群逻辑架构</li>
<li>安装部署Open vSwitch跨机器容器通信工具</li>
<li>安装部署Etcd和Kubernetes的各大组件</li>
<li>演示Kubernetes管理容器和服务</li>
</ul>
<p>关于 Kubernetes 系统架构及组件介绍见<a href="http://seanlook.com/2015/02/03/docker-kubernetes-arch-introduction/">这里</a>。</p>
<h1 id="1-部署环境及架构"><a href="#1-部署环境及架构" class="headerlink" title="1. 部署环境及架构"></a>1. 部署环境及架构</h1><ul>
<li>vSphere: 5.1</li>
<li>操作系统: ubuntu 14.04 x86_64</li>
<li>Open vSwith版本: 2.0.2</li>
<li>Kubernetes: v0.7.2</li>
<li>Etcd版本: 2.0.0-rc.1</li>
<li>Docker版本: 1.4.1</li>
<li>服务器信息：</li>
</ul>
<table>
<thead>
<tr>
<th>Role</th>
<th>Hostname</th>
<th>IP Address</th>
</tr>
</thead>
<tbody>
<tr>
<td>APIServer</td>
<td>kubernetes</td>
<td>172.29.88.206</td>
</tr>
<tr>
<td>Minion</td>
<td>minion1</td>
<td>172.29.88.207</td>
</tr>
<tr>
<td>Minion</td>
<td>minion2</td>
<td>172.29.88.208</td>
</tr>
</tbody>
</table>
<p>在详细介绍部署Kubernetes集群前，先给大家展示下集群的逻辑架构。从下图可知，整个系统分为两部分，第一部分是Kubernetes APIServer，是整个系统的核心，承担集群中所有容器的管理工作；第二部分是minion，运行Container Daemon，是所有容器栖息之地，同时在minion上运行Open vSwitch程序，通过GRE Tunnel负责minions之间Pod的网络通信工作。<br><img src="http://sean-images.qiniudn.com/kubernetes-deploy.png" alt="kubernetes-deploy"></p>
<a id="more"></a>
<h1 id="2-安装Open-vSwitch及配置GRE"><a href="#2-安装Open-vSwitch及配置GRE" class="headerlink" title="2. 安装Open vSwitch及配置GRE"></a>2. 安装Open vSwitch及配置GRE</h1><p>为了解决跨minion之间Pod的通信问题，我们在每个minion上安装Open vSwtich，并使用GRE或者VxLAN使得跨机器之间P11od能相互通信，本文使用GRE，而VxLAN通常用在需要隔离的大规模网络中。对于Open vSwitch的介绍请参考另一篇文章<a href="http://" target="_blank" rel="external">Open vSwitch</a>。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="keyword">get</span> install openvswitch-<span class="keyword">switch</span> bridge-utils</div></pre></td></tr></table></figure></p>
<p>安装完Open vSwitch和桥接工具后，接下来便建立minion0和minion1之间的隧道。首先在minion1和minion2上分别建立OVS Bridge：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># ovs-vsctl add-br obr0</span></div></pre></td></tr></table></figure></p>
<p>接下来建立gre，并将新建的gre0添加到obr0，在minion1上执行如下命令：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ovs-vsctl <span class="keyword">add</span>-port obr0 gre0 -- <span class="keyword">set</span> <span class="keyword">Interface</span> gre0 <span class="keyword">type</span>=gre options:remote_ip=<span class="number">172.29</span>.<span class="number">88.208</span></div></pre></td></tr></table></figure></p>
<p>上面的remoute_ip是另一台服务minion2上的对外IP。</p>
<p>在minion2上执行：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ovs-vsctl <span class="keyword">add</span>-port obr0 gre0 -- <span class="keyword">set</span> <span class="keyword">Interface</span> gre0 <span class="keyword">type</span>=gre options:remote_ip=<span class="number">172.29</span>.<span class="number">88.207</span></div></pre></td></tr></table></figure></p>
<p>至此，minion1和minion2之间的隧道已经建立。然后我们在minion1和minion2上创建Linux网桥kbr0替代Docker默认的docker0（我们假设minion1和minion2都已安装Docker），设置minion1的kbr0的地址为172.17.1.1/24， minion2的kbr0的地址为172.17.2.1/24，并添加obr0为kbr0的接口，以下命令在minion1和minion2上执行：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># brctl addbr kbr0              <span class="comment">//创建linux bridge代替docker0</span></span></div><div class="line"><span class="meta"># brctl addif kbr0 obr0         <span class="comment">//添加obr0为kbr0的接口</span></span></div><div class="line"></div><div class="line"><span class="meta"># ip link set dev docker0 down  <span class="comment">//设置docker0为down状态</span></span></div><div class="line"><span class="meta"># ip link del dev docker0       <span class="comment">//删除docker0，可选</span></span></div></pre></td></tr></table></figure></p>
<p>查看这些接口的状态：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># service openvswitch-<span class="keyword">switch </span>status</div><div class="line"># ovs-vsctl show</div><div class="line"><span class="number">9</span>d248403-<span class="number">943</span>c-<span class="number">41</span><span class="built_in">c0</span>-<span class="keyword">b2d0-3f9b130cdd3f</span></div><div class="line">    <span class="keyword">Bridge </span><span class="string">"obr0"</span></div><div class="line">        Port <span class="string">"gre0"</span></div><div class="line">            Interface <span class="string">"gre0"</span></div><div class="line"><span class="symbol">                type:</span> gre</div><div class="line"><span class="symbol">                options:</span> &#123;remote_ip=<span class="string">"172.29.88.207"</span>&#125;</div><div class="line">        Port <span class="string">"obr0"</span></div><div class="line">            Interface <span class="string">"obr0"</span></div><div class="line"><span class="symbol">                type:</span> internal</div><div class="line"><span class="symbol">    ovs_version:</span> <span class="string">"2.0.2"</span></div><div class="line"></div><div class="line"># <span class="keyword">brctl </span>show</div><div class="line"><span class="keyword">bridge </span>name	<span class="keyword">bridge </span>id		STP enabled	interfaces</div><div class="line"><span class="symbol">docker0</span>		<span class="number">8000</span>.<span class="number">56847</span>afe9799	no		</div><div class="line"><span class="symbol">kbr0</span>		<span class="number">8000</span>.<span class="number">620</span>ff7ee9c49	no		obr0</div></pre></td></tr></table></figure></p>
<p>为了使新建的kbr0在每次系统重启后任然有效，我们在minion1的<code>/etc/network/interfaces</code>文件中追加内容如下：（在CentOS上会有些不一样）<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># vi /etc/network/interfaces</div><div class="line">auto kbr0</div><div class="line">iface kbr0 inet static</div><div class="line">        address <span class="number">172.17</span><span class="number">.1</span><span class="number">.1</span></div><div class="line">        netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></div><div class="line">        gateway <span class="number">172.17</span><span class="number">.1</span><span class="number">.0</span></div><div class="line">        dns-nameservers <span class="number">172.31</span><span class="number">.1</span><span class="number">.1</span></div></pre></td></tr></table></figure></p>
<p>同样在minion2上追加类似内容，只需修改address为172.17.2.1和gateway为172.17.2.0即可，然后执行<code>ip link set dev kbr0 up</code>，你能在minion1和minion2上发现kbr0都设置了相应的IP地址。为了验证我们创建的隧道是否能通信，我们在minion1和minion2上相互ping对方kbr0的IP地址，从下面的结果发现是不通的，经查找这是因为在minion1和minion2上缺少访问172.17.1.1和172.17.2.1的路由，因此我们需要添加路由保证彼此之间能通信：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">minion1上执行:</div><div class="line"># <span class="built_in">ip</span> route <span class="keyword">add</span> <span class="number">172.17</span><span class="meta">.2</span><span class="meta">.0</span>/<span class="number">24</span> via <span class="number">172.29</span><span class="meta">.88</span><span class="meta">.208</span> dev eth0</div><div class="line"></div><div class="line">minion2上执行:</div><div class="line"># <span class="built_in">ip</span> route <span class="keyword">add</span> <span class="number">172.17</span><span class="meta">.1</span><span class="meta">.0</span>/<span class="number">24</span> via <span class="number">172.29</span><span class="meta">.88</span><span class="meta">.207</span> dev eth0</div></pre></td></tr></table></figure></p>
<p>现在可以ping通对方的虚拟网络了：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ ping <span class="number">172.17</span><span class="number">.2</span><span class="number">.1</span></div><div class="line">PING <span class="number">172.17</span><span class="number">.2</span><span class="number">.1</span> (<span class="number">172.17</span><span class="number">.2</span><span class="number">.1</span>) <span class="number">56</span>(<span class="number">84</span>) <span class="keyword">bytes</span> <span class="keyword">of</span> data.</div><div class="line"><span class="number">64</span> <span class="keyword">bytes</span> <span class="built_in">from</span> <span class="number">172.17</span><span class="number">.2</span><span class="number">.1</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> <span class="built_in">time</span>=<span class="number">0.334</span> ms</div><div class="line"><span class="number">64</span> <span class="keyword">bytes</span> <span class="built_in">from</span> <span class="number">172.17</span><span class="number">.2</span><span class="number">.1</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">64</span> <span class="built_in">time</span>=<span class="number">0.253</span> ms</div><div class="line">^C</div><div class="line"><span class="comment">--- 172.17.2.1 ping statistics ---</span></div><div class="line"><span class="number">2</span> packets transmitted, <span class="number">2</span> received, <span class="number">0</span>% packet loss, <span class="built_in">time</span> <span class="number">999</span>ms</div><div class="line">rtt <span class="built_in">min</span>/<span class="built_in">avg</span>/<span class="built_in">max</span>/mdev = <span class="number">0.253</span>/<span class="number">0.293</span>/<span class="number">0.334</span>/<span class="number">0.043</span> ms</div></pre></td></tr></table></figure></p>
<p>下面安装 Kubernetes APIServer 及kubelet、proxy等服务。</p>
<h1 id="3-安装Kubernetes-APIServer"><a href="#3-安装Kubernetes-APIServer" class="headerlink" title="3. 安装Kubernetes APIServer"></a>3. 安装Kubernetes APIServer</h1><h2 id="3-1-下载安装kubernetes各组件"><a href="#3-1-下载安装kubernetes各组件" class="headerlink" title="3.1 下载安装kubernetes各组件"></a>3.1 下载安装kubernetes各组件</h2><p>可以自己从源码编译kubernetes（需要安装golang环境），也可以从<a href="https://github.com/GoogleCloudPlatform/kubernetes/releases" target="_blank" rel="external">GitHub Kubernetes repo release page.</a>选择编译好的二进制版本（v0.7.2）下载，为了方便后面启动或关闭kubernetes组件，我们同时下载二进制包和源码包：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/src</div><div class="line"># wget https://github.com/coreos/etcd/releases/download/v2<span class="meta">.0</span><span class="meta">.0</span>-rc<span class="meta">.1</span>/etcd-v2<span class="meta">.0</span><span class="meta">.0</span>-rc<span class="meta">.1</span>-linux-amd64.tar.gz</div><div class="line"># wget https://github.com/GoogleCloudPlatform/kubernetes/releases/download/v0<span class="meta">.7</span><span class="meta">.2</span>/kubernetes.tar.gz</div><div class="line"># wget https://github.com/GoogleCloudPlatform/kubernetes/archive/v0<span class="meta">.7</span><span class="meta">.2</span>.zip</div></pre></td></tr></table></figure></p>
<p>然后解压下载的kubernetes和etcd包，并在kubernetes(minion1)、minion2上创建目录<code>/opt/bin</code><br><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mkdir /opt/bin        //这一步APIserver和所有minions上都要创建</span></div><div class="line"></div><div class="line">解压kubernetes</div><div class="line">src<span class="comment"># tar xf kubernetes.tar.gz</span></div><div class="line"><span class="comment"># ll </span></div><div class="line">drwxr-xr-x <span class="number"> 3 </span><span class="number"> 501 </span>staff    <span class="number"> 4096 </span>Dec<span class="number"> 19 </span>02:32 etcd-v2.0.0-rc.1-linux-amd64/</div><div class="line">-rw-r--r-- <span class="number"> 1 </span>root root  <span class="number"> 6223584 </span>Jan <span class="number"> 6 </span>14:39 etcd-v2.0.0-rc.1-linux-amd64.tar.gz</div><div class="line">drwxr-xr-x <span class="number"> 7 </span>root root     <span class="number"> 4096 </span>Nov<span class="number"> 20 </span>06:35 kubernetes/</div><div class="line">-rw-r--r-- <span class="number"> 1 </span>root root <span class="number"> 82300483 </span>Jan <span class="number"> 6 </span>14:37 kubernetes.tar.gz</div><div class="line">-rw-r--r-- <span class="number"> 1 </span>root root <span class="number"> 9170754 </span>Jan <span class="number"> 9 </span>14:47 v0.7.2.zip</div><div class="line"></div><div class="line"><span class="comment"># cd kubernetes/server</span></div><div class="line"><span class="comment"># tar xf kubernetes-server-linux-amd64.tar.gz</span></div><div class="line"><span class="comment"># cd kubernetes/server/bin/</span></div><div class="line"></div><div class="line">APIserver本身需要的是kube-apiserver kube-scheduler kube-controller-manager kubecfg四个</div><div class="line"><span class="comment"># cp -a kube* /opt/bin/</span></div><div class="line"></div><div class="line">把proxy和kubelet复制到其他minions，确保这些文件都是可执行的</div><div class="line"><span class="comment"># scp kube-proxy kubelet root@172.29.88.207:/opt/bin</span></div><div class="line"><span class="comment"># scp kube-proxy kubelet root@172.29.88.208:/opt/bin</span></div></pre></td></tr></table></figure></p>
<p><code>/opt/bin</code>并没有加入系统<code>PATH</code>，所以<code>kube-apiserver -version</code>是看不到结果，但在后面配置的服务中会自动加入（<code>PATH=$PATH:/opt/bin</code>）。</p>
<h2 id="3-2-解压安装etcd"><a href="#3-2-解压安装etcd" class="headerlink" title="3.2 解压安装etcd"></a>3.2 解压安装etcd</h2><p><code>etcd</code>在这里的作用是服务发现存储仓库，通俗的来讲就是记录kubernetes启动了多少pods、services、replicationController以及它们的信息等，详细介绍见<a href="http//">这里</a>。此外版本2.0与v0.4.6在启动参数上的写法有一定差别。</p>
<pre><code># tar xf etcd-v2.0.0-rc.1-linux-amd64.tar.gz &amp;&amp; cd etcd-v2.0.0-rc.1-linux-amd64/
# cp -a etcd etcdctl /opt/bin
</code></pre><h2 id="3-3-配置kube-apiserver等为upstart脚本启动"><a href="#3-3-配置kube-apiserver等为upstart脚本启动" class="headerlink" title="3.3 配置kube-apiserver等为upstart脚本启动"></a>3.3 配置kube-apiserver等为upstart脚本启动</h2><p>这一步主要是为了管理kube-apiserver等进程的方便，避免每次都手动启动各服务、添加冗长的启动参数选项，而且在不同的系统平台下kubernetes已经提供了相应的工具。<br><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">解压kubernetes*源码包*</div><div class="line">src<span class="comment"># unzip xf v0.7.2.zip &amp;&amp; cd kubernetes-0.7.2</span></div><div class="line"></div><div class="line">这里比较奇怪的是最新release版本源码的cluster目录下是有ubuntu子目录的，但latest之前的下载后没有ubuntu目录</div><div class="line"><span class="comment"># cd cluster/ubuntu</span></div><div class="line"><span class="comment"># ll</span></div><div class="line">..<span class="number"> 2 </span>root root<span class="number"> 4096 </span>Jan <span class="number"> 8 </span>17:39 default_scripts/   各组件默认启动参数</div><div class="line">..<span class="number"> 2 </span>root root<span class="number"> 4096 </span>Jan <span class="number"> 8 </span>17:39 init_conf/         upstart启动方式</div><div class="line">..<span class="number"> 2 </span>root root<span class="number"> 4096 </span>Jan <span class="number"> 8 </span>17:39 initd_scripts/     service启动方式，与upstart选其一</div><div class="line">..<span class="number"> 1 </span>root root<span class="number"> 1213 </span>Jan <span class="number"> 8 </span>08:53 util.sh*     </div><div class="line"></div><div class="line"><span class="comment"># ./util.sh</span></div></pre></td></tr></table></figure></p>
<p><code>util.sh</code>脚本就是把当前目录下的service/upstart脚本、默认参数配置文件复制到<code>/etc</code>下，可以通过<code>service etcd start</code>的形式管理kubernetes。由于kubernetes更新速度极快，项目的文件和目录结构经常变化，请找准文件。接下来我们需要修改那些只适合本机使用的默认参数。（请注意备份先，因为后面能否正常跨机器管理docker与这些选项有关，特别是IP）<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">etcd官方建议使用新的<span class="number">2379</span>端口代替<span class="number">4001</span></div><div class="line"><span class="comment"># vi /etc/default/etcd</span></div><div class="line"><span class="attr">ETCD_OPTS="-listen-client-urls=http://0.0.0.0:4001"</span></div><div class="line"></div><div class="line"><span class="comment"># vi /etc/default/kube-apiserver</span></div><div class="line"><span class="attr">KUBE_APISERVER_OPTS="--address=0.0.0.0</span> \</div><div class="line"><span class="attr">--port=8080</span> \</div><div class="line"><span class="attr">--etcd_servers=http://127.0.0.1:4001</span> \</div><div class="line"><span class="attr">--logtostderr=true</span> \</div><div class="line"><span class="attr">--portal_net=11.1.1.0/24"</span></div><div class="line"></div><div class="line"><span class="comment"># vi /etc/default/kube-scheduler</span></div><div class="line"><span class="attr">KUBE_SCHEDULER_OPTS="--logtostderr=true</span> \</div><div class="line"><span class="attr">--master=127.0.0.1:8080"</span></div><div class="line"></div><div class="line"><span class="comment"># vi /etc/default/kube-controller-manager</span></div><div class="line"><span class="attr">KUBE_CONTROLLER_MANAGER_OPTS="--master=127.0.0.1:8080</span> \</div><div class="line"><span class="attr">--machines=172.29.88.207,172.29.88.208</span> \</div><div class="line"><span class="attr">--logtostderr=true"</span></div><div class="line"></div><div class="line"></div><div class="line">* 复制kubelet、kube-proxy等到minion1：</div><div class="line"><span class="comment"># scp /etc/default/&#123;kubelet,kube-proxy&#125; 172.29.88.207:/etc/default/</span></div><div class="line"><span class="comment"># scp /etc/init.d/&#123;kubelet,kube-proxy&#125; 172.29.88.207:/etc/init.d/</span></div><div class="line"><span class="comment"># scp /etc/init/&#123;kubelet.conf,kube-proxy.conf&#125; 172.29.88.207:/etc/init/</span></div></pre></td></tr></table></figure></p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">* 在minion1端进行</div><div class="line"># vi /etc/default/kubelet</div><div class="line">KUBELET_OPTS="--address=172.29.88.207 \</div><div class="line">-<span class="ruby">-port=<span class="number">10250</span> \</span></div><div class="line">-<span class="ruby">-hostname_override=<span class="number">172.29</span>.<span class="number">88.207</span> \</span></div><div class="line">-<span class="ruby">-etcd_servers=<span class="symbol">http:</span>/<span class="regexp">/172.29.88.206:4001 \</span></span></div><div class="line">-<span class="ruby"><span class="regexp">-logtostderr=true"</span></span></div><div class="line"></div><div class="line"># vi /etc/default/kube-proxy</div><div class="line">KUBE_PROXY_OPTS="--etcd_servers=http://172.29.88.207:4001 \</div><div class="line">-<span class="ruby"><span class="regexp">-logtostderr=true"</span></span></div><div class="line"></div><div class="line">(对minion2重复上面 * 两个步骤，把上面.207改成.208)</div></pre></td></tr></table></figure>
<p>上面的各配置文件就是对应命令的选项，具体含义使用<code>-h</code>。这里只简单说明：</p>
<ol>
<li><code>etcd</code>服务APIserver和minions都要访问，也就是其他组件的<code>--etcd_servers</code>值（带http前缀）</li>
<li><code>kube-apiserver</code>监听在8080端口，也就是其他组件的<code>--master</code>值；<code>--portal_net</code>地址段不能与docker的桥接网卡kbr0重复，指定docker容器的IP段</li>
<li><code>etcd</code>、<code>kube-apiserver</code>、<code>kube-scheduler</code>、<code>kube-controller-manager</code>运行在apiserver（服务）端，<code>kubelet</code>、<code>kube-proxy</code>运行在minion（客户端）</li>
<li><code>kube-controller-manager</code>使用预先定义pod模板创建pods，保证指定数量的replicas在运行，默认监听在master的127.0.0.1:10252</li>
<li><code>kubelet</code>默认监听端口10250，也正是apiserver的<code>--kubelet_port</code>的值</li>
</ol>
<h2 id="3-4-启动"><a href="#3-4-启动" class="headerlink" title="3.4 启动"></a>3.4 启动</h2><p><strong>重启docker</strong><br>接下来重启minion1、minion2上的Docker daemon（注意使用的网桥）：</p>
<pre><code># docker -d -b kbr0
</code></pre><p>由于后面的测试可能需要在线下载images，所以如果你的服务器无法访问docker hub，上面启动时记得设置<code>HTTP_PROXY</code>代理。</p>
<p><strong>启动apiserver</strong></p>
<pre><code># service etcd start
# service kube-apiserver start
</code></pre><p><code>kube-apiserver</code>启动后会自动运行<code>kube-scheduler</code>、<code>kube-controller-manager</code>，但修改配置后依然可以单独重启各个服务如<code>service kube-contoller-manager restart</code>。这些服务的日志可以从<code>/var/log/upstart/kube*</code>找到。</p>
<p><strong>在minion1、minion2上启动kubelet、kube-proxy</strong>：</p>
<pre><code># service kubelet start
# service kube-proxy start
</code></pre><h1 id="4-使用kubecfg部署测试应用"><a href="#4-使用kubecfg部署测试应用" class="headerlink" title="4. 使用kubecfg部署测试应用"></a>4. 使用kubecfg部署测试应用</h1><p>为了方便，我们使用Kubernetes提供的例子<a href="https://github.com/GoogleCloudPlatform/kubernetes/tree/master/examples/guestbook" target="_blank" rel="external">Guestbook</a>（下载的源码example目录下可以找到）来演示Kubernetes管理跨机器运行的容器，下面我们根据Guestbook的步骤创建容器及服务。在下面的过程中如果是第一次操作，可能会有一定的等待时间，状态处于pending，这是因为第一次下载images需要一段时间。</p>
<h2 id="4-1-创建redis-master-Pod和redis-master服务"><a href="#4-1-创建redis-master-Pod和redis-master服务" class="headerlink" title="4.1 创建redis-master Pod和redis-master服务"></a>4.1 创建redis-master Pod和redis-master服务</h2><p>配置管理操作都在apiserver上执行，并且都是基于实现编写好的json格式。涉及到下载docker镜像的部分，如果没有外网，可能需要修改image的值或使用自己搭建的docker-registry：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># cd kubernetes-0.7.2/examples/guestbook/</span></div><div class="line"><span class="meta"># cat redis-master.json</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"id"</span>: <span class="string">"redis-master"</span>,</div><div class="line">  <span class="string">"kind"</span>: <span class="string">"Pod"</span>,</div><div class="line">  <span class="string">"apiVersion"</span>: <span class="string">"v1beta1"</span>,</div><div class="line">  <span class="string">"desiredState"</span>: &#123;</div><div class="line">    <span class="string">"manifest"</span>: &#123;</div><div class="line">      <span class="string">"version"</span>: <span class="string">"v1beta1"</span>,</div><div class="line">      <span class="string">"id"</span>: <span class="string">"redis-master"</span>,</div><div class="line">      <span class="string">"containers"</span>: [&#123;</div><div class="line">        <span class="string">"name"</span>: <span class="string">"master"</span>,</div><div class="line">        <span class="string">"image"</span>: <span class="string">"dockerfile/redis"</span>,</div><div class="line">        <span class="string">"cpu"</span>: <span class="number">100</span>,</div><div class="line">        <span class="string">"ports"</span>: [&#123;</div><div class="line">          <span class="string">"containerPort"</span>: <span class="number">6379</span>,</div><div class="line">          <span class="string">"hostPort"</span>: <span class="number">6379</span></div><div class="line">        &#125;]</div><div class="line">      &#125;]</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"labels"</span>: &#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"redis-master"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta"># kubecfg -h http://172.29.88.206:8080 -c redis-master.json create pods</span></div><div class="line"><span class="meta"># kubecfg -h http://172.29.88.206:8080 -c redis-master-service.json create services</span></div></pre></td></tr></table></figure></p>
<p>完成上面的操作后，我们可以看到如下redis-master Pod被调度到172.29.88.207：<br>（下面直接list实际上是省略了<code>-h http://127.0.0.1:8080</code>）<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># kubecfg list pods</span></div><div class="line">Name             Image(s)            Host               Labels              Status</div><div class="line">----------       ----------          ----------         ----------          ----------</div><div class="line">redis-<span class="keyword">master</span>     <span class="title">dockerfile</span>/redis    <span class="number">172.29</span>.<span class="number">88.207</span>/     <span class="attr">name=</span>redis-<span class="keyword">master</span>   <span class="title">Running</span></div><div class="line"></div><div class="line">查看services：</div><div class="line"><span class="comment"># kubecfg list services</span></div><div class="line">Name            Labels                                    Selector            IP            Port</div><div class="line">----------      ----------                                ----------          ----------    ------</div><div class="line">kubernetes      <span class="attr">component=</span>apiserver,<span class="attr">provider=</span>kubernetes                       <span class="number">11.1</span>.<span class="number">1.233</span>    <span class="number">443</span></div><div class="line">kubernetes-ro   <span class="attr">component=</span>apiserver,<span class="attr">provider=</span>kubernetes                       <span class="number">11.1</span>.<span class="number">1.204</span>    <span class="number">80</span></div><div class="line">redis-<span class="keyword">master</span>    <span class="title">name</span>=redis-<span class="keyword">master</span>                         <span class="title">name</span>=redis-<span class="keyword">master</span>   <span class="title">11</span>.<span class="number">1.1</span>.<span class="number">175</span>    <span class="number">6379</span></div></pre></td></tr></table></figure></p>
<p>发现除了redis-master的服务之外，还有两个Kubernetes系统默认的服务kubernetes-ro和kubernetes。而且我们可以看到每个服务都有一个服务IP及相应的端口，对于服务IP，是一个虚拟地址，根据apiserver的<code>portal_net</code>选项设置的<code>CIDR</code>表示的IP地址段来选取，在我们的集群中设置为11.1.1.0/24。为此每新创建一个服务，apiserver都会在这个地址段中随机选择一个IP作为该服务的IP地址，而端口是事先确定的。对redis-master服务，其服务地址为11.1.1.175，端口为6379，与minion主机映射的端口也是6379。</p>
<h2 id="4-2-创建redis-slave-Pod和redis-slave服务"><a href="#4-2-创建redis-slave-Pod和redis-slave服务" class="headerlink" title="4.2 创建redis-slave Pod和redis-slave服务"></a>4.2 创建redis-slave Pod和redis-slave服务</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># kubecfg -h http:<span class="comment">//172.29.88.206:8080 -c redis-slave-controller.json create replicationControllers</span></span></div><div class="line"><span class="meta"># kubecfg -h http:<span class="comment">//172.29.88.206:8080 -c redis-slave-service.json create services</span></span></div></pre></td></tr></table></figure>
<p>注意上面的<code>redis-slave-controller.json</code>有个<code>&quot;replicas&quot;: 2</code>、<code>&quot;hostPort&quot;: 6380</code>，因为我们的集群中只有2个minions，如果为3的话，就会导致有2个Pod会调度到同一台minion上，产生端口冲突，有一个Pod会一直处于pending状态，不能被调度（可以通过日志看到原因）。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># kubecfg <span class="type">list</span> pods</div><div class="line">Name                 Image(s)                     Host             Labels                                       Status</div><div class="line">----------           ----------                   ----------       ----------                                   --------</div><div class="line"><span class="number">2</span>c2a06...c2971614d   brendanburns/redis-slave     <span class="number">172.29</span><span class="number">.88</span><span class="number">.208</span>/   name=redisslave,uses=redis-master            Running</div><div class="line"><span class="number">2</span>c2ad5...c2971614d   brendanburns/redis-slave     <span class="number">172.29</span><span class="number">.88</span><span class="number">.207</span>/   name=redisslave,uses=redis-master            Running</div><div class="line">redis-master         dockerfile/redis             <span class="number">172.29</span><span class="number">.88</span><span class="number">.207</span>/   name=redis-master                            Running</div><div class="line"></div><div class="line"># kubecfg <span class="type">list</span> services</div><div class="line">Name              Labels                                    Selector            IP                  Port</div><div class="line">----------        ----------                                ----------          ----------          --------</div><div class="line">kubernetes        component=apiserver,provider=kubernetes                       <span class="number">11.1</span><span class="number">.1</span><span class="number">.233</span>          <span class="number">443</span></div><div class="line">kubernetes-ro     component=apiserver,provider=kubernetes                       <span class="number">11.1</span><span class="number">.1</span><span class="number">.204</span>          <span class="number">80</span></div><div class="line">redis-master      name=redis-master                         name=redis-master   <span class="number">11.1</span><span class="number">.1</span><span class="number">.175</span>          <span class="number">6379</span></div><div class="line">redisslave        name=redisslave                           name=redisslave     <span class="number">11.1</span><span class="number">.1</span><span class="number">.131</span>          <span class="number">6379</span></div></pre></td></tr></table></figure>
<h2 id="4-3-创建Frontend-Pod和Frontend服务"><a href="#4-3-创建Frontend-Pod和Frontend服务" class="headerlink" title="4.3 创建Frontend Pod和Frontend服务"></a>4.3 创建Frontend Pod和Frontend服务</h2><p>前面2步都是guestbook的redis数据存储，现在部署应用：(修改<code>frontend-controller.json</code>的<code>replicas</code>为2)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># kubecfg -h http:<span class="comment">//172.29.88.206:8080 -c frontend-controller.json create replicationControllers</span></span></div><div class="line"><span class="meta"># kubecfg -h http:<span class="comment">//172.29.88.206:8080 -c frontend-service.json create services</span></span></div></pre></td></tr></table></figure></p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># kubecfg -h http://172.29.88.206:8080 list pods</span></div><div class="line">Name                 Image(s)                                 Host              Labels                                       Status</div><div class="line">----------           ----------                               ----------        ----------                                   ----------</div><div class="line"><span class="number">2</span>c2a06...c2971614d   brendanburns/redis-<span class="literal">slave</span>                 <span class="number">172.29</span>.<span class="number">88.208</span>/    <span class="attr">name=</span>redisslave,<span class="attr">uses=</span>redis-<span class="keyword">master</span>            <span class="title">Running</span></div><div class="line"><span class="number">2</span>c2ad5...c2971614d   brendanburns/redis-<span class="literal">slave</span>                 <span class="number">172.29</span>.<span class="number">88.207</span>/    <span class="attr">name=</span>redisslave,<span class="attr">uses=</span>redis-<span class="keyword">master</span>            <span class="title">Running</span></div><div class="line">d87744...c2971614d   kubernetes/example-guestbook-php-redis   <span class="number">172.29</span>.<span class="number">88.207</span>/    <span class="attr">name=</span>frontend,<span class="attr">uses=</span>redisslave,redis-<span class="keyword">master</span>   <span class="title">Running</span></div><div class="line">redis-<span class="keyword">master</span>         <span class="title">dockerfile</span>/redis                         <span class="number">172.29</span>.<span class="number">88.207</span>/    <span class="attr">name=</span>redis-<span class="keyword">master</span>                            <span class="title">Running</span></div><div class="line"><span class="number">1370</span>b9...c2971614d   kubernetes/example-guestbook-php-redis   <span class="number">172.29</span>.<span class="number">88.208</span>/    <span class="attr">name=</span>frontend,<span class="attr">uses=</span>redisslave,redis-<span class="keyword">master</span>   <span class="title">Running</span></div><div class="line"></div><div class="line"><span class="comment"># kubecfg -h http://172.29.88.206:8080 list services</span></div><div class="line">Name             Labels                                    Selector            IP            Port</div><div class="line">----------       ----------                                ----------          ----------    ------</div><div class="line">redis-<span class="keyword">master</span>     <span class="title">name</span>=redis-<span class="keyword">master</span>                         <span class="title">name</span>=redis-<span class="keyword">master</span>   <span class="title">11</span>.<span class="number">1.1</span>.<span class="number">175</span>    <span class="number">6379</span></div><div class="line">redisslave       <span class="attr">name=</span>redisslave                           <span class="attr">name=</span>redisslave     <span class="number">11.1</span>.<span class="number">1.131</span>    <span class="number">6379</span></div><div class="line">frontend         <span class="attr">name=</span>frontend                             <span class="attr">name=</span>frontend       <span class="number">11.1</span>.<span class="number">1.124</span>    <span class="number">80</span></div><div class="line">kubernetes       <span class="attr">component=</span>apiserver,<span class="attr">provider=</span>kubernetes                       <span class="number">11.1</span>.<span class="number">1.233</span>    <span class="number">443</span></div><div class="line">kubernetes-ro    <span class="attr">component=</span>apiserver,<span class="attr">provider=</span>kubernetes                       <span class="number">11.1</span>.<span class="number">1.204</span>    <span class="number">80</span></div></pre></td></tr></table></figure>
<p>通过查看可知 Frontend Pod 也被调度到两台minion，服务IP为11.1.1.124，端口是80，映射到外面minions的端口为8000（可以通过<code>ps -ef|grep docker-proxy</code>发现）。</p>
<h2 id="4-4-其他操作（更新、删除、查看）"><a href="#4-4-其他操作（更新、删除、查看）" class="headerlink" title="4.4 其他操作（更新、删除、查看）"></a>4.4 其他操作（更新、删除、查看）</h2><p><strong>删除</strong><br>除此之外，你可以删除Pod、Service，如删除minion1上的redis-slave Pod：</p>
<pre><code>kubecfg -h http://172.29.88.206:8080 delete pods/2c2ad505-96fd-11e4-9c0b-000c2971614d
Status
----------
Success
</code></pre><p>格式为<code>services/服务Name</code>、<code>pods/pods名字</code>，不必关心从哪个minion上删除了。需要提醒的是，这里pods的replcas为2，所以即使删除了这个pods，kubernetes为自动为你重新启动一个。</p>
<p><strong>更新</strong><br>更新ReplicationController的Replicas数量：<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># kubecfg list replicationControllers</span></div><div class="line"><span class="built_in">Name</span>                   <span class="built_in">Image</span>(s)                                 Selector            Replicas</div><div class="line">----------             ----------                               ----------          ----------</div><div class="line">frontendController     kubernetes/example-guestbook-php-redis   <span class="built_in">name</span>=frontend       <span class="number">2</span></div><div class="line">redisSlaveController   brendanburns/redis-slave                 <span class="built_in">name</span>=redisslave     <span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>把frontendController的Replicas更新为1，则这行如下命令，然后再通过上面的命令查看frontendController信息，发现Replicas已变为1：</p>
<pre><code>kubecfg -h http://172.29.88.206:8080 resize frontendController 1
</code></pre><p><strong>查看</strong><br>Kubernetes内置提供了一个简单的UI来查看pods、services、replicationControllers，但极其简陋，暂时可以忽略，访问<code>http://172.29.88.206:8080/static/#/groups//selector/</code>：<br><img src="http://sean-images.qiniudn.com/kubernetes-simpleui.png" alt="kubernetes-simpleui"></p>
<p>在浏览器访问api：<code>http://172.29.88.206:8080/api/v1beta1/replicationControllers</code> 。<br><img src="http://sean-images.qiniudn.com/kubernetes-api.png" alt="kubernetes-api"></p>
<p>etcd做服务发现，可以通过api访问其内容，访问<code>http://172.29.88.206:4001/v2/keys/registry/services/endpoints/default</code> ，得到json格式数据。</p>
<h2 id="4-5-演示guestbook"><a href="#4-5-演示guestbook" class="headerlink" title="4.5 演示guestbook"></a>4.5 演示guestbook</h2><p>通过上面的结果可知当前提供前端服务的PHP和提供数据存储的后端服务Redis master的Pod分别运行在172.29.88.208和172.29.88.207上，即容器运行在不同主机上，还有Redis slave也运行在两台不同的主机上，它会从Redis master同步前端写入Redis master的数据。下面我们从两方面验证Kubernetes能提供跨机器间容器的通信：</p>
<p><strong>浏览器访问留言簿</strong><br>在浏览器打开<code>http://${IPAddress}:8000</code>，IPAddress为PHP容器运行的minion的IP地址，其暴漏的端口为8000，这里IP_Address为172.29.88.208。打开浏览器会显示如下信息：<br><img src="http://sean-images.qiniudn.com/kubernetes-guestbook1.png" alt="kubernetes-guestbook1"></p>
<p>你可以输入信息并提交，然后Submit按钮下方会显示你输入的信息：<br><img src="http://sean-images.qiniudn.com/kubernetes-guestbook2.png" alt="kubernetes-guestbook2"><br>由于前端PHP容器和后端Redis master容器分别在两台minion上，因此PHP在访问Redis master服务时一定得跨机器通信，可见Kubernetes的实现方式避免了用link只能在同一主机上实现容器间通信的缺陷。</p>
<p><strong>从redis后端验证</strong><br>我们从后端数据层验证不同机器容器间的通信。根据上面的输出结果发现Redis slave和Redis master分别调度到两台不同的minion上，在172.29.88.207主机上执行<code>docker exec -ti e5941db7e424 /bin/sh</code>，e5941db7e424 master的容器ID（<code>docker ps</code>），进入容器后通过redis-cli命令查看从浏览器输入的信息如下：<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># docker exec -ti e5941db7e424 /bin/sh</div><div class="line"># redis-cli</div><div class="line">127.0.0.1:6379&gt; keys *</div><div class="line">1) "messages"</div><div class="line">127.0.0.1:6379&gt; get messages</div><div class="line">",Hi, Sean,Kubernetes,,llll,abc,<span class="symbol">\x</span>ef<span class="symbol">\x</span>bf<span class="symbol">\x</span>bd<span class="symbol">\x</span>ef<span class="symbol">\x</span>bf<span class="symbol">\x</span>bd<span class="symbol">\x</span>ef<span class="symbol">\x</span>bf<span class="symbol">\x</span>bd<span class="symbol">\x</span>d4<span class="symbol">\x</span>b0<span class="symbol">\x</span>ef<span class="symbol">\x</span>bf<span class="symbol">\x</span>bd,sync info,"</div></pre></td></tr></table></figure></p>
<p>类似可以在172.29.88.208的redis-slave上看到同样的内容。由此可见Redis master和Redis slave之间数据同步正常，OVS GRE隧道技术使得跨机器间容器正常通信。</p>
<h2 id="4-6-排错提示"><a href="#4-6-排错提示" class="headerlink" title="4.6 排错提示"></a>4.6 排错提示</h2><ol>
<li>所有的kubelet必须起来，否则报错<code>F0319 16:56:08.058335    9960 kubecfg.go:438] Got request error: The requested resource does not exist.</code></li>
<li>必须使用-b启动docker，否则无法访问8000端口，redis-slave也没同步</li>
<li>注意pods一直处于Pending或Failed状态时去apiserver或其他组件日志里查看错误，是否是由于端口绑定冲突导致。</li>
</ol>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://www.infoq.com/cn/articles/centos7-practical-kubernetes-deployment" target="_blank" rel="external">CentOS 7实战Kubernetes部署</a></li>
<li><a href="https://github.com/GoogleCloudPlatform/kubernetes/tree/master/examples/guestbook" target="_blank" rel="external">kubernetes-examples-guestbook</a></li>
<li><a href="https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/getting-started-guides/ubuntu_single_node.md" target="_blank" rel="external">getting_started_guides-ubuntu_single_node</a></li>
<li><a href="http://blog.liuts.com/category/42/1/1/" target="_blank" rel="external">基于kubernetes构建Docker集群管理详解</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[开源容器集群管理系统Kubernetes架构及组件介绍]]></title>
      <url>http://seanlook.com/2015/02/03/docker-kubernetes-arch-introduction/</url>
      <content type="html"><![CDATA[<p>本文来源于Infoq的一篇文章（见参考部分），并在难懂的地方自己理解的基础上做了修改。实际在ubuntu上部署 kubernetes 操作另见 <a href="http://seanlook.com/2015/02/07/docker-kubernetes-deploy2/">文章</a> 。</p>
<blockquote>
<p>Together we will ensure that Kubernetes is a strong and open container management framework for any application and in any environment, whether in a private, public or hybrid cloud.  –Urs Hölzle, Google</p>
</blockquote>
<p><a href="https://github.com/GoogleCloudPlatform/kubernetes" target="_blank" rel="external">Kubernetes</a> 作为Docker生态圈中重要一员，是Google多年大规模容器管理技术的开源版本，是产线实践经验的最佳表现。如Urs Hölzle所说，无论是公有云还是私有云甚至混合云，Kubernetes将作为一个为任何应用，任何环境的容器管理框架无处不在。正因为如此，目前受到各大巨头及初创公司的青睐，如Microsoft、VMWare、Red Hat、CoreOS、Mesos等，纷纷加入给Kubernetes贡献代码。随着Kubernetes社区及各大厂商的不断改进、发展，Kuberentes将成为容器管理领域的领导者。</p>
<p>接下来我们一起探索Kubernetes是什么、能做什么以及怎么做。</p>
<h1 id="1-什么是Kubernetes"><a href="#1-什么是Kubernetes" class="headerlink" title="1. 什么是Kubernetes"></a>1. 什么是Kubernetes</h1><p>Kubernetes是Google开源的容器集群管理系统，使用Golang开发，其提供应用部署、维护、扩展机制等功能，利用Kubernetes能方便地管理跨机器运行容器化的应用，其主要功能如下：</p>
<ol>
<li>使用Docker对应用程序包装(package)、实例化(instantiate)、运行(run)。</li>
<li>以集群的方式运行、管理跨机器的容器。</li>
<li>解决Docker跨机器容器之间的通讯问题。</li>
<li>Kubernetes的自我修复机制使得容器集群总是运行在用户期望的状态。</li>
</ol>
<p>当前Kubernetes支持GCE、vShpere、CoreOS、OpenShift、Azure等平台，除此之外，也可以直接运行在物理机上。</p>
<p>这个官方给出的完整的架构图：（可在新标签页打开查看大图）</p>
<p><img src="http://sean-images.qiniudn.com/kubernetes-architecture.png" alt="kubernetes-architecture"></p>
<h1 id="2-Kubernetes的主要概念"><a href="#2-Kubernetes的主要概念" class="headerlink" title="2. Kubernetes的主要概念"></a>2. Kubernetes的主要概念</h1><h2 id="2-1-Pods"><a href="#2-1-Pods" class="headerlink" title="2.1 Pods"></a>2.1 Pods</h2><p>在Kubernetes系统中，调度的最小颗粒不是单纯的容器，而是抽象成一个Pod，Pod是一个可以被创建、销毁、调度、管理的最小的部署单元。把相关的一个或多个容器（Container）构成一个Pod，通常Pod里的容器运行相同的应用。Pod包含的容器运行在同一个Minion(Host)上，看作一个统一管理单元，共享相同的volumes和network namespace/IP和Port空间。</p>
<a id="more"></a>
<h2 id="2-2-Services"><a href="#2-2-Services" class="headerlink" title="2.2 Services"></a>2.2 Services</h2><p>Services也是Kubernetes的基本操作单元，是真实应用服务的抽象，每一个服务后面都有很多对应的容器来支持，通过Proxy的port和服务selector决定服务请求传递给后端提供服务的容器，对外表现为一个单一访问地址，外部不需要了解后端如何运行，这给扩展或维护后端带来很大的好处。</p>
<p>这一点github上的官网文档 <a href="https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/services.md" target="_blank" rel="external">services.md</a> 讲的特别清楚。</p>
<h2 id="2-3-Replication-Controllers"><a href="#2-3-Replication-Controllers" class="headerlink" title="2.3 Replication Controllers"></a>2.3 Replication Controllers</h2><p>Replication Controller，理解成更复杂形式的pods，它确保任何时候Kubernetes集群中有指定数量的pod副本(replicas)在运行，如果少于指定数量的pod副本(replicas)，Replication Controller会启动新的Container，反之会杀死多余的以保证数量不变。Replication Controller使用预先定义的pod模板创建pods，一旦创建成功，pod 模板和创建的pods没有任何关联，可以修改 pod 模板而不会对已创建pods有任何影响，也可以直接更新通过Replication Controller创建的pods。对于利用 pod 模板创建的pods，Replication Controller根据 label selector 来关联，通过修改pods的label可以删除对应的pods。Replication Controller主要有如下用法：</p>
<p><strong>Rescheduling</strong><br>如上所述，Replication Controller会确保Kubernetes集群中指定的pod副本(replicas)在运行， 即使在节点出错时。</p>
<p><strong>Scaling</strong><br>通过修改Replication Controller的副本(replicas)数量来水平扩展或者缩小运行的pods。</p>
<p><strong>Rolling updates</strong><br>Replication Controller的设计原则使得可以一个一个地替换pods来滚动更新（rolling updates）服务。</p>
<p><strong>Multiple release tracks</strong><br>如果需要在系统中运行multiple release的服务，Replication Controller使用labels来区分multiple release tracks。</p>
<p>以上三个概念便是用户可操作的REST对象。Kubernetes以RESTfull API形式开放的接口来处理。</p>
<h2 id="2-4-Labels"><a href="#2-4-Labels" class="headerlink" title="2.4 Labels"></a>2.4 Labels</h2><p>service和replicationController只是建立在pod之上的抽象，最终是要作用于pod的，那么它们如何跟pod联系起来呢？这就引入了label的概念：label其实很好理解，就是为pod加上可用于搜索或关联的一组key/value标签，而service和replicationController正是通过label来与pod关联的。为了将访问Service的请求转发给后端提供服务的多个容器，正是通过标识容器的labels来选择正确的容器；Replication Controller也使用labels来管理通过 pod 模板创建的一组容器，这样Replication Controller可以更加容易，方便地管理多个容器。</p>
<p>如下图所示，有三个pod都有label为”app=backend”，创建service和replicationController时可以指定同样的label:”app=backend”，再通过label selector机制，就将它们与这三个pod关联起来了。例如，当有其他frontend pod访问该service时，自动会转发到其中的一个backend pod。<br><img src="http://sean-images.qiniudn.com/kubernetes-label.jpg" alt="kubernetes-label"></p>
<h1 id="3-Kubernetes构件"><a href="#3-Kubernetes构件" class="headerlink" title="3. Kubernetes构件"></a>3. Kubernetes构件</h1><p>Kubenetes整体框架如下图，主要包括kubecfg、Master API Server、Kubelet、Minion(Host)以及Proxy。<br><img src="http://sean-images.qiniudn.com/kubernetes-simple.png" alt="kubernetes-simple"></p>
<h2 id="3-1-Master"><a href="#3-1-Master" class="headerlink" title="3.1 Master"></a>3.1 Master</h2><p>Master定义了Kubernetes 集群Master/API Server的主要声明，包括Pod Registry、Controller Registry、Service Registry、Endpoint Registry、Minion Registry、Binding Registry、RESTStorage以及Client, 是client(Kubecfg)调用Kubernetes API，管理Kubernetes主要构件Pods、Services、Minions、容器的入口。Master由API Server、Scheduler以及Registry等组成。从下图可知Master的工作流主要分以下步骤：</p>
<ol>
<li>Kubecfg将特定的请求，比如创建Pod，发送给Kubernetes Client。</li>
<li>Kubernetes Client将请求发送给API server。</li>
<li>API Server根据请求的类型，比如创建Pod时storage类型是pods，然后依此选择何种REST Storage API对请求作出处理。</li>
<li>REST Storage API对的请求作相应的处理。</li>
<li>将处理的结果存入高可用键值存储系统Etcd中。</li>
<li>在API Server响应Kubecfg的请求后，Scheduler会根据Kubernetes Client获取集群中运行Pod及Minion信息。</li>
<li>依据从Kubernetes Client获取的信息，Scheduler将未分发的Pod分发到可用的Minion节点上。</li>
</ol>
<p><img src="http://sean-images.qiniudn.com/kubernetes-restfull.png" alt="kubernetes-restfull"><br>下面是Master的主要构件的详细介绍。</p>
<h3 id="3-1-1-Minion-Registry"><a href="#3-1-1-Minion-Registry" class="headerlink" title="3.1.1 Minion Registry"></a>3.1.1 Minion Registry</h3><p>Minion Registry负责跟踪Kubernetes 集群中有多少Minion(Host)。Kubernetes封装Minion Registry成实现Kubernetes API Server的RESTful API接口REST，通过这些API，我们可以对Minion Registry做Create、Get、List、Delete操作，由于Minon只能被创建或删除，所以不支持Update操作，并把Minion的相关配置信息存储到etcd。除此之外，Scheduler算法根据Minion的资源容量来确定是否将新建Pod分发到该Minion节点。</p>
<p>可以通过<code>curl http://{master-apiserver-ip}:4001/v2/keys/registry/minions/</code>来验证etcd中存储的内容。</p>
<h3 id="3-1-2-Pod-Registry"><a href="#3-1-2-Pod-Registry" class="headerlink" title="3.1.2 Pod Registry"></a>3.1.2 Pod Registry</h3><p>Pod Registry负责跟踪Kubernetes集群中有多少Pod在运行，以及这些Pod跟Minion是如何的映射关系。将Pod Registry和Cloud Provider信息及其他相关信息封装成实现Kubernetes API Server的RESTful API接口REST。通过这些API，我们可以对Pod进行Create、Get、List、Update、Delete操作，并将Pod的信息存储到etcd中，而且可以通过Watch接口监视Pod的变化情况，比如一个Pod被新建、删除或者更新。</p>
<h3 id="3-1-3-Service-Registry"><a href="#3-1-3-Service-Registry" class="headerlink" title="3.1.3 Service Registry"></a>3.1.3 Service Registry</h3><p>Service Registry负责跟踪Kubernetes集群中运行的所有服务。根据提供的Cloud Provider及Minion Registry信息把Service Registry封装成实现Kubernetes API Server需要的RESTful API接口REST。利用这些接口，我们可以对Service进行Create、Get、List、Update、Delete操作，以及监视Service变化情况的watch操作，并把Service信息存储到etcd。</p>
<h3 id="3-1-4-Controller-Registry"><a href="#3-1-4-Controller-Registry" class="headerlink" title="3.1.4 Controller Registry"></a>3.1.4 Controller Registry</h3><p>Controller Registry负责跟踪Kubernetes集群中所有的Replication Controller，Replication Controller维护着指定数量的pod 副本(replicas)拷贝，如果其中的一个容器死掉，Replication Controller会自动启动一个新的容器，如果死掉的容器恢复，其会杀死多出的容器以保证指定的拷贝不变。通过封装Controller Registry为实现Kubernetes API Server的RESTful API接口REST， 利用这些接口，我们可以对Replication Controller进行Create、Get、List、Update、Delete操作，以及监视Replication Controller变化情况的watch操作，并把Replication Controller信息存储到etcd。</p>
<h3 id="3-1-5-Endpoints-Registry"><a href="#3-1-5-Endpoints-Registry" class="headerlink" title="3.1.5 Endpoints Registry"></a>3.1.5 Endpoints Registry</h3><p>Endpoints Registry负责收集Service的endpoint，比如Name：”mysql”，Endpoints: [“10.10.1.1:1909”，”10.10.2.2:8834”]，同Pod Registry，Controller Registry也实现了Kubernetes API Server的RESTful API接口，可以做Create、Get、List、Update、Delete以及watch操作。</p>
<h3 id="3-1-6-Binding-Registry"><a href="#3-1-6-Binding-Registry" class="headerlink" title="3.1.6 Binding Registry"></a>3.1.6 Binding Registry</h3><p>Binding包括一个需要绑定Pod的ID和Pod被绑定的Host，Scheduler写Binding Registry后，需绑定的Pod被绑定到一个host。Binding Registry也实现了Kubernetes API Server的RESTful API接口，但Binding Registry是一个write-only对象，所有只有Create操作可以使用， 否则会引起错误。</p>
<h3 id="3-1-7-Scheduler"><a href="#3-1-7-Scheduler" class="headerlink" title="3.1.7 Scheduler"></a>3.1.7 Scheduler</h3><p>Scheduler收集和分析当前Kubernetes集群中所有Minion节点的资源(内存、CPU)负载情况，然后依此分发新建的Pod到Kubernetes集群中可用的节点。由于一旦Minion节点的资源被分配给Pod，那这些资源就不能再分配给其他Pod， 除非这些Pod被删除或者退出， 因此，Kubernetes需要分析集群中所有Minion的资源使用情况，保证分发的工作负载不会超出当前该Minion节点的可用资源范围。具体来说，Scheduler做以下工作：</p>
<ol>
<li>实时监测Kubernetes集群中未分发的Pod。</li>
<li>实时监测Kubernetes集群中所有运行的Pod，Scheduler需要根据这些Pod的资源状况安全地将未分发的Pod分发到指定的Minion节点上。</li>
<li>Scheduler也监测Minion节点信息，由于会频繁查找Minion节点，Scheduler会缓存一份最新的信息在本地。</li>
<li>最后，Scheduler在分发Pod到指定的Minion节点后，会把Pod相关的信息Binding写回API Server。</li>
</ol>
<h2 id="3-2-Kubelet"><a href="#3-2-Kubelet" class="headerlink" title="3.2 Kubelet"></a>3.2 Kubelet</h2><p><img src="http://sean-images.qiniudn.com/kubernetes-kubelet.png" alt="kubernetes-kubelet"><br>根据上图可知Kubelet是Kubernetes集群中每个Minion和Master API Server的连接点，Kubelet运行在每个Minion上，是Master API Server和Minion之间的桥梁，接收Master API Server分配给它的commands和work，与持久性键值存储etcd、file、server和http进行交互，读取配置信息。Kubelet的主要工作是管理Pod和容器的生命周期，其包括Docker Client、Root Directory、Pod Workers、Etcd Client、Cadvisor Client以及Health Checker组件，具体工作如下：</p>
<ol>
<li>通过Worker给Pod异步运行特定的Action</li>
<li>设置容器的环境变量</li>
<li>给容器绑定Volume</li>
<li>给容器绑定Port</li>
<li>根据指定的Pod运行一个单一容器</li>
<li>杀死容器</li>
<li>给指定的Pod创建network 容器</li>
<li>删除Pod的所有容器</li>
<li>同步Pod的状态</li>
<li>从cAdvisor获取container info、 pod info、 root info、 machine info</li>
<li>检测Pod的容器健康状态信息</li>
<li>在容器中运行命令。</li>
</ol>
<h2 id="3-3-Proxy"><a href="#3-3-Proxy" class="headerlink" title="3.3 Proxy"></a>3.3 Proxy</h2><p>Proxy是为了解决外部网络能够访问跨机器集群中容器提供的应用服务而设计的，运行在每个Minion上。Proxy提供TCP/UDP sockets的proxy，每创建一种Service，Proxy主要从etcd获取Services和Endpoints的配置信息（也可以从file获取），然后根据配置信息在Minion上启动一个Proxy的进程并监听相应的服务端口，当外部请求发生时，Proxy会根据Load Balancer将请求分发到后端正确的容器处理。</p>
<p>所以Proxy不但解决了同一主宿机相同服务端口冲突的问题，还提供了Service转发服务端口对外提供服务的能力，Proxy后端使用了随机、轮循负载均衡算法。关于更多 kube-proxy 的内容 <a href="http://www.sel.zju.edu.cn/?p=484" target="_blank" rel="external">KUBERNETES代码走读之MINION NODE 组件 KUBE-PROXY</a> 。</p>
<h1 id="4-etcd"><a href="#4-etcd" class="headerlink" title="4. etcd"></a>4. etcd</h1><p><a href="https://github.com/coreos/etcd" target="_blank" rel="external">etcd</a>在上面架构图上提到过几次，但它并不是kubernetes的一部分，它是 CoreOS 团队发起的一个管理配置信息和服务发现（service discovery）项目，目标是构建一个高可用的分布式键值（key-value）数据库。与kubernetes和docker一样还是在快速迭代开发中的产品，没有ZooKeeper那样成熟。有机会再另外通过文章介绍。</p>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://www.infoq.com/cn/articles/Kubernetes-system-architecture-introduction" target="_blank" rel="external">Kubernetes系统架构简介</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-kubernetes" target="_blank" rel="external">An Introduction to Kubernetes</a></li>
<li><a href="https://github.com/GoogleCloudPlatform/kubernetes/blob/master/DESIGN.md" target="_blank" rel="external">Kubernetes-DESIGN</a> （<a href="http://my.oschina.net/kakablue/blog/278038" target="_blank" rel="external">Kubernetes 设计概要</a>）</li>
<li><a href="http://dockerone.com/article/173" target="_blank" rel="external">怎样构建一个容器集群</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下rar及zip压缩包中批量替换某文件脚本]]></title>
      <url>http://seanlook.com/2015/01/29/shell-batch-replace-files-from-rar-zip/</url>
      <content type="html"><![CDATA[<p>本需求是自己负责的一个生产系统上，有大量以zip和rar结尾的压缩文件散落在文件系统的各个文件夹，先在需要把压缩包里包含某一个特定文件（如tftpd32.exe或Tftpd32.exe，版本较旧），全都替换成比较新的tftpd32.exe版本。压缩文件总数约5000个，需要替换的数量约1500个。</p>
<p>因为是生产环境，不敢轻易乱动，所以脚本考虑的因素就非常多，不允许中间执行过程出现异常，所以找到文件后实际执行替换操作之前做好备份，并且将操作过程记录日志。</p>
<p>以下几点需要考虑：</p>
<ul>
<li>分别处理zip和rar文件，为减低脚本的复杂程度，分作两个shell脚本。</li>
<li>rar在Linux下默认是没有安装解压缩工具，下载rarlinux-x64-5.2.0.tar.gz</li>
<li>zip包中文件含有中文文件名，unzip测试解压缩或列出内容时出现文件名乱码，原因是zip在压缩时不记录当时的编码格式。这个问题非常棘手，乱码打进压缩包是绝对不允许的，网上<a href="http://www.zhihu.com/question/20523036" target="_blank" rel="external">有几种解压办法</a>有几种办法都不能很好的应对我的场景：并不需要实际解压zip文件，而只需使用 <code>l</code> ——列出文件列表、获取目录及文件名，<code>d</code> ——从压缩包中直接删除某个文件，<code>a</code> ——向压缩包添加一个文件。实际解压到文件系统上是不是乱码我们并不关心。<br>最后的解决办法是使用<code>p7zip</code>工具，配合<code>LANG</code>变量解决。</li>
<li>向压缩包里添加新文件时，要保持里面的目录结构，则必须在文件系统上存在同样的 相对目录/文件 。所以每次都要在脚本执行目录下创建临时目录tmp_dir，还要及时删除。但如果文件在压缩包的根目录下，这个临时目录就是当前脚本执行目录。</li>
<li>有可能会存在一个压缩包中多个文件夹中包含不止一个tftpd32.exe文件。</li>
<li>每个文件都有一个CRC值，处理文件名大小写不同但实质是同一个文件时有效。</li>
</ul>
<a id="more"></a>
<p>以下脚本使用说明：</p>
<ul>
<li>变量说明<ul>
<li><code>filelist</code> 变量设定你所需要检查的压缩文件列表（绝对路径），可以通过<code>find /your/dir/ -name *.rar | sort | uniq  &gt; testfile</code>。与脚本在相同目录下，并且为unix格式</li>
<li><code>existlist</code> 变量是从<code>filelist</code>文件中得到的包含特定文件的列表，脚本执行完后可以查看</li>
<li><code>errorlist</code> 变量是从<code>filelist</code>文件列表中得到的不包含特定文件的列表，当然也有可能这个压缩文件本身不完整</li>
<li><code>filebak</code> 变量指定要替换的那个压缩文件备份的目录</li>
<li><code>oldfile</code> 指定要替换的那个文件名</li>
<li><code>newfile</code> 指定新文件的文件名，注意这个文件一定要在脚本当前目录下</li>
<li><code>binrar</code>,<code>bin7z</code> 指定解压缩命令目录，因为<code>7z</code>和<code>rar</code>都不是CentOS自带的</li>
<li><code>fl</code> 是<code>filelist</code>文件列表里的每一条记录</li>
<li><code>exist</code> 压缩文件<code>fl</code>的内容列表里包含tftpd32.exe的记录，可能有多行</li>
<li><code>dirfiles</code> 处理<code>exist</code>的结果，形如压缩包里的目录结构 <code>your/dir/tftpd32.exe</code>，可能有多行</li>
<li><code>df</code> 是<code>dirfiles</code>中的单行记录，它的前面目录部分便是<code>tmp_dir</code></li>
</ul>
</li>
<li>是否有必要root用户执行看个人情况，执行后部分文件的属主可能会变，可用<code>chown user1.user1 -R /your/dir/</code>恢复</li>
<li>有部分zip文件无法使用7z，但文件本身正常，从日志可以看到error信息</li>
<li>tftpd32.exe区分大小写，如果要查找替换Tftpd32.exe请修改后在执行（确保grep没有<code>-i</code>选项）</li>
<li>可以处理的情况<ul>
<li>压缩文件中无tftpd32.exe</li>
<li>要替换的tftpd32.exe文件在压缩文件根目录下</li>
<li>要替换的tftpd32.exe在嵌套子目录中</li>
<li>压缩文件中存在多个tftpd32.exe</li>
<li>压缩文件本身存在问题</li>
</ul>
</li>
<li>该脚本有一定的危险性（虽然已备份），在正式环境中运行之前一定要多做测试。并且运行一次之后，谨慎运行第二次，因为可能会导致备份被覆盖（可换备份目录）</li>
<li>假如出现异常，要从备份文件恢复所有修改的文件，可以根据<code>$existlist</code>和<code>filebak</code>下的目录列表拼凑<code>cp</code>语句</li>
<li>建议执行方法<code>./rar_new.sh | tee your.log</code>，事后可从<code>your.log</code>中查看日志</li>
</ul>
<p>处理rar的脚本<code>rar_new.sh</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">filelist=<span class="string">"testfile"</span></div><div class="line"><span class="comment"># filelist="crm_rar.txt"</span></div><div class="line">existlist=<span class="string">"<span class="variable">$&#123;filelist&#125;</span>.exist"</span></div><div class="line">errorlist=<span class="string">"<span class="variable">$&#123;filelist&#125;</span>.not"</span></div><div class="line">filebak=<span class="string">"/crmbak/rarbak"</span></div><div class="line">oldfile=tftpd32.exe                                                                                                                                          </div><div class="line">newfile=tftpd32.exe</div><div class="line">binrar=<span class="string">"/usr/bin/rar"</span></div><div class="line"></div><div class="line">IFS=$<span class="string">'\n'</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"files list bellow have <span class="variable">$&#123;oldfile&#125;</span>:"</span> &gt; <span class="variable">$existlist</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"files list bellow do not have <span class="variable">$&#123;oldfile&#125;</span> or may have error:"</span> &gt; <span class="variable">$errorlist</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> fl <span class="keyword">in</span> `cat <span class="variable">$filelist</span>`</div><div class="line">  <span class="keyword">do</span> </div><div class="line">    <span class="comment"># $&#123;oldfile&#125; exist or not, file error or not</span></div><div class="line">    exist=`<span class="variable">$binrar</span> l <span class="variable">$fl</span> |grep <span class="variable">$&#123;oldfile&#125;</span>`</div><div class="line">    <span class="keyword">if</span> [ $? <span class="_">-ne</span> 0 ];<span class="keyword">then</span></div><div class="line">       <span class="built_in">echo</span> <span class="string">"<span class="variable">$fl</span>"</span> &gt;&gt; <span class="variable">$errorlist</span></div><div class="line">       <span class="built_in">continue</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="comment"># get extracting dir and filename, could be more than one file</span></div><div class="line">       dirfiles=`<span class="built_in">echo</span> <span class="string">"<span class="variable">$exist</span>"</span> | awk <span class="string">'&#123;for (i=5;i&lt;=NF;i++) printf $i" " ; print ""&#125;'</span>`</div><div class="line">    <span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment">#    echo "$exist"</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$dirfiles</span>"</span> != <span class="string">""</span> ];<span class="keyword">then</span></div><div class="line">      <span class="built_in">echo</span> <span class="string">"<span class="variable">$fl</span>"</span> | tee <span class="_">-a</span> <span class="variable">$existlist</span></div><div class="line">      <span class="comment"># backup original file</span></div><div class="line">      /bin/cp -af <span class="string">"<span class="variable">$fl</span>"</span> <span class="string">"<span class="variable">$filebak</span>/"</span></div><div class="line">      <span class="built_in">echo</span> <span class="string">"--- <span class="variable">$fl</span> is backed up in <span class="variable">$filebak</span>"</span></div><div class="line">      <span class="built_in">echo</span> <span class="string">"    <span class="variable">$dirfiles</span>"</span></div><div class="line"></div><div class="line">      <span class="keyword">for</span> df <span class="keyword">in</span> `<span class="built_in">echo</span> <span class="string">"<span class="variable">$dirfiles</span>"</span>`</div><div class="line">        <span class="keyword">do</span></div><div class="line">          <span class="comment"># create temp directory to put new $&#123;newfile&#125; for compress</span></div><div class="line">          tmp_dir=$( <span class="built_in">echo</span> <span class="string">"<span class="variable">$df</span>"</span> | awk -F <span class="string">'/'</span> <span class="string">'&#123;for(i=1;i&lt;NF;i++) printf"%s/",$i&#125; &#123;print ""&#125;'</span> )</div><div class="line">          <span class="keyword">if</span> [ <span class="variable">$&#123;#tmp_dir&#125;</span> <span class="_">-ne</span> 0 ];<span class="keyword">then</span></div><div class="line">            mkdir -p <span class="string">"<span class="variable">$tmp_dir</span>"</span> &amp;&amp; cp -af <span class="variable">$&#123;newfile&#125;</span> <span class="string">"<span class="variable">$tmp_dir</span>"</span></div><div class="line">          <span class="keyword">fi</span> </div><div class="line">          <span class="comment"># start delete old file and add new one</span></div><div class="line">          <span class="variable">$binrar</span> d <span class="string">"<span class="variable">$fl</span>"</span> <span class="string">"<span class="variable">$tmp_dir</span>"</span><span class="variable">$&#123;oldfile&#125;</span> &amp;&amp; <span class="variable">$binrar</span> a <span class="string">"<span class="variable">$fl</span>"</span> <span class="string">"<span class="variable">$tmp_dir</span>"</span><span class="variable">$&#123;newfile&#125;</span></div><div class="line">          <span class="keyword">if</span> [ $? <span class="_">-ne</span> 0 ];<span class="keyword">then</span>                                                                                                                             </div><div class="line">            <span class="built_in">echo</span> <span class="string">"--- rar file <span class="variable">$fl</span> may have error, you SHOULD check it"</span></div><div class="line">          <span class="keyword">fi</span></div><div class="line"></div><div class="line">          <span class="keyword">if</span> [ <span class="variable">$&#123;#tmp_dir&#125;</span> <span class="_">-ne</span> 0 ];<span class="keyword">then</span></div><div class="line">            rm <span class="_">-f</span> <span class="string">"<span class="variable">$tmp_dir</span>"</span><span class="variable">$&#123;newfile&#125;</span> &amp;&amp; rmdir -p <span class="string">"<span class="variable">$tmp_dir</span>"</span></div><div class="line">            <span class="keyword">if</span> [ $? <span class="_">-ne</span> 0 ];<span class="keyword">then</span></div><div class="line">              <span class="built_in">echo</span> <span class="string">"--- tmp_dir <span class="variable">$tmp_dir</span> delete fail"</span></div><div class="line">            <span class="keyword">fi</span></div><div class="line">          <span class="keyword">fi</span></div><div class="line">        <span class="keyword">done</span></div><div class="line"></div><div class="line">      <span class="built_in">echo</span> <span class="string">"--- old deleted, new added"</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line"></div><div class="line">  <span class="keyword">done</span></div></pre></td></tr></table></figure>
<p>处理zip的脚本<code>zip_new.sh</code>:(两脚本相差很小，主要是为了谨慎起见减低脚本的复杂度)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="comment"># filelist="test_filelist"</span></div><div class="line">filelist=<span class="string">"crm_zip.txt"</span></div><div class="line">existlist=<span class="string">"<span class="variable">$&#123;filelist&#125;</span>.exist"</span></div><div class="line">errorlist=<span class="string">"<span class="variable">$&#123;filelist&#125;</span>.not"</span></div><div class="line">filebak=<span class="string">"/crmbak/zipbak"</span></div><div class="line">oldfile=tftpd32.exe</div><div class="line">newfile=tftpd32.exe</div><div class="line">bin7z=<span class="string">"/usr/bin/7z"</span></div><div class="line"></div><div class="line"><span class="built_in">export</span> LANG=<span class="string">"zh_CN.GB18030"</span></div><div class="line">IFS=$<span class="string">'\n'</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"files list bellow have <span class="variable">$&#123;oldfile&#125;</span>:"</span> &gt; <span class="variable">$existlist</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"files list bellow do not have <span class="variable">$&#123;oldfile&#125;</span> or may have error:"</span> &gt; <span class="variable">$errorlist</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> fl <span class="keyword">in</span> `cat <span class="variable">$filelist</span>`</div><div class="line">  <span class="keyword">do</span> </div><div class="line">    <span class="comment"># $&#123;oldfile&#125; exist or not, file error or not</span></div><div class="line">    exist=`<span class="variable">$bin7z</span> l <span class="variable">$fl</span> |grep <span class="variable">$&#123;oldfile&#125;</span>`</div><div class="line">    <span class="keyword">if</span> [ $? <span class="_">-ne</span> 0 ];<span class="keyword">then</span></div><div class="line">       <span class="built_in">echo</span> <span class="string">"<span class="variable">$fl</span>"</span> &gt;&gt; <span class="variable">$errorlist</span></div><div class="line">       <span class="built_in">continue</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="comment"># get extracting dir and filename, could be more than one file</span></div><div class="line">       dirfiles=`<span class="built_in">echo</span> <span class="string">"<span class="variable">$exist</span>"</span> | awk <span class="string">'&#123;for (i=6;i&lt;=NF;i++) printf $i" " ; print ""&#125;'</span>`</div><div class="line">    <span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment"># echo ===== "$dirfiles"</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$dirfiles</span>"</span> != <span class="string">""</span> ];<span class="keyword">then</span></div><div class="line">      <span class="built_in">echo</span> <span class="string">"<span class="variable">$fl</span>"</span> | tee <span class="_">-a</span> <span class="variable">$existlist</span></div><div class="line">      <span class="comment"># backup original file</span></div><div class="line">      /bin/cp -af <span class="string">"<span class="variable">$fl</span>"</span> <span class="string">"<span class="variable">$filebak</span>/"</span></div><div class="line">      <span class="built_in">echo</span> <span class="string">"--- <span class="variable">$fl</span> is backed up in <span class="variable">$filebak</span>"</span></div><div class="line">      <span class="built_in">echo</span> <span class="string">"    <span class="variable">$dirfiles</span>"</span></div><div class="line"></div><div class="line">      <span class="keyword">for</span> df <span class="keyword">in</span> `<span class="built_in">echo</span> <span class="string">"<span class="variable">$dirfiles</span>"</span>`</div><div class="line">        <span class="keyword">do</span></div><div class="line">          <span class="comment"># create temp directory to put new $&#123;newfile&#125; for compress</span></div><div class="line">          tmp_dir=$( <span class="built_in">echo</span> <span class="string">"<span class="variable">$df</span>"</span> | awk -F <span class="string">'/'</span> <span class="string">'&#123;for(i=1;i&lt;NF;i++) printf"%s/",$i&#125; &#123;print ""&#125;'</span> )</div><div class="line">          <span class="keyword">if</span> [ <span class="variable">$&#123;#tmp_dir&#125;</span> <span class="_">-ne</span> 0 ];<span class="keyword">then</span></div><div class="line">            mkdir -p <span class="string">"<span class="variable">$tmp_dir</span>"</span> &amp;&amp; cp -af <span class="variable">$&#123;newfile&#125;</span> <span class="string">"<span class="variable">$tmp_dir</span>"</span></div><div class="line">          <span class="keyword">fi</span> </div><div class="line">          <span class="comment"># start delete old file and add new one</span></div><div class="line">          <span class="variable">$bin7z</span> d <span class="string">"<span class="variable">$fl</span>"</span> <span class="string">"<span class="variable">$tmp_dir</span>"</span><span class="variable">$&#123;oldfile&#125;</span> &amp;&amp; <span class="variable">$bin7z</span> a <span class="string">"<span class="variable">$fl</span>"</span> <span class="string">"<span class="variable">$tmp_dir</span>"</span><span class="variable">$&#123;newfile&#125;</span></div><div class="line">          <span class="keyword">if</span> [ $? <span class="_">-ne</span> 0 ];<span class="keyword">then</span>                                                                                                                             </div><div class="line">            <span class="built_in">echo</span> <span class="string">"--- zip file <span class="variable">$fl</span> may have error, you SHOULD check it"</span></div><div class="line">          <span class="keyword">fi</span></div><div class="line"> </div><div class="line">          <span class="keyword">if</span> [ <span class="variable">$&#123;#tmp_dir&#125;</span> <span class="_">-ne</span> 0 ];<span class="keyword">then</span></div><div class="line">            rm <span class="_">-f</span> <span class="string">"<span class="variable">$tmp_dir</span>"</span><span class="variable">$&#123;newfile&#125;</span> &amp;&amp; rmdir -p <span class="string">"<span class="variable">$tmp_dir</span>"</span></div><div class="line">            <span class="keyword">if</span> [ $? <span class="_">-ne</span> 0 ];<span class="keyword">then</span></div><div class="line">              <span class="built_in">echo</span> <span class="string">"--- tmp_dir <span class="variable">$tmp_dir</span> delete fail"</span></div><div class="line">            <span class="keyword">fi</span></div><div class="line">          <span class="keyword">fi</span></div><div class="line">        <span class="keyword">done</span></div><div class="line"></div><div class="line">      <span class="built_in">echo</span> <span class="string">"--- old deleted, new added"</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line"></div><div class="line">  <span class="keyword">done</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LDIF修改ldap记录或配置示例]]></title>
      <url>http://seanlook.com/2015/01/22/openldap_ldif_example/</url>
      <content type="html"><![CDATA[<p>可以说LDIF文件是OpenLDAP操作数据或修改配置的一切来源，下面是实际通过客户端工具操作的具体示例。（openldap安装及配置过程见<a href="http://seanlook.com/2015/01/21/openldap-install-guide-ssl/">这里</a>）。</p>
<h3 id="1-添加组织或条目"><a href="#1-添加组织或条目" class="headerlink" title="1. 添加组织或条目"></a>1. 添加组织或条目</h3><p>创建一个Marketing部门，添加一个dn记录：<br><figure class="highlight ldif"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cat add_entry.ldif</span></div><div class="line"><span class="attribute">dn</span>: ou=Marketing, dc=example,dc=com</div><div class="line"><span class="attribute">changetype</span>: add</div><div class="line"><span class="attribute">objectclass</span>: top</div><div class="line"><span class="attribute">objectclass</span>: organizationalUnit</div><div class="line"><span class="attribute">ou</span>: Marketing</div><div class="line"></div><div class="line"><span class="attribute">dn</span>: cn=Pete Minsky,ou=Marketing,dc=example,dc=com</div><div class="line"><span class="attribute">changetype</span>: add</div><div class="line"><span class="attribute">objectclass</span>: person</div><div class="line"><span class="attribute">objectclass</span>: organizationalPerson</div><div class="line"><span class="attribute">objectclass</span>: inetOrgPerson</div><div class="line"><span class="attribute">cn</span>: Pete Minsky</div><div class="line"><span class="attribute">sn</span>: Pete</div><div class="line"><span class="attribute">ou</span>: Marketing</div><div class="line"><span class="attribute">description</span>: sb, sx</div><div class="line"><span class="attribute">description</span>: sx</div><div class="line"><span class="attribute">uid</span>: pminsky</div></pre></td></tr></table></figure></p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># ldapmodify -xWD <span class="string">'cn=admin,dc=example,dc=com'</span> -f add_entry.ldif</span></div><div class="line"></div><div class="line">或去掉changetype后</div><div class="line"><span class="meta"># ldapmodify -a -xWD <span class="string">'cn=admin,dc=example,dc=com'</span> -f add_entry.ldif</span></div><div class="line"><span class="meta"># ldapadd -xWD <span class="string">'cn=admin,dc=example,dc=com'</span> -f add.ldif</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="2-修改组织或条目"><a href="#2-修改组织或条目" class="headerlink" title="2. 修改组织或条目"></a>2. 修改组织或条目</h3><p>添加mail属性，修改sn的值，删除一个description属性：<br><figure class="highlight ldif"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cat modify_entry.ldif</span></div><div class="line"><span class="attribute">dn</span>: cn=Pete Minsky,ou=Marketing,dc=example,dc=com</div><div class="line"><span class="attribute">changetype</span>: modify</div><div class="line"><span class="attribute">add</span>: mail</div><div class="line"><span class="attribute">mail</span>: pminsky@example.com</div><div class="line"><span class="literal">-</span></div><div class="line"><span class="attribute">replace</span>: sn</div><div class="line"><span class="attribute">sn</span>: Minsky</div><div class="line"><span class="literal">-</span></div><div class="line"><span class="attribute">delete</span>: description</div><div class="line"><span class="attribute">description</span>: sx</div></pre></td></tr></table></figure></p>
<figure class="highlight sml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># ldapmodify -xWD <span class="symbol">'cn</span>=admin,dc=example,dc=com' -f modify_entry.ldif</div><div class="line"># ldapsearch -xD <span class="symbol">'cn</span>=admin,dc=mydomain,dc=net' -b <span class="symbol">'ou</span>=<span class="type">People</span>,dc=mydomain,dc=net' -s sub <span class="symbol">'objectclass</span>=*<span class="string">' -w tplink -LLL</span></div></pre></td></tr></table></figure>
<h3 id="3-重命名条目"><a href="#3-重命名条目" class="headerlink" title="3. 重命名条目"></a>3. 重命名条目</h3><figure class="highlight ldif"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">dn</span>: cn=Pete Minsky,ou=Marketing,dc=example,dc=com</div><div class="line"><span class="attribute">changetype</span>: modrdn</div><div class="line"><span class="attribute">newrdn</span>: cn=Susan Jacobs</div><div class="line"><span class="attribute">deleteoldrdn</span>: 1</div></pre></td></tr></table></figure>
<p><code>modrdn</code>只允许修改dn最左边的部分，且不能重命名带叶子或分支的子树，如果要将一个用户移动到另一个部门下，只能在新部门创建dn，然后删除旧的dn。</p>
<h3 id="4-删除组织或条目"><a href="#4-删除组织或条目" class="headerlink" title="4. 删除组织或条目"></a>4. 删除组织或条目</h3><p>LDAP协议只能删除无分支的叶子dn：<br><figure class="highlight ldif"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cat delete_entry.ldif</span></div><div class="line"><span class="attribute">dn</span>: cn=Susan Jacobs,ou=Marketing,dc=example,dc=com</div><div class="line"><span class="attribute">changetype</span>: delete</div><div class="line"></div><div class="line">或</div><div class="line"><span class="comment"># ldapdelete -xWD "cn=admin,dc=example,dc=com" -h localhost -p 389 "cn=Susan Jacobs,ou=Marketing,dc=example,dc=com"</span></div></pre></td></tr></table></figure></p>
<h3 id="5-LDIF配置backend"><a href="#5-LDIF配置backend" class="headerlink" title="5. LDIF配置backend"></a>5. LDIF配置backend</h3><p>OpenLDAP的配置采用以cn=config为根的目录树的形式组织起来，采用config作为database，默认情况下包括admin或root用户都没有访问权限，需要赋予读写权限，然而赋予修改权限要求首先要提供认证信息，初始化安装后的cn=config是<a href="http://serverfault.com/questions/661151/how-to-modify-rootpw-without-edit-ldif-manually-but-with-ldap-command-tools-in" target="_blank" rel="external">没有credentials</a><br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># ldapmodify -Y EXTERNAL -H ldapi:/// -f modify_config.ldif </div><div class="line"><span class="symbol">SASL</span>/EXTERNAL authentication started</div><div class="line"><span class="symbol">SASL</span> username: gidNumber<span class="number">=0</span>+uidNumber<span class="number">=0</span>,<span class="meta">cn</span><span class="symbol">=peercred</span>,<span class="meta">cn</span><span class="symbol">=external</span>,<span class="meta">cn</span><span class="symbol">=auth</span></div><div class="line"><span class="symbol">SASL</span> SSF: <span class="number">0</span></div><div class="line"><span class="symbol">modifying</span> <span class="meta">entry</span> <span class="string">"olcDatabase=&#123;0&#125;config,cn=config"</span></div><div class="line"><span class="symbol">ldap_modify</span>: Insufficient access (<span class="number">50</span>)</div></pre></td></tr></table></figure></p>
<p>所以这里不得不手动编辑<code>olcDatabase={0}config.ldif</code>文件，获得最初认证权限（虽然官方不推荐手动修改配置）：<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># vi /etc/ldap/slapd.d/cn<span class="symbol">\=</span>config/olcDatabase<span class="symbol">\=</span><span class="symbol">\&#123;</span>0<span class="symbol">\&#125;</span>config.ldif</div><div class="line">olcRootPW: &#123;SSHA&#125;your_slappasswd_secret</div></pre></td></tr></table></figure></p>
<p>重启slapd后(不是说不用重启吗)便可以修改config：<br><figure class="highlight ldif"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ldapwhoami -x -D cn=config -W </span></div><div class="line"></div><div class="line">修改示例：</div><div class="line"><span class="comment"># ldapmodify -xWD 'cn=config' </span></div><div class="line"><span class="attribute">Enter LDAP Password</span>: </div><div class="line"><span class="attribute">dn</span>: olcDatabase=&#123;0&#125;config,cn=config</div><div class="line"><span class="attribute">changetype</span>: modify</div><div class="line"><span class="attribute">replace</span>: olcRootDN</div><div class="line"><span class="attribute">olcRootDN</span>: cn=config </div><div class="line"><span class="literal">-</span></div><div class="line"><span class="attribute">replace</span>: olcRootPW</div><div class="line"><span class="attribute">olcRootPW</span>: &#123;SSHA&#125;your_slappasswd_secret</div><div class="line"></div><div class="line"><span class="attribute">modifying entry "olcDatabase=&#123;0&#125;config,cn=config"</span></div></pre></td></tr></table></figure></p>
<p>在<code>/etc/ldap/slapd.d/cn=config/olcDatabase={0}config.ldif</code>中<code>olcRootDN</code>变成base64加密后的值（两个”:”）。</p>
<p>最后，如果要在slapd服务未启动的情况下修改配置可以通过以下命令转换成ldif中间文件：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># slapcat -n0 -F <span class="regexp">/etc/</span>ldap<span class="regexp">/slapd.d/</span> &gt; <span class="regexp">/tmp/</span>config-in-portable-format.ldif</div><div class="line">编辑ldif文件后，重新shengc slapd.d目录</div><div class="line"># slapadd -n0 -F <span class="regexp">/tmp/</span>slapd.d -l <span class="regexp">/tmp/</span>config-in-portable-format.ldif</div></pre></td></tr></table></figure></p>
<p>使用这类命令行工具有助于对 LDAP concept 理解，如果要达到快速配置的效果，可以使用 ldapbrowser 或 <a href="http://directory.apache.org/studio/users-guide.html" target="_blank" rel="external">Apache Directory Studio</a> 图形化工具，特别是 Apache Directory Studio 不仅提供了 LDAP Browser/Editor 的功能，还能编辑LDIF文件和自定义schema，智能提示非常友好。<br><img src="http://sean-images.qiniudn.com/ldap_apache_directory_studio.png" alt="ldap_apache_directory_studio"></p>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://www.zytrax.com/books/ldap/ch6/slapd-config.html#entries" target="_blank" rel="external">Chapter 6.1.1: OpenLDAP using OLC (cn=config)</a></li>
<li><a href="http://www.yolinux.com/TUTORIALS/LinuxTutorialLDAP-SLAPD-LDIF-V2-config.html" target="_blank" rel="external">LDIF Tutorial: slapd.conf</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[OpenLDAP(2.4.3x)服务器搭建及配置说明]]></title>
      <url>http://seanlook.com/2015/01/21/openldap-install-guide-ssl/</url>
      <content type="html"><![CDATA[<p>本文采用的是从源码编译安装，适合Ubuntu和CentOS平台，通过<code>apt-get</code>或<code>yum</code>方式安装参考补充部分。openldap原理介绍参考<a href="http://seanlook.com/2015/01/15/openldap_introduction/">这里</a>。</p>
<p>环境：<br>Ubuntu: 14.04.1 (trusty), x86_64<br>OpenLDAP: 2.4.31<br>Berkery DB: 5.1.29</p>
<h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h1><h2 id="1-1-准备编译环境和依赖包"><a href="#1-1-准备编译环境和依赖包" class="headerlink" title="1.1 准备编译环境和依赖包"></a>1.1 准备编译环境和依赖包</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># apt-get install build-essential</span></div><div class="line"><span class="meta"># apt-get install libssl-dev</span></div></pre></td></tr></table></figure>
<p>下载<a href="ftp://ftp.openldap.org/pub/OpenLDAP/openldap-release/openldap-2.4.31.tgz" target="_blank" rel="external"><code>openldap-2.4.31.tgz</code></a>和<a href="http://download.oracle.com/berkeley-db/db-5.1.29.NC.tar.gz" target="_blank" rel="external"><code>db-5.1.29.NC.tar.gz</code></a>并解压：</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># cd /usr/local/src</span></div><div class="line">src# wget ftp:<span class="comment">//ftp.openldap.org/pub/OpenLDAP/openldap-release/openldap-2.4.31.tgz</span></div><div class="line"><span class="meta"># wget http://download.oracle.com/berkeley-db/db-5.1.29.NC.tar.gz</span></div><div class="line"><span class="meta"># tar -zxf openldap-2.4.31.tgz</span></div><div class="line"><span class="meta"># tar -zxf db-5.1.29.NC.tar.gz</span></div><div class="line"></div><div class="line"><span class="meta"># cd db-5.1.29.NC/build_unix/</span></div><div class="line"><span class="meta"># ../dist/configure --prefix=/usr/local/berkeleydb-5.1</span></div><div class="line"><span class="meta"># make &amp;&amp; make install</span></div></pre></td></tr></table></figure>
<p>建议人工指定<code>--prefix</code>，默认会安装到<code>/usr/local/BerkeleyDB.5.1</code>。上面的<code>make</code>过程会比较长，另外如果gcc版本在4.7及以上，可能会出现如下<a href="http://osdir.com/ml/freebsd-current/2012-05/msg00050.html" target="_blank" rel="external">warning</a>，可以忽略：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">..<span class="regexp">/src/</span>dbinc/atomic.<span class="string">h:</span><span class="number">179</span>:<span class="number">19</span>: <span class="string">warning:</span> conflicting types <span class="keyword">for</span> built-<span class="keyword">in</span> function</div><div class="line"> ‘__atomic_compare_exchange’ [enabled by <span class="keyword">default</span>]</div></pre></td></tr></table></figure></p>
<h2 id="1-2-安装openldap"><a href="#1-2-安装openldap" class="headerlink" title="1.2 安装openldap"></a>1.2 安装openldap</h2><p>设置一些环境变量，修改<code>/etc/profile</code>或<code>/etc/bash.bashrc</code>：</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> BERKELEYDB_HOME=<span class="string">"/usr/local/berkeleydb-5.1"</span></div><div class="line"><span class="built_in">export</span> CPPFLAGS=<span class="string">"-I<span class="variable">$BERKELEYDB_HOME</span>/include"</span></div><div class="line"><span class="built_in">export</span> LDFLAGS=<span class="string">"-L<span class="variable">$BERKELEYDB_HOME</span>/lib"</span></div><div class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">"<span class="variable">$BERKELEYDB_HOME</span>/lib"</span></div><div class="line"></div><div class="line"><span class="built_in">export</span> LDAP_HOME=<span class="string">"/usr/local/openldap-2.4"</span></div><div class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:<span class="variable">$BERKELEYDB_HOME</span>/bin:<span class="variable">$LDAP_HOME</span>/bin:<span class="variable">$LDAP_HOME</span>/sbin:<span class="variable">$LDAP_HOME</span>/libexec"</span></div></pre></td></tr></table></figure>
<p>其实只要在后面编译openldap时能找到<code>lib</code>和<code>include</code>下的库就行了，不止上面设置环境变量一种办法，解决办法还有直接复制对应的库文件到<code>/usr/lib</code>和<code>/usr/include</code>，或修改<code>/etc/ld.so.conf.d</code>，选其一即可。</p>
<p>编译安装：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">openldap<span class="number">-2.4</span><span class="number">.31</span># ./configure --prefix=/usr/local/openldap<span class="number">-2.4</span></div><div class="line"><span class="meta"># make depend</span></div><div class="line"><span class="meta"># make</span></div><div class="line"><span class="meta"># make install</span></div></pre></td></tr></table></figure></p>
<p>出错提示解决：</p>
<p>如果没设置<code>CPPFLAGS</code>，上面的configure过程可能会提示<code>configure: error: BDB/HDB: BerkeleyDB not available</code>。</p>
<p>如果提示<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">configure: error: MozNSS <span class="keyword">not</span> found - please specify <span class="keyword">the</span> location <span class="built_in">to</span> <span class="keyword">the</span> NSPR <span class="keyword">and</span> NSS header <span class="built_in">files</span> </div><div class="line"><span class="keyword">in</span> CPPFLAGS <span class="keyword">and</span> <span class="keyword">the</span> location <span class="built_in">to</span> <span class="keyword">the</span> NSPR <span class="keyword">and</span> NSS libraries <span class="keyword">in</span> LDFLAGS (<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">system</span> location)</div></pre></td></tr></table></figure></p>
<p>或<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">configure: <span class="keyword">error</span>: <span class="keyword">no</span> acceptable C compiler found <span class="keyword">in</span> <span class="variable">$PATH</span></div></pre></td></tr></table></figure></p>
<p>请检查第一步的依赖是否已经安装，查看openldap解压目录下的<code>README</code>看到REQUIRED SOFTWARE。</p>
<h1 id="2-配置"><a href="#2-配置" class="headerlink" title="2 配置"></a>2 配置</h1><h2 id="2-1-基本配置"><a href="#2-1-基本配置" class="headerlink" title="2.1 基本配置"></a>2.1 基本配置</h2><p><code>/usr/local/openldap-2.4</code>目录结构：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">bin/      --客户端工具如ldapadd、ldapsearch</div><div class="line">etc/      --包含主配置文件slapd.conf、schema、DB_CONFIG等</div><div class="line"><span class="keyword">include</span>/</div><div class="line"><span class="class"><span class="keyword">lib</span>/</span></div><div class="line">libexec/  --服务端启动工具slapd</div><div class="line">sbin/     --服务端工具如slappasswd</div><div class="line">share/</div><div class="line">var/      --bdb数据、log存放目录</div></pre></td></tr></table></figure></p>
<h3 id="2-1-1-配置root密码"><a href="#2-1-1-配置root密码" class="headerlink" title="2.1.1 配置root密码"></a>2.1.1 配置root密码</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># slappasswd </span></div><div class="line"><span class="keyword">New</span> password: </div><div class="line">Re-enter <span class="keyword">new</span> password: </div><div class="line">&#123;SSHA&#125;phAvkua+<span class="number">5</span>B7UNyIAuoTMgOgxF8kxekIk</div></pre></td></tr></table></figure>
<h3 id="2-1-2-修改后的slapd-conf"><a href="#2-1-2-修改后的slapd-conf" class="headerlink" title="2.1.2 修改后的slapd.conf"></a>2.1.2 修改后的slapd.conf</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">include		<span class="regexp">/usr/</span>local<span class="regexp">/openldap-2.4.31/</span>etc<span class="regexp">/openldap/</span>schema/core.schema</div><div class="line">include		<span class="regexp">/usr/</span>local<span class="regexp">/openldap-2.4.31/</span>etc<span class="regexp">/openldap/</span>schema/cosine.schema</div><div class="line">include		<span class="regexp">/usr/</span>local<span class="regexp">/openldap-2.4.31/</span>etc<span class="regexp">/openldap/</span>schema/inetorgperson.schema</div><div class="line"></div><div class="line">pidfile		<span class="regexp">/usr/</span>local<span class="regexp">/openldap-2.4.31/</span>var<span class="regexp">/run/</span>slapd.pid</div><div class="line">argsfile	<span class="regexp">/usr/</span>local<span class="regexp">/openldap-2.4.31/</span>var<span class="regexp">/run/</span>slapd.args</div><div class="line"></div><div class="line">loglevel <span class="number">256</span></div><div class="line">logfile  <span class="regexp">/usr/</span>local<span class="regexp">/openldap-2.4.31/</span>var/slapd.log </div><div class="line"></div><div class="line">database	bdb</div><div class="line">suffix		<span class="string">"dc=mydomain,dc=net"</span></div><div class="line">rootdn		<span class="string">"cn=root,dc=mydomain,dc=net"</span></div><div class="line">rootpw		&#123;SSHA&#125;UK4eGUq3ujR1EYrOL2MRzMBJmo7qGyY3</div><div class="line">directory	<span class="regexp">/usr/</span>local<span class="regexp">/openldap-2.4.31/</span>var/openldap-data</div><div class="line">index	objectClass	eq</div></pre></td></tr></table></figure>
<p>根据自己的需要加入schema，suffix一般填入域名，rootdn处是管理ldap数据的管理员用户，rootpw便是使用slappasswd生成的加密密码。</p>
<h3 id="2-1-3-启动slapd服务"><a href="#2-1-3-启动slapd服务" class="headerlink" title="2.1.3 启动slapd服务"></a>2.1.3 启动slapd服务</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># <span class="regexp">/usr/</span>local<span class="regexp">/openldap-2.4.31/</span>libexec<span class="regexp">/slapd</span></div></pre></td></tr></table></figure>
<p>会自动使用<code>etc/openldap/slapd.conf</code>作为配置文件启动，并写入<code>/usr/local/openldap-2.4.31/var/run/slapd.args</code>中。这里有个问题未解决，配置loglevel和logfile但始终都看不到记录的日志，启动时加入<code>-d 256</code>能正常输出到屏幕上。</p>
<h3 id="2-1-4-测试数据"><a href="#2-1-4-测试数据" class="headerlink" title="2.1.4 测试数据"></a>2.1.4 测试数据</h3><p>编辑一个添加entries的文件test.ldif：<br><figure class="highlight ldif"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">dn</span>: dc=mydomain,dc=net</div><div class="line"><span class="attribute">objectClass</span>: dcObject</div><div class="line"><span class="attribute">objectClass</span>: organization</div><div class="line"><span class="attribute">dc</span>: mydomain</div><div class="line"><span class="attribute">o</span>: mydomain.Inc</div><div class="line"></div><div class="line"><span class="attribute">dn</span>: cn=root,dc=mydomain,dc=net</div><div class="line"><span class="attribute">objectClass</span>: organizationalRole</div><div class="line"><span class="attribute">cn</span>: root</div><div class="line"></div><div class="line"><span class="attribute">dn</span>: ou=itsection,dc=mydomain,dc=net</div><div class="line"><span class="attribute">ou</span>: itsection</div><div class="line"><span class="attribute">objectClass</span>: organizationalUnit</div><div class="line"></div><div class="line"><span class="attribute">dn</span>: cn=sean,ou=itsection,dc=mydomain,dc=net</div><div class="line"><span class="attribute">ou</span>: itsection</div><div class="line"><span class="attribute">cn</span>: sean</div><div class="line"><span class="attribute">sn</span>: zhouxiao</div><div class="line"><span class="attribute">objectClass</span>: inetOrgPerson</div><div class="line"><span class="attribute">objectClass</span>: organizationalPerson</div></pre></td></tr></table></figure></p>
<p>插入数据：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">查看（匿名）</div><div class="line"># ldapsearch -<span class="keyword">x</span> -<span class="keyword">b</span> <span class="string">''</span> -s base <span class="string">'(objectclass=*)'</span> namingContexts</div><div class="line"></div><div class="line">添加（读入密码）</div><div class="line"># ldapadd -<span class="keyword">x</span> -D <span class="string">"cn=root,dc=mydomain,dc=net"</span> -W -<span class="keyword">f</span> test.ldif</div><div class="line"></div><div class="line">验证</div><div class="line"># ldapsearch -<span class="keyword">x</span> -<span class="keyword">b</span> <span class="string">'dc=mydomain,dc=net'</span> <span class="string">'(objectClass=*)'</span></div><div class="line"></div><div class="line">或手动添加条目</div><div class="line"># ldapadd -<span class="keyword">x</span> -D <span class="string">"cn=root,dc=mydomain,dc=net"</span> -W</div><div class="line">Enter LDAP Password: </div><div class="line">dn:<span class="keyword">cn</span>=Angelababy,<span class="keyword">ou</span>=itsection,dc=mydomain,dc=net</div><div class="line"><span class="keyword">cn</span>:Angelababy</div><div class="line"><span class="keyword">sn</span>:baby  </div><div class="line">objectClas<span class="variable">s:inetOrgPerson</span></div><div class="line">objectClas<span class="variable">s:organizationalPerson</span></div><div class="line"></div><div class="line">adding <span class="keyword">new</span> entry <span class="string">"cn=baby,ou=itsection,dc=mydomain,dc=net"</span></div></pre></td></tr></table></figure></p>
<p>到这里，一个简易版的LDAP服务就搭建好了，下面介绍一些额外的高级配置。</p>
<h2 id="2-2-配置TLS加密传输"><a href="#2-2-配置TLS加密传输" class="headerlink" title="2.2 配置TLS加密传输"></a>2.2 配置TLS加密传输</h2><p>在某些应用环境下可能需要加密传输ldap里的信息，配置TLS难点在于证书的生成。关于SSL加密证书的介绍请参考<a href="http://seanlook.com/2015/01/18/openssl-self-sign-ca">ssl-tls</a>，下面我们自己搭建CA，快速自签署ssl证书。</p>
<h3 id="2-2-1-自签署ssl证书"><a href="#2-2-1-自签署ssl证书" class="headerlink" title="2.2.1 自签署ssl证书"></a>2.2.1 自签署ssl证书</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">(<span class="number">1</span>) 生成根密钥</div><div class="line"><span class="meta"># cd /etc/ssl/demoCA/</span></div><div class="line"><span class="meta"># openssl genrsa -out private/cakey.pem 2048</span></div><div class="line"></div><div class="line">(<span class="number">2</span>) 生成根证书，位于/etc/ssl/demoCA/下（CentOS位于/etc/pki/CA）</div><div class="line"><span class="meta"># openssl req -new -x509 -key private/cakey.pem -out cacert.pem</span></div><div class="line"></div><div class="line">(<span class="number">3</span>) 初始化CA</div><div class="line">demoCA# mkdir <span class="keyword">private</span> newcerts</div><div class="line"><span class="meta"># touch newcerts index.txt serial</span></div><div class="line"><span class="meta"># echo "00" &gt; serial</span></div><div class="line"></div><div class="line">(<span class="number">4</span>) 在ldap服务器上生成ssl密钥（可以是/tmp/certs下）</div><div class="line"><span class="meta"># openssl genrsa -out ldap.key</span></div><div class="line"></div><div class="line">(<span class="number">5</span>) 为ldap生成证书签署请求（所填写内容尽量与第<span class="number">2</span>步相同）</div><div class="line">    Common Name填写主机名或域名，password留空</div><div class="line"><span class="meta"># openssl req -new -key ldap.key -out ldap.csr</span></div><div class="line"></div><div class="line">(<span class="number">6</span>) ca根据请求签发证书，得到.crt证书文件</div><div class="line"><span class="meta"># openssl ca -in ldap.key -out ldap.crt</span></div></pre></td></tr></table></figure>
<p>如果在你的环境中已经有一个证书授权中心CA，那么只需要在ldap服务器上使用openssl生成密钥<code>.key</code>和签署请求<code>.csr</code>（第4、5步），然后将.csr发给CA服务器来生成证书<code>.crt</code>（第6步）。</p>
<h3 id="2-2-2-在slapd-conf中加入TLS"><a href="#2-2-2-在slapd-conf中加入TLS" class="headerlink" title="2.2.2 在slapd.conf中加入TLS"></a>2.2.2 在slapd.conf中加入TLS</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">可以是其它能访问的位置</div><div class="line"><span class="meta"># mkdir $OPENLDAP_HOME/etc/openldap/cacerts</span></div><div class="line"><span class="meta"># cp cacert.pem $OPENLDAP_HOME/etc/openldap/cacerts</span></div><div class="line"><span class="meta"># cp ldap.crt $OPENLDAP_HOME/etc/openldap/</span></div><div class="line"><span class="meta"># cp ldap.key $OPENLDAP_HOME/etc/openldap/</span></div><div class="line"></div><div class="line">在etc<span class="meta-keyword">/openldap/</span>slapd.conf中加入以下信息</div><div class="line">TLSCACertificateFile <span class="meta-keyword">/usr/</span>local/openldap<span class="number">-2.4</span><span class="meta-keyword">/etc/</span>openldap<span class="meta-keyword">/cacerts/</span>cacert.pem</div><div class="line">TLSCertificateFile <span class="meta-keyword">/usr/</span>local/openldap<span class="number">-2.4</span><span class="meta-keyword">/etc/</span>openldap/ldap.crt</div><div class="line">TLSCertificateKeyFile <span class="meta-keyword">/usr/</span>local/openldap<span class="number">-2.4</span><span class="meta-keyword">/etc/</span>openldap/ldap.key</div></pre></td></tr></table></figure>
<h3 id="2-2-3-重新启动slapd"><a href="#2-2-3-重新启动slapd" class="headerlink" title="2.2.3 重新启动slapd"></a>2.2.3 重新启动slapd</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># killall slapd     关闭slapd standalone daemon</span></div><div class="line"><span class="meta"># ./libexec/slapd -h 'ldap://0.0.0.0:389/ ldaps://0.0.0.0:636/ ldapi:///'</span></div><div class="line">或只监听<span class="number">636</span>加密端口</div><div class="line"><span class="meta"># ./libexec/slapd -h 'ldaps://0.0.0.0:636/'</span></div></pre></td></tr></table></figure>
<p>如果是正式环境使用加密的话，389端口前的IP换成127.0.0.1。</p>
<h3 id="2-2-4-验证"><a href="#2-2-4-验证" class="headerlink" title="2.2.4 验证"></a>2.2.4 验证</h3><p><strong>ldapsearch</strong><br>使用自带的ldapsearch或ldapadd客户端工具来连接slapd，需要设置<code>ldap.conf</code>或<code>~/.ldaprc</code>文件中的<code>TLS_CACERT</code>为信任的根证书才能使用，否则会提示<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">TLS certificate <span class="string">verification:</span> Error, self signed certificate <span class="keyword">in</span> certificate chain</div><div class="line">TLS <span class="string">trace:</span> SSL3 alert <span class="string">write:</span><span class="string">fatal:</span>unknown CA</div></pre></td></tr></table></figure></p>
<p>所以在在使用ldapsearch的服务器上修改<code>/etc/ldap/ldap.conf</code>：（<code>man ldap.conf</code>）</p>
<pre><code>BASE    dc=mydomain,dc=net
URI     ldaps://apptest.mydomain.net:636
TLS_CACERT /usr/local/openldap-2.4/etc/openldap/cacerts/cacert.pem
</code></pre><p>（当然也可以<code>TLS_REQCERT never</code>来信任根证书）</p>
<p>使用：</p>
<pre><code>ldapsearch -x -D &quot;cn=root,dc=mydomain,dc=net&quot; -W -LLL
或写全
ldapsearch -x -b &apos;dc=mydomain,dc=net&apos; &apos;(objectClass=*)&apos; -H ldaps://apptest.mydomain.net:636 -D &quot;cn=root,dc=mydomain,dc=net&quot; -W
</code></pre><p>需要注意的是，<code>URI</code>后的 Server name 必须与签署证书使用的 Common name 一致。另外在ldap server本地执行ldapsearch默认使用的客户端配置文件是<code>$LDAP_HOME/etc/openldap/ldap.conf</code>。</p>
<p><strong>LDAPBrower</strong><br>另外一种方式是使用第三方LDAP客户端连接工具，如LDAPBrower：</p>
<p>连接：<br><img src="http://sean-images.qiniudn.com/ldap_conn_session.png" alt="ldaps_conn_session"></p>
<p>信任根证书：<br><img src="http://sean-images.qiniudn.com/ldap_trust_ca.png" alt="ldaps_trust_ca.png"></p>
<p>查看（可Add entries）：<br><img src="http://sean-images.qiniudn.com/ldap_browser.png" alt="ldaps_browser"></p>
<h1 id="3-补充"><a href="#3-补充" class="headerlink" title="3 补充"></a>3 补充</h1><h2 id="3-1-apt-get安装"><a href="#3-1-apt-get安装" class="headerlink" title="3.1 apt-get安装"></a>3.1 apt-get安装</h2><p>通过<code>apt-get</code>在Ubuntu上安装OpenLDAP。<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># dpkg -l|grep libdb    查看berkeleydb是否安装</span></div><div class="line"><span class="meta"># apt-get install slapd ldap-utils</span></div></pre></td></tr></table></figure></p>
<p>安装过程中会提示输入admin密码。</p>
<p>安装完成后默认已经启动了slapd进程，与自己手动编译不同的是默认采用的配置文件有点区别：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ps -ef|grep slapd</span></div><div class="line">... <span class="regexp">/usr/</span>sbin<span class="regexp">/slapd -h ldap:/</span><span class="regexp">//</span> ldapi:<span class="regexp">//</span><span class="regexp">/ -g openldap -u openldap -F /</span>etc<span class="regexp">/ldap/</span>slapd.d</div></pre></td></tr></table></figure></p>
<p><code>/etc/ldap/slapd.d</code> 是2.4.x版本新采用的配置文件目录，但手动编辑<code>slapd.d</code>目录下<code>ldif</code>是非常痛苦的，如果你不习惯新的配置目录格式，你可以通过修改<code>/etc/default/slapd</code>中的<code>SLAPD_CONF=</code>为<code>SLAPD_CONF=&quot;/etc/ldap/slapd.conf&quot;</code>。</p>
<p><code>slapd.conf</code>配置形式官方已经废弃了但依然支持，你还可以选择在编辑完熟悉的<code>slapd.conf</code>后使用openldap提供的slaptest工具将它转换成<code>slapd.d</code>配置目录：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># mv /etc/ldap/slapd.d&#123;,.dist&#125;      先删除（备份）原目录</span></div><div class="line"><span class="meta"># slaptest -f /etc/ldap/slapd.conf -F /etc/ldap/slapd.d/  转换成新的配置目录格式</span></div><div class="line"><span class="meta"># chown -R openldap:openldap /etc/ldap/slapd.d/     修改权限</span></div></pre></td></tr></table></figure></p>
<h2 id="3-2-slapd-config配置形式的说明"><a href="#3-2-slapd-config配置形式的说明" class="headerlink" title="3.2 slapd-config配置形式的说明"></a>3.2 slapd-config配置形式的说明</h2><p>我们把就的配置方式叫<code>slapd.conf</code>，新的配置方式叫<code>slapd-config</code>或olc（OpenLDAP Configuration，也可以理解为online config）。<code>slapd.d</code>目录内包含许多ldif文件，就是<code>slapd.conf</code>中的内容转化成ldif格式，以构成一棵根为<code>cn=config</code>的目录树，这棵树包含了许多结点，如：<code>cn=module{0}</code>, <code>cn=schema</code>, <code>olcDatabase={1}bdb</code>……所有配置信息就是这些结点的属性。结构如下图：<br><img src="http://sean-images.qiniudn.com/ldap_config_dit.png" alt="openldap_config_dit"></p>
<p>使用这种新的配置目录的好处在于：</p>
<ol>
<li>通过Overlay截获修改这些目录属性的信息，然后对相应的数据结构进行修改，即管理员可以像修改其它目录属性一样修改<code>cn=config</code>目录树下的目录信息，并且修改后即时生效，无需重启服务器。</li>
<li>管理员不用像以前那样对服务器的配置文件进行修改，而是可以在任何能够连上ldap服务器的地方对配置文件内容进行修改，没有地域的限制。</li>
</ol>
<p>但是当你需要配置多个backend时，<code>slapd-config</code>方式需要2.4.33版本以后才支持，此前的版本还只能使用<code>slapd.conf</code>方式。</p>
<p>LDIF配置格式大致如下：<br><figure class="highlight ldif"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># global configuration settings</span></div><div class="line"><span class="attribute">dn</span>: cn=config</div><div class="line"><span class="attribute">objectClass</span>: olcGlobal</div><div class="line"><span class="attribute">cn</span>: config</div><div class="line">&lt;global config settings&gt;</div><div class="line"></div><div class="line"><span class="comment"># schema definitions</span></div><div class="line"><span class="attribute">dn</span>: cn=schema,cn=config</div><div class="line"><span class="attribute">objectClass</span>: olcSchemaConfig</div><div class="line"><span class="attribute">cn</span>: schema</div><div class="line">&lt;system schema&gt;</div><div class="line"></div><div class="line"><span class="attribute">dn</span>: cn=&#123;X&#125;core,cn=schema,cn=config</div><div class="line"><span class="attribute">objectClass</span>: olcSchemaConfig</div><div class="line"><span class="attribute">cn</span>: &#123;X&#125;core</div><div class="line">&lt;core schema&gt;</div><div class="line"></div><div class="line"><span class="comment"># additional user-specified schema</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment"># backend definitions</span></div><div class="line"><span class="attribute">dn</span>: olcBackend=&lt;typeA&gt;,cn=config</div><div class="line"><span class="attribute">objectClass</span>: olcBackendConfig</div><div class="line"><span class="attribute">olcBackend</span>: &lt;typeA&gt;</div><div class="line">&lt;backend-specific settings&gt;</div><div class="line"></div><div class="line"><span class="comment"># database definitions</span></div><div class="line"><span class="attribute">dn</span>: olcDatabase=&#123;X&#125;&lt;typeA&gt;,cn=config</div><div class="line"><span class="attribute">objectClass</span>: olcDatabaseConfig</div><div class="line"><span class="attribute">olcDatabase</span>: &#123;X&#125;&lt;typeA&gt;</div><div class="line">&lt;database-specific settings&gt;</div><div class="line"></div><div class="line"><span class="comment"># subsequent definitions and settings</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>我们有时候会发现ldif里面会有一些条目是带<code>{0}</code>这样的数字，这是因为ldap数据库本身是无序的，这些索引一样的数字是用来强制一些依赖于其他配置的设置能够按照正确的顺序先后生效。不过它不用我们去关心，在添加entries时如果有需要会自动生成。</p>
<p>ldif文件中大部分属性和objectClass是以<code>olc</code>开头的，与就的配置风格<code>slapd.conf</code>有着一对一的属性配置选项，如<code>olcDatabase: {1}hdb</code>与<code>database  bdb</code>对应。</p>
<p>更多内容请参考 <a href="http://www.openldap.org/doc/admin24/slapdconf2.html" target="_blank" rel="external">OpenLDAP Software 2.4 Administrator’s Guide</a> 。<br><img src="http://sean-images.qiniudn.com/ldap_slapd_config.png" alt="ldap_slapd_config"></p>
<h2 id="3-3-slapd-config修改示例-LDIF"><a href="#3-3-slapd-config修改示例-LDIF" class="headerlink" title="3.3 slapd-config修改示例(LDIF)"></a>3.3 slapd-config修改示例(LDIF)</h2><p>见 <a href="http://seanlook.com/2015/01/22/openldap_ldif_example/">LDIF修改ldap记录或配置示例</a>。</p>
<h2 id="3-4-LDAP访问控制示例"><a href="#3-4-LDAP访问控制示例" class="headerlink" title="3.4 LDAP访问控制示例"></a>3.4 LDAP访问控制示例</h2><p>待续</p>
<h2 id="3-5-OpenLDAP复制配置（replication）"><a href="#3-5-OpenLDAP复制配置（replication）" class="headerlink" title="3.5 OpenLDAP复制配置（replication）"></a>3.5 OpenLDAP复制配置（replication）</h2><p>待续</p>
<h1 id="4-参考"><a href="#4-参考" class="headerlink" title="4 参考"></a>4 参考</h1><ul>
<li><a href="https://www.lisenet.com/2014/install-and-configure-an-openldap-server-with-ssl-on-debian-wheezy/" target="_blank" rel="external">Install and Configure an OpenLDAP Server with SSL on Debian Wheezy</a></li>
<li><a href="http://www.openldap.org/doc/admin24/quickstart.html" target="_blank" rel="external">openldap doc quickstart</a></li>
<li><a href="http://my.oschina.net/aiguozhe/blog/151554" target="_blank" rel="external">OpenLDAP的安装和配置(含TLS和复制）</a></li>
<li><a href="http://huizhen.blog.51cto.com/382964/100328" target="_blank" rel="external">openldap学习笔记(安装配置openldap-2.3.32)</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于OpenSSL自建CA和颁发SSL证书]]></title>
      <url>http://seanlook.com/2015/01/18/openssl-self-sign-ca/</url>
      <content type="html"><![CDATA[<p>关于SSL/TLS介绍见文章 <a href="http://seanlook.com/2015/01/07/tls-ssl">SSL/TLS原理详解</a>。<br>关于证书授权中心CA以及数字证书等概念，请移步 <a href="http://seanlook.com/2015/01/15/openssl-certificate-encryption">OpenSSL 与 SSL 数字证书概念贴</a> 。</p>
<p>openssl是一个开源程序的套件、这个套件有三个部分组成：一是<code>libcryto</code>，这是一个具有通用功能的加密库，里面实现了众多的加密库；二是<code>libssl</code>，这个是实现ssl机制的，它是用于实现TLS/SSL的功能；三是openssl，是个多功能命令行工具，它可以实现加密解密，甚至还可以当CA来用，可以让你创建证书、吊销证书。</p>
<p>默认情况ubuntu和CentOS上都已安装好openssl。CentOS 6.x 上有关ssl证书的目录结构：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/etc/pki/CA/</div><div class="line">            newcerts    存放CA签署（颁发）过的数字证书（证书备份目录）</div><div class="line">            private     用于存放CA的私钥</div><div class="line">            crl         吊销的证书</div><div class="line"></div><div class="line">/etc/pki/tls/</div><div class="line">             cert<span class="selector-class">.pem</span>    软链接到certs/ca-bundle<span class="selector-class">.crt</span></div><div class="line">             certs/      该服务器上的证书存放目录，可以房子自己的证书和内置证书</div><div class="line">                   ca-bundle<span class="selector-class">.crt</span>    内置信任的证书</div><div class="line">             private    证书密钥存放目录</div><div class="line">             openssl<span class="selector-class">.cnf</span>    openssl的CA主配置文件</div></pre></td></tr></table></figure></p>
<h1 id="1-颁发证书"><a href="#1-颁发证书" class="headerlink" title="1. 颁发证书"></a>1. 颁发证书</h1><h2 id="1-1-修改CA的一些配置文件"><a href="#1-1-修改CA的一些配置文件" class="headerlink" title="1.1 修改CA的一些配置文件"></a>1.1 修改CA的一些配置文件</h2><p>CA要给别人颁发证书，首先自己得有一个作为根证书，我们得在一切工作之前修改好CA的配置文件、序列号、索引等等。</p>
<a id="more"></a>
<p><strong><code>vi /etc/pki/tls/openssl.cnf</code></strong>：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">[ CA_default ]</div><div class="line"></div><div class="line"><span class="attr">dir</span>             = /etc/pki/CA           <span class="comment"># Where everything is kept</span></div><div class="line"><span class="attr">certs</span>           = $dir/certs            <span class="comment"># Where the issued certs are kept</span></div><div class="line"><span class="attr">crl_dir</span>         = $dir/crl              <span class="comment"># Where the issued crl are kept</span></div><div class="line"><span class="attr">database</span>        = $dir/index.txt        <span class="comment"># database index file.</span></div><div class="line"><span class="comment">#unique_subject = no                    # Set to 'no' to allow creation of</span></div><div class="line">                                        <span class="comment"># several ctificates with same subject.</span></div><div class="line"><span class="attr">new_certs_dir</span>   = $dir/newcerts         <span class="comment"># default place for new certs.</span></div><div class="line"></div><div class="line"><span class="attr">certificate</span>     = $dir/cacert.pem       <span class="comment"># The CA certificate</span></div><div class="line"><span class="attr">serial</span>          = $dir/serial           <span class="comment"># The current serial number</span></div><div class="line"><span class="attr">crlnumber</span>       = $dir/crlnumber        <span class="comment"># the current crl number</span></div><div class="line">                                        <span class="comment"># must be commented out to leave a V1 CRL</span></div><div class="line"><span class="attr">crl</span>             = $dir/crl.pem          <span class="comment"># The current CRL</span></div><div class="line"><span class="attr">private_key</span>     = $dir/private/cakey.pem <span class="comment"># The private key</span></div><div class="line"><span class="attr">RANDFILE</span>        = $dir/private/.rand    <span class="comment"># private random number file</span></div><div class="line">...</div><div class="line"><span class="attr">default_days</span>    = <span class="number">3650</span>                  <span class="comment"># how long to certify for</span></div><div class="line">...</div><div class="line"><span class="comment"># For the CA policy</span></div><div class="line">[ policy_match ]</div><div class="line"><span class="attr">countryName</span>             = match</div><div class="line"><span class="attr">stateOrProvinceName</span>     = optional</div><div class="line"><span class="attr">localityName</span>            = optional</div><div class="line"><span class="attr">organizationName</span>        = optional</div><div class="line"><span class="attr">organizationalUnitName</span>  = optional</div><div class="line"><span class="attr">commonName</span>              = supplied</div><div class="line"><span class="attr">emailAddress</span>            = optional</div><div class="line">...</div><div class="line">[ req_distinguished_name ]</div><div class="line"><span class="attr">countryName</span>                     = Country Name (<span class="number">2</span> letter code)</div><div class="line"><span class="attr">countryName_default</span>             = CN</div><div class="line"><span class="attr">countryName_min</span>                 = <span class="number">2</span></div><div class="line"><span class="attr">countryName_max</span>                 = <span class="number">2</span></div><div class="line"></div><div class="line"><span class="attr">stateOrProvinceName</span>             = State <span class="literal">or</span> Province Name (full name)</div><div class="line"><span class="attr">stateOrProvinceName_default</span>     = GD</div><div class="line">...</div><div class="line">[ req_distinguished_name ] 部分主要是颁证时一些默认的值，可以不动</div></pre></td></tr></table></figure></p>
<p>一定要注意<code>[ policy_match ]</code>中的设定的匹配规则，是有可能因为证书使用的工具不一样，导致即使设置了csr中看起来有相同的countryName,stateOrProvinceName等，但在最终生成证书时依然报错：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Using configuration from /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">ssl</span>/<span class="title">openssl</span>.<span class="title">cnf</span></span></div><div class="line">Check that the request matches the signature</div><div class="line">Signature ok</div><div class="line">The stateOrProvinceName field needed to be the same in the</div><div class="line">CA certificate (GuangDong) and the request (GuangDong)</div></pre></td></tr></table></figure></p>
<p><strong><code>touch index.txt serial</code></strong>：<br>在CA目录下创建两个初始文件：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># touch index.txt serial</span></div><div class="line"><span class="meta"># echo 01 &gt; serial</span></div></pre></td></tr></table></figure></p>
<h2 id="1-2-生成根密钥"><a href="#1-2-生成根密钥" class="headerlink" title="1.2 生成根密钥"></a>1.2 生成根密钥</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># cd /etc/pki/CA/</span></div><div class="line"><span class="meta"># openssl genrsa -out private/cakey.pem 2048</span></div></pre></td></tr></table></figure>
<p>为了安全起见，修改cakey.pem私钥文件权限为600或400，也可以使用子shell生成<code>( umask 077; openssl genrsa -out private/cakey.pem 2048 )</code>，下面不再重复。</p>
<h2 id="1-3-生成根证书"><a href="#1-3-生成根证书" class="headerlink" title="1.3 生成根证书"></a>1.3 生成根证书</h2><p>使用req命令生成自签证书：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># openssl req -<span class="keyword">new</span> -x509 -key <span class="keyword">private</span>/cakey.pem -<span class="keyword">out</span> cacert.pem</div></pre></td></tr></table></figure></p>
<p>会提示输入一些内容，因为是私有的，所以可以随便输入（之前修改的openssl.cnf会在这里呈现），最好记住能与后面保持一致。上面的自签证书<code>cacert.pem</code>应该生成在<code>/etc/pki/CA</code>下。</p>
<h2 id="1-4-为我们的nginx-web服务器生成ssl密钥"><a href="#1-4-为我们的nginx-web服务器生成ssl密钥" class="headerlink" title="1.4 为我们的nginx web服务器生成ssl密钥"></a>1.4 为我们的nginx web服务器生成ssl密钥</h2><p>以上都是在CA服务器上做的操作，而且只需进行一次，现在转到nginx服务器上执行：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># cd /etc/nginx/ssl</span></div><div class="line"><span class="meta"># openssl genrsa -out nginx.key 2048</span></div></pre></td></tr></table></figure></p>
<p>这里测试的时候CA中心与要申请证书的服务器是同一个。</p>
<h2 id="1-5-为nginx生成证书签署请求"><a href="#1-5-为nginx生成证书签署请求" class="headerlink" title="1.5 为nginx生成证书签署请求"></a>1.5 为nginx生成证书签署请求</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># openssl req -new -key nginx.key -out nginx.csr</span></div><div class="line">...</div><div class="line">Country <span class="built_in">Name</span> (<span class="number">2</span> letter code) [AU]:CN</div><div class="line">State <span class="built_in">or</span> Province <span class="built_in">Name</span> (full <span class="built_in">name</span>) [Some-State]:GD</div><div class="line">Locality <span class="built_in">Name</span> (eg, city) []:SZ</div><div class="line">Organization <span class="built_in">Name</span> (eg, company) [Internet Widgits Pty Ltd]:COMPANY</div><div class="line">Organizational Unit <span class="built_in">Name</span> (eg, section) []:IT_SECTION</div><div class="line">Common <span class="built_in">Name</span> (e.g. server FQDN <span class="built_in">or</span> YOUR <span class="built_in">name</span>) []:your.domain.com</div><div class="line">Email Address []:</div><div class="line"></div><div class="line">Please enter the following <span class="string">'extra'</span> attributes</div><div class="line"><span class="keyword">to</span> be sent <span class="keyword">with</span> your certificate request</div><div class="line">A challenge password []:</div><div class="line">An optional company <span class="built_in">name</span> []:</div><div class="line">...</div></pre></td></tr></table></figure>
<p>同样会提示输入一些内容，其它随便，除了<code>Commone Name</code>一定要是你要授予证书的服务器域名或主机名，challenge password不填。</p>
<h2 id="1-6-私有CA根据请求来签署证书"><a href="#1-6-私有CA根据请求来签署证书" class="headerlink" title="1.6 私有CA根据请求来签署证书"></a>1.6 私有CA根据请求来签署证书</h2><p>接下来要把上一步生成的证书请求csr文件，发到CA服务器上，在CA上执行：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># openssl <span class="keyword">ca</span> -<span class="keyword">in</span> nginx.csr -<span class="keyword">out</span> nginx.crt</div><div class="line"></div><div class="line">另外在极少数情况下，上面的命令生成的证书不能识别，试试下面的命令：</div><div class="line"># openssl x509 -req -<span class="keyword">in</span> server.csr -<span class="keyword">CA</span> /etc/pki/<span class="keyword">CA</span>/cacert.pem -CAkey /etc/pki/<span class="keyword">CA</span>/private/cakey.pem -CAcreateserial -<span class="keyword">out</span> server.crt</div></pre></td></tr></table></figure></p>
<p>上面签发过程其实默认使用了<code>-cert cacert.pem -keyfile cakey.pem</code>，这两个文件就是前两步生成的位于<code>/etc/pki/CA</code>下的根密钥和根证书。将生成的crt证书发回nginx服务器使用。</p>
<p>到此我们已经拥有了建立ssl安全连接所需要的所有文件，并且服务器的crt和key都位于配置的目录下，剩下的是如何使用证书的问题。</p>
<h1 id="2-使用ssl证书"><a href="#2-使用ssl证书" class="headerlink" title="2. 使用ssl证书"></a>2. 使用ssl证书</h1><h2 id="2-1-一般浏览器"><a href="#2-1-一般浏览器" class="headerlink" title="2.1 一般浏览器"></a>2.1 一般浏览器</h2><p>浏览器作为客户端去访问https加密的服务器，一般不用去手动做其他设置，如<code>https://www.google.com.hk</code>，这是因为Chrome、FireFox、Safari、IE等浏览器已经内置了大部分常用的CA的根证书，但自建CA的根证书就不再浏览器的信任列表中，访问时会提示如下：<br>IE浏览器<br><img src="http://sean-images.qiniudn.com/openssl-https-browser-ie.png" alt="openssl-https-browser-ie"></p>
<p>谷歌浏览器<br><img src="http://sean-images.qiniudn.com/openssl-https-browser.png" alt="openssl-https-browser"></p>
<p>安装网站证书后（同时也有信任的根证书），地址栏一般会显示绿色小锁<br><img src="http://sean-images.qiniudn.com/openssl-https-12306.png" alt="openssl-https-12306"></p>
<p>证书信息<br><img src="http://sean-images.qiniudn.com/openssl-https-browser-cert.png" alt="openssl-https-browser-cert"></p>
<p>导入证书到浏览器的方法：<a href="http://cnzhx.net/blog/self-signed-certificate-as-trusted-root-ca-in-windows/" target="_blank" rel="external">http://cnzhx.net/blog/self-signed-certificate-as-trusted-root-ca-in-windows/</a></p>
<h2 id="2-2-为linux系统添加根证书"><a href="#2-2-为linux系统添加根证书" class="headerlink" title="2.2 为linux系统添加根证书"></a>2.2 为linux系统添加根证书</h2><p>这一步不是必须的，一般出现在开发测试环境中，而且具体的应用程序应该提供添加证书的方法。</p>
<p><code>curl</code>工具可以在linux上模拟发送请求，但当它去访问https加密网站时就会提示如下信息：<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># curl https://sean:sean@registry.domain.com:<span class="number">8000</span>/</div><div class="line">curl: (<span class="number">60</span>) Peer certificate cannot be authenticated <span class="keyword">with</span> known CA certificates</div><div class="line">More details here: http://curl.haxx.se/docs/sslcerts.html</div><div class="line">curl performs SSL certificate verification by <span class="keyword">default</span>, using a <span class="string">"bundle"</span></div><div class="line"> <span class="keyword">of</span> Certificate Authority (CA) public keys (CA certs). <span class="keyword">If</span> the <span class="keyword">default</span></div><div class="line"> bundle <span class="keyword">file</span> isn<span class="symbol">'t</span> adequate, you can specify an alternate <span class="keyword">file</span></div><div class="line"> using the <span class="comment">--cacert option.</span></div><div class="line"><span class="keyword">If</span> this HTTPS server uses a certificate <span class="built_in">signed</span> by a CA represented <span class="keyword">in</span></div><div class="line"> the bundle, the certificate verification probably failed due <span class="keyword">to</span> a</div><div class="line"> problem <span class="keyword">with</span> the certificate (it might be expired, <span class="keyword">or</span> the name might</div><div class="line"> <span class="keyword">not</span> match the domain name <span class="keyword">in</span> the URL).</div><div class="line"><span class="keyword">If</span> you<span class="symbol">'d</span> like <span class="keyword">to</span> turn off curl<span class="symbol">'s</span> verification <span class="keyword">of</span> the certificate, <span class="keyword">use</span></div><div class="line"> the -k (<span class="keyword">or</span> <span class="comment">--insecure) option.</span></div></pre></td></tr></table></figure></p>
<p>提示上面的信息说明curl在linux的证书信任集里没有找到根证书，你可以使用<code>curl --insecure</code>来不验证证书的可靠性，这只能保证数据是加密传输的但无法保证对方是我们要访问的服务。使用<code>curl --cacert cacert.pem</code>可以手动指定根证书路径。我们也可以把根证书添加到系统（CentOS 5,6）默认的bundle：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># cp /etc/pki/tls/certs/ca-bundle.crt&#123;,.bak&#125;    备份以防出错</span></div><div class="line"><span class="meta"># cat /etc/pki/CA/cacert.pem &gt;&gt; /etc/pki/tls/certs/ca-bundle.crt</span></div><div class="line"></div><div class="line"><span class="meta"># curl https://sean:sean@registry.domain.com:8000</span></div><div class="line"><span class="string">"docker-registry server (dev) (v0.8.1)"</span></div></pre></td></tr></table></figure></p>
<h2 id="2-3-nginx"><a href="#2-3-nginx" class="headerlink" title="2.3 nginx"></a>2.3 nginx</h2><p>在nginx配置文件（可能是<code>/etc/nginx/sites-available/default</code>）的server指令下添加：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ssl on;</div><div class="line">ssl_certificate <span class="regexp">/etc/</span>nginx<span class="regexp">/ssl/</span>nginx.crt;</div><div class="line">ssl_certificate_key <span class="regexp">/etc/</span>nginx<span class="regexp">/ssl/</span>nginx.key;</div></pre></td></tr></table></figure></p>
<p>同时注意 server_name 与证书申请时的 Common Name 要相同，打开443端口。当然关于web服务器加密还有其他配置内容，如只对部分URL加密，对URL重定向实现强制https访问，请参考其他资料。</p>
<h1 id="3-关于证书申请"><a href="#3-关于证书申请" class="headerlink" title="3 关于证书申请"></a>3 关于证书申请</h1><p>注意，如果对于一般的应用，管理员只需生成“证书请求”（后缀大多为.csr），它包含你的名字和公钥，然后把这份请求交给诸如verisign等有CA服务公司（当然，连同几百美金），你的证书请求经验证后，CA用它的私钥签名，形成正式的证书发还给你。管理员再在web server上导入这个证书就行了。如果你不想花那笔钱，或者想了解一下原理，可以自己做CA。从ca的角度讲，你需要CA的私钥和公钥。从想要证书的服务器角度将，需要把服务器的证书请求交给CA。</p>
<p>如果你要自己做CA，别忘了客户端需要导入CA的证书（CA的证书是自签名的，导入它意味着你“信任”这个CA签署的证书）。而商业CA的一般不用，因为它们已经内置在你的浏览器中了。</p>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://blog.csdn.net/napolunyishi/article/details/42425827" target="_blank" rel="external">CentOS6.5下openssl加密解密及CA自签颁发证书详解</a></li>
<li><a href="http://www.cnblogs.com/popsuper1982/p/3843772.html" target="_blank" rel="external">基于 OpenSSL 的 CA 建立及证书签发</a></li>
<li><a href="http://blog.51yip.com/apachenginx/958.html" target="_blank" rel="external">openssl建立证书，非常详细配置ssl+apache</a></li>
<li><a href="http://www.ibm.com/developerworks/library/ws-ssl-security/" target="_blank" rel="external">The Secure Sockets Layer and Transport Layer Security</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LDAP服务器的概念和原理简单介绍]]></title>
      <url>http://seanlook.com/2015/01/15/openldap_introduction/</url>
      <content type="html"><![CDATA[<h2 id="1-目录服务"><a href="#1-目录服务" class="headerlink" title="1. 目录服务"></a>1. 目录服务</h2><p>目录是一个为查询、浏览和搜索而优化的专业分布式数据库，它呈树状结构组织数据，就好象Linux/Unix系统中的文件目录一样。目录数据库和关系数据库不同，它有优异的读性能，但写性能差，并且没有事务处理、回滚等复杂功能，不适于存储修改频繁的数据。所以目录天生是用来查询的，就好象它的名字一样。</p>
<p>目录服务是由目录数据库和一套访问协议组成的系统。类似以下的信息适合储存在目录中：</p>
<ul>
<li>企业员工信息，如姓名、电话、邮箱等；</li>
<li>公用证书和安全密钥；</li>
<li>公司的物理设备信息，如服务器，它的IP地址、存放位置、厂商、购买时间等；</li>
</ul>
<p><a href="http://www.openldap.org/doc/admin24/intro.html" target="_blank" rel="external">LDAP</a>是轻量目录访问协议(Lightweight Directory Access Protocol)的缩写，LDAP是从X.500目录访问协议的基础上发展过来的，目前的版本是v3.0。与LDAP一样提供类似的目录服务软件还有<a href="http://directory.apache.org/apacheds/" target="_blank" rel="external">ApacheDS</a>、<a href="https://technet.microsoft.com/en-us/library/dd448614.aspx" target="_blank" rel="external">Active Directory</a>、<a href="http://www.redhat.com/en/technologies/cloud-computing/directory-server" target="_blank" rel="external">Red Hat Directory Service</a> 。</p>
<h2 id="2-LDAP特点"><a href="#2-LDAP特点" class="headerlink" title="2. LDAP特点"></a>2. LDAP特点</h2><ul>
<li>LDAP的结构用树来表示，而不是用表格。正因为这样，就不能用SQL语句了</li>
<li>LDAP可以很快地得到查询结果，不过在写方面，就慢得多</li>
<li>LDAP提供了静态数据的快速查询方式</li>
<li>Client/server模型，Server 用于存储数据，Client提供操作目录信息树的工具</li>
<li>这些工具可以将数据库的内容以文本格式（LDAP 数据交换格式，LDIF）呈现在您的面前</li>
<li>LDAP是一种开放Internet标准，LDAP协议是跨平台的Interent协议</li>
</ul>
<h2 id="3-LDAP组织数据的方式"><a href="#3-LDAP组织数据的方式" class="headerlink" title="3. LDAP组织数据的方式"></a>3. LDAP组织数据的方式</h2><p><img src="http://sean-images.qiniudn.com/ldap_intro_dctree.png" alt="ldap_intro_dctree"></p>
<a id="more"></a>
<h2 id="4-基本概念"><a href="#4-基本概念" class="headerlink" title="4. 基本概念"></a>4. 基本概念</h2><p>在浏览LDAP相关文档时经常会遇见一些概念，下面是常见概念的简单解释。</p>
<h3 id="4-1-Entry"><a href="#4-1-Entry" class="headerlink" title="4.1 Entry"></a>4.1 Entry</h3><p>条目，也叫记录项，是LDAP中最基本的颗粒，就像字典中的词条，或者是数据库中的记录。通常对LDAP的添加、删除、更改、检索都是以条目为基本对象的。</p>
<p><code>dn</code>：每一个条目都有一个唯一的标识名（distinguished Name ，DN），如上图中一个 dn：”cn=baby,ou=marketing,ou=people,dc=mydomain,dc=org” 。通过DN的层次型语法结构，可以方便地表示出条目在LDAP树中的位置，通常用于检索。</p>
<p><code>rdn</code>：一般指dn逗号最左边的部分，如cn=baby。它与RootDN不同，RootDN通常与RootPW同时出现，特指管理LDAP中信息的最高权限用户。</p>
<p><code>Base DN</code>：LDAP目录树的最顶部就是根，也就是所谓的“Base DN”，如”dc=mydomain,dc=org”。</p>
<h3 id="4-2-Attribute"><a href="#4-2-Attribute" class="headerlink" title="4.2 Attribute"></a>4.2 Attribute</h3><p>每个条目都可以有很多属性（Attribute），比如常见的人都有姓名、地址、电话等属性。每个属性都有名称及对应的值，属性值可以有单个、多个，比如你有多个邮箱。</p>
<p>属性不是随便定义的，需要符合一定的规则，而这个规则可以通过schema制定。比如，如果一个entry没有包含在 inetorgperson 这个 schema 中的<code>objectClass: inetOrgPerson</code>，那么就不能为它指定employeeNumber属性，因为employeeNumber是在inetOrgPerson中定义的。</p>
<p>LDAP为人员组织机构中常见的对象都设计了属性(比如commonName，surname)。下面有一些常用的别名：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>别名</th>
<th>语法</th>
<th>描述</th>
<th>值(举例)</th>
</tr>
</thead>
<tbody>
<tr>
<td>commonName</td>
<td>cn</td>
<td>Directory String</td>
<td>姓名</td>
<td>sean</td>
</tr>
<tr>
<td>surname</td>
<td>sn</td>
<td>Directory  String</td>
<td>姓</td>
<td>Chow</td>
</tr>
<tr>
<td>organizationalUnitName</td>
<td>ou</td>
<td>Directory String</td>
<td>单位（部门）名称</td>
<td>IT_SECTION</td>
</tr>
<tr>
<td>organization</td>
<td>　o</td>
<td>Directory String</td>
<td>组织（公司）名称</td>
<td>example</td>
</tr>
<tr>
<td>telephoneNumber</td>
<td>　</td>
<td>Telephone Number</td>
<td>电话号码</td>
<td>110</td>
</tr>
<tr>
<td>objectClass</td>
<td>　</td>
<td>　</td>
<td>内置属性</td>
<td>organizationalPerson</td>
</tr>
</tbody>
</table>
<h3 id="4-3-ObjectClass"><a href="#4-3-ObjectClass" class="headerlink" title="4.3 ObjectClass"></a>4.3 ObjectClass</h3><p>对象类是属性的集合，LDAP预想了很多人员组织机构中常见的对象，并将其封装成对象类。比如人员（person）含有姓（sn）、名（cn）、电话(telephoneNumber)、密码(userPassword)等属性，单位职工(organizationalPerson)是人员(person)的继承类，除了上述属性之外还含有职务（title）、邮政编码（postalCode）、通信地址(postalAddress)等属性。</p>
<p>通过对象类可以方便的定义条目类型。每个条目可以直接继承多个对象类，这样就继承了各种属性。如果2个对象类中有相同的属性，则条目继承后只会保留1个属性。对象类同时也规定了哪些属性是基本信息，必须含有(Must 活Required，必要属性)：哪些属性是扩展信息，可以含有（May或Optional，可选属性）。</p>
<p>对象类有三种类型：结构类型（Structural）、抽象类型(Abstract)和辅助类型（Auxiliary）。结构类型是最基本的类型，它规定了对象实体的基本属性，每个条目属于且仅属于一个结构型对象类。抽象类型可以是结构类型或其他抽象类型父类，它将对象属性中共性的部分组织在一起，称为其他类的模板，条目不能直接集成抽象型对象类。辅助类型规定了对象实体的扩展属性。每个条目至少有一个结构性对象类。</p>
<p>对象类本身是可以相互继承的，所以对象类的根类是top抽象型对象类。以常用的人员类型为例，他们的继承关系：<br><img src="http://sean-images.qiniudn.com/ldap_objectclass.jpg" alt="openldap_objectclass"></p>
<p>下面是inetOrgPerson对象类的在schema中的定义，可以清楚的看到它的父类SUB和可选属性MAY、必要属性MUST(继承自organizationalPerson)，关于各属性的语法则在schema中的attributetype定义。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># inetOrgPerson</span></div><div class="line"><span class="comment"># The inetOrgPerson represents people who are associated with an</span></div><div class="line"><span class="comment"># organization in some way.  It is a structural class and is derived</span></div><div class="line"><span class="comment"># from the organizationalPerson which is defined in X.521 [X521].</span></div><div class="line">objectclass     ( <span class="number">2.16</span>.<span class="number">840.1</span>.<span class="number">113730.3</span>.<span class="number">2.2</span></div><div class="line">    NAME <span class="string">'inetOrgPerson'</span></div><div class="line">        DESC <span class="string">'RFC2798: Internet Organizational Person'</span></div><div class="line">    SUP organizationalPerson</div><div class="line">    STRUCTURAL</div><div class="line">        MAY (</div><div class="line">                audio <span class="variable">$ </span>businessCategory <span class="variable">$ </span>carLicense <span class="variable">$ </span>departmentNumber <span class="variable">$</span></div><div class="line">                displayName <span class="variable">$ </span>employeeNumber <span class="variable">$ </span>employeeType <span class="variable">$ </span>givenName <span class="variable">$</span></div><div class="line">                homePhone <span class="variable">$ </span>homePostalAddress <span class="variable">$ </span>initials <span class="variable">$ </span>jpegPhoto <span class="variable">$</span></div><div class="line">                labeledURI <span class="variable">$ </span>mail <span class="variable">$ </span>manager <span class="variable">$ </span>mobile <span class="variable">$ </span>o <span class="variable">$ </span>pager <span class="variable">$</span></div><div class="line">                photo <span class="variable">$ </span>roomNumber <span class="variable">$ </span>secretary <span class="variable">$ </span>uid <span class="variable">$ </span>userCertificate <span class="variable">$</span></div><div class="line">                x500uniqueIdentifier <span class="variable">$ </span>preferredLanguage <span class="variable">$</span></div><div class="line">                userSMIMECertificate <span class="variable">$ </span>userPKCS12 )</div><div class="line">        )</div></pre></td></tr></table></figure></p>
<h3 id="4-4-Schema"><a href="#4-4-Schema" class="headerlink" title="4.4 Schema"></a>4.4 Schema</h3><p>对象类（ObjectClass）、属性类型（AttributeType）、语法（Syntax）分别约定了条目、属性、值，他们之间的关系如下图所示。所以这些构成了模式(Schema)——对象类的集合。条目数据在导入时通常需要接受模式检查，它确保了目录中所有的条目数据结构都是一致的。<br><img src="http://sean-images.qiniudn.com/ldap_schema_attr_entry.jpg" alt="ldap_schema_attr_entry"></p>
<p>schema（一般在<code>/etc/ldap/schema/</code>目录）在导入时要注意前后顺序。</p>
<h3 id="4-5-backend-amp-database"><a href="#4-5-backend-amp-database" class="headerlink" title="4.5 backend &amp; database"></a>4.5 backend &amp; database</h3><p>ldap的后台进程slapd接收、响应请求，但实际存储数据、获取数据的操作是由Backends做的，而数据是存放在database中，所以你可以看到往往你可以看到<code>backend</code>和<code>database</code>指令是一样的值如 bdb 。一个 backend 可以有多个 database instance，但每个 database 的 suffix 和 rootdn 不一样。openldap 2.4版本的模块是动态加载的，所以在使用backend时需要<code>moduleload      back_bdb</code>指令。</p>
<p><code>bdb</code>是一个高性能的支持事务和故障恢复的数据库后端，可以满足绝大部分需求。许多旧文档里（包括官方）说建议将<code>bdb</code>作为首选后端服务（primary backend），但<a href="http://www.openldap.org/doc/admin24/backends.html" target="_blank" rel="external">2.4版文档</a>明确说<code>hdb</code>才是被首先推荐使用的，这从 2.4.40 版默认安装后的配置文件里也可以看出。hdb是基于bdb的，但是它通过扩展的索引和缓存技术可以加快数据访问，修改entries会更有效率，有兴趣可以访问上的链接或<a href="http://linux.die.net/man/5/slapd.backends" target="_blank" rel="external">slapd.backends</a>。</p>
<p>另外<code>config</code>是特殊的backend，用来在运行时管理slapd的配置，它只能有一个实例，甚至无需显式在slapd.conf中配置。</p>
<h3 id="4-6-TLS-amp-SASL"><a href="#4-6-TLS-amp-SASL" class="headerlink" title="4.6 TLS &amp; SASL"></a>4.6 TLS &amp; SASL</h3><p>分布式LDAP 是以明文的格式通过网络来发送信息的，包括client访问ldap的密码（当然一般密码已然是二进制的），SSL/TLS 的加密协议就是来保证数据传送的保密性和完整性。</p>
<p>SASL （Simple Authenticaion and Security Layer）简单身份验证安全框架，它能够实现openldap客户端到服务端的用户验证，也是<code>ldapsearch</code>、<code>ldapmodify</code>这些标准客户端工具默认尝试与LDAP服务端认证用户的方式（前提是已经安装好 <a href="http://www.openldap.org/doc/admin24/sasl.html" target="_blank" rel="external">Cyrus SASL</a>）。SASL有几大工业实现标准：Kerberos V5、DIGEST-MD5、EXTERNAL、PLAIN、LOGIN。</p>
<p>Kerberos V5是里面最复杂的一种，使用GSSAPI机制，必须配置完整的Kerberos V5安全系统，密码不再存放在目录服务器中，每一个dn与Kerberos数据库的主体对应。DIGEST-MD5稍微简单一点，密码通过saslpasswd2生成放在sasldb数据库中，或者将明文hash存到LDAP dn的userPassword中，每一个authid映射成目录服务器的dn，常和SSL配合使用。参考<a href="http://docs.oracle.com/cd/E19957-01/820-0293/6nc1tbp0h/index.html" target="_blank" rel="external">将 LDAP 客户端配置为使用安全性</a></p>
<p>EXTERNAL一般用于初始化添加schema时使用，如<code>ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/core.ldif</code>。</p>
<h3 id="4-7-LDIF"><a href="#4-7-LDIF" class="headerlink" title="4.7 LDIF"></a>4.7 LDIF</h3><p>LDIF（LDAP Data Interchange Format，数据交换格式）是LDAP数据库信息的一种文本格式，用于数据的导入导出，每行都是“属性: 值”对，见 <a href="http://seanlook.com/2015/01/22/openldap_ldif_example/">openldap ldif格式示例</a></p>
<p>OpenLDAP(2.4.3x)服务器安装配置方法见<a href="http://seanlook.com/2015/01/21/openldap-install-guide-ssl/">这里</a>。</p>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://407711169.blog.51cto.com/6616996/1439623" target="_blank" rel="external">LDAP基础概念</a></li>
<li><a href="http://www.tldp.org/HOWTO/LDAP-HOWTO/ldapbackends.html" target="_blank" rel="external">LDAP-HOWTO</a></li>
<li><a href="http://www.openldap.org/doc/admin24/" target="_blank" rel="external">openldap doc admin24</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[OpenSSL 与 SSL 数字证书概念贴]]></title>
      <url>http://seanlook.com/2015/01/15/openssl-certificate-encryption/</url>
      <content type="html"><![CDATA[<p>SSL/TLS 介绍见文章 <a href="http://seanlook.com/2015/01/07/tls-ssl">SSL/TLS原理详解</a>。<br>如果你想快速自建CA然后签发数字证书，请移步 <a href="http://seanlook.com/2015/01/18/openssl-self-sign-ca">基于OpenSSL自建CA和颁发SSL证书 </a> 。</p>
<p>首先简单区分一下HTTPS、SSL、OpenSSL三者的关系：</p>
<p>SSL是在客户端和服务器之间建立一条SSL安全通道的安全协议，而OpenSSL是TLS/SSL协议的开源实现，提供开发库和命令行程序。常说的HTTPS是HTTP的加密版，底层使用的加密协议是SSL。</p>
<h2 id="1-PKI、CA与证书"><a href="#1-PKI、CA与证书" class="headerlink" title="1. PKI、CA与证书"></a>1. PKI、CA与证书</h2><p>PKI 就是 Public Key Infrastructure 的缩写，翻译过来就是公开密钥基础设施。它是利用公开密钥技术所构建的，解决网络安全问题的，普遍适用的一种基础设施;是一种遵循既定标准的密钥管理平台,它能够为所有网络应用提供加密和数字签名等密码服务及所必需的密钥和证书管理体系。</p>
<p>PKI既不是一个协议，也不是一个软件，它是一个标准，在这个标准之下发展出的为了实现安全基础服务目的的技术统称为PKI。可以说CA(认证中心)是PKI的核心，而数字证书是PKI的最基本元素，还有如apache等服务器、浏览器等客户端、银行等应用，都是pki的组件。这篇文章可以帮助理解：<a href="http://netsecurity.51cto.com/art/200602/21066.htm" target="_blank" rel="external">PKI/CA 技术的介绍</a> 。</p>
<h3 id="1-1-CA"><a href="#1-1-CA" class="headerlink" title="1.1 CA"></a>1.1 CA</h3><p>为保证用户之间在网上传递信息的安全性、真实性、可靠性、完整性和不可抵赖性</p>
<p>CA 机构，又称为证书认证中心 (Certificate Authority) 中心，是一个负责发放和管理数字证书的第三方权威机构，它负责管理PKI结构下的所有用户(包括各种应用程序)的证书，把用户的公钥和用户的其他信息捆绑在一起，在网上验证用户的身份。CA机构的数字签名使得攻击者不能伪造和篡改证书。</p>
<p>认证中心主要有以下5个功能：</p>
<ol>
<li>证书的颁发：接收、验证用户(包括下级认证中心和最终用户)的数字证书的申请。可以受理或拒绝</li>
<li>证书的更新：认证中心可以定期更新所有用户的证书，或者根据用户的请求来更新用户的证书</li>
<li>证书的查询：查询当前用户证书申请处理过程；查询用户证书的颁发信息，这类查询由目录服务器ldap来完成</li>
<li>证书的作废：由于用户私钥泄密等原因，需要向认证中心提出证书作废的请求；证书已经过了有效期，认证中心自动将该证书作废。认证中心通过维护证书作废列表 (Certificate Revocation List,CRL) 来完成上述功能。 </li>
<li>证书的归档：证书具有一定的有效期，证书过了有效期之后就将作废，但是我们不能将作废的证书简单地丢弃，因为有时我们可能需要验证以前的某个交易过程中产生的数字签名，这时我们就需要查询作废的证书。</li>
</ol>
<a id="more"></a>
<h3 id="1-2-Certificate"><a href="#1-2-Certificate" class="headerlink" title="1.2 Certificate"></a>1.2 Certificate</h3><h4 id="1-2-1-X-509标准"><a href="#1-2-1-X-509标准" class="headerlink" title="1.2.1 X.509标准"></a>1.2.1 X.509标准</h4><p>“SSL证书”这个词是一个相对较大的概念，整个PKI体系中有很多SSL证书格式标准。PKI的标准规定了PKI的设计、实施和运营，规定了PKI各种角色的”游戏规则”，提供数据语法和语义的共同约定。x.509是PKI中最重要的标准，它定义了公钥证书的基本结构，可以说PKI是在X.509标准基础上发展起来的：</p>
<ul>
<li>SSL公钥证书</li>
<li>证书废除列表CRL(Certificate revocation lists 证书黑名单)</li>
</ul>
<p>参考 <a href="http://en.wikipedia.org/wiki/X.509" target="_blank" rel="external">http://en.wikipedia.org/wiki/X.509</a> 。</p>
<p>另外一个常用的标准是<code>PKCS#12</code>，通常采用pfx,p12作为文件扩展名，openssl和java的keytool工具都可以用作生产此类格式的证书。</p>
<h4 id="1-2-2-ssl公钥证书格式"><a href="#1-2-2-ssl公钥证书格式" class="headerlink" title="1.2.2 ssl公钥证书格式"></a>1.2.2 ssl公钥证书格式</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>. 证书版本号(Version)</div><div class="line">版本号指明X.<span class="number">509</span>证书的格式版本，现在的值可以为:</div><div class="line">    <span class="number">1</span>) <span class="number">0</span>: <span class="built_in">v1</span></div><div class="line">    <span class="number">2</span>) <span class="number">1</span>: <span class="built_in">v2</span></div><div class="line">    <span class="number">3</span>) <span class="number">2</span>: <span class="built_in">v3</span></div><div class="line">也为将来的版本进行了预定义</div><div class="line"></div><div class="line"><span class="number">2</span>. 证书序列号(Serial Number)</div><div class="line">序列号指定由CA分配给证书的唯一的<span class="string">"数字型标识符"</span>。当证书被取消时，实际上是将此证书的序列号放入由CA签发的CRL中，</div><div class="line">这也是序列号唯一的原因。</div><div class="line"></div><div class="line"><span class="number">3</span>. 签名算法标识符(Signature Algorithm)</div><div class="line">签名算法标识用来指定由CA签发证书时所使用的<span class="string">"签名算法"</span>。算法标识符用来指定CA签发证书时所使用的:</div><div class="line">    <span class="number">1</span>) 公开密钥算法</div><div class="line">    <span class="number">2</span>) hash算法</div><div class="line"><span class="symbol">example</span>: sha256WithRSAEncryption</div><div class="line">须向国际知名标准组织(如ISO)注册</div><div class="line"></div><div class="line"><span class="number">4</span>. 签发机构名(Issuer)</div><div class="line">此域用来标识签发证书的CA的X.<span class="number">500</span> <span class="meta">DN</span>(<span class="meta">DN</span>-Distinguished Name)名字。包括:</div><div class="line">    <span class="number">1</span>) 国家(C)</div><div class="line">    <span class="number">2</span>) 省市(ST)</div><div class="line">    <span class="number">3</span>) 地区(L)</div><div class="line">    <span class="number">4</span>) 组织机构(O)</div><div class="line">    <span class="number">5</span>) 单位部门(OU)</div><div class="line">    <span class="number">6</span>) 通用名(<span class="meta">CN</span>)</div><div class="line">    <span class="number">7</span>) 邮箱地址</div><div class="line"></div><div class="line"><span class="number">5</span>. 有效期(Validity)</div><div class="line">指定证书的有效期，包括:</div><div class="line">    <span class="number">1</span>) 证书开始生效的日期时间</div><div class="line">    <span class="number">2</span>) 证书失效的日期和时间</div><div class="line">每次使用证书时，需要检查证书是否在有效期内。</div><div class="line"></div><div class="line"><span class="number">6</span>. 证书用户名(<span class="keyword">Subject)</span></div><div class="line">指定证书持有者的X.<span class="number">500</span>唯一名字。包括:</div><div class="line">    <span class="number">1</span>) 国家(C)</div><div class="line">    <span class="number">2</span>) 省市(ST)</div><div class="line">    <span class="number">3</span>) 地区(L)</div><div class="line">    <span class="number">4</span>) 组织机构(O)</div><div class="line">    <span class="number">5</span>) 单位部门(OU)</div><div class="line">    <span class="number">6</span>) 通用名(<span class="meta">CN</span>)</div><div class="line">    <span class="number">7</span>) 邮箱地址</div><div class="line"></div><div class="line"><span class="number">7</span>. 证书持有者公开密钥信息(<span class="keyword">Subject </span>Public Key <span class="meta">Info</span>)</div><div class="line">证书持有者公开密钥信息域包含两个重要信息:</div><div class="line">    <span class="number">1</span>) 证书持有者的公开密钥的值</div><div class="line">    <span class="number">2</span>) 公开密钥使用的算法标识符。此标识符包含公开密钥算法和hash算法。</div><div class="line"><span class="number">8</span>. 扩展项(extension)</div><div class="line"><span class="symbol">X.509</span> <span class="built_in">V3</span>证书是在<span class="built_in">v2</span>的基础上一标准形式或普通形式增加了扩展项，以使证书能够附带额外信息。标准扩展是指</div><div class="line">由X.<span class="number">509</span> <span class="built_in">V3</span>版本定义的对<span class="built_in">V2</span>版本增加的具有广泛应用前景的扩展项，任何人都可以向一些权威机构，如ISO，来</div><div class="line">注册一些其他扩展，如果这些扩展项应用广泛，也许以后会成为标准扩展项。</div><div class="line"></div><div class="line"><span class="number">9</span>. 签发者唯一标识符(Issuer Unique Identifier)</div><div class="line">签发者唯一标识符在第<span class="number">2</span>版加入证书定义中。此域用在当同一个X.<span class="number">500</span>名字用于多个认证机构时，用一比特字符串</div><div class="line">来唯一标识签发者的X.<span class="number">500</span>名字。可选。</div><div class="line"></div><div class="line"><span class="number">10</span>. 证书持有者唯一标识符(<span class="keyword">Subject </span>Unique Identifier)</div><div class="line">持有证书者唯一标识符在第<span class="number">2</span>版的标准中加入X.<span class="number">509</span>证书定义。此域用在当同一个X.<span class="number">500</span>名字用于多个证书持有者时，</div><div class="line">用一比特字符串来唯一标识证书持有者的X.<span class="number">500</span>名字。可选。</div><div class="line"></div><div class="line"><span class="number">11</span>. 签名算法(Signature Algorithm)</div><div class="line">证书签发机构对证书上述内容的签名算法</div><div class="line"><span class="symbol">example</span>: sha256WithRSAEncryption</div><div class="line"></div><div class="line"><span class="number">12</span>. 签名值(Issuer<span class="string">'s Signature)</span></div><div class="line">证书签发机构对证书上述内容的签名值</div></pre></td></tr></table></figure>
<p>example:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="string">Certificate:</span></div><div class="line"><span class="symbol">    Data:</span></div><div class="line"><span class="symbol">        Version:</span> <span class="number">3</span> (<span class="number">0x2</span>)</div><div class="line">        Serial <span class="string">Number:</span> <span class="number">9</span> (<span class="number">0x9</span>)</div><div class="line">    Signature <span class="string">Algorithm:</span> sha256WithRSAEncryption</div><div class="line"><span class="symbol">        Issuer:</span> C=CN, ST=GuangDong, L=ShenZhen, O=COMPANY Technologies Co., Ltd, OU=IT_SECTION, CN=registry.example.com.net/emailAddress=zhouxiao<span class="meta">@example</span>.com.net</div><div class="line">        Validity</div><div class="line">            Not <span class="string">Before:</span> Feb <span class="number">11</span> <span class="number">06</span>:<span class="number">04</span>:<span class="number">56</span> <span class="number">2015</span> GMT</div><div class="line">            Not <span class="string">After :</span> Feb  <span class="number">8</span> <span class="number">06</span>:<span class="number">04</span>:<span class="number">56</span> <span class="number">2025</span> GMT</div><div class="line"><span class="symbol">        Subject:</span> C=CN, ST=GuangDong, L=ShenZhen, O=TP-Link Co.,Ltd., OU=Network Management, CN=<span class="number">172.31</span><span class="number">.1</span><span class="number">.210</span></div><div class="line">        Subject Public Key <span class="string">Info:</span></div><div class="line">            Public Key <span class="string">Algorithm:</span> rsaEncryption</div><div class="line">                Public-<span class="string">Key:</span> (<span class="number">2048</span> bit)</div><div class="line"><span class="symbol">                Modulus:</span></div><div class="line"><span class="symbol">                    00:</span><span class="string">a4:</span><span class="string">b0:</span><span class="string">dd:</span><span class="string">eb:</span><span class="string">c1:</span><span class="string">cf:</span><span class="number">5</span><span class="string">d:</span><span class="number">47</span>:<span class="number">61</span>:<span class="string">a6:</span><span class="string">ea:</span><span class="string">ef:</span><span class="number">8</span><span class="string">b:</span><span class="string">aa:</span></div><div class="line"><span class="symbol">                    4b:</span><span class="string">f0:</span><span class="string">b4:</span><span class="number">2</span><span class="string">c:</span><span class="string">d8:</span><span class="number">96</span>:<span class="string">c7:</span><span class="number">7</span><span class="string">c:</span><span class="string">ac:</span><span class="string">fa:</span><span class="string">c7:</span><span class="number">35</span>:<span class="number">88</span>:<span class="number">53</span>:<span class="string">d0:</span></div><div class="line">                    ...</div><div class="line"><span class="symbol">                    8a:</span><span class="number">76</span>:<span class="string">dc:</span><span class="number">8</span><span class="string">f:</span><span class="number">8</span><span class="string">c:</span><span class="number">44</span>:<span class="string">c8:</span><span class="number">0</span><span class="string">b:</span><span class="number">3</span><span class="string">c:</span><span class="number">36</span>:<span class="number">88</span>:<span class="number">5</span><span class="string">f:</span><span class="number">01</span>:<span class="string">f0:</span><span class="number">44</span>:</div><div class="line"><span class="symbol">                    4e:</span><span class="number">81</span>:<span class="string">e6:</span><span class="number">7</span><span class="string">a:</span><span class="number">2</span><span class="string">b:</span><span class="string">ff:</span><span class="string">ba:</span><span class="string">da:</span><span class="number">33</span>:<span class="string">a5:</span><span class="number">27</span>:<span class="number">11</span>:<span class="string">c6:</span><span class="string">f0:</span><span class="number">08</span>:</div><div class="line"><span class="symbol">                    6e:</span>f3</div><div class="line"><span class="symbol">                Exponent:</span> <span class="number">65537</span> (<span class="number">0x10001</span>)</div><div class="line">        X509v3 <span class="string">extensions:</span></div><div class="line">            X509v3 Basic <span class="string">Constraints:</span> </div><div class="line"><span class="symbol">                CA:</span>FALSE</div><div class="line">            Netscape <span class="string">Comment:</span> </div><div class="line">                OpenSSL Generated Certificate</div><div class="line">            X509v3 Subject Key <span class="string">Identifier:</span> </div><div class="line"><span class="symbol">                07:</span><span class="string">C6:</span><span class="number">87</span>:<span class="string">B7:</span><span class="string">C1:</span><span class="number">1</span><span class="string">E:</span><span class="number">28</span>:<span class="string">E8:</span><span class="number">96</span>:<span class="number">3</span><span class="string">F:</span><span class="string">EB:</span><span class="number">40</span>:<span class="number">1</span><span class="string">E:</span><span class="number">82</span>:<span class="number">41</span>:<span class="number">45</span>:<span class="string">CA:</span><span class="number">81</span>:<span class="string">B6:</span><span class="number">3</span>D</div><div class="line">            X509v3 Authority Key <span class="string">Identifier:</span> </div><div class="line"><span class="symbol">                keyid:</span><span class="string">A4:</span><span class="string">C2:</span><span class="number">14</span>:<span class="number">6</span><span class="string">A:</span><span class="number">39</span>:<span class="string">D1:</span><span class="number">95</span>:<span class="number">1</span><span class="string">E:</span><span class="string">BD:</span><span class="string">DF:</span><span class="number">3</span><span class="string">B:</span><span class="number">92</span>:<span class="number">4</span><span class="string">A:</span><span class="number">5</span><span class="string">C:</span><span class="number">12</span>:<span class="number">42</span>:<span class="number">1</span><span class="string">B:</span><span class="string">BC:</span><span class="number">53</span>:B8</div><div class="line"></div><div class="line">    Signature <span class="string">Algorithm:</span> sha256WithRSAEncryption</div><div class="line"><span class="symbol">         0c:</span><span class="string">c6:</span><span class="number">81</span>:<span class="number">70</span>:<span class="string">cd:</span><span class="number">0</span><span class="string">a:</span><span class="number">2</span><span class="string">d:</span><span class="number">94</span>:<span class="number">4</span><span class="string">f:</span><span class="string">cb:</span><span class="string">a4:</span><span class="number">1</span><span class="string">d:</span><span class="string">ef:</span><span class="number">9</span><span class="string">e:</span><span class="number">8</span><span class="string">e:</span><span class="string">e4:</span><span class="number">73</span>:<span class="string">ae:</span></div><div class="line"><span class="symbol">         50:</span><span class="number">62</span>:<span class="string">a8:</span><span class="number">9</span><span class="string">c:</span><span class="number">64</span>:<span class="string">ef:</span><span class="number">56</span>:<span class="number">0</span><span class="string">f:</span><span class="number">41</span>:<span class="string">fe:</span><span class="number">6</span><span class="string">b:</span><span class="string">b4:</span><span class="string">d3:</span><span class="number">07</span>:<span class="number">37</span>:<span class="number">39</span>:<span class="number">2</span><span class="string">c:</span><span class="string">ed:</span></div><div class="line">         ...</div><div class="line"><span class="symbol">         6f:</span><span class="number">62</span>:<span class="number">61</span>:<span class="string">b8:</span><span class="number">03</span>:<span class="string">d7:</span><span class="number">97</span>:<span class="number">31</span>:<span class="string">ab:</span><span class="number">05</span>:<span class="number">44</span>:<span class="number">20</span>:<span class="number">07</span>:<span class="number">65</span>:<span class="number">8</span><span class="string">b:</span><span class="string">ad:</span><span class="string">e2:</span><span class="string">cc:</span></div><div class="line"><span class="symbol">         ad:</span><span class="number">65</span>:<span class="number">73</span>:<span class="string">f6:</span><span class="number">82</span>:<span class="number">0</span><span class="string">f:</span><span class="number">9</span><span class="string">e:</span><span class="number">65</span>:<span class="string">d0:</span><span class="string">ae:</span><span class="string">b7:</span><span class="number">1</span><span class="string">e:</span><span class="string">fd:</span><span class="number">9</span><span class="string">f:</span><span class="string">c1:</span><span class="string">d7:</span><span class="number">41</span>:<span class="number">6</span><span class="string">c:</span></div><div class="line"><span class="symbol">         0f:</span><span class="number">06</span>:<span class="number">95</span>:ee</div><div class="line">-----BEGIN CERTIFICATE-----</div><div class="line">MIIEMDCCAxigAwIBAgIBCTANBgkqhkiG9w0BAQsFADCBtTELMAkGA1UEBhMCQ04x</div><div class="line">EjAQBgNVBAgMCUd1YW5nRG9uZzERMA8GA1UEBwwIU2hlblpoZW4xJjAkBgNVBAoM</div><div class="line">...</div><div class="line">ujwwRar6pPzusO95WuS93HsNmL2ZFZ63DS4LcW9iYbgD15cxqwVEIAdli63izK1l</div><div class="line">c/aCD55l0K63Hv2fwddBbA8Gle4=</div><div class="line">-----END CERTIFICATE-----</div></pre></td></tr></table></figure></p>
<h2 id="2-附：数据加密的基础知识"><a href="#2-附：数据加密的基础知识" class="headerlink" title="2. 附：数据加密的基础知识"></a>2. 附：数据加密的基础知识</h2><h3 id="对称密钥加密"><a href="#对称密钥加密" class="headerlink" title="对称密钥加密"></a>对称密钥加密</h3><p>对称密钥加密（一个密钥），也叫做共享密钥加密或机密密钥加密，使用发件人和收件人共同拥有的单个密钥。这种密钥既用于加密，也用于解密，叫做机密密钥。对称密钥加密是加密大量数据的一种行之有效的方法。</p>
<p>对称密钥加密有许多种算法如DES,RC4,IDEA等，但所有这些算法都有一个共同的目的：以可还原的方式将明文 （未加密的数据转换为暗文。暗文使用加密密钥编码，对于没有解密密钥的任何人来说它都是没有意义的。由于对称密钥加密在加密和解密时使用相同的密钥，所以这种加密过程的安全性取决于是否有未经授权的人获得了对称密钥。</p>
<p>衡量对称算法优劣的主要尺度是其密钥的长度。密钥越长，在找到解密数据所需的正确密钥之前必须测试的密钥数量就越多。需要测试的密钥越多，破解这种算法就越困难。</p>
<h3 id="公钥加密"><a href="#公钥加密" class="headerlink" title="公钥加密"></a>公钥加密</h3><p>公钥加密使用两个密钥:一个公钥和一个私钥，这两个密钥在数学上是相关的。为了与对称密钥加密相对照，公钥加密有时也叫做不对称密钥加密。在公钥加密中，公钥可在通信双方之间公开传递，或在公用储备库中发布，但相关的私钥是保密的。只有使用私钥才能解密用公钥加密的数据。使用私钥加密的数据只能用公钥解密。下图中，发件人拥有收件人的公钥，并用它加密了一封邮件，但只有收件人掌握解密该邮件的有关私钥。<br><img src="http://sean-images.qiniudn.com/openssl-encrpt01.gif" alt="openssl-encrpt01"></p>
<p>公钥算法的主要局限在于，这种加密形式的速度相对较低。实际上，通常仅在关键时刻才使用公钥算法，如在实体之间交换对称密钥时，或者在签署一封邮件的散列时（散列是通过应用一种单向数学函数获得的一个定长结果，对于数据而言，叫做散列算法）。将公钥加密与其它加密形式（如对称密钥加密）结合使用，可以优化性能，如数字签名和密钥交换。</p>
<p>常用公钥算法：</p>
<ul>
<li>RSA：适用于数字签名和密钥交换。 是目前应用最广泛的公钥加密算法，特别适用于通过 Internet 传送的数据，RSA算法以它的三位发明者的名字命名。</li>
<li>DSA：仅适用于数字签名。 数字签名算法 (Digital Signature Algorithm, DSA) 由美国国家安全署 (United States National Security Agency, NSA) 发明，已作为数字签名的标准。DSA 算法的安全性取决于自计算离散算法的困难。这种算法，不适用于数据加密。</li>
<li>Diffie-Hellman：仅适用于密钥交换。 Diffie-Hellman 是发明的第一个公钥算法，以其发明者 Whitfield Diffie 和 Martin Hellman 的名字命名。Diffie-Hellman 算法的安全性取决于在一个有限字段中计算离散算法的困难。</li>
</ul>
<h3 id="单向散列算法"><a href="#单向散列算法" class="headerlink" title="单向散列算法"></a>单向散列算法</h3><p>散列，也称为散列值或消息摘要 ，是一种与基于密钥（对称密钥或公钥）的加密不同的数据转换类型。散列就是通过把一个叫做散列算法的单向数学函数应用于数据，将任意长度的一块数据转换为一个定长的、不可逆转的数字，其长度通常在128～256位之间。所产生的散列值的长度应足够长，因此使找到两块具有相同散列值的数据的机会很少。如发件人生成邮件的散列值并加密它，然后将它与邮件本身一起发送。而收件人同时解密邮件和散列值，并由接收到的邮件产生另外一个散列值，然后将两个散列值进行比较。如果两者相同，邮件极有可能在传输期间没有发生任何改变。 </p>
<p>下面是几个常用的散列函数：</p>
<ul>
<li>MD5：是RSA数据安全公司开发的一种单向散列算法，MD5被广泛使用，可以用来把不同长度的数据块进行暗码运算成一个128位的数值。</li>
<li>SHA-1：与 DSA 公钥算法相似，安全散列算法1（SHA-1）也是由 NSA 设计的，并由 NIST 将其收录到 FIPS 中，作为散列数据的标准。它可产生一个 160 位的散列值。SHA-1 是流行的用于创建数字签名的单向散列算法。</li>
<li>MAC（Message Authentication Code）：消息认证代码，是一种使用密钥的单向函数，可以用它们在系统上或用户之间认证文件或消息，常见的是HMAC（用于消息认证的密钥散列算法）。</li>
<li>CRC（Cyclic Redundancy Check）：循环冗余校验码，CRC校验由于实现简单，检错能力强，被广泛使用在各种数据校验应用中。占用系统资源少，用软硬件均能实现，是进行数据传输差错检测地一种很好的手段（CRC 并不是严格意义上的散列算法，但它的作用与散列算法大致相同，所以归于此类）。</li>
</ul>
<h3 id="数字签名：结合使用公钥与散列算法"><a href="#数字签名：结合使用公钥与散列算法" class="headerlink" title="数字签名：结合使用公钥与散列算法"></a>数字签名：结合使用公钥与散列算法</h3><p>数字签名是邮件、文件或其它数字编码信息的发件人将他们的身份与信息绑定在一起（即为信息提供签名）的方法。对信息进行数字签名的过程，需要将信息与由发件人掌握的秘密信息一起转换（使用私钥）为叫做签名的标记。数字签名用于公钥环境（任何人都可以拥有）中，它通过验证发件人确实是他或她所声明的那个人，并确认收到的邮件与发送的邮件完全相同。</p>
<p>散列算法处理数据的速度比公钥算法快得多。散列数据还缩短了要签名的数据的长度，因而加快了签名过程。</p>
<h3 id="密钥交换：结合使用对称密钥与公钥"><a href="#密钥交换：结合使用对称密钥与公钥" class="headerlink" title="密钥交换：结合使用对称密钥与公钥"></a>密钥交换：结合使用对称密钥与公钥</h3><p>对称密钥算法非常适合于快速并安全地加密数据。但其缺点是，发件人和收件人必须在交换数据之前先交换机密密钥。结合使用加密数据的对称密钥算法与交换机密密钥的公钥算法可产生一种既快速又灵活的解决方案。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.cnblogs.com/littlehann/p/3738141.html" target="_blank" rel="external">openSSL命令、PKI、CA、SSL证书原理</a></li>
<li><a href="http://en.wikipedia.org/wiki/X.509" target="_blank" rel="external">X.509 wikipeida</a></li>
<li><a href="http://www.wosign.cn/Basic/aboutPKI.htm" target="_blank" rel="external">PKI 基础知识</a></li>
<li><a href="http://kb.cnblogs.com/page/194742/" target="_blank" rel="external">数字证书及CA的扫盲介绍</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SSL/TLS原理详解]]></title>
      <url>http://seanlook.com/2015/01/07/tls-ssl/</url>
      <content type="html"><![CDATA[<p>本文大部分整理自网络，相关文章请见文后参考。</p>
<p>关于证书授权中心CA以及数字证书等概念，请移步 <a href="http://seanlook.com/2015/01/15/openssl-certificate-encryption">OpenSSL 与 SSL 数字证书概念贴</a> ，如果你想快速自建CA然后签发数字证书，请移步 <a href="http://seanlook.com/2015/01/18/openssl-self-sign-ca">基于OpenSSL自建CA和颁发SSL证书 </a> 。</p>
<p>SSL/TLS作为一种互联网安全加密技术，原理较为复杂，枯燥而无味，我也是试图理解之后重新整理，尽量做到层次清晰。正文开始。</p>
<h1 id="1-SSL-TLS概览"><a href="#1-SSL-TLS概览" class="headerlink" title="1. SSL/TLS概览"></a>1. SSL/TLS概览</h1><h2 id="1-1-整体结构"><a href="#1-1-整体结构" class="headerlink" title="1.1 整体结构"></a>1.1 整体结构</h2><p>SSL是一个介于HTTP协议与TCP之间的一个可选层，其位置大致如下:<br><img src="http://sean-images.qiniudn.com/tls-ssl-_tcp-ip_protocol.png" alt="tls-ssl-_tcp-ip_protocol.png"></p>
<ul>
<li><p><strong>SSL</strong>：（Secure Socket Layer，安全套接字层），为Netscape所研发，用以保障在Internet上数据传输之安全，利用数据加密(Encryption)技术，可确保数据在网络上之传输过程中不会被截取。当前版本为3.0。它已被广泛地用于Web浏览器与服务器之间的身份认证和加密数据传输。<br>SSL协议位于TCP/IP协议与各种应用层协议之间，为数据通讯提供安全支持。SSL协议可分为两层： SSL记录协议（SSL Record Protocol）：它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。 SSL握手协议（SSL Handshake Protocol）：它建立在SSL记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。</p>
</li>
<li><p><strong>TLS</strong>：(Transport Layer Security，传输层安全协议)，用于两个应用程序之间提供保密性和数据完整性。<br>TLS 1.0是IETF（Internet Engineering Task Force，Internet工程任务组）制定的一种新的协议，它建立在SSL 3.0协议规范之上，是SSL 3.0的后续版本，可以理解为SSL 3.1，它是写入了  <a href="http://tools.ietf.org/html/rfc5246" target="_blank" rel="external">RFC</a> 的。该协议由两层组成： TLS 记录协议（TLS Record）和 TLS 握手协议（TLS Handshake）。较低的层为 TLS 记录协议，位于某个可靠的传输协议（例如 TCP）上面。</p>
</li>
</ul>
<p>SSL/TLS协议提供的服务主要有：</p>
<ol>
<li>认证用户和服务器，确保数据发送到正确的客户机和服务器；</li>
<li>加密数据以防止数据中途被窃取；</li>
<li>维护数据的完整性，确保数据在传输过程中不被改变。</li>
</ol>
<a id="more"></a>
<h2 id="1-2-TLS与SSL的差异"><a href="#1-2-TLS与SSL的差异" class="headerlink" title="1.2 TLS与SSL的差异"></a>1.2 TLS与SSL的差异</h2><ol>
<li>版本号：TLS记录格式与SSL记录格式相同，但版本号的值不同，TLS的版本1.0使用的版本号为SSLv3.1。</li>
<li>报文鉴别码：SSLv3.0和TLS的MAC算法及MAC计算的范围不同。TLS使用了RFC-2104定义的HMAC算法。SSLv3.0使用了相似的算法，两者差别在于SSLv3.0中，填充字节与密钥之间采用的是连接运算，而HMAC算法采用的是异或运算。但是两者的安全程度是相同的。</li>
<li>伪随机函数：TLS使用了称为PRF的伪随机函数来将密钥扩展成数据块，是更安全的方式。</li>
<li>报警代码：TLS支持几乎所有的SSLv3.0报警代码，而且TLS还补充定义了很多报警代码，如解密失败（decryption_failed）、记录溢出（record_overflow）、未知CA（unknown_ca）、拒绝访问（access_denied）等。</li>
<li>密文族和客户证书：SSLv3.0和TLS存在少量差别，即TLS不支持Fortezza密钥交换、加密算法和客户证书。</li>
<li>certificate_verify和finished消息：SSLv3.0和TLS在用certificate_verify和finished消息计算MD5和SHA-1散列码时，计算的输入有少许差别，但安全性相当。</li>
<li>加密计算：TLS与SSLv3.0在计算主密值（master secret）时采用的方式不同。</li>
<li>填充：用户数据加密之前需要增加的填充字节。在SSL中，填充后的数据长度要达到密文块长度的最小整数倍。而在TLS中，填充后的数据长度可以是密文块长度的任意整数倍（但填充的最大长度为255字节），这种方式可以防止基于对报文长度进行分析的攻击。</li>
</ol>
<p><strong>TLS的主要增强内容</strong></p>
<p>TLS的主要目标是使SSL更安全，并使协议的规范更精确和完善。TLS 在SSL v3.0 的基础上，提供了以下增强内容：</p>
<ol>
<li>更安全的MAC算法</li>
<li>更严密的警报</li>
<li>“灰色区域”规范的更明确的定义</li>
</ol>
<p><strong>TLS对于安全性的改进</strong></p>
<ol>
<li>对于消息认证使用密钥散列法：TLS 使用“消息认证代码的密钥散列法”（HMAC），当记录在开放的网络（如因特网）上传送时，该代码确保记录不会被变更。SSLv3.0还提供键控消息认证，但HMAC比SSLv3.0使用的（消息认证代码）MAC 功能更安全。</li>
<li>增强的伪随机功能（PRF）：PRF生成密钥数据。在TLS中，HMAC定义PRF。PRF使用两种散列算法保证其安全性。如果任一算法暴露了，只要第二种算法未暴露，则数据仍然是安全的。</li>
<li>改进的已完成消息验证：TLS和SSLv3.0都对两个端点提供已完成的消息，该消息认证交换的消息没有被变更。然而，TLS将此已完成消息基于PRF和HMAC值之上，这也比SSLv3.0更安全。</li>
<li>一致证书处理：与SSLv3.0不同，TLS试图指定必须在TLS之间实现交换的证书类型。</li>
<li>特定警报消息：TLS提供更多的特定和附加警报，以指示任一会话端点检测到的问题。TLS还对何时应该发送某些警报进行记录。</li>
</ol>
<h1 id="2-密钥协商过程——TLS握手"><a href="#2-密钥协商过程——TLS握手" class="headerlink" title="2. 密钥协商过程——TLS握手"></a>2. 密钥协商过程——TLS握手</h1><p>SSL协议分为两部分：Handshake Protocol和Record Protocol。其中Handshake Protocol用来协商密钥，协议的大部分内容就是通信双方如何利用它来安全的协商出一份密钥。 Record Protocol则定义了传输的格式。</p>
<p>由于非对称加密的速度比较慢，所以它一般用于密钥交换，双方通过公钥算法协商出一份密钥，然后通过对称加密来通信，当然，为了保证数据的完整性，在加密前要先经过HMAC的处理。</p>
<p>SSL缺省只进行server端的认证，客户端的认证是可选的。以下是其流程图（摘自TLS协议）。<br><img src="http://sean-images.qiniudn.com/tls-ssl.svg" alt="tls-ssl.svg"></p>
<h2 id="2-1-客户端发出请求（ClientHello）"><a href="#2-1-客户端发出请求（ClientHello）" class="headerlink" title="2.1 客户端发出请求（ClientHello）"></a>2.1 客户端发出请求（ClientHello）</h2><p>由于客户端(如浏览器)对一些加解密算法的支持程度不一样，但是在TLS协议传输过程中必须使用同一套加解密算法才能保证数据能够正常的加解密。在TLS握手阶段，客户端首先要告知服务端，自己支持哪些加密算法，所以客户端需要将本地支持的加密套件(Cipher Suite)的列表传送给服务端。除此之外，客户端还要产生一个随机数，这个随机数一方面需要在客户端保存，另一方面需要传送给服务端，客户端的随机数需要跟服务端产生的随机数结合起来产生后面要讲到的 Master Secret 。</p>
<p>综上，在这一步，客户端主要向服务器提供以下信息：</p>
<ol>
<li>支持的协议版本，比如TLS 1.0版</li>
<li>一个客户端生成的随机数，稍后用于生成”对话密钥”</li>
<li>支持的加密方法，比如RSA公钥加密</li>
<li>支持的压缩方法</li>
</ol>
<h2 id="2-2-服务器回应（SeverHello"><a href="#2-2-服务器回应（SeverHello" class="headerlink" title="2.2 服务器回应（SeverHello)"></a>2.2 服务器回应（SeverHello)</h2><p>上图中，从Server Hello到Server Done，有些服务端的实现是每条单独发送，有服务端实现是合并到一起发送。Sever Hello和Server Done都是只有头没有内容的数据。</p>
<p>服务端在接收到客户端的Client Hello之后，服务端需要将自己的证书发送给客户端。这个证书是对于服务端的一种认证。例如，客户端收到了一个来自于称自己是www.alipay.com的数据，但是如何证明对方是合法的alipay支付宝呢？这就是证书的作用，支付宝的证书可以证明它是alipay，而不是财付通。证书是需要申请，并由专门的数字证书认证机构(CA)通过非常严格的审核之后颁发的电子证书。颁发证书的同时会产生一个私钥和公钥。私钥由服务端自己保存，不可泄漏。公钥则是附带在证书的信息中，可以公开的。证书本身也附带一个证书电子签名，这个签名用来验证证书的完整性和真实性，可以防止证书被串改。另外，证书还有个有效期。</p>
<p>在服务端向客户端发送的证书中没有提供足够的信息（证书公钥）的时候，还可以向客户端发送一个 Server Key Exchange，</p>
<p>此外，对于非常重要的保密数据，服务端还需要对客户端进行验证，以保证数据传送给了安全的合法的客户端。服务端可以向客户端发出 Cerficate Request 消息，要求客户端发送证书对客户端的合法性进行验证。比如，金融机构往往只允许认证客户连入自己的网络，就会向正式客户提供USB密钥，里面就包含了一张客户端证书。</p>
<p>跟客户端一样，服务端也需要产生一个随机数发送给客户端。客户端和服务端都需要使用这两个随机数来产生Master Secret。</p>
<p>最后服务端会发送一个Server Hello Done消息给客户端，表示Server Hello消息结束了。</p>
<p>综上，在这一步，服务器的回应包含以下内容：</p>
<ol>
<li>确认使用的加密通信协议版本，比如TLS 1.0版本。如果浏览器与服务器支持的版本不一致，服务器关闭加密通信</li>
<li>一个服务器生成的随机数，稍后用于生成”对话密钥”</li>
<li>确认使用的加密方法，比如RSA公钥加密</li>
<li>服务器证书</li>
</ol>
<h2 id="2-3-客户端回应（Certificate-Verify）"><a href="#2-3-客户端回应（Certificate-Verify）" class="headerlink" title="2.3 客户端回应（Certificate Verify）"></a>2.3 客户端回应（Certificate Verify）</h2><p><strong>Client Key Exchange</strong></p>
<p>如果服务端需要对客户端进行验证，在客户端收到服务端的 Server Hello 消息之后，首先需要向服务端发送客户端的证书，让服务端来验证客户端的合法性。</p>
<p><strong>Certificate Verify</strong><br>接着，客户端需要对服务端的证书进行检查，如果证书不是可信机构颁布、或者证书中的域名与实际域名不一致、或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。如果证书没有问题，客户端就会从服务器证书中取出服务器的公钥。然后，向服务器发送下面三项信息：</p>
<ol>
<li>一个随机数。该随机数用服务器公钥加密，防止被窃听</li>
<li>编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送</li>
<li>客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供服务器校验</li>
</ol>
<p>上面第一项的随机数，是整个握手阶段出现的第三个随机数，它是客户端使用一些加密算法(例如：RSA, Diffie-Hellman)产生一个48个字节的Key，这个Key叫 PreMaster Secret，很多材料上也被称作 PreMaster Key。</p>
<p><strong>ChangeCipherSpec</strong><br>ChangeCipherSpec是一个独立的协议，体现在数据包中就是一个字节的数据，用于告知服务端，客户端已经切换到之前协商好的加密套件（Cipher Suite）的状态，准备使用之前协商好的加密套件加密数据并传输了。</p>
<p>在ChangecipherSpec传输完毕之后，客户端会使用之前协商好的加密套件和Session Secret加密一段 Finish 的数据传送给服务端，此数据是为了在正式传输应用数据之前对刚刚握手建立起来的加解密通道进行验证。</p>
<h2 id="2-4-服务器的最后回应（Server-Finish）"><a href="#2-4-服务器的最后回应（Server-Finish）" class="headerlink" title="2.4 服务器的最后回应（Server Finish）"></a>2.4 服务器的最后回应（Server Finish）</h2><p>服务端在接收到客户端传过来的 PreMaster 加密数据之后，使用私钥对这段加密数据进行解密，并对数据进行验证，也会使用跟客户端同样的方式生成 Session Secret，一切准备好之后，会给客户端发送一个 ChangeCipherSpec，告知客户端已经切换到协商过的加密套件状态，准备使用加密套件和 Session Secret加密数据了。之后，服务端也会使用 Session Secret 加密一段 Finish 消息发送给客户端，以验证之前通过握手建立起来的加解密通道是否成功。</p>
<p>根据之前的握手信息，如果客户端和服务端都能对Finish信息进行正常加解密且消息正确的被验证，则说明握手通道已经建立成功，接下来，双方可以使用上面产生的Session Secret对数据进行加密传输了。</p>
<h2 id="2-5-几个secret"><a href="#2-5-几个secret" class="headerlink" title="2.5 几个secret"></a>2.5 几个secret</h2><p><strong>Secret Keys</strong><br>上面的分析和讲解主要是为了突出握手的过程，所以PreMaster secret，Master secret，session secret都是一代而过，但是对于Https，SSL/TLS深入的理解和掌握，这些Secret Keys是非常重要的部分。所以，准备把这些Secret Keys抽出来单独分析和讲解。</p>
<p>我们先来看看这些Secret Keys的生成过程以及作用流程图：<br><img src="http://sean-images.qiniudn.com/tls-keys-create.svg" alt="tls-keys-create.svg"></p>
<p><strong>PreMaster secret</strong><br>PreMaster Secret是在客户端使用RSA或者Diffie-Hellman等加密算法生成的。它将用来跟服务端和客户端在Hello阶段产生的随机数结合在一起生成 Master Secret。在客户端使用服务端的公钥对PreMaster Secret进行加密之后传送给服务端，服务端将使用私钥进行解密得到PreMaster secret。也就是说服务端和客户端都有一份相同的PreMaster secret和随机数。</p>
<p>PreMaster secret前两个字节是TLS的版本号，这是一个比较重要的用来核对握手数据的版本号，因为在Client Hello阶段，客户端会发送一份加密套件列表和当前支持的SSL/TLS的版本号给服务端，而且是使用明文传送的，如果握手的数据包被破解之后，攻击者很有可能串改数据包，选择一个安全性较低的加密套件和版本给服务端，从而对数据进行破解。所以，服务端需要对密文中解密出来对的PreMaster版本号跟之前Client Hello阶段的版本号进行对比，如果版本号变低，则说明被串改，则立即停止发送任何消息。</p>
<p>关于PreMaster Secret(Key)的计算请参考 <a href="http://www.fenesky.com/blog/2014/07/25/how-premaster-secret.html" target="_blank" rel="external">Https SSL/TLS PreMaster/Master Secret(Key)计算</a>。</p>
<p><strong>Master secret</strong><br>上面已经提到，由于服务端和客户端都有一份相同的PreMaster secret和随机数，这个随机数将作为后面产生Master secret的种子，结合PreMaster secret，客户端和服务端将计算出同样的Master secret。</p>
<p>Master secret是有系列的hash值组成的，它将作为数据加解密相关的secret的 Key Material 的一部分。Key Material最终解析出来的数据如下：<br><img src="http://sean-images.qiniudn.com/tls-keys.svg" alt="tls-keys.svg"></p>
<p>其中，write MAC key，就是session secret或者说是session key。Client write MAC key是客户端发数据的session secret，Server write MAC secret是服务端发送数据的session key。MAC(Message Authentication Code)，是一个数字签名，用来验证数据的完整性，可以检测到数据是否被串改。</p>
<p>关于Session Secret(Key)的计算请参考 <a href="http://www.fenesky.com/blog/2014/07/25/how-session-secret.html" target="_blank" rel="external">Https SSL/TLS Session Secret(Key)计算</a>。</p>
<h2 id="2-6-应用数据传输"><a href="#2-6-应用数据传输" class="headerlink" title="2.6 应用数据传输"></a>2.6 应用数据传输</h2><p>在所有的握手阶段都完成之后，就可以开始传送应用数据了。应用数据在传输之前，首先要附加上MAC secret，然后再对这个数据包使用write encryption key进行加密。在服务端收到密文之后，使用Client write encryption key进行解密，客户端收到服务端的数据之后使用Server write encryption key进行解密，然后使用各自的write MAC key对数据的完整性包括是否被串改进行验证。</p>
<h2 id="2-7-总结"><a href="#2-7-总结" class="headerlink" title="2.7 总结"></a>2.7 总结</h2><p>SSL客户端（也是TCP的客户端）在TCP链接建立之后，发出一个ClientHello来发起握手，这个消息里面包含了自己可实现的算法列表和其它一些需要的消息，SSL的服务器端会回应一个ServerHello，这里面确定了这次通信所需要的算法，然后发过去自己的证书（里面包含了身份和自己的公钥）。Client在收到这个消息后会生成一个秘密消息，用SSL服务器的公钥加密后传过去，SSL服务器端用自己的私钥解密后，会话密钥协商成功，双方可以用同一份会话密钥来通信了。</p>
<h1 id="3-附：密钥协商的形象化比喻"><a href="#3-附：密钥协商的形象化比喻" class="headerlink" title="3. 附：密钥协商的形象化比喻"></a>3. 附：密钥协商的形象化比喻</h1><p>如果上面的说明不够清晰，这里我们用个形象的比喻，我们假设A与B通信，A是SSL客户端，B是SSL服务器端，加密后的消息放在方括号[]里，以突出明文消息的区别。双方的处理动作的说明用圆括号（）括起。</p>
<p>A：我想和你安全的通话，我这里的对称加密算法有DES,RC5,密钥交换算法有RSA和DH，摘要算法有MD5和SHA。</p>
<p>B：我们用DES－RSA－SHA这对组合好了。<br>   这是我的证书，里面有我的名字和公钥，你拿去验证一下我的身份（把证书发给A）。<br>   目前没有别的可说的了。     </p>
<p>A：（查看证书上B的名字是否无误，并通过手头早已有的CA的证书验证了B的证书的真实性，如果其中一项有误，发出警告并断开连接，这一步保证了B的公钥的真实性）<br>   （产生一份秘密消息，这份秘密消息处理后将用作加密密钥，加密初始化向量（IV）和hmac的密钥。将这份秘密消息-协议中称为per_master_secret-用B的公钥加密，封装成称作ClientKeyExchange的消息。由于用了B的公钥，保证了第三方无法窃听）<br>   我生成了一份秘密消息，并用你的公钥加密了，给你（把ClientKeyExchange发给B）<br>   注意，下面我就要用加密的办法给你发消息了！<br>   （将秘密消息进行处理，生成加密密钥，加密初始化向量和hmac的密钥）<br>   [我说完了]</p>
<p>B：（用自己的私钥将ClientKeyExchange中的秘密消息解密出来，然后将秘密消息进行处理，生成加密密钥，加密初始化向量和hmac的密钥，这时双方已经安全的协商出一套加密办法了）<br>   注意，我也要开始用加密的办法给你发消息了！<br>   [我说完了]</p>
<p>A: [我的秘密是…]</p>
<p>B: [其它人不会听到的…]   </p>
<h1 id="4-SSL安全性"><a href="#4-SSL安全性" class="headerlink" title="4. SSL安全性"></a>4. SSL安全性</h1><p>SecurityPortal在2000年底有一份文章《The End of SSL and SSH?》激起了很多的讨论， 目前也有一些成熟的工具如dsniff（<a href="http://www.monkey.org/~dugsong/dsniff/）可以通过man" target="_blank" rel="external">http://www.monkey.org/~dugsong/dsniff/）可以通过man</a> in the middle攻击来截获https的消息。</p>
<p>从上面的原理可知，SSL的结构是严谨的，问题一般出现在实际不严谨的应用中。常见的攻击就是middle in the middle攻击，它是指在A和B通信的同时，有第三方C处于信道的中间，可以完全听到A与B通信的消息，并可拦截，替换和添加这些消息。</p>
<ol>
<li>SSL可以允许多种密钥交换算法，而有些算法，如DH，没有证书的概念，这样A便无法验证B的公钥和身份的真实性，从而C可以轻易的冒充，用自己的密钥与双方通信，从而窃听到别人谈话的内容。<br>而为了防止middle in the middle攻击，应该采用有证书的密钥交换算法。</li>
<li>有了证书以后，如果C用自己的证书替换掉原有的证书之后，A的浏览器会弹出一个警告框进行警告，但又有多少人会注意这个警告呢？</li>
<li>由于美国密码出口的限制，IE，netscape等浏览器所支持的加密强度是很弱的，如果只采用浏览器自带的加密功能的话，理论上存在被破解可能。</li>
</ol>
<h1 id="5-代理"><a href="#5-代理" class="headerlink" title="5. 代理"></a>5. 代理</h1><p>下面探讨一下SSL的代理是怎样工作的<br>当在浏览器里设置了https的代理，而且里输入了<code>https://www.example.com</code>之后，浏览器会与proxy建立tcp链接，然后向其发出这么一段消息：</p>
<pre><code>CONNECT server.example.com:443 HTTP/1.1
Host: server.example.com:443
</code></pre><p>然后proxy会向webserver端建立tcp连接,之后，这个代理便完全成了个内容转发装置。浏览器与web server会建立一个安全通道，因此这个安全通道是端到端的，尽管所有的信息流过了proxy,但其内容proxy是无法解密和改动的（当然要由证书的支持，否则这个地方便是个man in the middle攻击的好场所，见上面的安全部分）。       </p>
<p>CA证书以及如何使用OpenSSL自签署，见文章<a href="http://seanlook.com/2015/01/18/openssl-self-sign-ca">OpenSSL自签署证书</a> 。</p>
<h1 id="6-参考"><a href="#6-参考" class="headerlink" title="6. 参考"></a>6. 参考</h1><ul>
<li><a href="http://www.fenesky.com/blog/2014/07/19/how-https-works.html" target="_blank" rel="external">Https(SSL/TLS)原理详解</a></li>
<li><a href="https://blog.cloudflare.com/keyless-ssl-the-nitty-gritty-technical-details/" target="_blank" rel="external">Keyless SSL: The Nitty Gritty Technical Details</a></li>
<li><a href="http://kb.cnblogs.com/page/197396/" target="_blank" rel="external">SSL与TLS的区别以及介绍</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html" target="_blank" rel="external">SSL/TLS协议运行机制的概述</a></li>
<li><a href="http://www.nsfocus.net/?act=magazine&amp;do=view&amp;mid=841" target="_blank" rel="external">SSL/TLS/WTLS原理</a></li>
<li><a href="http://tech.yanatm.com/?p=338" target="_blank" rel="external">Transport Layer Security (TLS)</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE" target="_blank" rel="external">传输层安全协议</a></li>
<li><a href="http://www.zytrax.com/tech/survival/ssl.html" target="_blank" rel="external">Survival guides - TLS/SSL and SSL (X.509) Certificates</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[只怕时间走的太过匆忙，忘记了躲在角落中的我]]></title>
      <url>http://seanlook.com/2014/12/31/feel-2014-end/</url>
      <content type="html"><![CDATA[<blockquote>
<p>青春是一道明媚的伤痕，疼的酣畅淋漓，走的跌跌撞撞，她不顾一切遍体鳞伤，但仍庆幸，生命中仍有人为她执着与疯狂。</p>
</blockquote>
<p><img src="http://sean-images.qiniudn.com/feel-jxzlmd1.jpg" alt="feel-jxzlmd1"></p>
<p>很久没有静下来总结过自己了，拥有大把的自由时间反而没有停下来写写东西。还记得上一次这种类似的总结是在毕业那会儿，qq空间里被各种日志刷屏，于是自己也写过一篇，只是没发，现在也找不到去哪里了。这里就唠一唠过去的2014吧。</p>
<p>完全想不起来2014上半年做过什么事情，就像7月1号换房子之后时间河流断开了一样。一年总的说来，没什么太大变化，很失败。定过的计划，下过的决心，好像没有几件做成的。就拿体重来说，天天喊着要多吃饭，要增肥，可偏偏不爱吃长相不好的肉。这里可能就有拉仇恨的嫌疑了，毕竟嚷嚷要减肥的比要增肥的多的去了。爹妈没生好只能后天自己努力了，于是买了个电子秤，天天在家“吃饱了cheng”——唉声叹气远比眉开眼笑次数多，为了身体也是蛮拼的了。</p>
<p>相比以前来说，比较欣慰的是运动的频率多了，从夏热天一直到10月份，基本每周都会和小明去游泳。经常感到郁闷的是在游泳池里游泳怎么小明还要带上一瓶脉动，我就从来没感到过口渴……不说了，池里的水没少喝，到现在蛙泳还不敢游到中点，真是废。天变凉后，正巧室友要出国，把全新的羽毛球拍放我这，于是不出意外每周都会跟峰哥他们去打球，逐渐的爱上在球场上酣畅淋漓的感觉，从一开始只是玩玩，到有意识的练技术，再到看电视里的比赛，不知不觉快成为一种习惯了，这个习惯与能不能邂逅到运动型的妹子无关 -_-#，是不是，经常去隔壁王叔叔家打洞的小明。。</p>
<p>曾经我是一个比较宅的人，很少出去离校旅行但也不玩游戏，就莫名其妙的忙碌。我讨厌宅，更害怕一个人，所以六七月份找房子的时候从没考虑过单间，人是需要同伴才不会孤独，哪怕是走在路上看到个漂亮姑娘可以来吐槽的“腐友”。但同时我也经常会很安静，比如在下班车上跑到人少座位，一个人占着两个座，靠外的放包，靠窗的看外面，从疲惫的眼睛上取下眼镜，不必看得太清，单曲循环或随机播放着手机里的歌曲，成了装逼犯。下半年也随同事、朋友去阳江、阳朔玩过，爬了两次梧桐山，部门活动也没缺席过，算是改变闷*的历程吧。还计划过找时间去厦门转转，去哈尔滨看雪（不要问我雪是谁），由于种种原因都被搁浅了。</p>
<p>除了频率并不算高的体育锻炼和户外运动，酒桌、KTV也没少去，刚来公司那会儿的几个同事现在也成了最好的朋友，年轻的同龄人在一起也没什么束缚，谁谁过生日撮一顿，好久没聚了就到谁家吃火锅。KTV倒不是我乐意去的地方，玩玩游戏、骰子还可以，唱歌也就只能吧唧跟着吼两句，不能认真。从前就没练过，五音不全，也回不到过去傲娇耍个性，也许我有其它过人之处我自己都没发现呢！如果非到打击我说，“上帝给我关上了一扇门，又顺手帮我关了一扇窗”，那就是逼我破门向前了。</p>
<p><img src="http://sean-images.qiniudn.com/feel-jezuma1.jpg" alt="feel-jezuma1"></p>
<p>其它方面，可能因为本身一年来并没有什么成就，没攒下多少money，还过着这样安逸的生活，所有偶尔会“痛心疾首”一番，在手机上做个笔记计划点什么，劲头一过又看电视、玩手机去了，还时常忘记给爸妈打电话，即使说在电话里说来说去就那些内容。记得有一次脚踝无缘无故疼起来，最严重的时候都站不住了，成功了领到了来深圳第一份病历，这事在朋友圈散开后让我哥告诉了爸妈，随后几天每天都打电话来问好些没，果然是亲生的…这里还要谢谢周围还有网上留言关心过我的人，岁月淘沙能留下的是何其珍贵。中秋之前特意去广州看过爸妈，前几个月也从香港带了些药去，只是岁月不饶人，而我还太年轻，哥哥生意刚有起色而嫂子马上生小孩，怎么越想压力越大呢，难道这就是属羊的命不好？偶还是相信事在人为吧！</p>
<p>其实有时候觉得我还是挺幸运的，周围很多人都是学习的对象。人不是要成为谁，有的人会侃，有的人会耍，还有的人思考问题敏捷、思维方式不同，可能说起来有点虚无但真真切切是我从不同的人身上感受到的。虽然不必互相过分对比，但我认为正能量的东西还是很愿意去多多接触。根深，暑假来我这逗留过一段时间，它是少数让我觉得读研还是有用的几人，想到什么便说什么，敢于闯荡（有爱大声说啊）；德义，也是跟我睡过同一张床铺的，有明确的规划和目标，有见解（高富帅带我飞）；小明，活泼可爱任性又偶尔带点深沉（求别喷），经常能想他人之未想，会做饭。等等这些优秀的朋友、同学、同事，让我偶尔觉得无所适从，告诉自己未来还有很多事情要做……</p>
<p>工作方面，虽然占据了大部分时间，但并没有那么多可说的，能说的都是槽点。不是吐槽一下网络管理课那群没脑子的，就是工作没啥事闲着淡腾，用同样的话反复回答为什么加班——没事才加班。其实真不是非要加班，因为确实是不加班回家也没事做，看电视玩手机到晚上依然要1点睡觉，正如前面说的就目前这个阶段来说，何必过得太安逸呢。都说在TP的员工成熟起来会很慢，所以闲着闲着就需要自己去思考出路。IT运维的工作（DBA?），在这样有限的环境里，只能靠自己去学习，所以有80%时间我是借着工作内容关联或技术调研的名义在学着其它东西，零碎时间逛逛社区和问答网站。也买了些数据分析与金融方面的书，只是一直没有看过，这也将成为2015年计划的一部分了，权当小说看了。</p>
<p>规划性的东西这里就不说了，自己有个底就行，太过形式或太过庄重都不好。只说一个字，不要闹“2015年新年计划就是搞定2014年那些原定于2013年完成的安排，不为别的，只为兑现2012年时 要完成2011年计划的诺言。”的笑话就OK。</p>
<p>回头看，整篇写起来还真是天马行空，想到哪写到哪，连标题都想不到好一点的，没什么逻辑、文采可言，只是做个记录，剩下的交给心情……</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker集中化web界面管理平台shipyard]]></title>
      <url>http://seanlook.com/2014/12/29/docker-shipyard-centralized-management-webui/</url>
      <content type="html"><![CDATA[<p><a href="http://shipyard-project.com/" target="_blank" rel="external">Shipyard</a>（<a href="https://github.com/shipyard/shipyard" target="_blank" rel="external">github</a>）是建立在docker集群管理工具<a href="https://github.com/citadel/citadel" target="_blank" rel="external">Citadel</a>之上的可以管理容器、主机等资源的web图形化工具。包括<a href="https://github.com/shipyard/shipyard" target="_blank" rel="external">core</a>和<a href="https://github.com/shipyard/shipyard-extensions" target="_blank" rel="external">extension</a>两个版本，core即shipyard主要是把多个 Docker host上的 containers 统一管理（支持跨越多个host），extension即shipyard-extensions添加了应用路由和负载均衡、集中化日志、部署等。</p>
<h2 id="1-几个概念"><a href="#1-几个概念" class="headerlink" title="1. 几个概念"></a>1. 几个概念</h2><h3 id="engine"><a href="#engine" class="headerlink" title="engine"></a>engine</h3><p>一个shipyard管理的docker集群可以包含一个或多个<code>engine</code>（引擎），一个engine就是监听tcp端口的docker daemon。shipyard管理docker daemon、images、containers完全基于Docker API，不需要做其他的修改。另外，shipyard可以对每个engine做资源限制，包括CPU和内存；因为TCP监听相比Unix socket方式会有一定的安全隐患，所以shipyard还支持通过SSL证书与docker后台进程安全通信。</p>
<h3 id="rethinkdb"><a href="#rethinkdb" class="headerlink" title="rethinkdb"></a>rethinkdb</h3><p><code>RethinkDB</code>是一个shipyard项目的一个docker镜像，用来存放账号（account）、引擎（engine）、服务密钥（service key）、扩展元数据（extension metadata）等信息，但不会存储任何有关容器或镜像的内容。一般会启动一个<code>shipyard/rethinkdb</code>容器shipyard-rethinkdb-data来使用它的<code>/data</code>作为数据卷供另外rethinkdb一个挂载，专门用于数据存储。</p>
<h2 id="2-搭建过程"><a href="#2-搭建过程" class="headerlink" title="2. 搭建过程"></a>2. 搭建过程</h2><h3 id="修改tcp监听"><a href="#修改tcp监听" class="headerlink" title="修改tcp监听"></a>修改tcp监听</h3><p>Shipyard 要管理和控制 Docker host 的话需要先修改 Docker host 上的默认配置使其监听tcp端口(可以继续保持Unix socket）。有以下2种方式</p>
<ol>
<li><code>sudo docker -H tcp://0.0.0.0:4243 -H unix:///var/run/docker.sock -d</code> 启动docker daemon。如果为了避免每次启动都写这么长的命令，可以直接在<code>/etc/init/docker.conf</code>中修改。</li>
<li>修改<code>/etc/default/docker</code>的<code>DOCKER_OPTS</code><br><code>DOCKER_OPTS=&quot;-H tcp://127.0.0.1:4243 -H unix:///var/run/docker.sock&quot;</code>。这种方式在我docker version 1.4.1 in ubuntu 14.04上并没有生效。</li>
</ol>
<a id="more"></a>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">重启服务</div><div class="line"><span class="symbol">$ sudo docker -H tcp://0.0.0.0:4243 -H unix:</span>///var/run/docker.sock -d</div><div class="line">验证</div><div class="line">$ netstat -ant  |grep <span class="number">4243</span></div><div class="line"><span class="symbol">tcp6       0      0 :::4243                 :::</span>*                    LISTEN</div><div class="line">``` </div><div class="line">### 启动rethinkdb ###</div><div class="line">shipyard（基于Python/Django）在v1版本时安装过程比较复杂，既可以通过在host上安装，也可以部署shipyard镜像（包括`shipyard-agent`、`shipyard-deploy`等组件）。v2版本简化了安装过程，启动两个镜像就完成：</div></pre></td></tr></table></figure>
<p>获取一个/data的数据卷<br>$sudo docker run -it -d –name shipyard-rethinkdb-data \<br>  –entrypoint /bin/bash shipyard/rethinkdb -l</p>
<p>使用数据卷/data启动RethinkDB<br>docker run -it -P -d –name shipyard-rethinkdb \<br>  –volumes-from shipyard-rethinkdb-data shipyard/rethinkdb<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">### 部署shipyard镜像 ###</span></div><div class="line">启动shipyard控制器：</div></pre></td></tr></table></figure></p>
<p>sudo docker run -it -p 8080:8080 -d –name shipyard \<br>  –link shipyard-rethinkdb:rethinkdb shipyard/shipyard<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">至此已经可以通过浏览器访问`http://host:</span><span class="number">8080</span>`来访问shipyard UI界面了。</div><div class="line"></div><div class="line">第一次`run`后，关闭再次启动时直接使用：</div></pre></td></tr></table></figure></p>
<p>sudo docker stop shipyard shipyard-rethinkdb shipyard-rethinkdb-data<br>sudo docker start shipyard-rethinkdb-data shipyard-rethinkdb shipyard<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="section">### 图示 ###</span></div><div class="line"><span class="strong">**登录：**</span></div><div class="line">![<span class="string">docker-shipyard-login</span>][<span class="symbol">1</span>]</div><div class="line">默认用户名/密码为 admin/shipyard</div><div class="line"></div><div class="line"><span class="strong">**主界面：**</span></div><div class="line">![<span class="string">docker-shipyard</span>][<span class="symbol">2</span>]</div><div class="line">Dashboard展示在添加engine时指定的CPU以及内存的使用情况。</div><div class="line"></div><div class="line"><span class="strong">**容器：**</span></div><div class="line">![<span class="string">docker-shipyard-containers</span>][<span class="symbol">3</span>]</div><div class="line">shipyard管理的所有docker主机的所有容器，包括stop和running状态的。可以直接点击DEPLOY按钮来从镜像运行出其他容器，与<span class="code">`docker run`</span>的选项几乎相同，可以限制CPU和内存的使用，详见[<span class="string">shipyard的containers文档</span>](<span class="link">http://shipyard-project.com/docs/containers/</span>)。</div><div class="line"></div><div class="line"><span class="strong">**容器操作：**</span></div><div class="line">![<span class="string">docker-shipyard-containers2</span>][<span class="symbol">4</span>]</div><div class="line">可以<span class="code">`stop`</span>、<span class="code">`start`</span>、<span class="code">`restart`</span>容器，通过<span class="code">`LOGS`</span>可以看到容器日志输出，<span class="code">`SCALE`</span>可以批量（规模化）部署该容器，这个操作与容器的Type属性息息相关。因为shipyard可以管理多个host的docker容器，所以启动一个容器的type可以是：service——可以在具有相同label的engine上运行；unique——一个host上只允许某个镜像的一个实例运行；host——在指定的host上运行容器，启动的时候通过<span class="code">`--label host:&lt;host-id&gt;`</span>语法指定docker host。</div><div class="line"></div><div class="line"><span class="strong">**engine管理：**</span></div><div class="line">![<span class="string">docker-shipyard-engine</span>][<span class="symbol">5</span>]</div><div class="line">一个engine就是一个docker daemon，docker daemon下启动着多个containers，可以对engine限制一个整体的CPU和内存限制，shipyard通过TCP端口连接daemon。需要注意的是docker client与server的版本问题：（因为shipyard目前还在快速的完善过程，不同版本的docker应该是向下兼容的）</div></pre></td></tr></table></figure></p>
<p>curl -X GET <a href="http://172.29.88.223:4243/v1.15/containers/json" target="_blank" rel="external">http://172.29.88.223:4243/v1.15/containers/json</a><br>client and server don’t have same version (client : 1.15, server: 1.13)<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 3. shipyard-<span class="keyword">cli</span> ##</div><div class="line">目前图形化界面能做的操作其实很少，正在强大的是通过shipyard提供的命令行窗口（称作`Shipyard <span class="keyword">CLI</span>`）进行管理，参考http:<span class="comment">//shipyard-project.com/docs/usage/cli/</span></div><div class="line">启动命令行交互模式：</div><div class="line"></div><div class="line">    sudo docker <span class="keyword">run</span> --<span class="keyword">rm</span> -it shipyard/shipyard-<span class="keyword">cli</span></div><div class="line"></div><div class="line">使用它甚至可以替代docker客户端。</div></pre></td></tr></table></figure></p>
<p>sean@seanubt:~$ sudo docker run -it shipyard/shipyard-cli<br>shipyard cli&gt; shipyard help<br>NAME:<br>   shipyard - manage a shipyard cluster</p>
<p>USAGE:<br>   shipyard [global options] command [command options] [arguments…]</p>
<p>VERSION:<br>   2.0.8</p>
<p>COMMANDS:<br>   login        login to a shipyard cluster<br>   change-password    update your password<br>   accounts        show accounts<br>   add-account        add account<br>   delete-account    delete account<br>   containers        list containers<br>   inspect        inspect container<br>   run            run a container<br>   stop            stop a container<br>   restart        restart a container<br>   scale        scale a container<br>   logs            show container logs<br>   destroy        destroy a container<br>   engines        list engines<br>   add-engine        add shipyard engine<br>   remove-engine    removes an engine<br>   inspect-engine    inspect an engine<br>   service-keys        list service keys<br>   add-service-key    adds a service key<br>   remove-service-key    removes a service key<br>   extensions        show extensions<br>   add-extension    add extension<br>   remove-extension    remove an extension<br>   webhook-keys        list webhook keys<br>   add-webhook-key    adds a webhook key<br>   remove-webhook-key    removes a webhook key<br>   info            show cluster info<br>   events        show cluster events<br>   help, h        Shows a list of commands or help for one command</p>
<p>GLOBAL OPTIONS:<br>   –help, -h            show help<br>   –generate-bash-completion<br>   –version, -v        print the version</p>
<p>登录shipyard<br>shipyard cli&gt; shipyard login<br>URL: <a href="http://172.29.88.205:8080" target="_blank" rel="external">http://172.29.88.205:8080</a><br>Username: admin<br>Password:</p>
<p>查看containers<br>shipyard cli&gt; shipyard containers</p>
<p>启动一个容器<br>shipyard cli&gt; shipyard run –name nginx:1.7.6 –container-name web_test \<br>    –cpus 0.2 \<br>    –memory 64 \<br>    –type service \<br>    –hostname nginx-test \<br>    –domain example.com \<br>    –link redis:db \<br>    –port tcp/172.29.88.205:81:8081 \<br>    –port tcp/::8000 \<br>    –restart “on-failure:5” \<br>    –env FOO=bar \<br>    –label dev \</p>
<p>查看容器日志（只能接容器ID，暂不能使用容器名）<br>shipyard cli&gt; shipyard logs ff2761d</p>
<p>关闭并移除容器<br>shipyard cli&gt; shipyard destroy <container_id><br>```<br>不一一列举。。。</container_id></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【转+改】Docker核心技术预览]]></title>
      <url>http://seanlook.com/2014/12/18/docker-core-technology-preview/</url>
      <content type="html"><![CDATA[<p>本文简单介绍docker使用到的部分核心技术，但不做深入探究，因为每一个技术都是一个独立的项目，有机会再分别详细介绍。<br>来源地址：<a href="http://www.infoq.com/cn/articles/docker-core-technology-preview" target="_blank" rel="external">http://www.infoq.com/cn/articles/docker-core-technology-preview</a></p>
<p><img src="http://sean-images.qiniudn.com/docker-core-tech.png" alt="docker-core-tech"></p>
<h2 id="Linux-Namespace-（实例隔离）"><a href="#Linux-Namespace-（实例隔离）" class="headerlink" title="Linux Namespace （实例隔离）"></a>Linux Namespace （实例隔离）</h2><blockquote>
<p>The purpose of each namespace is to wrap a particular global system resource in an abstraction that makes it appear to the processes within the namespace that they have their own isolated instance of the global resource.</p>
</blockquote>
<p>每个用户实例之间相互隔离，互不影响。一般的硬件虚拟化方法给出的方法是VM，而LXC给出的方法是container，更细一点讲就是kernel namespace。其中pid、net、ipc、mnt、uts、user等namespace将container的进程、网络、消息、文件系统、UTS(“UNIX Time-sharing System”)和用户空间隔离开。</p>
<ul>
<li><strong>pid namespace</strong></li>
</ul>
<p>不同用户的进程就是通过pid namespace隔离开的，且不同 namespace 中可以有相同pid。所有的LXC进程在docker中的父进程为docker进程，每个lxc进程具有不同的namespace。同时由于允许嵌套，因此可以很方便的实现 Docker in Docker。</p>
<p><img src="http://sean-images.qiniudn.com/docker-kernel-pid-namespace.png" alt="docker-kernel-pid-namespace.png"></p>
<a id="more"></a>
<ul>
<li><strong> net namespace </strong></li>
</ul>
<p>有了 pid namespace, 每个namespace中的pid能够相互隔离，但是网络端口还是共享host的端口。网络隔离是通过net namespace实现的， 每个net namespace有独立的 network devices, IP addresses, IP routing tables, <code>/proc/net</code> 目录。这样每个container的网络就能隔离开来。LXC在此基础上有5种网络类型，docker默认采用veth的方式将container中的虚拟网卡同host上的一个docker bridge—docker0连接在一起。</p>
<ul>
<li><strong> ipc namespace </strong></li>
</ul>
<p>container中进程交互还是采用linux常见的进程间交互方法(interprocess communication - IPC), 包括常见的信号量、消息队列和共享内存。然而与VM不同，container 的进程间交互实际上还是host上具有相同pid namespace中的进程间交互，因此需要在IPC资源申请时加入namespace信息 - 每个IPC资源有一个唯一的 32bit ID。</p>
<ul>
<li><strong> mnt namespace </strong></li>
</ul>
<p>类似<code>chroot</code>，将一个进程放到一个特定的目录执行。mnt namespace允许不同namespace的进程看到的文件结构不同，这样每个 namespace 中的进程所看到的文件目录就被隔离开了。同<code>chroot不同，每个namespace中的container在</code>/proc/mounts`的信息只包含所在namespace的mount point。</p>
<ul>
<li><strong> uts namespace </strong></li>
</ul>
<p>UTS(“UNIX Time-sharing System”) namespace允许每个container拥有独立的hostname和domain name, 使其在网络上可以被视作一个独立的节点而非Host上的一个进程。</p>
<ul>
<li><strong> user namespace </strong></li>
</ul>
<p>每个container可以有不同的 user 和 group id, 也就是说可以以container内部的用户在container内部执行程序而非Host上的用户。</p>
<p>有了以上6种namespace从进程、网络、IPC、文件系统、UTS和用户角度的隔离，一个container就可以对外展现出一个独立计算机的能力，并且不同container从OS层面实现了隔离。 然而不同namespace之间资源还是相互竞争的，仍然需要类似ulimit来管理每个container所能使用的资源——LXC 采用的是cgroup。</p>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://blog.dotcloud.com/under-the-hood-linux-kernels-on-dotcloud-part" target="_blank" rel="external">PaaS under the hood, episode 1: kernel namespaces</a>， <a href="https://github.com/dockercn/docs/blob/master/paas-under-the-hood-episode-1-kernel-namespaces.md" target="_blank" rel="external">[中文]</a></li>
<li><a href="http://blog.blackwhite.tw/2013/12/docker.html" target="_blank" rel="external">http://blog.blackwhite.tw/2013/12/docker.html</a></li>
</ul>
<h2 id="cgroup-（资源配额）"><a href="#cgroup-（资源配额）" class="headerlink" title="cgroup （资源配额）"></a>cgroup （资源配额）</h2><p>cgroups 实现了对资源的配额和度量。cgroups 的使用非常简单，提供类似文件的接口，在 <code>/cgroup</code>目录下新建一个文件夹即可新建一个group，在此文件夹中新建<code>task</code>文件，并将pid写入该文件，即可实现对该进程的资源控制。具体的资源配置选项可以在该文件夹中新建子<code>subsystem</code>，<code>{子系统前缀}.{资源项}</code> 是典型的配置方法， 如<code>memory.usage_in_bytes</code>就定义了该group 在subsystem memory中的一个内存限制选项。</p>
<p>我们主要关心cgroups可以限制哪些资源，即有哪些subsystem是我们关心。</p>
<ul>
<li><p><strong>cpu</strong><br>在cgroup中，并不能像硬件虚拟化方案一样能够定义CPU能力，但是能够定义CPU轮转的优先级，因此具有较高CPU优先级的进程会更可能得到CPU运算。 通过将参数写入cpu.shares,即可定义改cgroup的CPU优先级 - 这里是一个相对权重，而非绝对值。当然在cpu这个subsystem中还有其他可配置项，手册中有详细说明。</p>
</li>
<li><p><strong>cpuacct</strong><br>产生cgroup任务的cpu资源报告</p>
</li>
<li><p><strong>cpuset</strong><br>cpusets 定义了有几个CPU可以被这个group使用，或者哪几个CPU可以供这个group使用。在某些场景下，单CPU绑定可以防止多核间缓存切换，从而提高效率</p>
</li>
<li><p><strong>memory</strong><br>设置每个cgroup的内存限制以及产生内存资源报告</p>
</li>
<li><p><strong>blkio</strong><br>block IO相关的统计和限制，byte/operation统计和限制(IOPS等)，读写速度限制等，但是这里主要统计的都是同步IO</p>
</li>
<li><p><strong>net_cls</strong><br>标记每个网络包以供cgroup方便使用</p>
</li>
<li><p><strong>devices</strong><br>允许或拒绝cgroup任务对设备的访问</p>
</li>
<li><p><strong>freezer</strong><br>暂停和恢复cgroup任务</p>
</li>
</ul>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://blog.dotcloud.com/kernel-secrets-from-the-paas-garage-part-24-c" target="_blank" rel="external">PaaS Under the Hood, Episode 2: cgroups</a></li>
<li><a href="https://www.kernel.org/doc/Documentation/cgroups/" target="_blank" rel="external">https://www.kernel.org/doc/Documentation/cgroups/</a></li>
<li><a href="http://en.wikipedia.org/wiki/Cgroups" target="_blank" rel="external">http://en.wikipedia.org/wiki/Cgroups</a></li>
</ul>
<h2 id="LXC（LinuX-Container）"><a href="#LXC（LinuX-Container）" class="headerlink" title="LXC（LinuX Container）"></a>LXC（LinuX Container）</h2><blockquote>
<p>LXC (LinuX Container) is an operating system-level virtualization method for running multiple isolated Linux systems (containers) on a single control host. This is accomplished through kernel level isolation.</p>
</blockquote>
<p>借助于namespace的隔离机制和cgroup限额功能，LXC提供了一套统一的API和工具来建立和管理container，LXC利用了如下 kernel 的特性：</p>
<ul>
<li>Kernel namespaces (ipc, uts, mount, pid, network and user)</li>
<li>Apparmor and SELinux profiles (security)</li>
<li>Seccomp policies</li>
<li>Chroots (using pivot_root)</li>
<li>Kernel capabilities</li>
<li>Control groups (cgroups)</li>
</ul>
<p>LXC 旨在提供一个共享kernel的 OS 级虚拟化方法，在执行时不用重复加载Kernel，且container的kernel与host共享，因此可以大大加快container的 启动过程，并显著减少内存消耗。</p>
<p>这篇<a href="http://stackoverflow.com/questions/17989306/what-does-docker-add-to-just-plain-lxc" target="_blank" rel="external">stackoverflow</a>上的问题和答案很好地诠释了Docker和LXC的区别，能够让你更好的了解什么是Docker， 简单翻译下就是以下几点：</p>
<ol>
<li>Portable deployment across machines<br>Docker提供了一种可移植的配置标准化机制，允许你一致性地在不同的机器上运行同一个Container；而LXC本身可能因为不同机器的不同配置而无法方便地移植运行；</li>
<li>Application-centric<br>Docker以App为中心，为应用的部署做了很多优化，而LXC的帮助脚本主要是聚焦于如何机器启动地更快和耗更少的内存；</li>
<li>Automatic build<br>Docker为App提供了一种自动化构建机制（Dockerfile），包括打包，基础设施依赖管理和安装等等；</li>
<li>Versioning<br>Docker提供了一种类似git的Container版本化的机制，允许你对你创建过的容器进行版本管理，依靠这种机制，你还可以下载别人创建的Container，甚至像git那样进行合并；</li>
<li>Component reuse<br>Docker Container是可重用的，依赖于版本化机制，你很容易重用别人的Container（叫Image），作为基础版本进行扩展；</li>
<li>Sharing<br>Docker Container是可共享的，有点类似github一样，Docker有自己的INDEX，你可以创建自己的Docker用户并上传和下载Docker Image；</li>
<li>Tool ecosystem<br>Docker提供了很多的工具链，形成了一个生态系统；这些工具的目标是自动化、个性化和集成化，包括对PAAS平台的支持等。</li>
</ol>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://linuxcontainers.org/" target="_blank" rel="external">http://linuxcontainers.org/</a></li>
<li><a href="http://en.wikipedia.org/wiki/LXC" target="_blank" rel="external">http://en.wikipedia.org/wiki/LXC</a></li>
<li><a href="http://marceloneves.org/papers/pdp2013-containers.pdf" target="_blank" rel="external">http://marceloneves.org/papers/pdp2013-containers.pdf</a> (性能测试)</li>
<li><a href="http://article.sciencepublishinggroup.com/pdf/10.11648.j.ajnc.20130204.11.pdf" target="_blank" rel="external">http://article.sciencepublishinggroup.com/pdf/10.11648.j.ajnc.20130204.11.pdf</a></li>
</ul>
<h2 id="AUFS"><a href="#AUFS" class="headerlink" title="AUFS"></a>AUFS</h2><p>Docker对container的使用基本是建立在LXC基础之上的，然而LXC存在的问题是难以移动——难以通过标准化的模板制作、重建、复制和移动 container。在以VM为基础的虚拟化手段中，有image和snapshot可以用于VM的复制、重建以及移动的功能。想要通过container来实现快速的大规模部署和更新, 这些功能不可或缺。Docker正是利用AUFS来实现对container的快速更新——在docker0.7中引入了storage driver, 支持AUFS, VFS, device mapper, 也为BTRFS以及ZFS引入提供了可能。</p>
<p>AUFS (Another Union FS) 是一种 Union FS，简单来说就是支持将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)的文件系统, 更进一步的理解, AUFS支持为每一个成员目录（类似Git Branch）设定readonly、readwrite 和 whiteout-able 权限, 同时 AUFS 里有一个类似分层的概念, 对 readonly 权限的 branch 可以逻辑上进行修改(增量地, 不影响 readonly 部分的)。通常 Union FS 有两个用途, 一方面可以实现不借助 LVM、RAID 将多个disk挂到同一个目录下, 另一个更常用的就是将一个 readonly 的 branch 和一个 writeable 的 branch 联合在一起，Live CD正是基于此方法可以允许在 OS image 不变的基础上允许用户在其上进行一些写操作。Docker 在 AUFS 上构建的 container image 也正是如此，接下来我们从启动 container 中的 linux 为例来介绍 docker 对AUFS特性的运用。</p>
<p>典型的启动Linux运行需要两个FS: bootfs + rootfs：</p>
<p><img src="http://sean-images.qiniudn.com/docker-filesystems-generic.png" alt="docker-filesystems-generic"></p>
<p>bootfs（boot file system）主要包含 bootloader 和 kernel, bootloader主要是引导加载kernel, 当boot成功后 kernel 被加载到内存中后 bootfs就被umount了。rootfs (root file system) 包含的就是典型 Linux 系统中的 <code>/dev</code>, <code>/proc</code>, <code>/bin</code>, <code>/etc</code>等标准目录和文件。</p>
<p>由此可见对于不同的linux发行版, bootfs基本是一致的, rootfs会有差别, 因此不同的发行版可以公用bootfs 如下图：</p>
<p><img src="http://sean-images.qiniudn.com/docker-filesystems-multiroot.png" alt="docker-filesystems-multiroot"></p>
<p>典型的Linux在启动后，首先将 rootfs 置为 readonly，进行一系列检查，然后将其切换为 “readwrite” 供用户使用。在docker中，起初也是将 rootfs 以readonly方式加载并检查，然而接下来利用 union mount 的将一个 readwrite 文件系统挂载在 readonly 的rootfs之上，并且允许再次将下层的 file system设定为readonly 并且向上叠加，这样一组readonly和一个writeable的结构构成一个container的运行目录，每一个被称作一个Layer。如下图：</p>
<p><img src="http://sean-images.qiniudn.com/docker-filesystems-multilayer.png" alt="docker-filesystems-multilayer"></p>
<p>得益于AUFS的特性，每一个对readonly层文件/目录的修改都只会存在于上层的writeable层中。这样由于不存在竞争，多个container可以共享readonly的layer。所以docker将readonly的层称作 “image”——对于container而言整个rootfs都是read-write的，但事实上所有的修改都写入最上层的writeable层中，image不保存用户状态，可以用于模板、重建和复制。</p>
<p><img src="http://sean-images.qiniudn.com/docker-filesystems-debian.png" alt="docker-filesystems-debian.png"><br><img src="http://sean-images.qiniudn.com/docker-filesystems-debianrw.png" alt="docker-filesystems-debianrw.png"></p>
<p>上层的image依赖下层的image，因此docker中把下层的image称作父image，没有父image的image称作base image。</p>
<p>因此想要从一个image启动一个container，docker会先加载其父image直到base image，用户的进程运行在writeable的layer中。所有parent image中的数据信息以及 ID、网络和lxc管理的资源限制等具体container的配置，构成一个docker概念上的container。如下图：</p>
<p><img src="http://sean-images.qiniudn.com/docker-filesystems-busyboxrw.png" alt="docker-filesystems-busyboxrw.png"></p>
<p>由此可见，采用AUFS作为docker的container的文件系统，能够提供如下好处:</p>
<ol>
<li>节省存储空间：多个container可以共享base image存储</li>
<li>快速部署：如果要部署多个container，base image可以避免多次拷贝</li>
<li>内存更省：因为多个container共享base image, 以及OS的disk缓存机制，多个container中的进程命中缓存内容的几率大大增加</li>
<li>升级更方便：相比于 copy-on-write 类型的FS，base-image也是可以挂载为可writeable的，可以通过更新base image而一次性更新其之上的container</li>
<li>允许在不更改base-image的同时修改其目录中的文件：所有写操作都发生在最上层的writeable层中，这样可以大大增加base image能共享的文件内容。</li>
</ol>
<p>以上5条 1-3 条可以通过 copy-on-write 的FS实现，4可以利用其他的union mount方式实现, 5只有AUFS实现的很好，这也是为什么Docker一开始就建立在AUFS之上。</p>
<p>由于AUFS并不会进入linux主干 (According to Christoph Hellwig, linux rejects all union-type filesystems but UnionMount.), 同时要求kernel版本3.0以上(docker推荐3.8及以上)，因此在RedHat工程师的帮助下在docker0.7版本中实现了driver机制, AUFS只是其中的一个driver, 在RHEL中采用的则是Device Mapper的方式实现的container文件系统。</p>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://blog.dotcloud.com/kernel-secrets-from-the-paas-garage-part-34-a" target="_blank" rel="external">PAAS Under the Hood, Episode 3: AUFS</a></li>
<li><a href="http://docs.docker.com/terms/layer/" target="_blank" rel="external">http://docs.docker.com/terms/layer/</a></li>
<li><a href="http://docs.docker.com/terms/filesystem/" target="_blank" rel="external">http://docs.docker.com/terms/filesystem/</a></li>
</ul>
<h2 id="全文参考"><a href="#全文参考" class="headerlink" title="全文参考"></a>全文参考</h2><ul>
<li><a href="http://tiewei.github.io/cloud/Docker-Getting-Start/" target="_blank" rel="external">http://tiewei.github.io/cloud/Docker-Getting-Start/</a></li>
<li><a href="https://docker.cn/a/1" target="_blank" rel="external">https://docker.cn/a/1</a></li>
<li><a href="http://blog.dotcloud.com/category/under-the-hood" target="_blank" rel="external">http://blog.dotcloud.com/category/under-the-hood</a></li>
<li><a href="http://www.slideshare.net/BodenRussell/realizing-linux-containerslxc" target="_blank" rel="external">http://www.slideshare.net/BodenRussell/realizing-linux-containerslxc</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker简介]]></title>
      <url>http://seanlook.com/2014/12/18/docker-introduction/</url>
      <content type="html"><![CDATA[<h1 id="1-docker是什么"><a href="#1-docker是什么" class="headerlink" title="1. docker是什么"></a>1. docker是什么</h1><blockquote>
<p>Docker is an open-source engine that automates the deployment of any application as a lightweight, portable, self-sufficient container that will run virtually anywhere.</p>
</blockquote>
<p><a href="https://www.docker.com/" target="_blank" rel="external">Docker</a>是 PaaS 提供商<a href="https://www.dotcloud.com/" target="_blank" rel="external">dotCloud</a>开源的一个基于 LXC 的高级容器引擎， <a href="https://github.com/docker/docker" target="_blank" rel="external">源代码</a>托管在 Github 上, 基于go语言并遵从Apache2.0协议开源。Docker近期非常火热，无论是从 GitHub 上的代码活跃度，还是Redhat宣布在<a href="http://server.cnw.com.cn/server-os/htm2014/20140616_303249.shtml" target="_blank" rel="external">RHEL7中正式支持Docker</a>，都给业界一个信号，这是一项创新型的技术解决方案。就连 Google 公司的 Compute Engine 也支持 docker 在其之上运行，国内“BAT”先锋企业百度Baidu App Engine(BAE)平台也是<a href="http://blog.docker.com/2013/12/baidu-using-docker-for-its-paas/" target="_blank" rel="external">以Docker作为其PaaS云基础</a>。</p>
<p>Docker产生的目的就是为了解决以下问题：</p>
<ol>
<li>环境管理复杂：从各种OS到各种中间件再到各种App，一款产品能够成功发布，作为开发者需要关心的东西太多，且难于管理，这个问题在软件行业中普遍存在并需要直接面对。Docker可以简化部署多种应用实例工作，比如Web应用、后台应用、数据库应用、大数据应用比如Hadoop集群、消息队列等等都可以打包成一个Image部署。</li>
<li>云计算时代的到来：AWS的成功，引导开发者将应用转移到云上, 解决了硬件管理的问题，然而软件配置和管理相关的问题依然存在 (AWS cloudformation是这个方向的业界标准, 样例模板可参考这里)。Docker的出现正好能帮助软件开发者开阔思路，尝试新的软件管理方法来解决这个问题。</li>
<li>虚拟化手段的变化：云时代采用标配硬件来降低成本，采用虚拟化手段来满足用户按需分配的资源需求以及保证可用性和隔离性。然而无论是KVM还是Xen，在 Docker 看来都在浪费资源，因为用户需要的是高效运行环境而非OS，GuestOS既浪费资源又难于管理，更加轻量级的LXC更加灵活和快速。<br><img src="http://sean-images.qiniudn.com/docker-traditional-virtualization.png" alt="docker-traditional-virtualization"><br><img src="http://sean-images.qiniudn.com/docker-virtualization.png" alt="docker-virtualization"></li>
<li>LXC的便携性：LXC在 Linux 2.6 的 Kernel 里就已经存在了，但是其设计之初并非为云计算考虑的，缺少标准化的描述手段和容器的可便携性，决定其构建出的环境难于分发和标准化管理(相对于KVM之类image和snapshot的概念)。Docker就在这个问题上做出了实质性的创新方法。</li>
</ol>
<p>Docker的主要特性如下：</p>
<ol>
<li>文件系统隔离：每个进程容器运行在完全独立的根文件系统里。</li>
<li>资源隔离：可以使用cgroup为每个进程容器分配不同的系统资源，例如CPU和内存。</li>
<li>网络隔离：每个进程容器运行在自己的网络命名空间里，拥有自己的虚拟接口和IP地址。</li>
<li>写时复制：采用写时复制方式创建根文件系统，这让部署变得极其快捷，并且节省内存和硬盘空间。</li>
<li>日志记录：Docker将会收集和记录每个进程容器的标准流（stdout/stderr/stdin），用于实时检索或批量检索。</li>
<li>变更管理：容器文件系统的变更可以提交到新的映像中，并可重复使用以创建更多的容器。无需使用模板或手动配置。</li>
<li>交互式Shell：Docker可以分配一个虚拟终端并关联到任何容器的标准输入上，例如运行一个一次性交互shell。</li>
</ol>
<h1 id="2-比较"><a href="#2-比较" class="headerlink" title="2. 比较"></a>2. 比较</h1><h2 id="2-1-docker-vs-传统虚拟化技术"><a href="#2-1-docker-vs-传统虚拟化技术" class="headerlink" title="2.1 docker vs 传统虚拟化技术"></a>2.1 docker vs 传统虚拟化技术</h2><p>作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式（xen、kvm、vmware）相比具有众多的优势。</p>
<a id="more"></a>
<p>首先，Docker 容器的启动可以在秒级实现，这相比传统的虚拟机方式要快得多。 其次，Docker 对系统资源的利用率很高，一台主机上可以同时运行数千个 Docker 容器。容器除了运行其中应用外，基本不消耗额外的系统资源，使得应用的性能很高，同时系统的开销尽量小。传统虚拟机方式运行 10 个不同的应用就要起 10 个虚拟机，而Docker 只需要启动 10 个隔离的应用即可。</p>
<p>具体说来，Docker 在如下几个方面具有较大的优势。</p>
<ul>
<li><p>更快速的交付和部署<br>对开发和运维（devop）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。<br>开发者可以使用一个标准的镜像来构建一套开发容器，开发完成之后，运维人员可以直接使用这个容器来部署代码。 Docker 可以快速创建容器，快速迭代应用程序，并让整个过程全程可见，使团队中的其他成员更容易理解应用程序是如何创建和工作的。 Docker 容器很轻很快！容器的启动时间是秒级的，大量地节约开发、测试、部署的时间。</p>
</li>
<li><p>更高效的虚拟化<br>Docker 容器的运行不需要额外的 hypervisor 支持，它是内核级的虚拟化，因此可以实现更高的性能和效率。</p>
</li>
<li>更轻松的迁移和扩展<br>Docker 容器几乎可以在任意的平台上运行，包括物理机、虚拟机、公有云、私有云、个人电脑、服务器等。 这种兼容性可以让用户把一个应用程序从一个平台直接迁移到另外一个。<br>更简单的管理</li>
</ul>
<p>使用 Docker，只需要小小的修改，就可以替代以往大量的更新工作。所有的修改都以增量的方式被分发和更新，从而实现自动化并且高效的管理。</p>
<p>对比传统虚拟机总结：</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>容器</th>
<th>虚拟机</th>
</tr>
</thead>
<tbody>
<tr>
<td>启动</td>
<td>秒级</td>
<td>分钟级</td>
</tr>
<tr>
<td>硬盘使用</td>
<td>一般为 MB</td>
<td>一般为 GB</td>
</tr>
<tr>
<td>性能</td>
<td>接近原生</td>
<td>弱于</td>
</tr>
<tr>
<td>系统支持量</td>
<td>单机支持上千个容器</td>
<td>一般几十个</td>
</tr>
</tbody>
</table>
<h2 id="2-2-docker-vs-lxc"><a href="#2-2-docker-vs-lxc" class="headerlink" title="2.2 docker vs lxc"></a>2.2 docker vs lxc</h2><p>Docker以Linux容器LXC为基础，实现轻量级的操作系统虚拟化解决方案。在LXC的基础上Docker进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便，具体改进有：</p>
<ol>
<li>Portable deployment across machines<br>Docker提供了一种可移植的配置标准化机制，允许你一致性地在不同的机器上运行同一个Container；而LXC本身可能因为不同机器的不同配置而无法方便地移植运行；</li>
<li>Application-centric<br>Docker以App为中心，为应用的部署做了很多优化，而LXC的帮助脚本主要是聚焦于如何机器启动地更快和耗更少的内存；</li>
<li>Automatic build<br>Docker为App提供了一种自动化构建机制（Dockerfile），包括打包，基础设施依赖管理和安装等等；</li>
<li>Versioning<br>Docker提供了一种类似git的Container版本化的机制，允许你对你创建过的容器进行版本管理，依靠这种机制，你还可以下载别人创建的Container，甚至像git那样进行合并；</li>
<li>Component reuse<br>Docker Container是可重用的，依赖于版本化机制，你很容易重用别人的Container（叫Image），作为基础版本进行扩展；</li>
<li>Sharing<br>Docker Container是可共享的，有点类似github一样，Docker有自己的INDEX，你可以创建自己的Docker用户并上传和下载Docker Image；</li>
<li>Tool ecosystem<br>Docker提供了很多的工具链，形成了一个生态系统；这些工具的目标是自动化、个性化和集成化，包括对PAAS平台的支持等。</li>
</ol>
<h1 id="3-docker应用场景"><a href="#3-docker应用场景" class="headerlink" title="3. docker应用场景"></a>3. docker应用场景</h1><p>Docker作为一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。Docker可以自动化打包和部署任何应用、创建一个轻量级私有PaaS云、搭建开发测试环境、部署可扩展的Web应用等。这决定了它在企业中的应用场景是有限的，Docker将自己定位为“分发应用的开放平台”，其网站上也明确地提到了Docker的典型应用场景：</p>
<blockquote>
<ul>
<li>Automating the packaging and deployment of applications</li>
<li>Creation of lightweight, private PAAS environments</li>
<li>Automated testing and continuous integration/deployment</li>
<li>Deploying and scaling web apps, databases and backend services</li>
</ul>
</blockquote>
<p>对应用进行自动打包和部署，创建轻量、私有的PAAS环境，自动化测试和持续整合与部署，部署和扩展Web应用、数据库和后端服务。</p>
<p>平台即服务一般与大数据量系统同在，反观当前我司各IT系统，可以在以下情形下使用docker替代方案：</p>
<ol>
<li>结合vagrant或supervisor，搭建统一的开发、测试环境<br>多个开发人员共同进行一个项目，就必须保持开发环境完全一致，部署到测试环境、正式环境后，最好都是同一套环境，通过容器来保存状态，分发给开发人员或部署，可以让“代码在我机子上运行没有问题”这种说辞将成为历史。</li>
<li>对memcached、mysql甚至tomcat，打包成一个个容器，避免重复配置<br>比如将一个稳定版本的、已配置完善的mysql，固化在一个镜像中，假如有新的环境要用到mysql数据库，便不需要重新安装、配置，而只需要启动一个容器瞬间完成。tomcat应用场景更多，可以将不同版本的jvm和tomcat打包分发，应用于多tomcat集群，或在测试服务器上隔离多个不同运行环境要求的测试应用（例如旧系统采用的是jdk6，新系统在jdk7上开发，但共用同一套测试环境）。</li>
</ol>
<p><strong>docker不足</strong></p>
<ul>
<li>LXC是基于cgroup等linux kernel功能的，因此container的guest系统只能是linux base的</li>
<li>隔离性相比KVM之类的虚拟化方案还是有些欠缺，所有container公用一部分的运行库</li>
<li>网络管理相对简单，主要是基于namespace隔离</li>
<li>cgroup的cpu和cpuset提供的cpu功能相比KVM的等虚拟化方案相比难以度量(所以dotcloud主要是安内存收费)</li>
<li>container随着用户进程的停止而销毁，container中的log等用户数据不便收集</li>
</ul>
<p>另外，Docker是面向应用的，其终极目标是构建PAAS平台，而现有虚拟机主要目的是提供一个灵活的计算资源池，是面向架构的，其终极目标是构建一个IAAS平台，所以它不能替代传统虚拟化解决方案。目前在容器可管理性方面，对于方便运维，提供UI来管理监控各个containers的功能还不足，还都是第三方实现如DockerUI、Dockland、Shipyard等。</p>
<h1 id="4-docker组成部分"><a href="#4-docker组成部分" class="headerlink" title="4. docker组成部分"></a>4. docker组成部分</h1><p><img src="http://sean-images.qiniudn.com/docker_arch.png" alt="docker_arch"></p>
<p>Docker使用客户端-服务器(client-server)架构模式。Docker客户端会与Docker守护进程进行通信。Docker守护进程会处理复杂繁重的任务，例如建立、运行、发布你的Docker容器。Docker客户端和守护进程可以运行在同一个系统上，当然你也可以使用Docker客户端去连接一个远程的Docker守护进程。Docker客户端和守护进程之间通过socket或者RESTful API进行通信。</p>
<p>更多内容请参考：<a href="http://seanlook.com/2014/12/18/docker-core-technology-preview/">Docker核心技术预览</a> 及<a href="http://seanlook.com/2014/10/31/docker-command-best-use-1/">docker常用管理命令</a>。</p>
<h2 id="4-1-images（镜像）"><a href="#4-1-images（镜像）" class="headerlink" title="4.1 images（镜像）"></a>4.1 images（镜像）</h2><p>Docker 镜像就是一个只读的模板。例如，一个镜像可以包含一个完整的 ubuntu 操作系统环境，里面仅安装了 Apache 或用户需要的其它应用程序。<br>镜像可以用来创建 Docker 容器。<br>Docker 提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下载一个已经做好的镜像来直接使用。</p>
<h2 id="4-2-container（容器）"><a href="#4-2-container（容器）" class="headerlink" title="4.2 container（容器）"></a>4.2 container（容器）</h2><p>Docker 利用容器来运行应用。容器是从镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。<br>镜像是只读的，容器在启动的时候创建一层可写层作为最上层。</p>
<h2 id="4-3-repository（仓库）"><a href="#4-3-repository（仓库）" class="headerlink" title="4.3 repository（仓库）"></a>4.3 repository（仓库）</h2><p>仓库是集中存放镜像文件的场所。有时候会把仓库和仓库注册服务器（Registry）混为一谈，并不严格区分。实际上，仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。</p>
<h3 id="4-3-1-公开仓库"><a href="#4-3-1-公开仓库" class="headerlink" title="4.3.1 公开仓库"></a>4.3.1 公开仓库</h3><p>docker团队控制的top-level的顶级repository，即<a href="https://registry.hub.docker.com/" target="_blank" rel="external">Docker Hub</a>，存放了数量庞大的镜像供用户下载，任何人都能读取，里面包含了许多常用的镜像，如ubuntu, mysql ,redis, python等。</p>
<h3 id="4-3-2-个人公共库"><a href="#4-3-2-个人公共库" class="headerlink" title="4.3.2 个人公共库"></a>4.3.2 个人公共库</h3><p>个人公共库也是被托管在Docker Hub上，网络上的其它用户也可以pull你的仓库（如<code>docker pull seanloook/centos6</code>）你可以在修改完自己的container之后，通过commit命令把它变成本地的一个image，push到自己的个人公共库。（在此之前你需要<code>docker login</code>登录，或者<code>vi ~/.dockercfg</code>。）</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">从镜像运行出一个容器</div><div class="line">docker run -t -i <span class="number">68</span>edf809afe7 /bin/bash</div><div class="line"></div><div class="line">记录下CONTAINER ID</div><div class="line"></div><div class="line">docker ps -l</div><div class="line">CONTAINER ID  <span class="built_in">IMAGE</span>                       COMMAND  CREATED     STATUS  PORTS  NAMES</div><div class="line"><span class="number">1528136</span>ff541  <span class="number">172.29</span>.<span class="number">88.222</span>:<span class="number">5000</span>/centos6:latest  /bin/bash  <span class="number">40</span> minutes ago Exited (<span class="number">0</span>) ..  sad_mestorf</div><div class="line"></div><div class="line"></div><div class="line">从将容器提交成一个新的<span class="built_in">image</span></div><div class="line">(<span class="built_in">format</span> is <span class="string">"sudo docker commit &lt;container_id&gt; &lt;username&gt;/&lt;imagename&gt;"</span>)</div><div class="line"><span class="meta"># docker commit -m <span class="meta-string">" new images /docker.sean "</span> -a <span class="meta-string">"docker New"</span> fcbd0a5348ca seanloook/centos6:test_tag_sean</span></div><div class="line">fe022762070b09866eaab47bc943ccb796e53f3f416abf3f2327481b446a9503</div><div class="line"></div><div class="line">docker images可以看到这个新的镜像</div><div class="line"></div><div class="line"><span class="meta"># docker images</span></div><div class="line">REPOSITORY                  TAG                 <span class="built_in">IMAGE</span> ID            CREATED             VIRTUAL <span class="built_in">SIZE</span></div><div class="line">seanloook/centos6           test_tag_sean       fe022762070b        About an hour ago   <span class="number">212.7</span> MB</div><div class="line">sean:<span class="number">5000</span>/library/centos6   latest              <span class="number">68</span>edf809afe7        <span class="number">3</span> weeks ago         <span class="number">212.7</span> MB</div></pre></td></tr></table></figure>
<p>在你commit为一个image后，通过push可以推送到个人公共registry中。此时需要login后才能push（当然没有设定login的Username，在第一次push时也会提示输入），接下来比较有意思。<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># docker login https:<span class="comment">//index.docker.io/v1/</span></span></div><div class="line"><span class="symbol">Username:</span> seanloook</div><div class="line"><span class="symbol">Password:</span> </div><div class="line"><span class="symbol">Email:</span> seanlook7@gmail.com</div><div class="line">Login Succeeded</div></pre></td></tr></table></figure></p>
<p>如果你已经有docker官网的账号，则只需要输入正确的用户名和密码就可以登录，邮箱不做验证；<br>如果所输入的Username不存在，则这一步便是自动从官网创建一个账号，并发送一封确认邮件，以后也可以从<a href="https://hub.docker.com/repos/" target="_blank" rel="external">https://hub.docker.com/repos/</a> 登录。（是不是太简单了?）</p>
<p>login的同时，也会在~/.dockercfg中加入认证信息<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cat ~/.dockercfg</span></div><div class="line">&#123;<span class="string">"https://index.docker.io/v1/"</span>:&#123;<span class="string">"auth"</span>:<span class="string">"c2Vhbmxvb29rOk15UGFzc3dvcmQ="</span>,<span class="string">"email"</span>:<span class="string">"seanlook7@gmail.com"</span>&#125;&#125;</div></pre></td></tr></table></figure></p>
<p>其中auth=base64(username:password)，base64编码与解码。</p>
<p>保存到个人公共库上，push可以是repos，格式<code>docker push &lt;username&gt;/&lt;repo_name&gt;</code>：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># docker push seanloook/centos6:test_tag_sean</div><div class="line">The push refers <span class="keyword">to</span> <span class="keyword">a</span> repository [seanloook/centos6] (<span class="built_in">len</span>: <span class="number">1</span>)</div><div class="line">Sending image <span class="keyword">list</span></div><div class="line">Pushing repository seanloook/centos6 (<span class="number">1</span> <span class="keyword">tags</span>)</div><div class="line"><span class="number">511136</span>ea3c5<span class="variable">a:</span> Image already pushed, skipping</div><div class="line"><span class="number">5</span>b12ef8fd570: Image already pushed, skipping</div><div class="line"><span class="number">68</span>edf809afe7: Image already pushed, skipping</div><div class="line">fe022762070<span class="variable">b:</span> Image successfully pushed</div><div class="line">Pushing <span class="keyword">tag</span> <span class="keyword">for</span> rev [fe022762070b] <span class="keyword">on</span> &#123;http<span class="variable">s:</span>//cdn-registry-<span class="number">1</span>.docker.io/v1/repositories/seanloook/centos6/<span class="keyword">tags</span>/test_tag_sean&#125;</div></pre></td></tr></table></figure>
<p>上面的push操作也可以是<code>docker push seanloook/centos6</code>（但不能是<code>docker push fe022762070b</code>）。</p>
<p>这些镜像其他人也可以搜索得到<code>docker search seanloo</code>。</p>
<h3 id="4-3-3-私有仓库"><a href="#4-3-3-私有仓库" class="headerlink" title="4.3.3 私有仓库"></a>4.3.3 私有仓库</h3><p>首先与另外一种仓库区分——Docker Hub Private Repository，它简单理解为公网上的个人私有库，与上面的个人公共库相对应，在Docker Hub上Create Repository时选择Private便是，只有你自己才可以读写。</p>
<p>这里所说的私有仓库是指自己在本地服务器上搭建的专属自己的内部仓库<code>docker-registry</code>，俗称“私服”，供无法访问互联网的内部网络使用，或者镜像到本地一份以加快pull、push的速度。</p>
<p>它与公共仓库最明显的区分就是repository的命名，如必须使用带<code>.</code>的主机名或域名，后面必须接<code>:port</code>，如<code>sean.tp-link.net:5000/centos6:your_tag_name</code>，而公共仓库第一个斜杠前表示的是登录用户名。命名关系到推送到哪个服务器的哪个位置，更过内容可以关注<a href="http://seanlook.com/2014/11/13/deploy-private-docker-registry-with-nginx-ssl/">搭建docker内网私服（docker-registry with nginx&amp;ssl on centos）</a>。</p>
<h2 id="4-4-运行一个容器的内部过程"><a href="#4-4-运行一个容器的内部过程" class="headerlink" title="4.4 运行一个容器的内部过程"></a>4.4 运行一个容器的内部过程</h2><p>docker client告诉docker daemon运行一个容器，例如：<code>docker run -i -t ubuntu  /bin/bash</code><br>让我们分解一下这个命令，docker client启动使用一个二进制的docker命令，最小的docker client需要你告诉docker daemon你的容器是从哪个docker镜像构建的，你希望在容器内部运行哪个命令。所以启动过程如下：</p>
<ol>
<li>Pulling the ubuntu image<br>docker检查是否存在ubuntu镜像，如果本地不存在ubuntu镜像，则docker会到docker index下载。</li>
<li>Creates a new container<br>利用镜像创建容器</li>
<li>Allocates a filesystem and mounts a read-write layer<br>为镜像创建文件系统层和read-write层</li>
<li>Allocates a network / bridge interface<br>为容器创建网络接口，使容器和本地机器可以通讯</li>
<li>Sets up an IP address<br>在地址池中为容器分配一个可用的IP地址</li>
<li>Executes a process that you specify<br>运行你的应用</li>
<li>Captures and provides application output<br>连接log的标准输入、输出、错误，以使你直到你的应用是否正常运行</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://www.infoq.com/cn/articles/docker-core-technology-preview" target="_blank" rel="external">深入浅出Docker（一）：Docker核心技术预览 </a></li>
<li><a href="http://www.infoq.com/cn/articles/docker-source-code-analysis-part1" target="_blank" rel="external">Docker源码分析（一）：Docker架构</a></li>
<li><a href="http://www.slideshare.net/rajdeep/docker-architecturev2" target="_blank" rel="external">Docker Architecture based on v1.3</a></li>
<li><a href="http://www.pchou.info/open-source/2014/03/29/docker-introduction.html" target="_blank" rel="external">Docker简介与入门</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下同步工具inotify+rsync使用详解]]></title>
      <url>http://seanlook.com/2014/12/12/rsync_inotify_setup/</url>
      <content type="html"><![CDATA[<h1 id="1-rsync"><a href="#1-rsync" class="headerlink" title="1. rsync"></a>1. rsync</h1><h2 id="1-1-什么是rsync"><a href="#1-1-什么是rsync" class="headerlink" title="1.1 什么是rsync"></a>1.1 什么是rsync</h2><p>rsync是一个远程数据同步工具，可通过LAN/WAN快速同步多台主机间的文件。它使用所谓的“Rsync演算法”来使本地和远程两个主机之间的文件达到同步，这个算法只传送两个文件的不同部分，而不是每次都整份传送，因此速度相当快。所以通常可以作为备份工具来使用。</p>
<p>运行Rsync server的机器也叫backup server，一个Rsync server可同时备份多个client的数据；也可以多个Rsync server备份一个client的数据。Rsync可以搭配ssh甚至使用daemon模式。Rsync server会打开一个873的服务通道(port)，等待对方rsync连接。连接时，Rsync server会检查口令是否相符，若通过口令查核，则可以开始进行文件传输。第一次连通完成时，会把整份文件传输一次，下一次就只传送二个文件之间不同的部份。</p>
<p><strong>基本特点：</strong></p>
<ol>
<li>可以镜像保存整个目录树和文件系统；</li>
<li>可以很容易做到保持原来文件的权限、时间、软硬链接等；</li>
<li>无须特殊权限即可安装；</li>
<li>优化的流程，文件传输效率高；</li>
<li>可以使用rcp、ssh等方式来传输文件，当然也可以通过直接的socket连接；</li>
<li>支持匿名传输。</li>
</ol>
<p><strong>命令语法：</strong><br>rsync的命令格式可以为以下六种：<br>　rsync [OPTION]… SRC DEST<br>　rsync [OPTION]… SRC [USER@]HOST:DEST<br>　rsync [OPTION]… [USER@]HOST:SRC DEST<br>　rsync [OPTION]… [USER@]HOST::SRC DEST<br>　rsync [OPTION]… SRC [USER@]HOST::DEST<br>　rsync [OPTION]… rsync://[USER@]HOST[:PORT]/SRC [DEST]</p>
<p>对应于以上六种命令格式，我们可以总结rsync有2种不同的工作模式：</p>
<ul>
<li>shell模式：使用远程shell程序（如ssh或rsh）进行连接。当源路径或目的路径的主机名后面包含一个冒号分隔符时使用这种模式，rsync安装完成后就可以直接使用了，无所谓启动。（目前没有尝试过这个方法）</li>
<li>daemon模式：使用TCP直接连接rsync daemon。当源路径或目的路径的主机名后面包含两个冒号，或使用rsync://URL时使用这种模式，无需远程shell，但必须在一台机器上启动rsync daemon，默认端口873，这里可以通过<code>rsync --daemon</code>使用独立进程的方式，或者通过xinetd超级进程来管理rsync后台进程。</li>
</ul>
<p>当rsync作为daemon运行时，它需要一个用户身份。如果你希望启用chroot，则必须以root的身份来运行daemon，监听端口，或设定文件属主；如果不启用chroot，也可以不使用root用户来运行daemon，但该用户必须对相应的模块拥有读写数据、日志和lock file的权限。当rsync以daemon模式运行时，它还需要一个配置文件——rsyncd.conf。修改这个配置后不必重启rsync daemon，因为每一次的client连接都会去重新读取该文件。</p>
<a id="more"></a>
<p>我们一般把DEST远程服务器端成为rsync Server，运行rsync命令的一端SRC称为Client。</p>
<p><strong>安装：</strong><br>rsync在CentOS6上默认已经安装，如果没有则可以使用<code>yum install rsync -y</code>，服务端和客户端是同一个安装包。<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># rsync -h</span></div></pre></td></tr></table></figure></p>
<h2 id="1-2-同步测试"><a href="#1-2-同步测试" class="headerlink" title="1.2 同步测试"></a>1.2 同步测试</h2><p>关于<code>rsync</code>命令的诸多选项说明，见另外一篇文章<a href="http://seanlook.com/2014/12/13/rsync_inotify_configuration">rsync与inotifywait命令和配置选项说明</a>。</p>
<h3 id="1-2-1-本机文件夹同步"><a href="#1-2-1-本机文件夹同步" class="headerlink" title="1.2.1 本机文件夹同步"></a>1.2.1 本机文件夹同步</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># rsync -auvrtzopgP --progress  <span class="regexp">/root/</span> <span class="regexp">/tmp/</span>rsync_bak<span class="regexp">/</span></div></pre></td></tr></table></figure>
<p>会看到从<code>/root/</code>传输文件到<code>/tmp/rsync_bak/</code>的列表和速率，再运行一次会看到sending incremental file list下没有复制的内容，可以在/root/下<code>touch</code>某一个文件再运行看到只同步了修改过的文件。</p>
<p>上面需要考虑以下问题：</p>
<ul>
<li>删除/root/下的文件不会同步删除/tmp/rsync_bak，除非加入<code>--delete</code>选项 </li>
<li>文件访问时间等属性、读写等权限、文件内容等有任何变动，都会被认为修改</li>
<li>目标目录下如果文件比源目录还新，则不会同步</li>
<li>源路径的最后是否有斜杠有不同的含义：有斜杠，只是复制目录中的文件；没有斜杠的话，不但要复制目录中的文件，还要复制目录本身</li>
</ul>
<h2 id="1-3-同步到远程服务器"><a href="#1-3-同步到远程服务器" class="headerlink" title="1.3 同步到远程服务器"></a>1.3 同步到远程服务器</h2><p>在服务器间rsync传输文件，需要有一个是开着rsync的服务，而这一服务需要两个配置文件，说明当前运行的用户名和用户组，这个用户名和用户组在改变文件权限和相关内容的时候有用，否则有时候会出现提示权限问题。配置文件也说明了模块、模块化管理服务的安全性，每个模块的名称都是自己定义的，可以添加用户名密码验证，也可以验证IP，设置目录是否可写等，不同模块用于同步不同需求的目录。</p>
<h3 id="1-3-1-服务端配置文件"><a href="#1-3-1-服务端配置文件" class="headerlink" title="1.3.1 服务端配置文件"></a>1.3.1 服务端配置文件</h3><p><strong> /etc/rsyncd.conf： </strong><br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#2014-12-11 by Sean</span></div><div class="line"><span class="attr">uid=root</span></div><div class="line"><span class="attr">gid=root</span></div><div class="line">use <span class="attr">chroot=no</span></div><div class="line">max <span class="attr">connections=10</span></div><div class="line"><span class="attr">timeout=600</span></div><div class="line">strict <span class="attr">modes=yes</span></div><div class="line"><span class="attr">port=873</span></div><div class="line">pid <span class="attr">file=/var/run/rsyncd.pid</span></div><div class="line">lock <span class="attr">file=/var/run/rsyncd.lock</span></div><div class="line">log <span class="attr">file=/var/log/rsyncd.log</span></div><div class="line"></div><div class="line">[module_test]</div><div class="line"><span class="attr">path=/tmp/rsync_bak2</span></div><div class="line"><span class="attr">comment=rsync</span> test logs</div><div class="line">auth <span class="attr">users=sean</span></div><div class="line"><span class="attr">uid=sean</span></div><div class="line"><span class="attr">gid=sean</span></div><div class="line">secrets <span class="attr">file=/etc/rsyncd.secrets</span></div><div class="line">read <span class="attr">only=no</span></div><div class="line"><span class="attr">list=no</span></div><div class="line">hosts <span class="attr">allow=172.29.88.204</span></div><div class="line">hosts <span class="attr">deny=0.0.0.0/32</span></div></pre></td></tr></table></figure></p>
<p>这里配置socket方式传输文件，端口873，[module_test]开始定义一个模块，指定要同步的目录（接收）path，授权用户，密码文件，允许哪台服务器IP同步（发送）等。关于配置文件中选项的详细说明依然参考<a href="http://seanlook.com/2014/12/13/rsync_inotify_configuration">rsync与inotifywait命令和配置选项说明</a>。</p>
<p>经测试，上述配置文件每行后面不能使用<code>#</code>来来注释</p>
<p><strong> /etc/rsyncd.secrets： </strong><br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">sean:</span>passw0rd</div></pre></td></tr></table></figure></p>
<p>一行一个用户，用户名:密码。请注意这里的用户名和密码与操作系统的用户名密码无关，可以随意指定，与<code>/etc/rsyncd.conf</code>中的<code>auth users</code>对应。</p>
<p>修改权限：<code>chmod 600 /etc/rsyncd.d/rsync_server.pwd</code>。</p>
<h3 id="1-3-2-服务器启动rsync后台服务"><a href="#1-3-2-服务器启动rsync后台服务" class="headerlink" title="1.3.2 服务器启动rsync后台服务"></a>1.3.2 服务器启动rsync后台服务</h3><p>修改<code>/etc/xinetd.d/rsync</code>文件，disable 改为 no<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># default: off</span></div><div class="line"><span class="comment"># description: The rsync server is a good addition to an ftp server, as it \</span></div><div class="line"><span class="comment">#	allows crc checksumming etc.</span></div><div class="line">service rsync</div><div class="line">&#123;</div><div class="line">4<span class="attr">disable</span>	= no</div><div class="line">4<span class="attr">flags</span>		= IPv6</div><div class="line">4<span class="attr">socket_type</span>     = stream</div><div class="line">4<span class="attr">wait</span>            = no</div><div class="line">4<span class="attr">user</span>            = root</div><div class="line">4<span class="attr">server</span>          = /usr/bin/rsync</div><div class="line">4<span class="attr">server_args</span>     = --daemon</div><div class="line">4log_on_failure  += USERID</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行<code>service xinetd restart</code>会一起重启rsync后台进程，默认使用配置文件<code>/etc/rsyncd.conf</code>。也可以使用<code>/usr/bin/rsync --daemon --config=/etc/rsyncd.conf</code>。</p>
<p>为了以防rsync写入过多的无用日志到<code>/var/log/message</code>（容易塞满从而错过重要的信息），建议注释掉<code>/etc/xinetd.conf</code>的success：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># log_on_success  = PID HOST DURATION EXIT</span></div></pre></td></tr></table></figure></p>
<p>如果使用了防火墙，要添加允许IP到873端口的规则。<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># iptables -A INPUT -p tcp -m state --state NEW  -m tcp --dport 873 -j ACCEPT</span></div><div class="line"><span class="meta"># iptables -L  查看一下防火墙是不是打开了 873端口</span></div><div class="line"><span class="meta"># netstat -anp|grep 873</span></div></pre></td></tr></table></figure></p>
<p>建议关闭<code>selinux</code>，可能会由于强访问控制导致同步报错。</p>
<h3 id="1-3-3-客户端测试同步"><a href="#1-3-3-客户端测试同步" class="headerlink" title="1.3.3 客户端测试同步"></a>1.3.3 客户端测试同步</h3><p>单向同步时，客户端只需要一个包含密码的文件。<br><strong>/etc/rsync_client.pwd：</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passw0rd</div></pre></td></tr></table></figure></p>
<p>chmod 600 /etc/rsync_client.pwd</p>
<p><strong>命令：</strong><br>将本地<code>/root/</code>目录同步到远程172.29.88.223的/tmp/rsync_bak2目录（module_test指定）：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/rsync -auvrtzopgP --progress --password-file=/</span>etc<span class="regexp">/rsync_client.pwd /</span>root<span class="regexp">/ sean@172.29.88.223::module_test</span></div></pre></td></tr></table></figure></p>
<p>当然你也可以将远程的/tmp/rsync_bak2目录同步到本地目录/root/tmp：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/rsync -auvrtzopgP --progress --password-file=/</span>etc<span class="regexp">/rsync_client.pwd sean@172.29.88.223::module_test /</span>root<span class="regexp">/</span></div></pre></td></tr></table></figure></p>
<p>从上面两个命令可以看到，其实这里的服务器与客户端的概念是很模糊的，rsync daemon都运行在远程172.29.88.223上，第一条命令是本地主动推送目录到远程，远程服务器是用来备份的；第二条命令是本地主动向远程索取文件，本地服务器用来备份，也可以认为是本地服务器恢复的一个过程。</p>
<h2 id="1-4-rsync不足"><a href="#1-4-rsync不足" class="headerlink" title="1.4 rsync不足"></a>1.4 rsync不足</h2><p>与传统的cp、tar备份方式相比，rsync具有安全性高、备份迅速、支持增量备份等优点，通过rsync可以解决对实时性要求不高的数据备份需求，例如定期的备份文件服务器数据到远端服务器，对本地磁盘定期做数据镜像等。</p>
<p>随着应用系统规模的不断扩大，对数据的安全性和可靠性也提出的更好的要求，rsync在高端业务系统中也逐渐暴露出了很多不足，首先，rsync同步数据时，需要扫描所有文件后进行比对，进行差量传输。如果文件数量达到了百万甚至千万量级，扫描所有文件将是非常耗时的。而且正在发生变化的往往是其中很少的一部分，这是非常低效的方式。其次，rsync不能实时的去监测、同步数据，虽然它可以通过crontab方式进行触发同步，但是两次触发动作一定会有时间差，这样就导致了服务端和客户端数据可能出现不一致，无法在应用故障时完全的恢复数据。基于以上原因，rsync+inotify组合出现了！</p>
<h1 id="2-inotify-tools"><a href="#2-inotify-tools" class="headerlink" title="2. inotify-tools"></a>2. inotify-tools</h1><h2 id="2-1-什么是inotify"><a href="#2-1-什么是inotify" class="headerlink" title="2.1 什么是inotify"></a>2.1 什么是inotify</h2><p>inotify是一种强大的、细粒度的、异步的文件系统事件监控机制，Linux内核从2.6.13开始引入，允许监控程序打开一个独立文件描述符，并针对事件集监控一个或者多个文件，例如打开、关闭、移动/重命名、删除、创建或者改变属性。</p>
<p>CentOS6自然已经支持：<br>使用<code>ll /proc/sys/fs/inotify</code>命令，是否有以下三条信息输出，如果没有表示不支持。<br><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">total 0</div><div class="line">-rw-r--r--<span class="number"> 1 </span>root root<span class="number"> 0 </span>Dec<span class="number"> 11 </span>15:23 max_queued_events</div><div class="line">-rw-r--r--<span class="number"> 1 </span>root root<span class="number"> 0 </span>Dec<span class="number"> 11 </span>15:23 max_user_instances</div><div class="line">-rw-r--r--<span class="number"> 1 </span>root root<span class="number"> 0 </span>Dec<span class="number"> 11 </span>15:23 max_user_watches</div></pre></td></tr></table></figure></p>
<ul>
<li><code>/proc/sys/fs/inotify/max_queued_evnets</code>表示调用inotify_init时分配给inotify instance中可排队的event的数目的最大值，超出这个值的事件被丢弃，但会触发IN_Q_OVERFLOW事件。</li>
<li><code>/proc/sys/fs/inotify/max_user_instances</code>表示每一个real user ID可创建的inotify instatnces的数量上限。</li>
<li><code>/proc/sys/fs/inotify/max_user_watches</code>表示每个inotify instatnces可监控的最大目录数量。如果监控的文件数目巨大，需要根据情况，适当增加此值的大小。</li>
</ul>
<p><strong>inotify-tools：</strong></p>
<p>inotify-tools是为linux下inotify文件监控工具提供的一套C的开发接口库函数，同时还提供了一系列的命令行工具，这些工具可以用来监控文件系统的事件。 inotify-tools是用c编写的，除了要求内核支持inotify外，不依赖于其他。inotify-tools提供两种工具，一是<code>inotifywait</code>，它是用来监控文件或目录的变化，二是<code>inotifywatch</code>，它是用来统计文件系统访问的次数。</p>
<p>下载inotify-tools-3.14-1.el6.x86_64.rpm，通过rpm包安装：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># rpm -ivh /apps/crm/soft_src/inotify-tools-3.14-1.el6.x86_64.rpm </span></div><div class="line">warning: /apps/crm/soft_src/inotify-tools<span class="number">-3.14</span><span class="number">-1.</span>el6.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID <span class="number">4026433</span>f: NOKEY</div><div class="line">Preparing...                <span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment"># [100%]</span></div><div class="line">   <span class="number">1</span>:inotify-tools          <span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment"># [100%]</span></div><div class="line"><span class="comment"># rpm -qa|grep inotify</span></div><div class="line">inotify-tools<span class="number">-3.14</span><span class="number">-1.</span>el5.x86_64</div></pre></td></tr></table></figure></p>
<h2 id="2-2-inotifywait使用示例"><a href="#2-2-inotifywait使用示例" class="headerlink" title="2.2 inotifywait使用示例"></a>2.2 inotifywait使用示例</h2><p>监控/root/tmp目录文件的变化：<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/bin/inotifywait -mrq --timefmt '<span class="built_in">%Y</span>/<span class="built_in">%m</span>/<span class="built_in">%d</span>-<span class="built_in">%H</span>:<span class="built_in">%M</span>:<span class="built_in">%S</span>' --format '<span class="built_in">%T</span> <span class="built_in">%w</span> <span class="built_in">%f</span>' \</div><div class="line"> -e modify,delete,create,move,attrib /root/tmp/</div></pre></td></tr></table></figure></p>
<p>上面的命令表示，持续监听<code>/root/tmp</code>目录及其子目录的文件变化，监听事件包括文件被修改、删除、创建、移动、属性更改，显示到屏幕。执行完上面的命令后，在<code>/root/tmp</code>下创建或修改文件都会有信息输出：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="number">2014</span><span class="regexp">/12/</span><span class="number">11</span><span class="number">-15</span>:<span class="number">40</span>:<span class="number">04</span> <span class="regexp">/root/</span>tmp/ <span class="keyword">new</span>.txt</div><div class="line"><span class="number">2014</span><span class="regexp">/12/</span><span class="number">11</span><span class="number">-15</span>:<span class="number">40</span>:<span class="number">22</span> <span class="regexp">/root/</span>tmp/ .<span class="keyword">new</span>.txt.swp</div><div class="line"><span class="number">2014</span><span class="regexp">/12/</span><span class="number">11</span><span class="number">-15</span>:<span class="number">40</span>:<span class="number">22</span> <span class="regexp">/root/</span>tmp/ .<span class="keyword">new</span>.txt.swx</div><div class="line"><span class="number">2014</span><span class="regexp">/12/</span><span class="number">11</span><span class="number">-15</span>:<span class="number">40</span>:<span class="number">22</span> <span class="regexp">/root/</span>tmp/ .<span class="keyword">new</span>.txt.swx</div><div class="line"><span class="number">2014</span><span class="regexp">/12/</span><span class="number">11</span><span class="number">-15</span>:<span class="number">40</span>:<span class="number">22</span> <span class="regexp">/root/</span>tmp/ .<span class="keyword">new</span>.txt.swp</div><div class="line"><span class="number">2014</span><span class="regexp">/12/</span><span class="number">11</span><span class="number">-15</span>:<span class="number">40</span>:<span class="number">22</span> <span class="regexp">/root/</span>tmp/ .<span class="keyword">new</span>.txt.swp</div><div class="line"><span class="number">2014</span><span class="regexp">/12/</span><span class="number">11</span><span class="number">-15</span>:<span class="number">40</span>:<span class="number">23</span> <span class="regexp">/root/</span>tmp/ .<span class="keyword">new</span>.txt.swp</div><div class="line"><span class="number">2014</span><span class="regexp">/12/</span><span class="number">11</span><span class="number">-15</span>:<span class="number">40</span>:<span class="number">31</span> <span class="regexp">/root/</span>tmp/ .<span class="keyword">new</span>.txt.swp</div><div class="line"><span class="number">2014</span><span class="regexp">/12/</span><span class="number">11</span><span class="number">-15</span>:<span class="number">40</span>:<span class="number">32</span> <span class="regexp">/root/</span>tmp/ <span class="number">4913</span></div><div class="line"><span class="number">2014</span><span class="regexp">/12/</span><span class="number">11</span><span class="number">-15</span>:<span class="number">40</span>:<span class="number">32</span> <span class="regexp">/root/</span>tmp/ <span class="number">4913</span></div><div class="line"><span class="number">2014</span><span class="regexp">/12/</span><span class="number">11</span><span class="number">-15</span>:<span class="number">40</span>:<span class="number">32</span> <span class="regexp">/root/</span>tmp/ <span class="number">4913</span></div><div class="line"><span class="number">2014</span><span class="regexp">/12/</span><span class="number">11</span><span class="number">-15</span>:<span class="number">40</span>:<span class="number">32</span> <span class="regexp">/root/</span>tmp/ <span class="keyword">new</span>.txt</div><div class="line"><span class="number">2014</span><span class="regexp">/12/</span><span class="number">11</span><span class="number">-15</span>:<span class="number">40</span>:<span class="number">32</span> <span class="regexp">/root/</span>tmp/ <span class="keyword">new</span>.txt~</div><div class="line"><span class="number">2014</span><span class="regexp">/12/</span><span class="number">11</span><span class="number">-15</span>:<span class="number">40</span>:<span class="number">32</span> <span class="regexp">/root/</span>tmp/ <span class="keyword">new</span>.txt</div><div class="line">...</div></pre></td></tr></table></figure></p>
<h1 id="3-rsync组合inotify-tools完成实时同步"><a href="#3-rsync组合inotify-tools完成实时同步" class="headerlink" title="3. rsync组合inotify-tools完成实时同步"></a>3. rsync组合inotify-tools完成实时同步</h1><p>这一步的核心其实就是在客户端创建一个脚本<code>rsync.sh</code>，适用<code>inotifywait</code>监控本地目录的变化，触发<code>rsync</code>将变化的文件传输到远程备份服务器上。为了更接近实战，我们要求一部分子目录不同步，如<code>/root/tmp/log</code>和临时文件。</p>
<h2 id="3-1-创建排除在外不同步的文件列表"><a href="#3-1-创建排除在外不同步的文件列表" class="headerlink" title="3.1 创建排除在外不同步的文件列表"></a>3.1 创建排除在外不同步的文件列表</h2><p>排除不需要同步的文件或目录有两种做法，第一种是inotify监控整个目录，在rsync中加入排除选项，简单；第二种是inotify排除部分不监控的目录，同时rsync中也要加入排除选项，可以减少不必要的网络带宽和CPU消耗。我们选择第二种。</p>
<h3 id="3-1-1-inotifywait排除"><a href="#3-1-1-inotifywait排除" class="headerlink" title="3.1.1 inotifywait排除"></a>3.1.1 inotifywait排除</h3><p>这个操作在客户端进行，假设<code>/tmp/src/mail/2014/</code>以及<code>/tmp/src/mail/2015/cache/</code>目录下的所有文件不用同步，所以不需要监控，<code>/tmp/src/</code>下的其他文件和目录都同步。（其实对于打开的临时文件，可以不监听<code>modify</code>时间而改成监听<code>close_write</code>）</p>
<p>inotifywait排除监控目录有<code>--exclude &lt;pattern&gt;</code>和<code>--fromfile &lt;file&gt;</code>两种格式，并且可以同时使用，但主要前者可以用正则，而后者只能是具体的目录或文件。<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># vi /etc/inotify_exclude.lst：</span></div><div class="line"><span class="meta-keyword">/tmp/</span>src/pdf</div><div class="line">@<span class="meta-keyword">/tmp/</span>src/<span class="number">2014</span></div></pre></td></tr></table></figure></p>
<p>使用<code>fromfile</code>格式只能用绝对路径，不能使用诸如<code>*</code>正则表达式去匹配，<code>@</code>表示排除。</p>
<p>如果要排除的格式比较复杂，必须使用正则，那只能在<code>inotifywait</code>中加入选项，如<code>--exclude &#39;(.*/*\.log|.*/*\.swp)$|^/tmp/src/mail/(2014|201.*/cache.*)&#39;</code>，表示排除/tmp/src/mail/以下的2014目录，和所有201*目录下的带cache的文件或目录，以及/tmp/src目录下所有的以.log或.swp结尾的文件。</p>
<h3 id="3-1-2-rsync排除"><a href="#3-1-2-rsync排除" class="headerlink" title="3.1.2 rsync排除"></a>3.1.2 rsync排除</h3><p>使用inotifywait排除监控目录的情况下，必须同时使用rsync排除对应的目录，否则只要有触发同步操作，必然会导致不该同步的目录也会同步。与inotifywait类似，rsync的同步也有<code>--exclude</code>和<code>--exclude-from</code>两种写法。</p>
<p>个人还是习惯将要排除同步的目录卸载单独的文件列表里，便于管理。使用<code>--include-from=FILE</code>时，排除文件列表用绝对路径，但FILE里面的内容请用相对路径，如：<br><code>/etc/rsyncd.d/rsync_exclude.lst</code>：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mail/<span class="number">2014</span>/</div><div class="line">mail/<span class="number">201</span>*/<span class="number">201</span>*/<span class="number">201</span>*/.??*</div><div class="line">mail??*</div><div class="line">src<span class="comment">/*.html*</span></div><div class="line">src/js/</div><div class="line">src/ext3/</div><div class="line">src/2014/20140[1-9]/</div><div class="line">src/201*/<span class="number">201</span>*/<span class="number">201</span>*/.??*</div><div class="line">membermail/</div><div class="line">membermail??*</div><div class="line">membermail/<span class="number">201</span>*/<span class="number">201</span>*/<span class="number">201</span>*/.??*</div></pre></td></tr></table></figure></p>
<p>排除同步的内容包括，mail下的2014目录，类似2015/201501/20150101/下的临时或隐藏文件，等。</p>
<h2 id="3-2-客户端同步到远程的脚本rsync-sh"><a href="#3-2-客户端同步到远程的脚本rsync-sh" class="headerlink" title="3.2 客户端同步到远程的脚本rsync.sh"></a>3.2 客户端同步到远程的脚本<code>rsync.sh</code></h2><p>下面是一个完整的同步脚本，请根据需要进行裁剪，<code>rsync.sh</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#rsync auto sync script with inotify</span></div><div class="line"><span class="comment">#2014-12-11 Sean</span></div><div class="line"><span class="comment">#variables</span></div><div class="line">current_date=$(date +%Y%m%d_%H%M%S)</div><div class="line">source_path=/tmp/src/</div><div class="line">log_file=/var/<span class="built_in">log</span>/rsync_client.log</div><div class="line"></div><div class="line"><span class="comment">#rsync</span></div><div class="line">rsync_server=172.29.88.223</div><div class="line">rsync_user=sean</div><div class="line">rsync_pwd=/etc/rsync_client.pwd</div><div class="line">rsync_module=module_test</div><div class="line">INOTIFY_EXCLUDE=<span class="string">'(.*/*\.log|.*/*\.swp)$|^/tmp/src/mail/(2014|20.*/.*che.*)'</span></div><div class="line">RSYNC_EXCLUDE=<span class="string">'/etc/rsyncd.d/rsync_exclude.lst'</span></div><div class="line"></div><div class="line"><span class="comment">#rsync client pwd check</span></div><div class="line"><span class="keyword">if</span> [ ! <span class="_">-e</span> <span class="variable">$&#123;rsync_pwd&#125;</span> ];<span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"rsync client passwod file <span class="variable">$&#123;rsync_pwd&#125;</span> does not exist!"</span></div><div class="line">    <span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment">#inotify_function</span></div><div class="line"><span class="function"><span class="title">inotify_fun</span></span>()&#123;</div><div class="line">    /usr/bin/inotifywait -mrq --timefmt <span class="string">'%Y/%m/%d-%H:%M:%S'</span> --format <span class="string">'%T %w %f'</span> \</div><div class="line">          --exclude <span class="variable">$&#123;INOTIFY_EXCLUDE&#125;</span>  <span class="_">-e</span> modify,delete,create,move,attrib <span class="variable">$&#123;source_path&#125;</span> \</div><div class="line">          | <span class="keyword">while</span> <span class="built_in">read</span> file</div><div class="line">      <span class="keyword">do</span></div><div class="line">          /usr/bin/rsync -auvrtzopgP --exclude-from=<span class="variable">$&#123;RSYNC_EXCLUDE&#125;</span> --progress --bwlimit=200 --password-file=<span class="variable">$&#123;rsync_pwd&#125;</span> <span class="variable">$&#123;source_path&#125;</span> <span class="variable">$&#123;rsync_user&#125;</span>@<span class="variable">$&#123;rsync_server&#125;</span>::<span class="variable">$&#123;rsync_module&#125;</span> </div><div class="line">      <span class="keyword">done</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">#inotify log</span></div><div class="line">inotify_fun &gt;&gt; <span class="variable">$&#123;log_file&#125;</span> 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure></p>
<p><code>--bwlimit=200</code>用于限制传输速率最大200kb，因为在实际应用中发现如果不做速率限制，会导致巨大的CPU消耗。</p>
<p>在客户端运行脚本<code># ./rsync.sh</code>即可实时同步目录。</p>
<p><strong>疑问</strong><br>对于rsync的同步海量存在一个疑问，假如我的文件数很多即使在排除不监控和不同步目录的情况下依然有10万个文件，仅文件列表就达10M，那么岂不是每一次有文件产生或修改都会触发同步，很容易导致大部分情况下在传输文件列表和进行列表的比对，仅同步一个小文件而使用的网络带宽和CPU代价很高，特别是网络状况不佳时，上一次的列表还未传送完，又有新的文件产生触发发送文件列表。不知道rsync内部有没有这样的处理？</p>
<p>其他功能：<a href="http://seanlook/2014/12/13/rsync_two-way_eg" target="_blank" rel="external">双向同步</a>、<a href="http://seanlook2014/12/16/rsync_sersyc2_muti_remote_dest" target="_blank" rel="external">sersync2实时同步多远程服务器</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://rsync.samba.org/how-rsync-works.html" target="_blank" rel="external">How Rsync Works</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/linux/l-inotify/" target="_blank" rel="external">用 inotify 监控 Linux 文件系统事件</a></li>
<li><a href="http://www.infoq.com/cn/articles/inotify-linux-file-system-event-monitoring" target="_blank" rel="external">Inotify: 高效、实时的Linux文件系统事件监控框架</a></li>
<li><a href="http://coolshell.cn/articles/7425.html" target="_blank" rel="external">rsync 的核心算法</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tar命令高级用法——备份数据]]></title>
      <url>http://seanlook.com/2014/12/08/tar_backup_filesystem/</url>
      <content type="html"><![CDATA[<p>Linux上有功能强大的tar命令，tar最初是为了制作磁带备份（tape archive）而设计的，它的作用是把文件和目录备份到磁带中，然后从磁带中提取或恢复文件。现在我们可以使用tar来备份数据到任何存储介质上。它是文件级备份，不必考虑底层文件系统类别，并且支持增量备份。</p>
<h2 id="1-部分常用选项"><a href="#1-部分常用选项" class="headerlink" title="1. 部分常用选项"></a>1. 部分常用选项</h2><ul>
<li><code>-z, --gzip</code>：使用gzip工具（解）压缩，后缀一般为<code>.gz</code></li>
<li><code>-c, --create</code>：tar打包，后缀一般为<code>.tar</code></li>
<li><code>-f, --file=</code>：后面立刻接打包或压缩后得到的文件名</li>
<li><code>-x, --extract</code>：解包命令，与<code>-c</code>对应</li>
<li><code>-p</code>：保留备份数据的原本权限和属性</li>
<li><code>-g</code>：后接增量备份的快照文件</li>
<li><code>-C</code>：指定解压缩的目录</li>
<li><code>--exclude</code>：排除不打包的目录或文件，支持正则匹配</li>
</ul>
<p>其他</p>
<ul>
<li><code>-X, --exclude-from</code>：在一个文件中列出要排除的目录或文件（在<code>--exclude=</code>较多时使用）</li>
<li><code>-t, --list</code>：列出备份档案中的文件列表，不与<code>-c</code>、<code>-x</code>同时出现</li>
<li><code>-j, --bzip2</code>：使用bzip2工具（解）压缩，后缀一般为<code>.bz2</code></li>
<li><code>-P</code>：保留绝对路径，解压时同样会自动解压到绝对路径下</li>
<li><code>-v</code>：（解）压缩过程显示文件处理过程，常用但不建议对大型文件使用</li>
</ul>
<h2 id="2-增量备份（网站）数据"><a href="#2-增量备份（网站）数据" class="headerlink" title="2. 增量备份（网站）数据"></a>2. 增量备份（网站）数据</h2><p>许多系统（应用或网站）每天都有静态文件产生，对于一些比较重要的静态文件如果有进行定期备份的需求，就可以通过tar打包压缩备份到指定的地方，特别是对一些总文件比较大比较多的情况，还可以利用-g选项来做增量备份。</p>
<p>备份的目录最好使用相对路径，也就是进入到需要备份的根目录下</p>
<p>具体示例方法如下。<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">备份当前目录下的所有文件</div><div class="line"><span class="meta"># tar -g /tmp/snapshot_data.snap -zcpf /tmp/data01.tar.gz .</span></div><div class="line"></div><div class="line">在需要恢复的目录下解压恢复</div><div class="line"><span class="meta"># tar -zxpf /tmp/data01.tar.gz -C .</span></div></pre></td></tr></table></figure></p>
<p><code>-g</code>选项可以理解备份时给目录文件做一个快照，记录权限和属性等信息，第一次备份时<code>/tmp/snapshot_data.snap</code>不存在，会新建一个并做完全备份。当目录下的文件有修改后，再次执行第一条备份命令（记得修改后面的档案文件名），会自动根据<code>-g</code>指定的快照文件，增量备份修改过的文件，包括权限和属性，没有动过的文件不会重复备份。</p>
<a id="more"></a>
<p>另外需要注意上面的恢复，是“保留恢复”，即存在相同文件名的文件会被覆盖，而原目录下已存在（但备份档案里没有）的，会依然保留。所以如果你想完全恢复到与备份文件一模一样，需要清空原目录。如果有增量备份档案，则还需要使用同样的方式分别解压这些档案，而且要注意顺序。</p>
<p>下面演示一个比较综合的例子，要求：</p>
<ul>
<li>备份<code>/tmp/data</code>目录，但<code>cache</code>目录以及临时文件排除在外</li>
<li>由于目录比较大（&gt;4G），所以全备时分割备份的档案（如每个备份档案文件最大1G）</li>
<li>保留所有文件的权限和属性，如用户组和读写权限</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># cd <span class="regexp">/tmp/</span>data</div><div class="line"></div><div class="line">做一次完全备份</div><div class="line"># rm -f <span class="regexp">/tmp/</span>snapshot_data.snap</div><div class="line"># tar -g <span class="regexp">/tmp/</span>snapshot_data.snap -zcpf - --<span class="keyword">exclude</span>=.<span class="regexp">/cache ./</span> | split -b <span class="number">1024</span>M - <span class="regexp">/tmp/</span>bak_data$(date -I).tar.gz_</div><div class="line">分割后文件名后会依次加上aa,ab,ac,...，上面最终的备份归档会保存成</div><div class="line">bak_data2014-<span class="number">12</span>-<span class="number">07</span>.tar.gz_aa</div><div class="line">bak_data2014-<span class="number">12</span>-<span class="number">07</span>.tar.gz_ab</div><div class="line">bak_data2014-<span class="number">12</span>-<span class="number">07</span>.tar.gz_ac</div><div class="line">...</div><div class="line"></div><div class="line">增量备份</div><div class="line">可以是与完全备份一模一样的命令，但需要注意的是假如你一天备份多次，可能导致档案文件名重复，那么就会导致</div><div class="line">备份实现，因为split依然会从aa,ab开始命名，如果一天的文件产生（修改）量不是特别大，那么建议增量部分不</div><div class="line">分割处理了：（ 一定要分割的话，文件名加入更细致的时间如$(date +%Y-%m-%d_%H) ）</div><div class="line"># tar -g <span class="regexp">/tmp/</span>snapshot_data.snap -zcpf <span class="regexp">/tmp/</span>bak_data2014-<span class="number">12</span>-<span class="number">07</span>.tar.gz --<span class="keyword">exclude</span>=.<span class="regexp">/cache ./</span></div><div class="line"></div><div class="line">第二天增备</div><div class="line"># tar -g <span class="regexp">/tmp/</span>snapshot_data.snap -zcpf <span class="regexp">/tmp/</span>bak_data2014-<span class="number">12</span>-<span class="number">08</span>.tar.gz --<span class="keyword">exclude</span>=.<span class="regexp">/cache ./</span></div></pre></td></tr></table></figure>
<p>恢复过程<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">恢复完全备份的档案文件</div><div class="line">可以选择是否先清空/tmp/<span class="class"><span class="keyword">data</span>/目录</span></div><div class="line"><span class="meta"># cat /tmp/bak_data2014-12-07.tar.gz_* | tar -zxpf - -C /tmp/data/</span></div><div class="line"></div><div class="line">恢复增量备份的档案文件</div><div class="line">$ tar –zxpf /tmp/bak_data2014<span class="number">-12</span><span class="number">-07.</span>tar.gz -<span class="type">C</span> /tmp/<span class="class"><span class="keyword">data</span>/</span></div><div class="line">$ tar –zxpf /tmp/bak_data2014<span class="number">-12</span><span class="number">-08.</span>tar.gz -<span class="type">C</span> /tmp/<span class="class"><span class="keyword">data</span>/</span></div><div class="line">...</div><div class="line">一定要保证是按时间顺序恢复的，像下面文件名规则也可以使用上面通配符的形式</div></pre></td></tr></table></figure></p>
<p>如果需要定期备份，如每周一次全备，每天一次增量备份，则可以结合crontab实现。</p>
<h2 id="3-备份文件系统"><a href="#3-备份文件系统" class="headerlink" title="3. 备份文件系统"></a>3. 备份文件系统</h2><p>备份文件系统方法有很多，例如cpio, rsync, dump, tar，这里演示一个通过<code>tar</code>备份整个Linux系统的例子，整个备份与恢复过程与上面类似。<br>首先Linux（这里是CentOS）有一部分目录是没必要备份的，如<code>/proc</code>、<code>/lost+found</code>、<code>/sys</code>、<code>/mnt</code>、<code>/media</code>、<code>/dev</code>、<code>/proc</code>、<code>/tmp</code>，如果是备份到磁带<code>/dev/st0</code>则不必关心那么多，因为我这里是备份到本地<code>/backup</code>目录，所以也需要排除，还有其它一些NFS或者网络存储挂载的目录。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">创建排除列表文件</div><div class="line"># vi /<span class="keyword">backup/backup_tar_exclude.list</span></div><div class="line">/<span class="keyword">backup</span></div><div class="line">/<span class="meta">proc</span></div><div class="line">/lost+found</div><div class="line">/sys</div><div class="line">/mnt</div><div class="line">/media</div><div class="line">/dev</div><div class="line">/tmp</div><div class="line"></div><div class="line">$ tar -zcpf /<span class="keyword">backup/backup_full.tar.gz </span>-g /<span class="keyword">backup/tar_snapshot.snap </span>--exclude-from=/<span class="keyword">backup/tar_exclude.list </span>/</div></pre></td></tr></table></figure>
<h2 id="4-注意"><a href="#4-注意" class="headerlink" title="4. 注意"></a>4. 注意</h2><p>使用tar无论是备份数据还是文件系统，需要考虑是在原系统上恢复还是另一个新的系统上恢复。</p>
<ul>
<li>tar备份极度依赖于文件的atime属性，</li>
<li>文件所属用户是根据用户ID来确定的，异机恢复需要考虑相同用户拥有相同USERID</li>
<li>备份和恢复的过程尽量不要运行其他进程，可能会导致数据不一致</li>
<li>软硬连接文件可以正常恢复</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://lesca.me/archives/how-to-incrementally-backup-linux-with-gnu-tar.html" target="_blank" rel="external">tar高级教程：增量备份、定时备份、网络备份</a></li>
<li><a href="http://tech.watchstor.com/backup-and-archiving-115687.htm" target="_blank" rel="external">Linux服务器数据备份恢复的详细讲解</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL备份命令mysqldump参数说明与示例]]></title>
      <url>http://seanlook.com/2014/12/05/mysql_mysqldump_options_examples/</url>
      <content type="html"><![CDATA[<h3 id="1-语法选项说明"><a href="#1-语法选项说明" class="headerlink" title="1. 语法选项说明"></a>1. 语法选项说明</h3><ul>
<li><code>-h, --host=name</code><br>主机名</li>
<li><p><code>-P[ port_num], --port=port_num</code><br>用于连接MySQL服务器的的TCP/IP端口号</p>
</li>
<li><p><code>--master-data</code><br>这个选项可以把binlog的位置和文件名添加到输出中，如果等于1，将会打印成一个<code>CHANGE MASTER</code>命令；如果等于2，会加上注释前缀。并且这个选项会自动打开<code>--lock-all-tables</code>，除非同时设置了<code>--single-transaction</code>（这种情况下，全局读锁只会在开始dump的时候加上一小段时间，不要忘了阅读<code>--single-transaction</code>的部分）。在任何情况下，所有日志中的操作都会发生在导出的准确时刻。这个选项会自动关闭<code>--lock-tables</code>。 </p>
</li>
<li><p><code>-x, --lock-all-tables</code><br>锁定所有库中所有的表。这是通过在整个dump的过程中持有全局读锁来实现的。会自动关闭<code>--single-transaction</code>和<code>--lock-tables</code>。</p>
</li>
<li><p><code>--single-transaction</code><br>通过将导出操作封装在一个事务内来使得导出的数据是一个一致性快照。只有当表使用支持MVCC的存储引擎（目前只有InnoDB）时才可以工作；其他引擎不能保证导出是一致的。当导出开启了<code>--single-transaction</code>选项时，要确保导出文件有效（正确的表数据和二进制日志位置），就要保证没有其他连接会执行如下语句：<code>ALTER TABLE, DROP TABLE, RENAME TABLE, TRUNCATE TABLE</code>，这会导致一致性快照失效。这个选项开启后会自动关闭<code>--lock-tables</code>。 </p>
</li>
<li><p><code>-l, --lock-tables</code><br>对所有表加读锁。（默认是打开的，用<code>--skip-lock-tables</code>来关闭，上面的选项会把关闭<code>-l</code>选项）</p>
</li>
<li><p><code>-F, --flush-logs</code><br>在开始导出前刷新服务器的日志文件。注意，如果你一次性导出很多数据库（使用 <code>-databases=</code>或<code>--all-databases</code>选项），导出每个库时都会触发日志刷新。例外是当使用了<code>--lock-all-tables</code>或<code>--master-data</code>时：日志只会被刷新一次，那个时候所有表都会被锁住。所以如果你希望你的导出和日志刷新发生在同一个确定的时刻，你需要使用<code>--lock-all-tables</code>，或者<code>--master-data</code>配合<code>--flush-logs</code>。</p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p><code>--delete-master-logs</code><br>备份完成后删除主库上的日志。这个选项会自动打开<code>`--master-data</code>。</p>
</li>
<li><p><code>--opt</code><br>同<code>-add-drop-table, --add-locks, --create-options, --quick, --extended-insert, --lock-tables, --set-charset, --disable-keys</code>。（默认已开启，<code>--skip-opt</code>关闭表示这些选项保持它的默认值）应该给你为读入一个MySQL服务器的尽可能最快的导出，<code>--compact</code>差不多是禁用上面的选项。</p>
</li>
<li><code>-q, --quick</code><br>不缓冲查询，直接导出至stdout。（默认打开，用<code>--skip-quick</code>来关闭）该选项用于转储大的表。</li>
<li><code>--set-charset</code><br>将<code>SET NAMES default_character_set</code>加到输出中。该选项默认启用。要想禁用<code>SET NAMES</code>语句，使用<code>--skip-set-charset</code>。</li>
<li><code>--add-drop-tables</code><br>在每个<code>CREATE TABLE</code>语句前添加<code>DROP TABLE</code>语句。默认开启。</li>
<li><code>--add-locks</code><br>在每个表导出之前增加<code>LOCK TABLES</code>并且之后<code>UNLOCK TABLE</code>。(为了使得更快地插入到MySQL)。默认开启。</li>
<li><code>--create-option</code><br>在CREATE TABLE语句中包括所有MySQL表选项。默认开启，使用<code>--skip-create-options</code>来关闭。</li>
<li><p><code>-e, --extended-insert</code><br>使用全新多行INSERT语法，默认开启（给出更紧缩并且更快的插入语句）  </p>
</li>
<li><p><code>-d, --no-data</code><br>不写入表的任何行信息。如果你只想得到一个表的结构的导出，这是很有用的。</p>
</li>
<li><p><code>--add-drop-database</code><br>在create数据库之前先<code>DROP DATABASE</code>，默认关闭，所以一般在导入时需要保证数据库已存在。</p>
</li>
<li><p><code>--default-character-set=</code><br>使用的默认字符集。如果没有指定，mysqldump使用utf8。</p>
</li>
<li><p><code>-B, --databases</code><br>转储几个数据库。通常情况，mysqldump将命令行中的第1个名字参量看作数据库名，后面的名看作表名。使用该选项，它将所有名字参量看作数据库名。<code>CREATE DATABASE IF NOT EXISTS db_name</code>和<code>USE db_name</code>语句包含在每个新数据库前的输出中。</p>
</li>
<li><p><code>--tables</code><br>覆盖<code>--database</code>选项。选项后面的所有参量被看作表名。</p>
</li>
<li><p><code>-u[ name], --user=</code><br>连接服务器时使用的MySQL用户名。</p>
</li>
<li><code>-p[password], --password[=password]</code><br>连接服务器时使用的密码。如果你使用短选项形式(-p)，不能在选项和密码之间有一个空格。如果在命令行中，忽略了<code>--password</code>或<code>-p</code>选项后面的 密码值，将提示你输入一个。</li>
</ul>
<h3 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h3><p>导出一个数据库：<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">$</span> <span class="comment">mysqldump</span> <span class="literal">-</span><span class="comment">h</span> <span class="comment">localhost</span> <span class="literal">-</span><span class="comment">uroot</span> <span class="literal">-</span><span class="comment">ppassword</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">master</span><span class="literal">-</span><span class="comment">data=2</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">single</span><span class="literal">-</span><span class="comment">transaction</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">add</span><span class="literal">-</span><span class="comment">drop</span><span class="literal">-</span><span class="comment">table</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">create</span><span class="literal">-</span><span class="comment">options</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">quick</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">extended</span><span class="literal">-</span><span class="comment">insert</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">default</span><span class="literal">-</span><span class="comment">character</span><span class="literal">-</span><span class="comment">set=utf8</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">databases</span> <span class="comment">discuz</span> &gt; <span class="comment">backup</span><span class="literal">-</span><span class="comment">file</span><span class="string">.</span><span class="comment">sql</span></div></pre></td></tr></table></figure></p>
<p>导出一个表：<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">$</span> <span class="comment">mysqldump</span> <span class="literal">-</span><span class="comment">u</span> <span class="comment">pak</span> <span class="literal">-</span><span class="comment">p</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">opt</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">flush</span><span class="literal">-</span><span class="comment">logs</span> <span class="comment">pak</span> <span class="comment">t_user</span> &gt; <span class="comment">pak</span><span class="literal">-</span><span class="comment">t_user</span><span class="string">.</span><span class="comment">sql</span></div></pre></td></tr></table></figure></p>
<p>将备份文件压缩：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> mysqldump -hhostname -uusername -ppassword --databases dbname | gzip &gt; backup-<span class="keyword">file</span>.sql.gz</div><div class="line">对应的还原动作为</div><div class="line">gunzip &lt; backup-<span class="keyword">file</span>.sql.gz | mysql -uusername -ppassword dbname</div></pre></td></tr></table></figure></p>
<p>导入数据库：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql&gt; use target_dbname</div><div class="line">mysql&gt; <span class="keyword">source</span> <span class="regexp">/mysql/</span>backup<span class="regexp">/path/</span>backup-<span class="keyword">file</span>.sql</div><div class="line">或</div><div class="line">$ mysql target_dbname &lt;backup-<span class="keyword">file</span>.sql</div></pre></td></tr></table></figure></p>
<p>导入还有一个<code>mysqlimport</code>命令，暂未研究。</p>
<p>直接从一个数据库向另一个数据库转储：</p>
<pre><code>mysqldump -u用户名 -p --opt dbname | mysql --host remote_host -C dbname2
</code></pre><p>关于增量备份与恢复请参考：<a href="http://seanlook.com/2014/12/05/mysql_incremental_backup_example/">MySQL增量备份与恢复实例</a>。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://dev.mysql.com/doc/refman/5.5/en/mysqldump.html" target="_blank" rel="external">4.5.4 mysqldump — A Database Backup Program</a></li>
<li><a href="http://laoguang.blog.51cto.com/6013350/1078820" target="_blank" rel="external">总结：MySQL备份与恢复的三种方法</a></li>
<li><a href="http://www.cnblogs.com/Cherie/p/3309456.html" target="_blank" rel="external">mysql备份与还原（含增量）</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL增量备份与恢复实例]]></title>
      <url>http://seanlook.com/2014/12/05/mysql_incremental_backup_example/</url>
      <content type="html"><![CDATA[<p>小量的数据库可以每天进行完整备份，因为这也用不了多少时间，但当数据库很大时，就不太可能每天进行一次完整备份了，这时候就可以使用增量备份。增量备份的原理就是使用了mysql的binlog日志。<br>本次操作的MySQL版本为<code>5.5.40 for Linux (x86_64)</code>。</p>
<p>增量备份要确保打开了二进制日志，参考<a href="http://seanlook.com/2014/12/04/mysql_log_binlog/">mysql的日志系统</a>：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show <span class="keyword">variables</span> like <span class="comment">'%log_bin%'</span>;</div></pre></td></tr></table></figure></p>
<p>首先对pak数据库做一个完整备份：<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">$</span> <span class="comment">mysqldump</span> <span class="literal">-</span><span class="comment">h</span> <span class="comment">localhost</span> <span class="literal">-</span><span class="comment">upak</span> <span class="literal">-</span><span class="comment">ppwd</span> <span class="literal">-</span><span class="comment">P3306</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">master</span><span class="literal">-</span><span class="comment">data=2</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">single</span><span class="literal">-</span><span class="comment">transaction</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">opt</span> <span class="comment">pak</span> &gt; <span class="comment">pak_bak_full</span><span class="string">.</span><span class="comment">sql</span></div></pre></td></tr></table></figure></p>
<p>这时候就会得到一个全备文件pak_bak_full.sql。mysqldump操作会导致滚动一次log，假设新的binlog文件是mysql-bin.000002。</p>
<h3 id="1-模拟插入数据和误操作"><a href="#1-模拟插入数据和误操作" class="headerlink" title="1. 模拟插入数据和误操作"></a>1. 模拟插入数据和误操作</h3><p>a. 在pak库的某个表插入一些数据，然后执行<code>flush logs</code>命令。这时将会产生一个新的二进制日志文件mysql-bin.000003，mysql-bin.000002则保存了全备过后的所有更改，既增加记录的操作也保存在了mysql-bin.00002中。</p>
<p>b. 再在pak库中的t_user表中增加两条记录，然后误删除t_user表。t_user中增加记录的操作和删除表的操作都记录在mysql-bin.000003中。</p>
<h3 id="2-开始恢复"><a href="#2-开始恢复" class="headerlink" title="2. 开始恢复"></a>2. 开始恢复</h3><p>恢复过程不要记录日志：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql &gt; <span class="keyword">set</span> global <span class="comment">sql_log_bin=0</span>;</div></pre></td></tr></table></figure></p>
<h3 id="3-首先导入全备数据"><a href="#3-首先导入全备数据" class="headerlink" title="3. 首先导入全备数据"></a>3. 首先导入全备数据</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mysql -h localhost -upak -ppwd <span class="params">&lt; pak_bak_full.sql</span></div><div class="line">或</div><div class="line">mysql&gt; source <span class="meta-keyword">/path/</span>backup/pak_bak_full.sql</div></pre></td></tr></table></figure>
<p>我们也可以看到全备时的binlog位置：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">head -<span class="number">50</span> backup-file.sql |grep 'CHANGE <span class="literal">MASTER</span>'</div><div class="line">-- CHANGE <span class="keyword">MASTER</span> <span class="title">TO</span> <span class="attr">MASTER_LOG_FILE=</span>'mysql-bin.<span class="number">000001</span>', <span class="attr">MASTER_LOG_POS=</span><span class="number">4321</span>;</div></pre></td></tr></table></figure></p>
<p>查看当前所在二进制日志中的位置：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show <span class="keyword">master</span> <span class="title">status</span>;</div></pre></td></tr></table></figure></p>
<p>根据上面两个position能大概确定需要完整恢复哪几个binlog文件。</p>
<a id="more"></a>
<h3 id="4-恢复mysql-bin-000002"><a href="#4-恢复mysql-bin-000002" class="headerlink" title="4. 恢复mysql-bin.000002"></a>4. 恢复mysql-bin.000002</h3><p>在待恢复的position或时间点以前、全备以后的binlog需要全部恢复，多个文件以空格隔开<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mysqlbinlog /var/<span class="class"><span class="keyword">lib</span>/<span class="title">mysql</span>/<span class="title">mysql</span>-<span class="title">bin</span>.000002 | <span class="title">mysql</span> -<span class="title">uroot</span> -<span class="title">p</span></span></div></pre></td></tr></table></figure></p>
<p>此时查询可以得到前两条数据。</p>
<h3 id="5-恢复部分mysql-bin-000003"><a href="#5-恢复部分mysql-bin-000003" class="headerlink" title="5. 恢复部分mysql-bin.000003"></a>5. 恢复部分mysql-bin.000003</h3><p>这个日志中包括了新增记录和误删表两个部分，我们需要恢复到新增记录之后、误删操作以前的位置。</p>
<p>如果知道误操作的命令如<code>DROP TABLE</code>，则可以通过下面的方法在binlog文件中找到误操作之前的那个position：<br>（如下面的信息显示，误操作<code>DROP TABLE</code>之前的pos是775，在datetime 141204 15:08:04或pos 882时完成<code>DROP TABLE</code>操作）<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ mysqlbinlog /var/<span class="class"><span class="keyword">lib</span>/<span class="title">mysql</span>/<span class="title">mysql</span>-<span class="title">bin</span>.000003 |<span class="title">grep</span> -<span class="title">C</span> 5 '<span class="title">DROP</span> <span class="title">TABLE</span>'</span></div><div class="line"><span class="comment">#141204 15:07:05 server id 1  end_log_pos 775 	Xid = 376</span></div><div class="line">COMMIT/*!*<span class="regexp">/;</span></div><div class="line"># at 775</div><div class="line">#141204 15:08:04 server id 1  end_log_pos 882 	Query	thread_id=10	exec_time=0	error_code=0</div><div class="line">SET TIMESTAMP=1417676884/*!*<span class="regexp">/;</span></div><div class="line">DROP TABLE `t_user` /* generated by server *<span class="regexp">/</span></div><div class="line">/*!*<span class="regexp">/;</span></div><div class="line"># at 882</div></pre></td></tr></table></figure></p>
<p>恢复命令：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mysqlbinlog /var/lib/mysql/mysql-bin<span class="number">.000003</span> --<span class="built_in">stop</span>-<span class="built_in">position</span>=<span class="number">775</span> | mysql -h localhost -uroot -p</div></pre></td></tr></table></figure></p>
<p>如果position难以确定，但知道需要恢复到的确切（服务器）时间，也可以使用datetime：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mysqlbinlog <span class="regexp">/var/</span>lib<span class="regexp">/mysql/my</span>sql-bin.<span class="number">000003</span> --stop-datetime=<span class="string">"2014-12-04 15:08:00"</span> | mysql -uroot -p</div></pre></td></tr></table></figure></p>
<p>如果不是误操作导致的，而是迁移数据库，那么不需要position或datetime，使用所有binlog文件增量恢复即可。</p>
<p>确定恢复成功后记得打开日志记录：</p>
<pre><code>mysql &gt; set global sql_log_bin=1;
</code></pre><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><ol>
<li><p>unknown variable ‘default-character-set=utf8’<br>在使用<code>mysqlbinlog</code>查看二进制日志的时候，提示下面的错误：</p>
<blockquote>
<p>/usr/local/mysql/bin/mysqlbinlog: unknown variable ‘default-character-set=utf8’</p>
</blockquote>
<p>原因是在我为了统一mysql客户端到服务端的的字符编码，在<code>/etc/my.cnf</code>文件的<code>[client]</code>、<code>[mysqld]</code>等节加入了<code>default-character-set = utf8</code>，<code>mysqlbinlog</code>会从<code>my.cnf</code>中的<code>[client]</code>读取配置，但奈何mysqlbinlog并不认识这个选项（据说是个bug）导致的。</p>
<p>应对这个bug的方法有两个：<br>第一，自然是注释到<code>[client]</code>中的这个字符集配置；<br>第二，改用<code>loose-default-character-set = utf8</code>。在选项前加了<code>loose-</code>，表示当程序不认识此选项时会略过此选项，并给出一个警告。</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Oracle单实例安装环境一键配置脚本（CentOS6 + 11gR2 ）]]></title>
      <url>http://seanlook.com/2014/12/02/oracle11gr2_installation_precheck_scripts/</url>
      <content type="html"><![CDATA[<p>这是自己曾经写的一个oracle 11gR2在CentOS6 x86_64服务器上，一键配置安装环境的脚本，能快速完成安装前环境的配置。</p>
<p>具体完成以下工作：</p>
<ul>
<li>备份系统配置文件，以防出错</li>
<li>添加oracle用户和用户组</li>
<li>创建安装目录</li>
<li>关闭selinux</li>
<li>在.bash_profile中修改环境变量</li>
<li>修改<code>sysctl.conf</code>文件</li>
<li>修改<code>limits.conf</code>文件</li>
<li>修改PAM的login文件</li>
<li>安装必要的依赖包</li>
</ul>
<p>使用注意事项：</p>
<ul>
<li>root的用户执行，<code>chmod +x oraclePreInstCheck.sh</code></li>
<li><code>./oraclePreInstCheck.sh</code>运行后，请仔细阅读说明，再决定是否使用该脚本</li>
<li>该脚本默认参数适用于2核4G内存的环境，你可以根据需要修改<code>kernelset()</code>部分</li>
<li>执行完后，你检查一下你的安装目录及权限（默认<code>/db/oracle</code>）</li>
<li>该脚本会有提示输入的地方，请不要挑战它的健壮性，比如输入安装根目录时，不要带入空格</li>
<li>脚本只需执行一次，修改系统参数如sysctl.conf之前，都有备份成<code>xxx.ora_bak</code></li>
<li>请<strong>确保</strong>可以通过yum方式安装软件包（使用挂载DVD镜像或联网）</li>
<li>建议结合<code>tee</code>将执行过程记录在日志文件中，<code>./oraclePreInstCheck.sh | tee oraclePreInstCheck.log</code></li>
</ul>
<a id="more"></a>
<p>oraclePreInstCheck.sh：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># author       zhouxiao</span></div><div class="line"><span class="comment"># date         2014-03-07</span></div><div class="line"><span class="comment"># description  oracle 11g R2 for linux 6.0+ x86_64 安装辅助脚本</span></div><div class="line"></div><div class="line"><span class="comment">#定义常量</span></div><div class="line">SYSCTL=/etc/sysctl.conf</div><div class="line">LIMITS=/etc/security/limits.conf</div><div class="line">PAM=/etc/pam.d/login</div><div class="line">PROFILE=/etc/profile</div><div class="line">BASH_PROFILE=/home/oracle/.bash_profile</div><div class="line"><span class="comment">#循环变量</span></div><div class="line">i=1</div><div class="line"><span class="comment">#定义显示颜色</span></div><div class="line"><span class="comment">#颜色定义 信息(33黄色) 警示(31红色) 过程(36浅蓝)</span></div><div class="line"></div><div class="line"><span class="function"><span class="title">usage</span></span>()</div><div class="line">&#123;</div><div class="line">    <span class="built_in">echo</span> <span class="string">"Scripts: initialize the required env settings for Oracle 11gR2 installation on Linux 6.0+ x86_64"</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"Make sure you have prepared conditions list bellow:"</span></div><div class="line">    <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"  \n\e[1;33m yum, hosts, user oracle's passwd, oralce SID, DISPLAY location \e[0m"</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"The Script will backup config files with .ora_bak in case failure "</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"The Script will set the following change:"</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"  - add user oracle and group oinstall/dba/oper, etc."</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"  - make directory ORACLE_HOME and change owner"</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"  - modify oracle .bash_profile"</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"  - modify /etc/sysctl.conf kernel parameters like shmall/shmmax"</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"  - modify /etc/security/limits.conf "</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"  - install necessary packages like libgcc/libaio/unixODBC, etc."</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"  - IF anything goes wrong, you need to recover ora_bak files manually."</span></div><div class="line">    <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n\e[1;33m Continue? (y/n [n]): \e[0m"</span></div><div class="line">    <span class="built_in">read</span> singal</div><div class="line">    <span class="keyword">if</span> [ <span class="variable">$singal</span> != <span class="string">"y"</span> ]; <span class="keyword">then</span></div><div class="line">        <span class="built_in">exit</span> 0</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"God Bless you! Settings started."</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">""</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">""</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">#判断执行用户是否root</span></div><div class="line"><span class="function"><span class="title">isroot</span></span>()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> [ <span class="variable">$USER</span> != <span class="string">"root"</span> ];<span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n\e[1;31m the user must be root,and now you user is <span class="variable">$USER</span>,please su to root. \e[0m"</span></div><div class="line">        <span class="built_in">exit</span>4</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n\e[1;36m check root ... OK! \e[0m"</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"><span class="comment">#挂在光盘到/mnt/cdrom目录下</span></div><div class="line"><span class="function"><span class="title">mount_cdrom</span></span>()</div><div class="line">&#123;</div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n\e[1;31m please insert RHEL to CDROM,press any key ...\e[0m"</span></div><div class="line"><span class="built_in">read</span> -n 1</div><div class="line"><span class="keyword">if</span> [ <span class="_">-d</span> /mnt/cdrom ];<span class="keyword">then</span></div><div class="line">     mount -t auto -o ro /dev/cdrom /mnt/cdrom</div><div class="line"><span class="keyword">else</span></div><div class="line">    mkdir -p /mnt/cdrom</div><div class="line">    mount -t auto -o ro /dev/cdrom /mnt/cdrom</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">if</span> [ $? <span class="_">-eq</span> 0 ];<span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n\e[1;36m CDROM mount on /mnt/cdrom ... OK! \e[0m"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"><span class="comment">#设置yum本地光盘源</span></div><div class="line"><span class="function"><span class="title">yum_repo</span></span>()</div><div class="line">&#123;</div><div class="line">    rm -rf /etc/yum.repos.d/* &amp;&amp; cat &lt;&lt;EOF &gt;&gt; /etc/yum.repos.d/Server.repo</div><div class="line">[Server]</div><div class="line">name=MyRPM</div><div class="line">baseurl=file:///mnt/cdrom/Server</div><div class="line">enabled=1</div><div class="line">gpgkey=file:///mnt/cdrom/RPM-GPG-KEY-redhat-release</div><div class="line">EOF</div><div class="line"><span class="keyword">if</span> [ $? <span class="_">-eq</span> 0 ];<span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n\e[1;36m  /etc/yum.repos.d/Server.repo  ... OK! \e[0m"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"><span class="comment">#添加oracle用户，添加oracle用户所属组oinstall及附加组dba</span></div><div class="line"><span class="function"><span class="title">ouseradd</span></span>()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> [[ `grep <span class="string">"oracle"</span> /etc/passwd` != <span class="string">""</span> ]];<span class="keyword">then</span></div><div class="line">        userdel -r oracle</div><div class="line">    <span class="keyword">fi</span></div><div class="line">    <span class="keyword">if</span> [[ `grep <span class="string">"oinstall"</span> /etc/group` = <span class="string">""</span> ]];<span class="keyword">then</span></div><div class="line">        groupadd -g 501 oinstall</div><div class="line">    <span class="keyword">fi</span></div><div class="line">    <span class="keyword">if</span> [[ `grep <span class="string">"dba"</span> /etc/group` = <span class="string">""</span> ]];<span class="keyword">then</span></div><div class="line">        groupadd -g 502 dba</div><div class="line">        groupadd -g 503 oper</div><div class="line">        groupadd -g 504 asmadmin</div><div class="line">        groupadd -g 506 asmdba</div><div class="line">        groupadd -g 505 asmoper</div><div class="line">    <span class="keyword">fi</span></div><div class="line">    useradd oracle -g oinstall -G dba,asmdba,oper &amp;&amp; <span class="built_in">echo</span> <span class="variable">$1</span> |passwd oracle --stdin</div><div class="line">    <span class="keyword">if</span> [ $? <span class="_">-eq</span> 0 ];<span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n\e[1;36m oracle's password updated successfully  --- OK! \e[0m"</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n\e[1;31m oracle's password set faild.   --- NO!\e[0m"</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"><span class="comment">#检查oracle所需软件包并安装</span></div><div class="line"><span class="function"><span class="title">packagecheck</span></span>()</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span> package <span class="keyword">in</span> binutils compat-libcap1 compat-libstdc++-33  compat-libstdc++-33*i686 gcc gcc-c++ glibc glibc-2*i686 glibc-devel glibc-devel-2*i686  glibc-headers-2.* libgcc libgcc-4*i686 libstdc++ libstdc++-4*i686 libstdc++-devel libstdc++-devel-4*i686 libaio-0* libaio-0*i686 libaio-devel libaio-devel-0*i686 unixODBC unixODBC-2*i686 unixODBC-devel unixODBC-devel-2*i686 make sysstat ksh </div><div class="line"><span class="keyword">do</span></div><div class="line">    rpm -q <span class="variable">$package</span> 2&gt; /dev/null</div><div class="line">    <span class="keyword">if</span> [ $? != 0 ];<span class="keyword">then</span></div><div class="line">        yum -y install <span class="variable">$package</span> 2&gt; /dev/null</div><div class="line">        <span class="built_in">echo</span>  <span class="_">-e</span> <span class="string">"\n\e[1;36m <span class="variable">$package</span> is installed ... OK! \e[0m"</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span></div><div class="line">&#125;</div><div class="line"><span class="comment">#安装桌面套件 X Window System / Desktop</span></div><div class="line"><span class="function"><span class="title">xdesk</span></span>()</div><div class="line">&#123;</div><div class="line">    LANG=C yum -y groupinstall <span class="string">"X Window System"</span> <span class="string">"Desktop"</span></div><div class="line">    <span class="keyword">if</span> [ $? <span class="_">-eq</span> 0 ];<span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span>  <span class="_">-e</span> <span class="string">"\n\e[1;36m <span class="variable">$package</span> is already installed ... OK! \e[0m"</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"><span class="comment"># 设置内核参数</span></div><div class="line"><span class="comment"># shmall 物理内存&lt;8G =2097152     &gt;8G MemTotal/4kb</span></div><div class="line"><span class="comment"># shmmax 物理内存&lt;8G = 4294967296 &gt;8G 16GMemTotal = 10G=10*1024^3</span></div><div class="line"><span class="function"><span class="title">kernelset</span></span>()</div><div class="line">&#123;</div><div class="line">    cp <span class="variable">$SYSCTL</span>&#123;,.ora_bak&#125; &amp;&amp; cat &lt;&lt;EOF &gt;&gt;<span class="variable">$SYSCTL</span></div><div class="line">fs.aio-max-nr = 1048576</div><div class="line">fs.file-max = 6815744</div><div class="line">kernel.shmall = 2097152</div><div class="line">kernel.shmmax = 4294967296</div><div class="line">kernel.shmmni = 4096</div><div class="line">kernel.sem = 250 32000 100 128</div><div class="line">net.ipv4.ip_local_port_range = 9000 65500</div><div class="line">net.core.rmem_default = 262144</div><div class="line">net.core.rmem_max = 4194304</div><div class="line">net.core.wmem_default = 262144</div><div class="line">net.core.wmem_max = 1048576</div><div class="line">EOF</div><div class="line">    <span class="keyword">if</span> [ $? <span class="_">-eq</span> 0 ];<span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n\e[1;36m kernel parameters updated successfully --- OK! \e[0m"</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">sysctl -p</div><div class="line">&#125;</div><div class="line"><span class="comment">#设置oracle资源限制</span></div><div class="line"><span class="function"><span class="title">oralimit</span></span>()</div><div class="line">&#123;</div><div class="line">    cp <span class="variable">$LIMITS</span>&#123;,.ora_bak&#125; &amp;&amp; cat &lt;&lt;EOF &gt;&gt; <span class="variable">$LIMITS</span></div><div class="line">oracle      soft    nproc   2047</div><div class="line">oracle      hard    nproc   16384</div><div class="line">oracle      soft    nofile  1024</div><div class="line">oracle      hard    nofile  65536</div><div class="line">oracle      soft    stack   10240</div><div class="line">EOF</div><div class="line">    <span class="keyword">if</span> [ $? <span class="_">-eq</span> 0 ];<span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span>  <span class="_">-e</span> <span class="string">"\n\e[1;36m <span class="variable">$LIMITS</span> updated successfully ... OK! \e[0m"</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">cat <span class="variable">$LIMITS</span> | grep <span class="string">'^o'</span></div><div class="line">&#125;</div><div class="line"><span class="comment">#设置login文件</span></div><div class="line"><span class="function"><span class="title">setlogin</span></span>()</div><div class="line">&#123;</div><div class="line">    cp <span class="variable">$PAM</span>&#123;,.ora_bak&#125; &amp;&amp; cat &lt;&lt;EOF &gt;&gt;<span class="variable">$PAM</span></div><div class="line">session     required    pam_limits.so</div><div class="line">EOF</div><div class="line">    <span class="keyword">if</span> [ $? <span class="_">-eq</span> 0 ];<span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n\e[1;36m  <span class="variable">$PAM</span> updated successfully ... OK! \e[0m"</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"><span class="comment">#设置profile文件</span></div><div class="line"><span class="function"><span class="title">setprofile</span></span>()</div><div class="line">&#123;</div><div class="line">    cp <span class="variable">$PROFILE</span>&#123;,.ora_bak&#125; &amp;&amp; cat &lt;&lt;EOF &gt;&gt;<span class="variable">$PROFILE</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$USER</span> = <span class="string">"oracle"</span> ];<span class="keyword">then</span></div><div class="line">    <span class="keyword">if</span> [ <span class="variable">$SHELL</span> = <span class="string">"/bin/ksh"</span> ];<span class="keyword">then</span></div><div class="line">        <span class="built_in">ulimit</span> -p 16384</div><div class="line">        <span class="built_in">ulimit</span> -n 65536</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">ulimit</span> -u 16384 -n 65536</div><div class="line">    <span class="keyword">fi</span></div><div class="line"><span class="keyword">fi</span></div><div class="line">EOF</div><div class="line">    <span class="keyword">if</span> [ $? <span class="_">-eq</span> 0 ];<span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n\e[1;36m  <span class="variable">$PROFILE</span> updated successfully ... OK! \e[0m"</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"><span class="comment">#设置oracle的profile文件</span></div><div class="line"><span class="function"><span class="title">setbash_profile</span></span>()</div><div class="line">&#123;</div><div class="line">    cp <span class="variable">$BASH_PROFILE</span>&#123;,.ora_bak&#125; &amp;&amp; cat &lt;&lt;EOF &gt;&gt; <span class="variable">$BASH_PROFILE</span></div><div class="line"><span class="built_in">umask</span> 022</div><div class="line"></div><div class="line"><span class="comment">#oracle settings</span></div><div class="line">TMP=/tmp; <span class="built_in">export</span> TMP</div><div class="line"></div><div class="line">TMPDIR=\<span class="variable">$TMP</span>; <span class="built_in">export</span> TMPDIR</div><div class="line">ORACLE_BASE=<span class="variable">$1</span>/oracle</div><div class="line">ORACLE_HOME=\<span class="variable">$ORACLE_BASE</span>/product/11.2.0/db_1</div><div class="line">ORACLE_SID=<span class="variable">$2</span></div><div class="line">PATH=\<span class="variable">$ORACLE_HOME</span>/bin/:\<span class="variable">$PATH</span></div><div class="line">LANG=en_US.UTF-8</div><div class="line">ORACLE_TERM=xterm</div><div class="line"><span class="built_in">export</span> ORACLE_BASE ORACLE_HOME ORACLE_SID ORACLE_TERM</div><div class="line"></div><div class="line">LD_LIBRARY_PATH=\<span class="variable">$ORACLE_HOME</span>/lib:/lib:/usr/lib; <span class="built_in">export</span> LD_LIBRARY_PATH</div><div class="line">CLASSPATH=\<span class="variable">$ORACLE_HOME</span>/jre:\<span class="variable">$ORACLE_HOME</span>/jlib:\<span class="variable">$ORACLE_HOME</span>/rdbms/jlib</div><div class="line"><span class="built_in">export</span> CLASSPATH</div><div class="line"></div><div class="line">EOF</div><div class="line">    <span class="keyword">if</span> [ $? <span class="_">-eq</span> 0 ];<span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n\e[1;36m <span class="variable">$BASH_PROFILE</span> updated successfully ... OK! \e[0m"</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">su - oracle -c <span class="built_in">source</span> <span class="variable">$BASH_PROFILE</span></div><div class="line">&#125;</div><div class="line"><span class="comment">#系统环境检查</span></div><div class="line"><span class="function"><span class="title">oscheck</span></span>()</div><div class="line">&#123;</div><div class="line"><span class="comment">#查看内存大小是否大于1G</span></div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n check MEM Size ..."</span></div><div class="line"><span class="keyword">if</span> [ `cat /proc/meminfo | grep MemTotal | awk <span class="string">'&#123;print $2&#125;'</span>` <span class="_">-lt</span> 1048576 ];<span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span>  <span class="_">-e</span> <span class="string">"\n\e[1;33m Memory Small \e[0m"</span></div><div class="line">    <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n\e[1;36m Memory checked PASS \e[0m"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="comment">#查看tmp空间大小</span></div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n check tmpfs Size ..."</span></div><div class="line">cp /etc/fstab&#123;,.ora_bak&#125;</div><div class="line"><span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span></div><div class="line"><span class="keyword">if</span> [ `df | awk <span class="string">'/tmpfs/ &#123;print $2&#125;'</span>` <span class="_">-lt</span> 1048576 ];<span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n\e[1;33m tmpfs Smaill \e[0m"</span></div><div class="line">    sed -i <span class="string">'/tmpfs/s/defaults/defaults,size=1G/'</span> /etc/fstab &amp;&amp; mount -o remount /dev/shm</div><div class="line">    <span class="keyword">if</span> [ $? != 0 ];<span class="keyword">then</span></div><div class="line">    i=i+1</div><div class="line">        <span class="keyword">if</span> [ <span class="variable">$i</span> <span class="_">-eq</span> 3 ];<span class="keyword">then</span></div><div class="line">            <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n\e[1;31m set tmpfs faild. \e[0m"</span></div><div class="line">            <span class="built_in">exit</span> 3</div><div class="line">        <span class="keyword">fi</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n\e[1;36 tmpfs updated successfully. \e[0m"</span></div><div class="line">        <span class="built_in">break</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n\e[1;36m tmpfs checked PASS \e[0m"</span></div><div class="line">    <span class="built_in">break</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">usage</div><div class="line"></div><div class="line"><span class="comment">#停止防火墙IPTABLES</span></div><div class="line">service iptables stop</div><div class="line"><span class="comment">#chkconfig iptables off</span></div><div class="line"><span class="comment">#关闭SELINUX</span></div><div class="line">cp /etc/selinux/config&#123;,.ora_bak&#125; &amp;&amp; sed -i <span class="string">'/SELINUX/s/enforcing/disabled/;/SELINUX/s/permissive/disabled/'</span>   /etc/selinux/config</div><div class="line">setenforce 0</div><div class="line"><span class="comment">#执行以上函数</span></div><div class="line">isroot</div><div class="line"><span class="comment">#oscheck</span></div><div class="line"><span class="comment">#yum_repo</span></div><div class="line"><span class="comment">#mount_cdrom</span></div><div class="line">packagecheck</div><div class="line"><span class="comment">#xdesk</span></div><div class="line">kernelset</div><div class="line">oralimit</div><div class="line">setlogin</div><div class="line">setprofile</div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n\e[1;33m please input oracle's user passwd: \e[0m"</span></div><div class="line"><span class="built_in">read</span> oraclepw</div><div class="line">ouseradd <span class="variable">$oraclepw</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n\e[1;33m please input oracle install PATH (default /db) \e[0m"</span></div><div class="line"><span class="built_in">read</span> oraclepath</div><div class="line"><span class="keyword">if</span> [ -z <span class="variable">$oraclepath</span> ];<span class="keyword">then</span></div><div class="line">    oraclepath=/db</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">if</span> [ ! -x <span class="string">"<span class="variable">$oraclepath</span>"</span> ];<span class="keyword">then</span></div><div class="line">    mkdir -p <span class="string">"<span class="variable">$oraclepath</span>"</span></div><div class="line">    chown oracle.oinstall <span class="variable">$oraclepath</span></div><div class="line">    <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n\e[1;36 <span class="variable">$oraclepath</span> created. \e[0m"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n\e[1;33m  please input oracle_sid, just for env (default TSDB) \e[0m"</span></div><div class="line"><span class="built_in">read</span> orasid</div><div class="line"><span class="keyword">if</span> [ -z orasid ];<span class="keyword">then</span></div><div class="line">    orasid=TSDB</div><div class="line"><span class="keyword">fi</span></div><div class="line">setbash_profile <span class="variable">$oraclepath</span> <span class="variable">$orasid</span></div><div class="line">mkdir -p <span class="variable">$oraclepath</span>/oracle/product/11.2.0/db_1 &amp;&amp; chown -R oracle:oinstall <span class="variable">$oraclepath</span> &amp;&amp; chmod -R 755 <span class="variable">$oraclepath</span></div><div class="line"><span class="built_in">unset</span> i</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n\e[1;33m please input where to display the X Window (default 127.0.0.1:0.0) \e[0m"</span> </div><div class="line"><span class="built_in">read</span> xdpy</div><div class="line"><span class="keyword">if</span> [ -z <span class="variable">$xdpy</span> ];<span class="keyword">then</span></div><div class="line">    xdpy=127.0.0.1:0.0</div><div class="line"><span class="keyword">fi</span></div><div class="line">su - oracle -c <span class="built_in">export</span> DISPLAY=<span class="variable">$xdpy</span> &amp;&amp; host +</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\n\e[1;35m Oracle install pre-setting finish! &amp;&amp; please run oracle installer as user oracle \e[0m"</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于研究生的一点担忧]]></title>
      <url>http://seanlook.com/2014/11/30/thoughts_about_graduate_from_course/</url>
      <content type="html"><![CDATA[<p>最近有个在大学玩的比较好现在在读研的同学，来询问我一些如何给老师做精品课程在线测试系统的问题，从沟通中我忍不住从个人的角度来表达一下感想和担忧。</p>
<p><img src="http://sean-images.qiniudn.com/give_yourself_courage.jpg" alt="rate_online_test"></p>
<p>首先从我接收到的信息来看，高校导师为了给自己擅长的课程评选上学校、市级或省级精品课程，急于完成一个展示成果的平台，只要能在最短的时间内提交所能看的见的成果，那就表明有效率和实力。所以这个在线测试系统只需要能够展示一个页面，页面上有单项、多选题，提交测试后直接显示对错和总分，无需记录测试者姓名等其他任何与试题无关的信息，也就是没有数据库。差不多就是一个静态页面了，对错的判断，包括答案都固定在代码里面了。我相信稍微了解IT软件开发的人都知道，这样的系统设计可以让人感到无语，当然还有很多不是计算机类专业的，可能看不懂这些，只关心最终实现的效果达到预期就行。偏偏导师和所交予任务的学生，都不懂设计和编程。所以当我说至少应该有个数据库时，“太麻烦，不懂，周期太长”。由于是出于帮忙的目的，也就没有说太多的话来打击他的积极性，说多了反而有点表现自己有多牛B的嫌疑，就硬着头皮做了个demo。</p>
<p>由此可见大学老师为评上精品课程，那种急功近利的心理，只要对外宣传“我们有一个在线测评系统来检验学生学习效果，blablabla…”，然后评选小组比对评选规则里面有“在线测评”，加分！但请问像上面那样的系统意义何在？老师不知道有谁做过测试，不知道分数，只知道“当前浏览xxx次”，学生完全取决于是否主动。我想如果老师把这个测评当做一个硬性要求或作为所熟知却非常神秘的“平时成绩”的一部分，那只能是通过某种方式提交测试截图了。我心还想，在线测评系统一次性完成上线，是不是就再也不会修改了，加题减题，都要大动干戈的去修改后台代码，丝毫没有规划以后的扩展，当然也许我想多了，因为“这就是很简单的一个测试系统”，嗯，都说是测试而不是正式环境了，认真你就输了。</p>
<p><img src="http://sean-images.qiniudn.com/rate_online_test.png" alt="rate_online_test"></p>
<p>这里做个小插曲。我们生活的环境，充斥着太多的指标、太多的名声。想起上周在我司门口早上卖炸酱面的摊贩被城管执法包围那件事。每天早上这位大叔家的炸酱面是附近最好吃的，每天都排着很长的队，如果不赶时间我和同事们都会优先选择这家。大家都生活不易，城管也是，起早贪黑，四处蹲点追赶流动摊贩，因为没有业绩没有完成指标，如何回去交差。又想起电视里报道过某地的交警每月要达到罚款20万的指标，这说多了其实就是社会问题了，我们这些小众市民除了旁观，祈祷不要发生在我们身上，还能做些什么呢。指标本应该是一个积极充满正能量的、督促机构上进的一个目标，但是如果是为了充数而不择手段去实现，急功近利，那就变质了。</p>
<a id="more"></a>
<p>就在线测评问题来说，个人觉得比较合适的做法，应该是要具有一个长远的观念，为何学校不统一做一个在线测评系统，其他各个课程申请账号，获得出题的资格，自由的在后台添加题目，是否需要记录分数和姓名，老师还可以统计对比各班的情况，甚至在评上精品课程以后，作为进一步考核的数据来源，一次投入，无限产出。相比每门课程做重复低效的工作，一眼就可以看出利弊了。导师舍不得花钱请廉价的学生开发一个拿得出手的系统，只能让手下的研究生“自己看着办”。</p>
<p>另外一方面是我对研究生所表现出来的担忧，是关于学习方法和学习能力。研究生最后毕业靠的是一纸论文，我相信会有高水平有独立见解的论文，但大部分论文“借鉴”的成分会不会太高呢？我们原创性的东西太少了，习惯捡现成的东西，包括我自己也是，写一份配置文档需要google许多文章，然后东抄西拆，拼接起来，但至少它都是实践有效了，对于我个人来说具有较大的参考价值。然而在大学里养成了这样的习惯，就会慢慢的丧失学习能力，遇见要解决一个全新的问题，第一反应不是自己去网上检索，而是找到会的直接问“这个怎么做？”。我该如何回答是好呢？</p>
<p>提问也是有智慧的，问得太宽泛，需要与回答者反复沟通来确认具体的问题，才给出什么样的答案。依然是最初的例子，同学使用ASP.NET来做一个在线测试系统，但他完全不懂编程，于是就问了我“有哪些方法，要准备啥”（还好不是宽泛的问“要怎么做”），我告诉他一些流程性的东西，要基本会一些什么，但他说他是小白，编程基础几乎为零。还是为了快速拿出成果，于是我就违心的打开了2年没有点开竟然没有卸载的Visual Studio 2010，一边搜索，一边拖拉控件，许多基本知识都忘了，做了个及其简陋的demo，拙劣的后台代码自己都不忍直视。我一直不承认自己是个程序猿，实际上也不是，但依然偶尔会兼职一下。很难说我是不是把自己同学给害了，没害是这种可快速复制、完成任务的技能已经学会了，毕竟这一次之后他再也不必学习编程，害他是我把现成的东西给他了。其实任何一本书、任何一篇博客教程都可以自己琢磨快速搞定，而不是一出现问题“表格怎么做”、“图片怎么查”，我真就回了一句“ 搜索关键字 ‘html 表格’、‘asp.net 插入图片’ ”，当然一部分原因是当时忙，没有时间手把手教。</p>
<p>遇到问题，自己查阅资料，自己去理解，练习独立的去面对、解决问题，琢磨不明白的再去问，这样也不会浪费对方太多时间。当然简单一句话的能搞定的问题，也没必要说让提问者去走冤枉路，大概就是这个“度”的问题区分了人与人之间的差距和性格吧，无所谓绝对的对错。</p>
<p>写这么多，有点不自量力了，额，请看到的同学不要对号入座，没有任何针对性和攻击性。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Dockerfile指令详解]]></title>
      <url>http://seanlook.com/2014/11/17/dockerfile-introduction/</url>
      <content type="html"><![CDATA[<p>Docker可以从<code>Dockerfile</code>中一步一步的读取指令来自动的创建镜像，常使用Dockerfile来创建用户自定义的镜像。格式如下：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Comment</span></div><div class="line"><span class="keyword">INSTRUCTION </span>arguments</div></pre></td></tr></table></figure></p>
<p>虽然前面的指令大小写不敏感，但习惯性的还是建议大写。docker是严格按照顺序（<code>#</code>注释起来的忽略）运行指令的。<br>下面逐个来介绍几个必要的指令。</p>
<h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span>  &lt;<span class="built_in">image</span>&gt;</div><div class="line">或</div><div class="line"><span class="keyword">FROM</span> &lt;<span class="built_in">image</span>&gt;:&lt;tag&gt;</div></pre></td></tr></table></figure>
<p>在Dockerfile中第一条非注释INSTRUCTION一定是<code>FROM</code>，它决定了以哪一个镜像作为基准，<code>&lt;image&gt;</code>首选本地是否存在，如果不存在则会从公共仓库下载（当然也可以使用私有仓库的格式）。</p>
<h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">RUN</span> <span class="bash">&lt;commnad&gt;</span></div><div class="line">或</div><div class="line"><span class="keyword">RUN</span> <span class="bash">[<span class="string">"executable"</span>, <span class="string">"param1"</span>, <span class="string">"param2"</span>]</span></div></pre></td></tr></table></figure>
<p><code>RUN</code>指令会在当前镜像的顶层执行任何命令，并commit成新的（中间）镜像，提交的镜像会在后面继续用到。<br>上面看到<code>RUN</code>后的格式有两种写法。</p>
<a id="more"></a>
<p>shell格式，相当于执行<code>/bin/sh -c &quot;&lt;command&gt;&quot;</code>：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">RUN</span> <span class="bash">apt-get install vim -y</span></div></pre></td></tr></table></figure></p>
<p>exec格式，不会触发shell，所以<code>$HOME</code>这样的环境变量无法使用，但它可以在没有<code>bash</code>的镜像中执行，而且可以避免错误的解析命令字符串：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">RUN</span> <span class="bash">[<span class="string">"apt-get"</span>, <span class="string">"install"</span>, <span class="string">"vim"</span>, <span class="string">"-y"</span>]</span></div><div class="line">或</div><div class="line"><span class="keyword">RUN</span> <span class="bash">[<span class="string">"/bin/bash"</span>, <span class="string">"-c"</span>, <span class="string">"apt-get install vim -y"</span>]  与shell风格相同</span></div></pre></td></tr></table></figure></p>
<h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h3><p><code>ENTRYPOINT</code>命令设置在容器启动时执行命令，如果有多个<code>ENTRYPOINT</code>指令，那只有最后一个生效。有以下两种命令格式：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ENTRYPOINT</span> <span class="bash">[<span class="string">"executable"</span>, <span class="string">"param1"</span>, <span class="string">"param2"</span>]  数组/<span class="built_in">exec</span>格式，推荐</span></div><div class="line">或</div><div class="line"><span class="keyword">ENTRYPOINT</span> <span class="bash"><span class="built_in">command</span> param1 param2    shell格式</span></div></pre></td></tr></table></figure></p>
<p>比如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -<span class="selector-tag">i</span> -t --rm -<span class="selector-tag">p</span> <span class="number">80</span>:<span class="number">80</span> nginx</div></pre></td></tr></table></figure></p>
<p>使用exec格式，在<code>docker run &lt;image&gt;</code>的所有参数，都会追加到<code>ENTRYPOINT</code>之后，并且会覆盖<code>CMD</code>所指定的参数（如果有的话）。当然可以在<code>run</code>时使用<code>--entrypoint</code>来覆盖<code>ENTRYPOINT</code>指令。<br>使用shell格式，<code>ENTRYPOINT</code>相当于执行<code>/bin/sh -c &lt;command..&gt;</code>，这种格式会忽略<code>docker run</code>和<code>CMD</code>的所有参数。</p>
<p>以推荐使用的exec格式为例：<br>我们可以使用<code>ENTRYPOINT</code>来设置基本不会变化的命令，用<code>CMD</code>来设置其它的可能改变的默认启动命令或选项（<code>docker run</code>会覆盖的）。<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> ubuntu</div><div class="line"><span class="keyword">ENTRYPOINT</span> <span class="bash">[<span class="string">"top"</span>, <span class="string">"-b"</span>]</span></div><div class="line"><span class="keyword">CMD</span> <span class="bash">[<span class="string">"-c"</span>]</span></div></pre></td></tr></table></figure></p>
<p><code>docker build -t registry.tp-link.net:8000/ubuntu:dockerfile_test .</code><br>运行<br><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ docker run -it --rm --name test 44f178c416b0 -H</div><div class="line">这里的top后的选项会追加到上面的ENTRYPOINT，同时会覆盖CMD的，所以实际相当于执行top -b -H，没有-c：</div><div class="line">top - 04:32:07 up<span class="number"> 10 </span>days, 11:27, <span class="number"> 0 </span>users,  load average: 0.01, 0.03, 0.00</div><div class="line">Threads:  <span class="number"> 1 </span>total,  <span class="number"> 1 </span>running,  <span class="number"> 0 </span>sleeping,  <span class="number"> 0 </span>stopped,  <span class="number"> 0 </span>zombie</div><div class="line">%Cpu(s):  0.1 us,  0.1 sy,  0.0 ni, 99.7 id,  0.2 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">KiB Mem:  <span class="number"> 4056784 </span>total, <span class="number"> 3749188 </span>used,  <span class="number"> 307596 </span>free,  <span class="number"> 209372 </span>buffers</div><div class="line">KiB Swap:       <span class="number"> 0 </span>total,       <span class="number"> 0 </span>used,       <span class="number"> 0 </span>free.  <span class="number"> 571388 </span>cached Mem</div><div class="line"></div><div class="line">  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND</div><div class="line">   <span class="number"> 1 </span>root     <span class="number"> 20 </span> <span class="number"> 0 </span> <span class="number"> 19688 </span> <span class="number"> 1208 </span>  <span class="number"> 940 </span>R  0.0  0.0   0:00.01 top</div></pre></td></tr></table></figure></p>
<p>如果在使用的docker版本在v1.3及以上，则可以使用<code>docker exec</code>继续在容器中验证，看到完整的top命令<code>docker exec -it test ps aux</code></p>
<h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CMD</span> <span class="bash">[<span class="string">"executable"</span>,<span class="string">"param1"</span>,<span class="string">"param2"</span>]  （数组/<span class="built_in">exec</span>格式）</span></div><div class="line"><span class="keyword">CMD</span> <span class="bash">[<span class="string">"param1"</span>,<span class="string">"param2"</span>]  (as default parameters to ENTRYPOINT)</span></div><div class="line"><span class="keyword">CMD</span> <span class="bash"><span class="built_in">command</span> param1 param2  (shell格式)</span></div></pre></td></tr></table></figure>
<p>一个Dockerfile里只能有一个CMD，如果有多个，只有最后一个生效。<code>CMD</code>指令的主要功能是在build完成后，为了给<code>docker run</code>启动到容器时提供默认命令或参数，这些默认值可以包含可执行的命令，也可以只是参数（此时可执行命令就必须提前在<code>ENTRYPOINT</code>中指定）。</p>
<p>它与<code>ENTRYPOINT</code>的功能极为相似，区别在于如果<code>docker run</code>后面出现与<code>CMD</code>指定的相同命令，那么CMD会被覆盖；而<code>ENTRYPOINT</code>会把容器名后面的所有内容都当成参数传递给其指定的命令（不会对命令覆盖）。另外<code>CMD</code>还可以单独作为<code>ENTRYPOINT</code>的所接命令的可选参数。<br><code>CMD</code>与<code>RUN</code>的区别在于，<code>RUN</code>是在<code>build</code>成镜像时就运行的，先于<code>CMD</code>和<code>ENTRYPOINT</code>的，<code>CMD</code>会在每次启动容器的时候运行，而<code>RUN</code>只在创建镜像时执行一次，固化在image中。</p>
<p>举例1：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Dockerfile:</div><div class="line">    <span class="keyword">CMD</span> <span class="bash">[<span class="string">"echo CMD_args"</span>]</span></div><div class="line">运行</div><div class="line">    docker <span class="keyword">run</span> &lt;image&gt; echo run_arg</div><div class="line">结果</div><div class="line">    输出 run_arg</div></pre></td></tr></table></figure></p>
<p>因为<code>echo run_arg</code>覆盖了<code>CMD</code>。如果<code>run</code>后没有<code>echo run_arg</code>，则输出<code>CMD_args</code>。</p>
<p>举例2：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Dockerfile:</div><div class="line">    <span class="keyword">ENTRYPOINT</span> <span class="bash">[<span class="string">"echo"</span>, <span class="string">"ENTRYPOINT_args"</span>]</span></div><div class="line">运行</div><div class="line">    docker <span class="keyword">run</span> &lt;image&gt; run_arg</div><div class="line">结果</div><div class="line">    输出 ENTRYPOINT_args run_arg</div></pre></td></tr></table></figure></p>
<p>因为<code>echo run_arg</code>追加到<code>ENTRYPOIINT</code>的<code>echo</code>后面了。如果在<code>ENTRYPOINT</code>后再加入一行<code>CMD [&quot;CMD_args&quot;]</code>，则结果依旧，除非去掉run后的所有参数。<br>当出现<code>ENTRYPOINT</code>指令时<code>CMD</code>指令只可能(当<code>ENTRYPOINT</code>指令使用exec方式执行时)被当做<code>ENTRYPOINT</code>指令的参数使用，其他情况则会被忽略。</p>
<h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><p><code>EXPOSE</code>指令告诉容器在运行时要监听的端口，但是这个端口是用于多个容器之间通信用的（links），外面的host是访问不到的。要把端口暴露给外面的主机，在启动容器时使用<code>-p</code>选项。<br>示例：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># expose memcached(s) port</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">11211</span> <span class="number">11212</span></div></pre></td></tr></table></figure></p>
<h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ADD <span class="tag">&lt;<span class="name">src</span>&gt;</span>... <span class="tag">&lt;<span class="name">dest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>将文件<code>&lt;src&gt;</code>拷贝到container的文件系统对应的路径<code>&lt;dest&gt;</code>下。<br><code>&lt;src&gt;</code>可以是文件、文件夹、URL，对于文件和文件夹<code>&lt;src&gt;</code>必须是在Dockerfile的相对路径下（build context path），即只能是相对路径且不能包含<code>../path/</code>。<br><code>&lt;dest&gt;</code>只能是容器中的绝对路径。如果路径不存在则会自动级联创建，根据你的需要是<code>&lt;dest&gt;</code>里是否需要反斜杠<code>/</code>，习惯使用<code>/</code>结尾从而避免被当成文件。<br>示例：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">支持模糊匹配</div><div class="line"><span class="keyword">ADD</span> <span class="bash">hom* /mydir/        <span class="comment"># adds all files starting with "hom"</span></span></div><div class="line"><span class="keyword">ADD</span> <span class="bash">hom?.txt /mydir/    <span class="comment"># ? is replaced with any single character</span></span></div><div class="line"></div><div class="line"><span class="keyword">ADD</span> <span class="bash">requirements.txt /tmp/</span></div><div class="line"><span class="keyword">RUN</span> <span class="bash">pip install /tmp/requirements.txt</span></div><div class="line"><span class="keyword">ADD</span> <span class="bash">. /tmp/</span></div></pre></td></tr></table></figure></p>
<p>另外<code>ADD</code>支持远程URL获取文件，但官方认为是<code>strongly discouraged</code>，建议使用<code>wget</code>或<code>curl</code>代替。<br><code>ADD</code>还支持自动解压tar文件，比如<code>ADD trusty-core-amd64.tar.gz /</code>会线自动解压内容再COPY到在容器的<code>/</code>目录下。</p>
<p>ADD只有在build镜像的时候运行一次，后面运行container的时候不会再重新加载，也就是你不能在运行时通过这种方式向容器中传送文件，<code>-v</code>选项映射本地到容器的目录。</p>
<h3 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h3><p>Same as ‘ADD’ but without the tar and remote url handling.</p>
<p><code>COPY</code>的语法与功能与<code>ADD</code>相同，只是不支持上面讲到的<code>&lt;src&gt;</code>是远程URL、自动解压这两个特性，但是<a href="https://docs.docker.com/articles/dockerfile_best-practices/" target="_blank" rel="external">Best Practices for Writing Dockerfiles</a>建议<strong>尽量使用<code>COPY</code></strong>，并使用<code>RUN</code>与<code>COPY</code>的组合来代替<code>ADD</code>，这是因为虽然<code>COPY</code>只支持本地文件拷贝到container，但它的处理比<code>ADD</code>更加透明，建议只在复制tar文件时使用<code>ADD</code>，如<code>ADD trusty-core-amd64.tar.gz /</code>。</p>
<h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><p>用于设置环境变量：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ENV <span class="tag">&lt;<span class="name">key</span>&gt;</span> <span class="tag">&lt;<span class="name">value</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>设置了后，后续的RUN命令都可以使用，当运行生成的镜像时这些环境变量依然有效，如果需要在运行时更改这些环境变量可以在运行<code>docker run</code>时添加<code>-env &lt;key&gt;=&lt;value&gt;</code>参数来修改。</p>
<h3 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h3><p>VOLUME指令用来在容器中设置一个挂载点，可以用来让其他容器挂载以实现数据共享或对容器数据的备份、恢复或迁移。请参考文章<a href="http://seanlook/2014/12/17/docker_comun" target="_blank" rel="external">docker容器间通信</a></p>
<h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><p><code>WORKDIR指</code>令用于设置<code>Dockerfile</code>中的<code>RUN</code>、<code>CMD</code>和<code>ENTRYPOINT</code>指令执行命令的工作目录(默认为<code>/</code>目录)，该指令在<code>Dockerfile</code>文件中可以出现多次，如果使用相对路径则为相对于<code>WORKDIR</code>上一次的值，例如<code>WORKDIR /a</code>，<code>WORKDIR b</code>，<code>RUN pwd</code>最终输出的当前目录是<code>/a/b</code>。（<code>RUN cd /a/b</code>，<code>RUN pwd</code>是得不到<code>/a/b</code>的）</p>
<h3 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h3><p><code>ONBUILD</code>指令用来设置一些触发的指令，用于在当该镜像被作为基础镜像来创建其他镜像时(也就是<code>Dockerfile</code>中的<code>FROM</code>为当前镜像时)执行一些操作，<code>ONBUILD中</code>定义的指令会在用于生成其他镜像的<code>Dockerfile</code>文件的<code>FROM</code>指令之后被执行，上述介绍的任何一个指令都可以用于<code>ONBUILD</code>指令，可以用来执行一些因为环境而变化的操作，使镜像更加通用。</p>
<p>注意：</p>
<ol>
<li>ONBUILD中定义的指令在当前镜像的build中不会被执行。</li>
<li>可以通过查看<code>docker inspect &lt;image&gt;</code>命令执行结果的OnBuild键来查看某个镜像ONBUILD指令定义的内容。</li>
<li>ONBUILD中定义的指令会当做引用该镜像的Dockerfile文件的FROM指令的一部分来执行，执行顺序会按ONBUILD定义的先后顺序执行，如果ONBUILD中定义的任何一个指令运行失败，则会使FROM指令中断并导致整个build失败，当所有的ONBUILD中定义的指令成功完成后，会按正常顺序继续执行build。</li>
<li>ONBUILD中定义的指令不会继承到当前引用的镜像中，也就是当引用ONBUILD的镜像创建完成后将会清除所有引用的ONBUILD指令。</li>
<li>ONBUILD指令不允许嵌套，例如<code>ONBUILD ONBUILD ADD . /data</code>是不允许的。</li>
<li>ONBUILD指令不会执行其定义的FROM或MAINTAINER指令。</li>
</ol>
<p>例如，<code>Dockerfile</code>使用如下的内容创建了镜像 image-A ：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[...]</div><div class="line"><span class="keyword">ONBUILD</span> <span class="keyword">ADD</span> <span class="bash">. /app/src</span></div><div class="line"><span class="keyword">ONBUILD</span> <span class="keyword">RUN</span> <span class="bash">/usr/<span class="built_in">local</span>/bin/python-build --dir /app/src</span></div><div class="line">[...]</div></pre></td></tr></table></figure></p>
<p>如果基于 image-A 创建新的镜像时，新的<code>Dockerfile</code>中使用<code>FROM image-A</code>指定基础镜像时，会自动执行<code>ONBUILD</code>指令内容，等价于在后面添加了两条指令。<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> image-A</div><div class="line"></div><div class="line"><span class="comment">#Automatically run the following</span></div><div class="line"><span class="keyword">ADD</span> <span class="bash">. /app/src</span></div><div class="line"><span class="keyword">RUN</span> <span class="bash">/usr/<span class="built_in">local</span>/bin/python-build --dir /app/src</span></div></pre></td></tr></table></figure></p>
<h3 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h3><p>为运行镜像时或者任何接下来的<code>RUN</code>指令指定运行用户名或UID：</p>
<pre><code>USER daemon
</code></pre><h3 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h3><p>使用MAINTAINER指令来为生成的镜像署名作者</p>
<pre><code>MAINTAINER author&apos;s name mailaddress
</code></pre><h3 id="The-dockerignore-file"><a href="#The-dockerignore-file" class="headerlink" title="The .dockerignore file"></a>The <code>.dockerignore</code> file</h3><p><code>.dockerignore</code>用来忽略上下文目录中包含的一些image用不到的文件，它们不会传送到docker daemon。规则使用go语言的匹配语法。如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cat <span class="selector-class">.dockerignore</span></div><div class="line"><span class="selector-class">.git</span></div><div class="line">tmp*</div></pre></td></tr></table></figure></p>
<p>更多内容参考<a href="http://seanlook.com/2014/12/20/dockerfile_best_practice1">Dockerfile最佳实践</a>系列。官方有个<a href="格式">Dockerfile tutorial</a>练习Dockerfile的写法，非常简单但对于养成良好的格式、注释有一些帮助。</p>
<h3 id="Dockerfile示例"><a href="#Dockerfile示例" class="headerlink" title="Dockerfile示例"></a>Dockerfile示例</h3><p>下面的<code>Dockerfile</code>是MySQL官方镜像的构建过程。从ubuntu基础镜像开始构建，安装mysql-server、配置权限、映射目录和端口，<code>CMD</code>在从这个镜像运行到容器时启动mysql。其中<code>VOLUME</code>定义的两个可挂载点，用于在host中挂载，因为数据库保存在主机上而非容器中才是比较安全的。</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># MySQL Dockerfile</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># https://github.com/dockerfile/mysql</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line"><span class="comment"># Pull base image.</span></div><div class="line"><span class="keyword">FROM</span> dockerfile/ubuntu</div><div class="line"></div><div class="line"><span class="comment"># Install MySQL.</span></div><div class="line"><span class="keyword">RUN</span> <span class="bash">\</span></div><div class="line">  apt-get update &amp;&amp; \</div><div class="line">  DEBIAN_FRONTEND=noninteractive apt-get install -y mysql-server &amp;&amp; \</div><div class="line">  rm -rf /var/lib/apt/lists/* &amp;&amp; \</div><div class="line">  sed -i <span class="string">'s/^\(bind-address\s.*\)/# \1/'</span> /etc/mysql/my.cnf &amp;&amp; \</div><div class="line">  sed -i <span class="string">'s/^\(log_error\s.*\)/# \1/'</span> /etc/mysql/my.cnf &amp;&amp; \</div><div class="line">  <span class="built_in">echo</span> <span class="string">"mysqld_safe &amp;"</span> &gt; /tmp/config &amp;&amp; \</div><div class="line">  <span class="built_in">echo</span> <span class="string">"mysqladmin --silent --wait=30 ping || exit 1"</span> &gt;&gt; /tmp/config &amp;&amp; \</div><div class="line">  <span class="built_in">echo</span> <span class="string">"mysql -e 'GRANT ALL PRIVILEGES ON *.* TO \"root\"@\"%\" WITH GRANT OPTION;'"</span> &gt;&gt; /tmp/config &amp;&amp; \</div><div class="line">  bash /tmp/config &amp;&amp; \</div><div class="line">  rm <span class="_">-f</span> /tmp/config</div><div class="line"></div><div class="line"><span class="comment"># Define mountable directories.</span></div><div class="line"><span class="keyword">VOLUME</span> <span class="bash">[<span class="string">"/etc/mysql"</span>, <span class="string">"/var/lib/mysql"</span>]</span></div><div class="line"></div><div class="line"><span class="comment"># Define working directory.</span></div><div class="line"><span class="keyword">WORKDIR</span> <span class="bash">/data</span></div><div class="line"></div><div class="line"><span class="comment"># Define default command.</span></div><div class="line"><span class="keyword">CMD</span> <span class="bash">[<span class="string">"mysqld_safe"</span>]</span></div><div class="line"></div><div class="line"><span class="comment"># Expose ports.</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">3306</span></div></pre></td></tr></table></figure>
<p>使用：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">build </span>-t=<span class="string">"dockerfile/mysql"</span> github.com/dockerfile/mysql</div><div class="line"></div><div class="line">或下载Dockerfile内容再当前目录：</div><div class="line">$ docker <span class="keyword">build </span>-t=<span class="string">"dockerfile/mysql"</span> .</div></pre></td></tr></table></figure></p>
<p>（提示，上述第一条命令，如果你的host不可以连接Docker Hub，那么需要在启动docker服务时使用<code>HTTP_PROXY=</code>——用于build的时更新下载软件，同时执行<code>docker build</code>的终端设置<code>http_proxy</code>和<code>https_proxy</code>用于下载Dockerfile）</p>
<p>运行：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="built_in">run</span> -d <span class="comment">--name mysql -p 3306:3306 dockerfile/mysql</span></div><div class="line">或</div><div class="line">$ docker <span class="built_in">run</span> -<span class="keyword">it</span> <span class="comment">--rm --link mysql:mysql dockerfile/mysql bash -c 'mysql -h $MYSQL_PORT_3306_TCP_ADDR'</span></div></pre></td></tr></table></figure></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://github.com/HoO-Group/docker-heat/wiki/Dockerfile-Reference" target="_blank" rel="external">Dockerfile Reference 中文</a></li>
<li><a href="http://www.leiem.com/post-222.html" target="_blank" rel="external">Dockerfile详解</a></li>
<li><a href="http://www.dockerpool.com/static/books/docker_practice/dockerfile/instructions.html" target="_blank" rel="external">dockerpool-build-instructions</a></li>
<li><a href="https://docs.docker.com/reference/builder/" target="_blank" rel="external">https://docs.docker.com/reference/builder/</a></li>
<li><a href="https://docs.docker.com/articles/dockerfile_best-practices/" target="_blank" rel="external">https://docs.docker.com/articles/dockerfile_best-practices/</a></li>
<li><a href="http://syntaxsugar.cn/2014/07/09/dockerfile/" target="_blank" rel="external">http://syntaxsugar.cn/2014/07/09/dockerfile/</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建docker内网私服（docker-registry with nginx&ssl on centos）]]></title>
      <url>http://seanlook.com/2014/11/13/deploy-private-docker-registry-with-nginx-ssl/</url>
      <content type="html"><![CDATA[<p>主要思路：<br><img src="http://sean-images.qiniudn.com/docker-registry-deploy.png" alt="docker-registry-deploy"></p>
<h2 id="1-Docker-Registry-说明"><a href="#1-Docker-Registry-说明" class="headerlink" title="1. Docker Registry 说明"></a>1. Docker Registry 说明</h2><p>关于如何创建和使用本地仓库，其实已经有很多文章介绍了。因为docker技术正处于发展和完善阶段，所以有些文章要么内容已经过时，要么给出了错误的配置，导致无法正常创建仓库。本文记录的是个人完整的搭建过程，<code>docker version</code>为1.1.2。</p>
<p>官方提供了<a href="https://registry.hub.docker.com/" target="_blank" rel="external">Docker Hub</a>网站来作为一个公开的集中仓库。然而，本地访问Docker Hub速度往往很慢，并且很多时候我们需要一个本地的私有仓库只供网内使用。</p>
<p>Docker仓库实际上提供两方面的功能，一个是镜像管理，一个是认证。前者主要由<a href="https://github.com/docker/docker-registry" target="_blank" rel="external">docker-registry</a>项目来实现，通过http服务来上传下载；后者可以通过docker-index（闭源）项目或者利用现成认证方案（如nginx）实现http请求管理。</p>
<p>docker-registry既然也是软件应用，自然最简单的方法就是使用官方提供的已经部署好的镜像registry。官方文档中也给出了建议，直接运行<code>sudo docker run -p 5000:5000 registry</code>命令。这样确实能启动一个registry服务器，但是所有上传的镜像其实都是由docker容器管理，放在了/var/lib/docker/….某个目录下。而且一旦删除容器，镜像也会被删除。因此，我们需要想办法告诉docker容器镜像应该存放在哪里。registry镜像中启动后镜像默认位置是<code>/tmp/registry</code>，因此直接映射这个位置即可，比如到本机的<code>/opt/data/registry</code>目录下。</p>
<a id="more"></a>
<h2 id="2-在CentOS上搭建docker私服"><a href="#2-在CentOS上搭建docker私服" class="headerlink" title="2. 在CentOS上搭建docker私服"></a>2. 在CentOS上搭建docker私服</h2><h3 id="2-1-安装docker-registry"><a href="#2-1-安装docker-registry" class="headerlink" title="2.1 安装docker-registry"></a>2.1 安装<code>docker-registry</code></h3><p>方法有多种，直接运行下面的命令：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># docker run -d -e SETTINGS_FLAVOR=dev -e STORAGE_PATH=<span class="regexp">/tmp/</span>registry -v <span class="regexp">/opt/</span>data<span class="regexp">/registry:/</span>tmp<span class="regexp">/registry  -p 5000:5000 registry</span></div></pre></td></tr></table></figure></p>
<p>如果本地没有拉取过docker-registry，则首次运行会pull registry，运行时会映射路径和端口，以后就可以从<code>/opt/data/registry</code>下找到私有仓库都存在哪些镜像，通过主机的哪个端口可以访问。<br>你也可以把项目 <a href="https://github.com/docker/docker-registry.git" target="_blank" rel="external">https://github.com/docker/docker-registry.git</a> 克隆到本地，然后使用Dockerfile来build镜像：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># git clone https://github.com/docker/docker-registry.git</span></div><div class="line"><span class="meta"># cd docker-registry &amp;&amp; mkdir -p /opt/data/registry</span></div><div class="line"><span class="meta"># docker build -t "local-sean" .</span></div><div class="line"></div><div class="line">build完成后，就可以运行这个docker-registry</div><div class="line">我们先配置自己的config.yml文件，第一种方法是直接在run的时候指定变量</div><div class="line"><span class="meta"># cp config/config_sample.yml /opt/data/registry/config.yml</span></div><div class="line"><span class="meta"># vi /opt/data/registry/config.yml</span></div><div class="line"><span class="meta">##这里可以设置本地存储SETTINGS_FLAVOR=dev，local STORAGE_PATH:/tmp/registry等待</span></div><div class="line"></div><div class="line"><span class="meta"># docker run -d -v /opt/data/registry:/tmp/registry -p 5000:5000 -e  DOCKER_REGISTRY_CONFIG=/tmp/registry/config.yml registry</span></div><div class="line">或</div><div class="line">docker run -d -e SETTINGS_FLAVOR=dev -e STORAGE_PATH=/tmp/registry -v /db/docker-images:/tmp/registry -p <span class="number">5000</span>:<span class="number">5000</span> registry</div></pre></td></tr></table></figure></p>
<h3 id="2-2-客户端使用"><a href="#2-2-客户端使用" class="headerlink" title="2.2 客户端使用"></a>2.2 客户端使用</h3><p>要从私服上获取镜像或向私服提交镜像，现在变得非常简单，只需要在仓库前面加上私服的地址和端口，形如<code>172.29.88.222:5000/centos6</code>。注意，这里可以选择不使用IP，而是用hostname，如registry.domain.com:5000，但不能仅用不带<code>.</code>的主机名registry，docker会认为registry是用户名，建议使用带域名的hostname加port来表示。</p>
<p>于是在另外一台要使用docker的主机上就可以通过这台私服拉取和推送镜像了：</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">从私服上搜索存在哪些可用镜像</div><div class="line"><span class="meta"># curl -X GET http://sean.domain.com:5000/v1/search</span></div><div class="line">&#123;<span class="string">"num_results"</span>: <span class="number">2</span>, <span class="string">"query"</span>: <span class="string">""</span>, <span class="string">"results"</span>: [&#123;<span class="string">"description"</span>: <span class="string">""</span>, <span class="string">"name"</span>: <span class="string">"library/centos6"</span>&#125;, &#123;<span class="string">"description"</span>: <span class="string">""</span>, <span class="string">"name"</span>: <span class="string">"library/nginx"</span>&#125;]&#125;</div><div class="line"></div><div class="line">按条件搜索nginx</div><div class="line"><span class="meta"># curl -X GET http://sean.domain.com:5000/v1/search?q=centos6</span></div><div class="line"></div><div class="line">拉取image到本地</div><div class="line">docker pull library/centos6</div><div class="line"></div><div class="line"><span class="meta">## 本地对份镜像启动起来，形成container</span></div><div class="line"><span class="meta">## 给container去另外一个名字</span></div><div class="line"><span class="meta"># docker tag 68edf809afe7 registry.domain.com:5000/centos6-test</span></div><div class="line"></div><div class="line"><span class="meta">## 最后将新的docker images推送到私服上</span></div><div class="line">docker push registry.domain.com:<span class="number">5000</span>/centos6-test</div></pre></td></tr></table></figure>
<p>第一次push到私服上时会提示用户名、密码和邮箱，创建即可。也可以在docker私服端加入认证机制。</p>
<h2 id="3-加入nginx认证"><a href="#3-加入nginx认证" class="headerlink" title="3. 加入nginx认证"></a>3. 加入nginx认证</h2><p>（请在实际操作以前，先阅读完本节，再确定是否在前端加入nginx）</p>
<h3 id="3-1-安装及配置nginx"><a href="#3-1-安装及配置nginx" class="headerlink" title="3.1 安装及配置nginx"></a>3.1 安装及配置nginx</h3><p>从上面的过程可以看到，除非防火墙限制，否则任何主机可以创建账号并想私服推送镜像，更安全的做法是在外层加入登录认证机制。<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">最好安装<span class="number">1.4</span>.x版本，不然下面的有些配置可能会不兼容</div><div class="line"><span class="meta"># yum install nginx</span></div><div class="line"></div><div class="line">创建两个登录用户</div><div class="line"><span class="meta"># htpasswd -c /etc/nginx/docker-registry.htpasswd sean</span></div><div class="line">New password: </div><div class="line">Re-type <span class="keyword">new</span> password: </div><div class="line">Adding password <span class="keyword">for</span> user sean</div><div class="line"></div><div class="line"><span class="meta"># htpasswd /etc/nginx/docker-registry.htpasswd itsection</span></div></pre></td></tr></table></figure></p>
<p>为了让nginx使用这个密码文件，并且转发8080端口的请求到Docker Registry，新增nginx配置文件<br><code>vi /etc/nginx/sites-enabled/docker-registry</code>：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># For versions of Nginx &gt; 1.3.9 that <span class="meta-keyword">include</span> chunked transfer encoding support</span></div><div class="line"><span class="meta"># Replace with appropriate values where necessary</span></div><div class="line"></div><div class="line">upstream docker-<span class="class">registry </span>&#123;</div><div class="line"> server localhost:<span class="number">5000</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class">server </span>&#123;</div><div class="line"> listen <span class="number">8080</span>;</div><div class="line"> server_name sean.domain.com;  -- your registry server_name</div><div class="line"></div><div class="line"> <span class="meta"># ssl on;</span></div><div class="line"> <span class="meta"># ssl_certificate /etc/ssl/certs/docker-registry;</span></div><div class="line"> <span class="meta"># ssl_certificate_key /etc/ssl/private/docker-registry;</span></div><div class="line"></div><div class="line"> proxy_set_header Host       $http_host;   <span class="meta"># required for Docker client sake</span></div><div class="line"> proxy_set_header X-Real-IP  $remote_addr; <span class="meta"># pass on real client IP</span></div><div class="line"></div><div class="line"> client_max_body_size <span class="number">0</span>; <span class="meta"># disable any limits to avoid HTTP 413 for large image uploads</span></div><div class="line"></div><div class="line"> <span class="meta"># required to avoid HTTP 411: see Issue #1486 (https:<span class="comment">//github.com/dotcloud/docker/issues/1486)</span></span></div><div class="line"> chunked_transfer_encoding on;</div><div class="line"></div><div class="line"> location <span class="class">/ &#123;</span></div><div class="line">     # let Nginx know about our auth file</div><div class="line">     auth_basic              <span class="string">"Restricted"</span>;</div><div class="line">     auth_basic_user_file    docker-registry.htpasswd;</div><div class="line"></div><div class="line">     proxy_pass http:<span class="comment">//docker-registry;</span></div><div class="line"> &#125;</div><div class="line"> location /<span class="class">_ping </span>&#123;</div><div class="line">     auth_basic off;</div><div class="line">     proxy_pass http:<span class="comment">//docker-registry;</span></div><div class="line"> &#125;  </div><div class="line"> location <span class="meta-keyword">/v1/</span><span class="class">_ping </span>&#123;</div><div class="line">     auth_basic off;</div><div class="line">     proxy_pass http:<span class="comment">//docker-registry;</span></div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">让nginx来使用这个<span class="keyword">virtual</span>-host</div><div class="line"><span class="meta"># ln -s /etc/nginx/sites-enabled/docker-registry /etc/nginx/conf.d/docker-registry.conf</span></div><div class="line">重启nginx来激活虚拟主机的配置</div><div class="line"><span class="meta"># service nginx restart</span></div></pre></td></tr></table></figure>
<h3 id="3-2-加入认证后使用docker-registry"><a href="#3-2-加入认证后使用docker-registry" class="headerlink" title="3.2 加入认证后使用docker-registry"></a>3.2 加入认证后使用docker-registry</h3><p>此时主机的5000端口应该通过防火墙禁止访问（或者在<code>docker run</code>端口映射时只监听回环接口的IP <code>-p 127.0.0.1:5000:5000</code>）。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># <span class="selector-tag">curl</span> <span class="selector-tag">localhost</span><span class="selector-pseudo">:5000</span></div><div class="line">"<span class="selector-tag">docker-registry</span> <span class="selector-tag">server</span> (<span class="selector-tag">dev</span>) (<span class="selector-tag">v0</span><span class="selector-class">.8</span><span class="selector-class">.1</span>)"</div></pre></td></tr></table></figure></p>
<p>如果直接访问访问将得到未授权的信息：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># curl localhost:8080</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>401 Authorization Required<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">"white"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>401 Authorization Required<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span>nginx/1.4.7<span class="tag">&lt;/<span class="name">center</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>带用户认证的docker-registry：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># curl http:<span class="comment">//sean:sean@sean.domain.com:8080/v1/search</span></span></div><div class="line">&#123;<span class="string">"num_results"</span>: <span class="number">2</span>, <span class="string">"query"</span>: <span class="string">""</span>, <span class="string">"results"</span>: [&#123;<span class="string">"description"</span>: <span class="string">""</span>, <span class="string">"name"</span>: <span class="string">"library/centos6"</span>&#125;, &#123;<span class="string">"description"</span>: <span class="string">""</span>, <span class="string">"name"</span>: <span class="string">"library/nginx"</span>&#125;]&#125;</div><div class="line"></div><div class="line"><span class="meta"># docker login registry.domain.com:8080</span></div><div class="line"><span class="symbol">Username:</span> sean</div><div class="line"><span class="symbol">Password:</span> </div><div class="line"><span class="symbol">Email:</span> zhouxiao@domain.com</div><div class="line">Login Succeeded</div><div class="line"></div><div class="line"><span class="meta"># docker pull registry.domain.com:8080/library/centos6</span></div></pre></td></tr></table></figure></p>
<p>不出意外的话，上面的<code>docker pull</code>会失败：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># docker pull registry.domain.<span class="keyword">com</span>:<span class="number">8080</span>/library/centos6</div><div class="line">Pulling repository registry.domain.<span class="keyword">com</span>:<span class="number">8080</span>/library/centos6</div><div class="line"><span class="number">2014</span>/<span class="number">11</span>/<span class="number">11</span> <span class="number">21</span>:<span class="number">00</span>:<span class="number">25</span> Could not reach any registry endpoint</div><div class="line"></div><div class="line"># docker push registry.domain.<span class="keyword">com</span>:<span class="number">8080</span>/ubuntu:sean</div><div class="line">The push refers <span class="keyword">to</span> <span class="keyword">a</span> repository [registry.domain.<span class="keyword">com</span>:<span class="number">8080</span>/ubuntu] (<span class="built_in">len</span>: <span class="number">1</span>)</div><div class="line">Sending image <span class="keyword">list</span></div><div class="line">Pushing repository registry.domain.<span class="keyword">com</span>:<span class="number">8080</span>/ubuntu (<span class="number">1</span> <span class="keyword">tags</span>)</div><div class="line"><span class="number">2014</span>/<span class="number">11</span>/<span class="number">12</span> <span class="number">08</span>:<span class="number">11</span>:<span class="number">32</span> HTTP code <span class="number">401</span>, Docker will not send auth headers over HTTP.</div><div class="line"></div><div class="line">nginx日志</div><div class="line"><span class="number">2014</span>/<span class="number">11</span>/<span class="number">12</span> <span class="number">07</span>:<span class="number">03</span>:<span class="number">49</span> [error] <span class="number">14898</span>#<span class="number">0</span>: *<span class="number">193</span> <span class="keyword">no</span> user/password was provided <span class="keyword">for</span> basic </div><div class="line">authenticatGET /v1/repositories/library/centos6/<span class="keyword">tags</span> HTTP/<span class="number">1.1</span><span class="string">", host: "</span>registry.domain.<span class="keyword">com</span>:<span class="number">8080</span><span class="comment">"</span></div></pre></td></tr></table></figure></p>
<p>本文后的第1篇参考文档没有出现这个问题，但评论中有提及。<br>有人说是<code>backend storage</code>的问题，这里是本地存储镜像，不应该。经过查阅大量资料，并反复操作验证，是docker-registry版本的问题。从<code>v0.10.0</code>开始，<code>docker login</code>虽然Succeeded，但<code>pull</code>或<code>push</code>的时候，<code>~/.dockercfg</code>下的用户登录信息将不允许通过HTTP明文传输。（如果你愿意可以查看<code>v0.10.0</code>的源码 <a href="https://github.com/docker/docker/blob/v0.10.0/registry/registry.go" target="_blank" rel="external">registry.go</a>，在分支<code>v0.9.1</code>及以前是没有<code>HTTP code 401, Docker will not send auth headers over HTTP的</code>）<br>目前的办法三个：</p>
<ul>
<li>撤退，这就是为什么先说明在操作前线查看到这的原因了</li>
<li>换成<code>v0.9.1</code>及以下版本。现在都<code>v1.3.1</code>了，我猜你不会这么做</li>
<li>修改源码<a href="https://github.com/docker/docker/tree/master/registry" target="_blank" rel="external">session.go</a>，去掉相应的判断行，然后git下来重新安装。我猜你更不会这么做</li>
<li>安装SSL证书，使用HTTPS传输。这是明智的选择，新版本docker也推荐我们这么做，往下看。</li>
</ul>
<h3 id="3-3-为nginx安装ssl证书"><a href="#3-3-为nginx安装ssl证书" class="headerlink" title="3.3 为nginx安装ssl证书"></a>3.3 为nginx安装ssl证书</h3><p>首先打开nginx配置文件中ssl的三行注释<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># vi /etc/nginx/conf.d/docker-registry.conf</span></div><div class="line">...</div><div class="line"><span class="class">server </span>&#123;</div><div class="line"> listen <span class="number">8000</span>;</div><div class="line"> server_name registry.domain.com;</div><div class="line"></div><div class="line"></div><div class="line"> ssl on;</div><div class="line"> ssl_certificate <span class="meta-keyword">/etc/</span>nginx<span class="meta-keyword">/ssl/</span>nginx.crt;</div><div class="line"> ssl_certificate_key <span class="meta-keyword">/etc/</span>nginx<span class="meta-keyword">/ssl/</span>nginx.key;</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>保存之后，nginx会分别从<code>/etc/nginx/ssl/nginx.crt</code>和<code>/etc/nginx/ssl/nginx.key</code>读取ssl证书和私钥。如果你自己愿意花钱买一个ssl证书，那就会变得非常简单，把证书和私钥拷贝成上面一样即可。关于SSL以及签署ssl证书，请参考其他文章。<br>这里我们自签署一个ssl证书，把当前系统作为（私有）证书颁发中心（CA）。</p>
<p>创建存放证书的目录<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># mkdir /etc/nginx/ssl</span></div></pre></td></tr></table></figure></p>
<p>确认CA的一些配置文件</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vi /etc/pki/tls/openssl.cnf</span></div><div class="line">...</div><div class="line">[ CA_default ]</div><div class="line"></div><div class="line">dir             = /etc/pki/CA           <span class="comment"># Where everything is kept</span></div><div class="line">certs           = <span class="variable">$dir</span>/certs            <span class="comment"># Where the issued certs are kept</span></div><div class="line">crl_dir         = <span class="variable">$dir</span>/crl              <span class="comment"># Where the issued crl are kept</span></div><div class="line">database        = <span class="variable">$dir</span>/index.txt        <span class="comment"># database index file.</span></div><div class="line"><span class="comment">#unique_subject = no                    # Set to 'no' to allow creation of</span></div><div class="line">                                        <span class="comment"># several ctificates with same subject.</span></div><div class="line">new_certs_dir   = <span class="variable">$dir</span>/newcerts         <span class="comment"># default place for new certs.</span></div><div class="line"></div><div class="line">certificate     = <span class="variable">$dir</span>/cacert.pem       <span class="comment"># The CA certificate</span></div><div class="line">serial          = <span class="variable">$dir</span>/serial           <span class="comment"># The current serial number</span></div><div class="line">crlnumber       = <span class="variable">$dir</span>/crlnumber        <span class="comment"># the current crl number</span></div><div class="line">                                        <span class="comment"># must be commented out to leave a V1 CRL</span></div><div class="line">crl             = <span class="variable">$dir</span>/crl.pem          <span class="comment"># The current CRL</span></div><div class="line">private_key     = <span class="variable">$dir</span>/private/cakey.pem <span class="comment"># The private key</span></div><div class="line">RANDFILE        = <span class="variable">$dir</span>/private/.rand    <span class="comment"># private random number file</span></div><div class="line">...</div><div class="line">default_days    = <span class="number">3650</span>                  <span class="comment"># how long to certify for</span></div><div class="line">...</div><div class="line">[ req_distinguished_name ]</div><div class="line">countryName                     = Country Name (<span class="number">2</span> letter code)</div><div class="line">countryName_default             = CN</div><div class="line">countryName_min                 = <span class="number">2</span></div><div class="line">countryName_max                 = <span class="number">2</span></div><div class="line"></div><div class="line"><span class="keyword">state</span>OrProvinceName             = State or Province Name (full name)</div><div class="line"><span class="keyword">state</span>OrProvinceName_default     = GD</div><div class="line">...[ req_distinguished_name ]部分主要是颁证时一些默认的值，可以不动</div></pre></td></tr></table></figure>
<p>(1) 生成根密钥<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># cd /etc/pki/CA/</span></div><div class="line"><span class="meta"># openssl genrsa -out private/cakey.pem 2048</span></div></pre></td></tr></table></figure></p>
<p>为了安全起见，修改cakey.pem私钥文件权限为600或400，也可以使用子shell生成<code>( umask 077; openssl genrsa -out private/cakey.pem 2048 )</code>，下面不再重复。</p>
<p>(2) 生成根证书<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># openssl req -<span class="keyword">new</span> -x509 -key <span class="keyword">private</span>/cakey.pem -<span class="keyword">out</span> cacert.pem</div></pre></td></tr></table></figure></p>
<p>会提示输入一些内容，因为是私有的，所以可以随便输入，最好记住能与后面保持一致。上面的自签证书<code>cacert.pem</code>应该生成在<code>/etc/pki/CA</code>下。</p>
<p>(3) 为我们的nginx web服务器生成ssl密钥<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># cd /etc/nginx/ssl</span></div><div class="line"><span class="meta"># openssl genrsa -out nginx.key 2048</span></div></pre></td></tr></table></figure></p>
<p>我们的CA中心与要申请证书的服务器是同一个，否则应该是在另一台需要用到证书的服务器上生成。</p>
<p>(4) 为nginx生成证书签署请求<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># openssl req -new -key nginx.key -out nginx.csr</span></div><div class="line">...</div><div class="line">Country <span class="built_in">Name</span> (<span class="number">2</span> letter code) [AU]:CN</div><div class="line">State <span class="built_in">or</span> Province <span class="built_in">Name</span> (full <span class="built_in">name</span>) [Some-State]:GD</div><div class="line">Locality <span class="built_in">Name</span> (eg, city) []:SZ</div><div class="line">Organization <span class="built_in">Name</span> (eg, company) [Internet Widgits Pty Ltd]:COMPANY</div><div class="line">Organizational Unit <span class="built_in">Name</span> (eg, section) []:IT_SECTION</div><div class="line">Common <span class="built_in">Name</span> (e.g. server FQDN <span class="built_in">or</span> YOUR <span class="built_in">name</span>) []:your.domain.com</div><div class="line">Email Address []:</div><div class="line"></div><div class="line">Please enter the following <span class="string">'extra'</span> attributes</div><div class="line"><span class="keyword">to</span> be sent <span class="keyword">with</span> your certificate request</div><div class="line">A challenge password []:</div><div class="line">An optional company <span class="built_in">name</span> []:</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>同样会提示输入一些内容，其它随便，除了<code>Commone Name</code>一定要是你要授予证书的服务器域名或主机名，challenge password不填。</p>
<p>(5) 私有CA根据请求来签发证书<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># openssl <span class="keyword">ca</span> -<span class="keyword">in</span> nginx.csr -<span class="keyword">out</span> nginx.crt</div></pre></td></tr></table></figure></p>
<p>上面签发过程其实默认使用了<code>-cert cacert.pem -keyfile cakey.pem</code>，这两个文件就是前两步生成的位于<code>/etc/pki/CA</code>下的根密钥和根证书。</p>
<p>到此我们已经拥有了建立ssl安全连接所需要的所有文件，并且服务器的crt和key都位于配置的目录下，唯有根证书<code>cacert.pem</code>位置不确定放在CentOS6下的哪个地方。<br>经验证以下几个位置不行：（<a href="http://kb.kerio.com/product/kerio-connect/server-configuration/ssl-certificates/adding-trusted-root-certificates-to-the-server-1605.html" target="_blank" rel="external">Adding trusted root certificates to the server</a>）<br><code>/etc/pki/ca-trust/source/anchors</code>、<code>/etc/pki/ca-trust/source</code>、<code>/etc/pki/ca-trust/extracted</code>、<br><code>/etc/pki/ca-trust/extracted/pem/</code>、<code>/etc/pki/tls/certs/cacert.crt</code><br>都会报错：<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># docker login https://registry.domain.com:<span class="number">8000</span></div><div class="line">Username (sean): sean</div><div class="line"><span class="number">2014</span>/<span class="number">11</span>/<span class="number">14</span> <span class="number">02</span>:<span class="number">32</span>:<span class="number">48</span> Error response from daemon: Invalid Registry endpoint: Get https://registry.domain.com:<span class="number">8000</span>/v1/_ping: x509: certificate <span class="built_in">signed</span> by unknown authority</div><div class="line"></div><div class="line"># curl https://sean:sean@registry.domain.com:<span class="number">8000</span>/</div><div class="line">curl: (<span class="number">60</span>) Peer certificate cannot be authenticated <span class="keyword">with</span> known CA certificates</div><div class="line">More details here: http://curl.haxx.se/docs/sslcerts.html</div><div class="line">curl performs SSL certificate verification by <span class="keyword">default</span>, using a <span class="string">"bundle"</span></div><div class="line"> <span class="keyword">of</span> Certificate Authority (CA) public keys (CA certs). <span class="keyword">If</span> the <span class="keyword">default</span></div><div class="line"> bundle <span class="keyword">file</span> isn<span class="symbol">'t</span> adequate, you can specify an alternate <span class="keyword">file</span></div><div class="line"> using the <span class="comment">--cacert option.</span></div><div class="line"><span class="keyword">If</span> this HTTPS server uses a certificate <span class="built_in">signed</span> by a CA represented <span class="keyword">in</span></div><div class="line"> the bundle, the certificate verification probably failed due <span class="keyword">to</span> a</div><div class="line"> problem <span class="keyword">with</span> the certificate (it might be expired, <span class="keyword">or</span> the name might</div><div class="line"> <span class="keyword">not</span> match the domain name <span class="keyword">in</span> the URL).</div><div class="line"><span class="keyword">If</span> you<span class="symbol">'d</span> like <span class="keyword">to</span> turn off curl<span class="symbol">'s</span> verification <span class="keyword">of</span> the certificate, <span class="keyword">use</span></div><div class="line"> the -k (<span class="keyword">or</span> <span class="comment">--insecure) option.</span></div></pre></td></tr></table></figure></p>
<p>(6) 目前让根证书起作用的只发现一个办法：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># cp /etc/pki/tls/certs/ca-bundle.crt&#123;,.bak&#125;    备份以防出错</span></div><div class="line"><span class="meta"># cat /etc/pki/CA/cacert.pem &gt;&gt; /etc/pki/tls/certs/ca-bundle.crt</span></div><div class="line"></div><div class="line"><span class="meta"># curl https://sean:sean@registry.domain.com:8000</span></div><div class="line"><span class="string">"docker-registry server (dev) (v0.8.1)"</span></div></pre></td></tr></table></figure></p>
<p>将<code>cacert.pem</code>根证书追加到<code>ca-bundle.crt</code>后一定要重启docker后台进程才行。</p>
<p>如果<code>docker login</code>依然报错<code>certificate signed by unknown authority</code>，参考<a href="https://docs.docker.com/articles/https/" target="_blank" rel="external">Running Docker with https</a>，启动docker后台进程时指定信任的CA根证书：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># docker -d --tlsverify --tlscacert /etc/pki/CA/cacert.pem</span></div><div class="line"></div><div class="line">或者将cacert.pem拷贝到~/.docker/ca.pem</div><div class="line"><span class="meta"># mkdir ~/.docker &amp;&amp; cp /etc/pki/CA/cacert.pem ~/.docker/ca.pem</span></div><div class="line"><span class="meta"># docker -d</span></div><div class="line">最好重启一下registry</div><div class="line"><span class="meta"># docker restart &lt;registry_container_id&gt;</span></div></pre></td></tr></table></figure></p>
<p>上面用“如果”是因为一开始总提示<code>certificate signed by unknown authority</code>，<a href="https://github.com/docker/docker/blob/master/docs/sources/articles/certificates.md" target="_blank" rel="external">有人说</a>将根证书放在<code>/etc/docker/certs.d</code>下，<a href="">还有人说</a>启动docker daemon收加入<code>--insecure-registry ..</code> 但终究是因为版本差异不成功。但后来又奇迹般的不需要<code>--tlscacert</code>就好了。<br>这个地方挣扎了很久，重点关注一下这个下面几个issue：</p>
<ul>
<li><a href="https://github.com/docker/docker-registry/issues/82" target="_blank" rel="external">https://github.com/docker/docker-registry/issues/82</a></li>
<li><a href="https://github.com/docker/docker/pull/2687" target="_blank" rel="external">https://github.com/docker/docker/pull/2687</a></li>
<li><a href="https://github.com/docker/docker/pull/2339" target="_blank" rel="external">https://github.com/docker/docker/pull/2339</a></li>
</ul>
<p>(7) 最终搞定：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># docker login http<span class="variable">s:</span>//registry.domain.<span class="keyword">com</span>:<span class="number">8000</span></div><div class="line">Username: sean</div><div class="line">Password: </div><div class="line">Emai<span class="variable">l:</span> zhouxiao@domain.<span class="keyword">com</span></div><div class="line">Login Succeeded</div><div class="line"></div><div class="line"># curl http<span class="variable">s:</span>//sean:sean@registry.domain.<span class="keyword">com</span>:<span class="number">8000</span></div><div class="line"><span class="string">"docker-registry server (dev) (v0.8.1)"</span></div><div class="line"></div><div class="line"># docker push registry.domain.<span class="keyword">com</span>:<span class="number">8000</span>/centos6:test_priv</div><div class="line">The push refers <span class="keyword">to</span> <span class="keyword">a</span> repository [registry.domain.<span class="keyword">com</span>:<span class="number">8000</span>/centos6] (<span class="built_in">len</span>: <span class="number">1</span>)</div><div class="line">Sending image <span class="keyword">list</span></div><div class="line">Pushing repository registry.domain.<span class="keyword">com</span>:<span class="number">8000</span>/centos6 (<span class="number">1</span> <span class="keyword">tags</span>)</div><div class="line"><span class="number">511136</span>ea3c5<span class="variable">a:</span> Image successfully pushed </div><div class="line"><span class="number">5</span>b12ef8fd570: Image successfully pushed </div><div class="line"><span class="number">68</span>edf809afe7: Image successfully pushed </div><div class="line"><span class="number">40627956</span>f44c: Image successfully pushed </div><div class="line">Pushing <span class="keyword">tag</span> <span class="keyword">for</span> rev [<span class="number">40627956</span>f44c] <span class="keyword">on</span> &#123;http<span class="variable">s:</span>//registry.domain.<span class="keyword">com</span>:<span class="number">8000</span>/v1/repositories/centos6/<span class="keyword">tags</span>/test_priv&#125;</div></pre></td></tr></table></figure></p>
<p>但还有一个小问题没解决，虽然已经可以正常使用，但每次请求在nginx的error.log中还是会有<code>[error] 8299#0: *27 no user/password was provided for basic authentication</code>，应该是这个版本docker暂未解决的bug。</p>
<h3 id="3-3-其它问题"><a href="#3-3-其它问题" class="headerlink" title="3.3 其它问题"></a>3.3 其它问题</h3><p>(1) docker后台进程意外中断后，重新<code>docker start &lt;container_id&gt;</code>报错<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># docker start b36bd796bd3d</div><div class="line"><span class="keyword">Error: </span>Cannot start container b36bd796bd3d: Error getting container b36bd796bd3d463c4fedb70d98621e7318ec3d5cd14b2f60b1d182ad3cbcc652 </div><div class="line">from driver devicemapper: Error mounting '/dev/mapper/docker<span class="string">-253</span>:0<span class="string">-787676</span>-b36bd796bd3d463c4fedb70d98621e7318ec3d5cd14b2f60b1d182ad3cbcc652' </div><div class="line">on '/var/lib/docker/devicemapper/mnt/b36bd796bd3d463c4fedb70d98621e7318ec3d5cd14b2f60b1d182ad3cbcc652': device or resource busy</div><div class="line">2014/11/08 15:14:57 Error: failed to start one or more containers</div></pre></td></tr></table></figure></p>
<p>经分析产生这个问题的原因是做了一个操作：在docker后台进程启动的终端，继续回车后会临时退出后台进程的日志输出，我就在这个shell下使用yum安装软件包，但由于网络原因yum卡住不动，于是我就另起了一个终端kill了这个yum进程，不知为何会影响到表面已经退出前台输出的docker。解决办法是umount容器的挂载点：（见<a href="https://github.com/docker/docker/issues/5684" target="_blank" rel="external">这里</a>）<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># umount /var/lib/docker/devicemapper/mnt/b36bd796bd3d463c4fedb70d98621e7318ec3d5cd14b2f60b1d182ad3cbcc652</span></div><div class="line"></div><div class="line"><span class="meta"># service docker start   正常</span></div></pre></td></tr></table></figure></p>
<p>能想到的另外一个办法是，启动docker后台进程时，重定向输出<code>docker -d &gt; /dev/null 2&gt;&amp;1</code>（/var/log/docker已自动记录了一份日志）。</p>
<p>(2) 配置完nginx的docker-registry.conf后启动报错<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># service nginx start</div><div class="line">[emerg] 14714#0: unknown directive <span class="string">"upstream"</span> <span class="keyword">in</span> /etc/nginx/<span class="keyword">conf</span>.<span class="keyword">d</span>/docker-registry.<span class="keyword">conf</span>:4</div></pre></td></tr></table></figure></p>
<p>原因是nginx版本太低，一些配置指令不兼容，使用<code>yum install nginx</code>默认安装了1.0.x，卸载重新下载<code>nginx-1.4.7-1.el6.ngx.x86_64.rpm</code>安装解决。</p>
<p>(3) 网络设置代理问题<br><code>pull, push</code>官网的镜像时由于GFW的原因需要设置代理，但不是<code>http_proxy</code>而是<code>HTTP_PROXY</code>，对于docker来说同时设置这两个值就会出问题，有时出于安装软件包的需要设置<code>http_proxy</code>，就会导致冲突。在docker-registry中如果忘记了当前哪一个在起作用，找遍所有问题都发现不了原因，而docker返回给我们的错误也难以判断。切记~</p>
<p>TO-DO<br>   如何删除docker-registry的里的镜像</p>
<h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><ul>
<li><a href="https://docker.cn/p/deploy-your-own-private-docker-registry/" target="_blank" rel="external">部署自己的私有 Docker Registry</a> [<a href="http://www.activestate.com/blog/2014/01/deploying-your-own-private-docker-registry" target="_blank" rel="external">英文</a>]</li>
<li><a href="https://github.com/docker/docker-registry" target="_blank" rel="external">Official docker-registry README</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-private-docker-registry-on-ubuntu-14-04" target="_blank" rel="external">How To Set Up a Private Docker Registry on Ubuntu 14.04</a></li>
<li><a href="http://beta-docs.docker.io/reference/api/hub_registry_spec/" target="_blank" rel="external">The Docker Hub and the Registry spec</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[完全解决Github Pages邮件两次warning（DNS解析问题）]]></title>
      <url>http://seanlook.com/2014/11/08/github-mail-warning-dns/</url>
      <content type="html"><![CDATA[<p>之所以有本文是由于Github前后两次发了2封不同的警告邮件，都是关于DNS配置的。因为<code>seanlook.com</code>刚申请下来时我也是参考其他博客，在<code>seanlook.github.com</code>仓库下面建立了一个<code>CNAME</code>文件，内容：<code>seanlook.com</code>，然后去DNSPod绑定域名和IP（207.97.227.245）访问也就没事了。然而几天之后每次deploy博客的时候都会受到一封<code>build warning</code>邮件（见本文最后），后来参考下面的文章：</p>
<ul>
<li><a href="http://mayecn.com/blog/2014/05/17/githubpages-accelerating/" target="_blank" rel="external">解决GitHub Pages Warning邮件提醒</a></li>
<li><a href="http://www.pchou.info/web-build/2014/07/04/build-github-blog-page-08.html" target="_blank" rel="external">一步步在GitHub上创建博客主页-最新版 — 自定义域名的新玩法</a></li>
<li><a href="https://github.com/blog/1715-faster-more-awesome-github-pages" target="_blank" rel="external">Faster, More Awesome GitHub Pages</a> 和 <a href="https://github.com/blog/1917-github-pages-legacy-ip-deprecation" target="_blank" rel="external">GitHub Pages Legacy IP Deprecation</a></li>
</ul>
<p>但显然第一篇有点拆东墙补西墙，只是换了个离自己最近的服务器，CDN根本就没用上，也是因为我<code>dig seanlook.github.io +nostats +nocomments +nocmd</code>之后把IP改成了103.245.222.133，才有了第二封邮件的warning（见本文最后）。第二篇倒是跟官方（第三条）是同一个意思，但是博主放弃了原本的顶级域名而是用www子域名。<br>首先根据邮件提示，明确一下最终目的：</p>
<ul>
<li>使用顶级域名<code>seanlook.com</code>来访问站点</li>
<li>子域名<code>www.seanlook.com</code>跳转到<code>seanlook.com</code></li>
<li>充分Github Pages提供的cdn加速功能</li>
</ul>
<p>两份邮件大概是同一个意思，说Github Pages正在进行重大的升级来提供更快的访问速度，所以我们指定的域名解析的IP在不就的将来将要废弃，需要指向一个合法的IP，第二封邮件说的更明确了，为了使用CDN加速功能，需要增加<code>CNAME</code>的子域名解析记录。</p>
<blockquote>
<p>如果你正在使用顶级域名（example.com）而不是子域名（如www.example.com），并且你的DNS解析服务提供商不支持<code>ALIAS</code>记录，那么唯一的选择就是使用<code>A</code>记录，但这种配置没有办法利用CDN加速了（依然可以应对DoS攻击）。如果切换成子域名或使用支持<code>ALIAS</code>的DNS解析上，都可以利用CDN和应对DoS。</p>
</blockquote>
<a id="more"></a>
<p>不料我现在的情形正是，使用顶级域名<code>seanlook.com</code>，DNSPod不支持<code>ALIAS</code>记录。虽然目前不使用CDN加速访问起来没感觉有多大问题，但对于我这种有轻微强迫症并追求完美的人来说，就是看不惯这个warnning。DNS解析服务不想换成付费的支持<code>ALIAS</code>的DNSimple，那么难道只能启用www子域名了吗？对于有些已经对你的网站做了链接的地方，随便修改域名可不是什么好事。于是我就尝试了下面的设置：<br>在DNSPod中去掉其它映射记录，添加<code>CNAME</code>记录的顶级域名映射到<code>seanlook.github.com</code>，github仓库下的CNAME文件也是顶级域名<code>seanlook.com</code>。经过这样设置后访问<code>seanlook.com</code>发现完全没有问题：<br><img src="http://sean-images.qiniudn.com/dnspod_cname_apex.png" alt="dnspod_cname_apex"><br>中国境内的ping值：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ ping seanlook.com</div><div class="line">正在 Ping github.map.fastly.net [<span class="number">103.245</span><span class="meta">.222</span><span class="meta">.133</span>] 具有 <span class="number">32</span> 字节的数据:</div><div class="line">来自 <span class="number">103.245</span><span class="meta">.222</span><span class="meta">.133</span> 的回复: 字节=<span class="number">32</span> 时间=215ms TTL=<span class="number">42</span></div><div class="line">来自 <span class="number">103.245</span><span class="meta">.222</span><span class="meta">.133</span> 的回复: 字节=<span class="number">32</span> 时间=210ms TTL=<span class="number">42</span></div><div class="line">来自 <span class="number">103.245</span><span class="meta">.222</span><span class="meta">.133</span> 的回复: 字节=<span class="number">32</span> 时间=205ms TTL=<span class="number">42</span></div><div class="line">来自 <span class="number">103.245</span><span class="meta">.222</span><span class="meta">.133</span> 的回复: 字节=<span class="number">32</span> 时间=221ms TTL=<span class="number">42</span></div></pre></td></tr></table></figure></p>
<p>美国的一个IP的ping值：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rhcsh&gt; ping seanlook.com</div><div class="line">PING github.map.fastly.net (<span class="number">199.27</span><span class="number">.76</span><span class="number">.133</span>) <span class="number">56</span>(<span class="number">84</span>) <span class="keyword">bytes</span> <span class="keyword">of</span> data.</div><div class="line"><span class="number">64</span> <span class="keyword">bytes</span> <span class="built_in">from</span> <span class="number">199.27</span><span class="number">.76</span><span class="number">.133</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">43</span> <span class="built_in">time</span>=<span class="number">8.15</span> ms</div><div class="line"><span class="number">64</span> <span class="keyword">bytes</span> <span class="built_in">from</span> <span class="number">199.27</span><span class="number">.76</span><span class="number">.133</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">43</span> <span class="built_in">time</span>=<span class="number">8.12</span> ms</div><div class="line"><span class="number">64</span> <span class="keyword">bytes</span> <span class="built_in">from</span> <span class="number">199.27</span><span class="number">.76</span><span class="number">.133</span>: icmp_seq=<span class="number">3</span> ttl=<span class="number">43</span> <span class="built_in">time</span>=<span class="number">8.23</span> ms</div><div class="line"><span class="number">64</span> <span class="keyword">bytes</span> <span class="built_in">from</span> <span class="number">199.27</span><span class="number">.76</span><span class="number">.133</span>: icmp_seq=<span class="number">4</span> ttl=<span class="number">43</span> <span class="built_in">time</span>=<span class="number">8.02</span> ms</div></pre></td></tr></table></figure></p>
<p>可以看到是用上了CDN加速的特性。<br>但这样与官方给的做法是不同的，以防再出现什么问题，后来我通过邮件咨询过Github Pages的技术支持，反复告诉我说为www子域名添加CNAME记录到seanlook.github.com，为顶级域名添加A记录到<a href="https://help.github.com/articles/tips-for-configuring-an-a-record-with-your-dns-provider/#configuring-an-a-record-with-your-dns-provider" target="_blank" rel="external">IP addresses listed here</a>，仓库下的CNAME文件为子域名。来回好几封英文邮件就没有正面给出回答的。因为我还没有系统去了解过域名解析服务的原理，所以只好自己测试了。<br>保持上面的设置，即仓库的CNAME文件内容保持不变，为Apex domian—<code>seanlook.com</code>，DNSPod只有顶级域名的CNAME记录映射到<code>seanlook.github.com</code>，测试是可以提供CDN，但www域名无法访问，更不会跳转了。于是我分别继续了下面的测试：<br>(1) DNSPod再添加一条www子域名的CNAME指向<code>seanlook.github.com</code>，因为很容易理解的是访问www.seanlook.com也可以直接使用CDN加速了（官方一直建议有这样一条记录），但结果是不跳转。不行！<br>(2) DNSPod新添加的记录是 A record ，指向官方所建议的那个IP之一（192.30.252.153），结果达到要求，www.seanlook.com自动跳转到seanlook.com，自然顶级域名采用了CDN。</p>
<p>所以问题最终得到解决的方案是：</p>
<ul>
<li><p>仓库下的CNAMEw文件内容：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">cat</span> CNAME</div><div class="line">seanlook.<span class="keyword">com</span></div></pre></td></tr></table></figure>
</li>
<li><p>DNSPod的域名解析记录</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">主机记录  记录类型    线路类型 	        记录值 	      MX优先级    TTL</div><div class="line">    @       CNAME       默认       seanlook<span class="selector-class">.github</span><span class="selector-class">.com</span>.       -       <span class="number">600</span></div><div class="line">    @       NS          默认       f1g1ns1<span class="selector-class">.dnspod</span><span class="selector-class">.net</span>.        -       <span class="number">600</span></div><div class="line">    @       NS          默认       f1g1ns2<span class="selector-class">.dnspod</span><span class="selector-class">.net</span>.        -       <span class="number">600</span></div><div class="line">    www     A           默认       <span class="number">192.30</span>.<span class="number">252.153</span>             -       <span class="number">600</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>(注意，DNSPod域名设置里有一个“域名别名”与这个<code>ALIAS</code>记录是完全不同的概念。)</p>
<h2 id="邮件内容"><a href="#邮件内容" class="headerlink" title="邮件内容"></a>邮件内容</h2><h3 id="每次部署后都有一封邮件"><a href="#每次部署后都有一封邮件" class="headerlink" title="每次部署后都有一封邮件"></a>每次部署后都有一封邮件</h3><blockquote>
<p>GitHub <a href="&#109;&#x61;&#x69;&#108;&#116;&#111;&#58;&#x6e;&#x6f;&#114;&#101;&#x70;&#x6c;&#121;&#64;&#103;&#105;&#x74;&#x68;&#117;&#x62;&#46;&#x63;&#111;&#109;">&#x6e;&#x6f;&#114;&#101;&#x70;&#x6c;&#121;&#64;&#103;&#105;&#x74;&#x68;&#117;&#x62;&#46;&#x63;&#111;&#109;</a><br>11月6日 (3天前)<br>发送至 我<br>The page build completed successfully, but returned the following warning:<br>GitHub Pages recently underwent some improvements (<a href="https://github.com/blog/1715-faster-more-awesome-github-pages" target="_blank" rel="external">https://github.com/blog/1715-faster-more-awesome-github-pages</a>) to make your site faster and more awesome, but we’ve noticed that seanlook.com isn’t properly configured to take advantage of these new features. While your site will continue to work just fine, updating your domain’s configuration offers some additional speed and performance benefits. Instructions on updating your site’s IP address can be found at <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages" target="_blank" rel="external">https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages</a>, and of course, you can always get in touch with a human at support@github.com. For the more technical minded folks who want to skip the help docs: your site’s DNS records are pointed to a deprecated IP address.<br>For information on troubleshooting Jekyll see:<br>  <a href="https://help.github.com/articles/using-jekyll-with-pages#troubleshooting" target="_blank" rel="external">https://help.github.com/articles/using-jekyll-with-pages#troubleshooting</a><br>If you have any questions please contact us at <a href="https://github.com/contact" target="_blank" rel="external">https://github.com/contact</a>.</p>
</blockquote>
<h3 id="第二天的第二封邮件"><a href="#第二天的第二封邮件" class="headerlink" title="第二天的第二封邮件"></a>第二天的第二封邮件</h3><blockquote>
<p>GitHub Support <a href="&#x6d;&#x61;&#105;&#108;&#116;&#x6f;&#x3a;&#x73;&#117;&#112;&#112;&#x6f;&#114;&#116;&#64;&#x67;&#x69;&#x74;&#104;&#117;&#98;&#x2e;&#x63;&#111;&#x6d;">&#x73;&#117;&#112;&#112;&#x6f;&#114;&#116;&#64;&#x67;&#x69;&#x74;&#104;&#117;&#98;&#x2e;&#x63;&#111;&#x6d;</a><br>11月7日 (2天前)<br>发送至 我<br>Hi Sean,<br>The custom domain for your GitHub Pages site seanlook/seanlook.github.com needs attention. You must take immediate corrective action to ensure that your site remains available after December 1st, 2014.<br>Please follow the instructions for setting up a custom domain with GitHub Pages (<a href="http://github.cmail1.com/t/i-l-schrd-fkdtrjkl-y/" target="_blank" rel="external">http://github.cmail1.com/t/i-l-schrd-fkdtrjkl-y/</a>) to update your custom domain’s DNS settings to point to the proper GitHub IP addresses.<br>Why the change?<br>Nearly a year ago, we announced improvements to how we serve GitHub Pages sites (<a href="http://github.cmail1.com/t/i-l-schrd-fkdtrjkl-j/" target="_blank" rel="external">http://github.cmail1.com/t/i-l-schrd-fkdtrjkl-j/</a>). This week we’re making that change permanent  (<a href="http://github.cmail1.com/t/i-l-schrd-fkdtrjkl-t/)by" target="_blank" rel="external">http://github.cmail1.com/t/i-l-schrd-fkdtrjkl-t/)by</a> deprecating our old GitHub Pages infrastructure. If your custom domain is pointed at these legacy IPs, you’ll need to update your DNS configuration immediately to keep things running smoothly.<br>How long do I have to make the switch?<br>Starting the week of November 10th, pushing to a misconfigured site will result in a build error and you will receive an email stating that your site’s DNS is misconfigured. Your site will remain available to the public, but changes to your site will not be published until the DNS misconfiguration is resolved.<br>For the week of November 17th, there will be a week-long brownout for improperly configured GitHub Pages sites. If your site is pointed to a legacy IP address, you will receive a warning message that week, in place of your site’s content. Normal operation will resume at the conclusion of the brownout.<br>Starting December 1st, custom domains pointed to the deprecated IP addresses will no longer be served via GitHub Pages. No repository or Git data will be affected by the change.<br>Okay, I’m sold. What do I need to do?<br>Please follow the instructions for setting up a custom domain with GitHub Pages (<a href="http://github.cmail1.com/t/i-l-schrd-fkdtrjkl-i/" target="_blank" rel="external">http://github.cmail1.com/t/i-l-schrd-fkdtrjkl-i/</a>) to update your custom domain’s DNS settings to point to the proper GitHub IP addresses.<br>Questions? We’re here to help(<a href="http://github.cmail1.com/t/i-l-schrd-fkdtrjkl-d/" target="_blank" rel="external">http://github.cmail1.com/t/i-l-schrd-fkdtrjkl-d/</a>).<br>Happy Publishing!<br>— The GitHub Pages Team</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker常用管理命令（下）]]></title>
      <url>http://seanlook.com/2014/11/05/docker-command-best-use-2/</url>
      <content type="html"><![CDATA[<p>本文承接<a href="http://seanlook.com/2014/10/31/docker-command-best-use-1/">docker专题(2)：docker常用管理命令（上）</a>。</p>
<h3 id="1-开启-停止-重启container（start-stop-restart）"><a href="#1-开启-停止-重启container（start-stop-restart）" class="headerlink" title="1. 开启/停止/重启container（start/stop/restart）"></a>1. 开启/停止/重启container（start/stop/restart）</h3><p>容器可以通过<code>run</code>新建一个来运行，也可以重新<code>start</code>已经停止的container，但<code>start</code>不能够再指定容器启动时运行的指令，因为docker只能有一个前台进程。<br>容器stop（或<code>Ctrl+D</code>）时，会在保存当前容器的状态之后退出，下次start时保有上次关闭时更改。而且每次进入<code>attach</code>进去的界面是一样的，与第一次run启动或commit提交的时刻相同。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CONTAINER_ID=<span class="variable">$(</span>docker start &lt;containner_id&gt;)</div><div class="line">docker stop <span class="variable">$CONTAINER_ID</span></div><div class="line">docker restart <span class="variable">$CONTAINER_ID</span></div></pre></td></tr></table></figure></p>
<p>关于这几个命令可以通过一个完整的实例使用：<a href="http://seanlook.com/2014/11/03/docker-run-container-with-shell-daemon_process/">docker如何创建一个运行后台进程的容器并同时提供shell终端</a>。</p>
<h3 id="2-连接到正在运行中的container（attach）"><a href="#2-连接到正在运行中的container（attach）" class="headerlink" title="2. 连接到正在运行中的container（attach）"></a>2. 连接到正在运行中的container（attach）</h3><p>要<code>attach</code>上去的容器必须正在运行，可以同时连接上同一个container来共享屏幕（与<code>screen</code>命令的attach类似）。<br>官方文档中说<code>attach</code>后可以通过<code>CTRL-C</code>来detach，但实际上经过我的测试，如果container当前在运行bash，<code>CTRL-C</code>自然是当前行的输入，没有退出；如果container当前正在前台运行进程，如输出nginx的access.log日志，<code>CTRL-C</code>不仅会导致退出容器，而且还stop了。这不是我们想要的，detach的意思按理应该是脱离容器终端，但容器依然运行。好在<code>attach</code>是可以带上<code>--sig-proxy=false</code>来确保<code>CTRL-D</code>或<code>CTRL-C</code>不会关闭容器。</p>
<a id="more"></a>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># docker attach --<span class="keyword">sig</span>-proxy=<span class="keyword">false</span> $CONTAINER_ID</div></pre></td></tr></table></figure>
<h3 id="3-查看image或container的底层信息（inspect）"><a href="#3-查看image或container的底层信息（inspect）" class="headerlink" title="3. 查看image或container的底层信息（inspect）"></a>3. 查看image或container的底层信息（inspect）</h3><p><code>inspect</code>的对象可以是image、运行中的container和停止的container。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">查看容器的内部IP</div><div class="line"># docker inspect --format='&#123;\&#123;.NetworkSettings.IPAddress&#125;&#125;' $CONTAINER_ID</div><div class="line"><span class="number">172.17</span><span class="number">.42</span><span class="number">.35</span></div><div class="line">（注：由于代码块解析的问题，上面NetworkSettings前面的 \ 去掉）</div></pre></td></tr></table></figure>
<h3 id="4-删除一个或多个container、image（rm、rmi）"><a href="#4-删除一个或多个container、image（rm、rmi）" class="headerlink" title="4. 删除一个或多个container、image（rm、rmi）"></a>4. 删除一个或多个container、image（rm、rmi）</h3><p>你可能在使用过程中会<code>build</code>或<code>commit</code>许多镜像，无用的镜像需要删除。但删除这些镜像是有一些条件的：</p>
<ul>
<li>同一个<code>IMAGE ID</code>可能会有多个<code>TAG</code>（可能还在不同的仓库），首先你要根据这些 image names 来删除标签，当删除最后一个tag的时候就会自动删除镜像；</li>
<li>承上，如果要删除的多个<code>IMAGE NAME</code>在同一个<code>REPOSITORY</code>，可以通过<code>docker rmi &lt;image_id&gt;</code>来同时删除剩下的<code>TAG</code>；若在不同Repo则还是需要手动逐个删除<code>TAG</code>；</li>
<li>还存在由这个镜像启动的container时（即便已经停止），也无法删除镜像；</li>
</ul>
<p>TO-DO<br>  如何查看镜像与容器的依存关系</p>
<p><strong> 删除容器 </strong><br><code>docker rm &lt;container_id/contaner_name&gt;</code><br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">删除所有停止的容器</div><div class="line">docker rm $<span class="comment">(docker ps -a -q)</span></div></pre></td></tr></table></figure></p>
<p><strong> 删除镜像 </strong><br><code>docker rmi &lt;image_id/image_name ...&gt;</code><br>下面是一个完整的示例：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker images            &lt;==</span></div><div class="line">ubuntu            <span class="number">13.10</span>        <span class="number">195</span>eb90b5349       <span class="number">4</span> months ago       <span class="number">184.6</span> MB</div><div class="line">ubuntu            saucy        <span class="number">195</span>eb90b5349       <span class="number">4</span> months ago       <span class="number">184.6</span> MB</div><div class="line">seanlook/ubuntu   rm_test      <span class="number">195</span>eb90b5349       <span class="number">4</span> months ago       <span class="number">184.6</span> MB</div><div class="line"></div><div class="line">使用<span class="number">195</span>eb90b5349启动、停止一个容器后，删除这个镜像</div><div class="line"><span class="comment"># docker rmi 195eb90b5349</span></div><div class="line">Error response <span class="built_in">from</span> daemon: Conflict, cannot <span class="built_in">delete</span> image <span class="number">195</span>eb90b5349 because <span class="keyword">it</span> is </div><div class="line">tagged <span class="keyword">in</span> multiple repositories, use -f <span class="built_in">to</span> force</div><div class="line"><span class="number">2014</span>/<span class="number">11</span>/<span class="number">04</span> <span class="number">14</span>:<span class="number">19</span>:<span class="number">00</span> Error: failed <span class="built_in">to</span> remove <span class="literal">one</span> <span class="keyword">or</span> more images</div><div class="line"></div><div class="line">删除seanlook仓库中的tag     &lt;==</div><div class="line"><span class="comment"># docker rmi seanlook/ubuntu:rm_test</span></div><div class="line">Untagged: seanlook/ubuntu:rm_test</div><div class="line"></div><div class="line">现在删除镜像，还会由于container的存在不能rmi</div><div class="line"><span class="comment"># docker rmi 195eb90b5349</span></div><div class="line">Error response <span class="built_in">from</span> daemon: Conflict, cannot <span class="built_in">delete</span> <span class="number">195</span>eb90b5349 because <span class="keyword">the</span> </div><div class="line"> container eef3648a6e77 is <span class="keyword">using</span> <span class="keyword">it</span>, use -f <span class="built_in">to</span> force</div><div class="line"><span class="number">2014</span>/<span class="number">11</span>/<span class="number">04</span> <span class="number">14</span>:<span class="number">24</span>:<span class="number">15</span> Error: failed <span class="built_in">to</span> remove <span class="literal">one</span> <span class="keyword">or</span> more images</div><div class="line"></div><div class="line">先删除由这个镜像启动的容器    &lt;==</div><div class="line"><span class="comment"># docker rm eef3648a6e77</span></div><div class="line"></div><div class="line">删除镜像                    &lt;==</div><div class="line"><span class="comment"># docker rmi 195eb90b5349</span></div><div class="line">Deleted: <span class="number">195</span>eb90b534950d334188c3627f860fbdf898e224d8a0a11ec54ff453175e081</div><div class="line">Deleted: <span class="number">209</span>ea56fda6dc2fb013e4d1e40cb678b2af91d1b54a71529f7df0bd867adc961</div><div class="line">Deleted: <span class="number">0</span>f4aac48388f5d65a725ccf8e7caada42f136026c566528a5ee9b02467dac90a</div><div class="line">Deleted: fae16849ebe23b48f2bedcc08aaabd45408c62b531ffd8d3088592043d5e7364</div><div class="line">Deleted: f127542f0b6191e99bb015b672f5cf48fa79d974784ac8090b11aeac184eaaff</div></pre></td></tr></table></figure></p>
<p>注意，上面的删除过程我所举的例子比较特殊——镜像被tag在多个仓库，也有启动过的容器。按照<code>&lt;==</code>指示的顺序进行即可。</p>
<h3 id="5-docker-build-使用此配置生成新的image"><a href="#5-docker-build-使用此配置生成新的image" class="headerlink" title="5. docker build  使用此配置生成新的image"></a>5. docker build <path></path> 使用此配置生成新的image</h3><p><code>build</code>命令可以从<code>Dockerfile</code>和上下文来创建镜像：<br><code>docker build [OPTIONS] PATH | URL | -</code><br>上面的<code>PATH</code>或<code>URL</code>中的文件被称作上下文，build image的过程会先把这些文件传送到docker的服务端来进行的。<br>如果<code>PATH</code>直接就是一个单独的<code>Dockerfile</code>文件则可以不需要上下文；如果<code>URL</code>是一个Git仓库地址，那么创建image的过程中会自动<code>git clone</code>一份到本机的临时目录，它就成为了本次build的上下文。无论指定的<code>PATH</code>是什么，<code>Dockerfile</code>是至关重要的，请参考<a href="http://docs.docker.com/reference/builder/" target="_blank" rel="external">Dockerfile Reference</a>。<br>请看下面的例子：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># cat Dockerfile </div><div class="line">FROM seanlook/nginx:bash_vim</div><div class="line">EXPOSE 80</div><div class="line">ENTRYPOINT /usr/sbin/nginx -c /etc/nginx/nginx.conf &amp;&amp; /bin/bash</div><div class="line"></div><div class="line"># docker build -t seanlook/nginx:bash_vim_Df .</div><div class="line">Sending build context to Docker daemon 73.45 MB</div><div class="line">Sending build context to Docker daemon </div><div class="line">Step 0 : FROM seanlook/nginx:bash_vim</div><div class="line"> -<span class="ruby">--&gt; aa8516fa0bb7</span></div><div class="line">Step 1 : EXPOSE 80</div><div class="line"> -<span class="ruby">--&gt; Using cache</span></div><div class="line"> -<span class="ruby">--&gt; fece07e2b515</span></div><div class="line">Step 2 : ENTRYPOINT /usr/sbin/nginx -c /etc/nginx/nginx.conf &amp;&amp; /bin/bash</div><div class="line"> -<span class="ruby">--&gt; Running <span class="keyword">in</span> e08963fd5afb</span></div><div class="line"> -<span class="ruby">--&gt; d9bbd13f5066</span></div><div class="line">Removing intermediate container e08963fd5afb</div><div class="line">Successfully built d9bbd13f5066</div></pre></td></tr></table></figure></p>
<p>上面的<code>PATH</code>为<code>.</code>，所以在当前目录下的所有文件（不包括<code>.dockerignore</code>中的）将会被<code>tar</code>打包并传送到<code>docker daemon</code>（一般在本机），从输出我们可以到<code>Sending build context...</code>，最后有个<code>Removing intermediate container</code>的过程，可以通过<code>--rm=false</code>来保留容器。<br>TO-DO<br>  <code>docker build github.com/creack/docker-firefox</code>失败。</p>
<h3 id="6-给镜像打上标签（tag）"><a href="#6-给镜像打上标签（tag）" class="headerlink" title="6. 给镜像打上标签（tag）"></a>6. 给镜像打上标签（tag）</h3><p>tag的作用主要有两点：一是为镜像起一个容易理解的名字，二是可以通过<code>docker tag</code>来重新指定镜像的仓库，这样在<code>push</code>时自动提交到仓库。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">将同一IMAGE_ID的所有<span class="keyword">tag</span>，合并为一个新的</div><div class="line"># docker <span class="keyword">tag</span> <span class="number">195</span>eb90b5349 seanlook/ubuntu:rm_test</div><div class="line"></div><div class="line">新建一个<span class="keyword">tag</span>，保留旧的那条记录</div><div class="line"># docker <span class="keyword">tag</span> Registry/Repo<span class="variable">s:Tag</span> New_Registry/New_Repo<span class="variable">s:New_Tag</span></div></pre></td></tr></table></figure></p>
<h3 id="7-查看容器的信息container（ps）"><a href="#7-查看容器的信息container（ps）" class="headerlink" title="7. 查看容器的信息container（ps）"></a>7. 查看容器的信息container（ps）</h3><p><code>docker ps</code>命令可以查看容器的<code>CONTAINER ID</code>、<code>NAME</code>、<code>IMAGE NAME</code>、端口开启及绑定、容器启动后执行的<code>COMMNAD</code>。经常通过<code>ps</code>来找到<code>CONTAINER_ID</code>。<br><code>docker ps</code> 默认显示当前正在运行中的container<br><code>docker ps -a</code> 查看包括已经停止的所有容器<br><code>docker ps -l</code> 显示最新启动的一个容器（包括已停止的）</p>
<h3 id="8-查看容器中正在运行的进程（top）"><a href="#8-查看容器中正在运行的进程（top）" class="headerlink" title="8. 查看容器中正在运行的进程（top）"></a>8. 查看容器中正在运行的进程（top）</h3><p>容器运行时不一定有<code>/bin/bash</code>终端来交互执行top命令，查看container中正在运行的进程，况且还不一定有<code>top</code>命令，这是<code>docker top &lt;container_id/container_name&gt;</code>就很有用了。实际上在host上使用<code>ps -ef|grep docker</code>也可以看到一组类似的进程信息，把container里的进程看成是host上启动docker的子进程就对了。</p>
<h3 id="9-其他命令"><a href="#9-其他命令" class="headerlink" title="9. 其他命令"></a>9. 其他命令</h3><p>docker还有一些如<code>login</code>、<code>cp</code>、<code>logs</code>、<code>export</code>、<code>import</code>、<code>load</code>、<code>kill</code>等不是很常用的命令，比较简单，请参考官网。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://docs.docker.com/v1.1/reference/commandline/cli/" target="_blank" rel="external">Official Command Line Reference</a></li>
<li><a href="http://www.widuu.com/docker/" target="_blank" rel="external">docker中文指南cli-widuu翻译</a></li>
<li><a href="http://www.dockerpool.com/static/books/docker_practice/" target="_blank" rel="external">Docker —— 从入门到实践</a></li>
<li><a href="http://17173ops.com/2014/10/13/docker%E5%9F%BA%E7%A1%80%E4%B8%8E%E9%AB%98%E7%BA%A7.shtml" target="_blank" rel="external">Docker基础与高级</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker如何创建一个运行后台进程的容器并同时提供shell终端]]></title>
      <url>http://seanlook.com/2014/11/03/docker-run-container-with-shell-daemon_process/</url>
      <content type="html"><![CDATA[<p>只看标题还不是很明显，本文实现docker的这样一种比较常用的功能：通过<code>docker run</code>启动一个容器后，容器中已经运行了一个后台进程（这里以监听80端口的nginx为例），同时进入一个shell终端可供操作，而不受限于只能在前台运行nginx与运行shell终端之间的一种。这个例子实现了，那么其他类似的运行多任务docker就可以以此类推。另外本文还提供了一种在docker容器内部安装软件（<code>vim</code>）的方法，对于定制自己需要的镜像大有帮助。<br>你可能需要先阅读<a href="hhttp://seanlook.com/2014/10/31/docker-command-best-use-1/">docker专题(2)：docker常用管理命令（上）</a>、<a href="http://seanlook.com/2014/11/05/docker-command-best-use-2/">docker专题(2)：docker常用管理命令（下）</a>来理解更多。</p>
<h2 id="1-已经pull了官方的nginx-1-7-6的镜像（也可以从私服获取）"><a href="#1-已经pull了官方的nginx-1-7-6的镜像（也可以从私服获取）" class="headerlink" title="1. 已经pull了官方的nginx 1.7.6的镜像（也可以从私服获取）"></a>1. 已经pull了官方的<a href="https://registry.hub.docker.com/_/nginx/" target="_blank" rel="external">nginx 1.7.6</a>的镜像（也可以从私服获取）</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># docker images|grep nginx</div><div class="line">nginx              <span class="number">1.7</span><span class="number">.6</span>          <span class="number">561</span>ed4952ef0     <span class="number">10</span> days ago         <span class="number">100</span> MB</div></pre></td></tr></table></figure>
<h2 id="2-根据官方指示启动这个容器"><a href="#2-根据官方指示启动这个容器" class="headerlink" title="2. 根据官方指示启动这个容器"></a>2. 根据官方指示启动这个容器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">先做好自己要显示的页面</div><div class="line"># echo "<span class="tag">&lt;<span class="name">h2</span> &gt;</span>This is nginx official container running <span class="tag">&lt;/<span class="name">h2</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span> static files:/tmp/doccker/index.html" &gt; /tmp/docker/index.html</div></pre></td></tr></table></figure>
<p>使用官方image启动一个容器，名字nginx_dist，把host的目录（包含刚才的html）映射到容器中nginx server的root，绑定80端口：</p>
<a id="more"></a>
<figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker run --name nginx_dist -v /tmp/docker:/usr/share/nginx/html:ro \</span></div><div class="line">&gt; -p 80:80 -d nginx:1.7.6</div><div class="line">1b10b08d7905517a26c72ce8b17b719aaea5e5eac0889263db8b017427e3c8f7</div><div class="line"><span class="comment"># docker ps</span></div><div class="line">CONTAINER ID  IMAGE    COMMAND               CREATED          STATUS         PORTS                        NAMES</div><div class="line">1b10b08d7905  nginx:1  nginx -g 'daemon off <span class="number"> 51 </span>seconds ago   Up<span class="number"> 48 </span>seconds  443/tcp, 0.0.0.0:80-&gt;80/tcp  nginx_dist</div></pre></td></tr></table></figure>
<p>此时通过浏览器访问主机<code>http://host_ip:port/</code>就可以看到结果了：<br><img src="http://sean-images.qiniudn.com/docker_registry_nginx_dist.png" alt="docker_nginx_dist"></p>
<h2 id="3-查看这个容器的信息"><a href="#3-查看这个容器的信息" class="headerlink" title="3. 查看这个容器的信息"></a>3. 查看这个容器的信息</h2><p>熟悉一下docker的命令。<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">查看容器中运行着哪些进程</div><div class="line"># docker top nginx_dist</div><div class="line">UID     PID      PPID     C     STIME     TTY    TIME         CMD</div><div class="line">root    <span class="number">24378</span>    <span class="number">18471</span>    <span class="number">0</span>     <span class="number">15</span>:<span class="number">25</span>     ?      <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>     nginx: master process nginx -g daemon off;</div><div class="line"><span class="number">101</span>     <span class="number">24433</span>    <span class="number">24378</span>    <span class="number">0</span>     <span class="number">15</span>:<span class="number">25</span>     ?      <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>     nginx: worker process</div><div class="line"></div><div class="line">查看容器IP和主机等信息</div><div class="line"># docker inspect nginx_dist |grep <span class="number">172</span>.<span class="number">17</span></div><div class="line">        <span class="string">"Gateway"</span>: <span class="string">"172.17.42.1"</span>,</div><div class="line">        <span class="string">"IPAddress"</span>: <span class="string">"172.17.42.6"</span>,</div><div class="line"></div><div class="line">连接到容器上，--sig-proxy可以保证 Ctrl+D、Ctrl+C 不会退出</div><div class="line"># docker attach --sig-proxy=false nginx_dist </div><div class="line">xxx.xx.xx.xx - - <span class="string">[03/Nov/2014:07:39:52 +0000]</span> <span class="string">"<span class="keyword">GET</span> / HTTP/1.1"</span> <span class="number">304</span> <span class="number">0</span> <span class="string">"-"</span> <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.104 Safari/537.36"</span> <span class="string">"-"</span></div><div class="line">Ctrl+C</div></pre></td></tr></table></figure></p>
<h2 id="4-容器改造—在容器内部安装vim"><a href="#4-容器改造—在容器内部安装vim" class="headerlink" title="4. 容器改造—在容器内部安装vim"></a>4. 容器改造—在容器内部安装vim</h2><p>这里有个未解决的问题，能否有办法在上面已经启动的container的基础上执行命令？官方没有这样的支持。<br>目前只能重新启动一个容器(停止上面的<code>nginx_dist</code>容器)<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">可以比较一下与<span class="number">2</span>中命令的变化</div><div class="line"><span class="comment"># docker run --name nginx_bash_vim -v /tmp/docker:/usr/share/nginx/html:ro \</span></div><div class="line">&gt; -p <span class="number">80</span><span class="symbol">:</span><span class="number">80</span> -i -t <span class="symbol">nginx:</span><span class="number">1.7</span>.<span class="number">6</span> </div><div class="line">&gt; <span class="regexp">/bin/bash</span></div><div class="line">root<span class="variable">@3911d1104c3f</span><span class="symbol">:/</span><span class="comment">#</span></div></pre></td></tr></table></figure></p>
<p>但此时nginx服务是停止的，并没有在后台运行，访问<code>http://host_ip:port/</code>无效。为了后面编辑配置文件方便，我们先把<code>vim</code>安装好。<br>容器内部的网络与容器外部是相同的，并与host具有相同的DNS，所以可以使用公网软件（<code>cat /etc/apt/sources.list</code>）镜像源来安装。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">如果需要代理：export http_proxy=http://proxy_server:port</div><div class="line"># apt-<span class="built_in">get</span> clean</div><div class="line"># apt-<span class="built_in">get</span> <span class="keyword">update</span></div><div class="line"># apt-<span class="built_in">get</span> install <span class="keyword">vim</span></div><div class="line">Reading package lists... Done</div><div class="line">...</div><div class="line">After this operation, <span class="number">25.2</span> MB of additional disk space will <span class="keyword">be</span> used.</div><div class="line">Do you want <span class="keyword">to</span> <span class="keyword">continue</span> [Y/n]? <span class="keyword">y</span></div><div class="line">...</div><div class="line">Setting <span class="keyword">up</span> <span class="keyword">vim</span> (<span class="number">2</span>:<span class="number">7.3</span>.<span class="number">547</span>-<span class="number">7</span>) ...</div><div class="line">...</div></pre></td></tr></table></figure></p>
<h2 id="5-让nginx在后台运行，前台提供shell终端"><a href="#5-让nginx在后台运行，前台提供shell终端" class="headerlink" title="5. 让nginx在后台运行，前台提供shell终端"></a>5. 让nginx在后台运行，前台提供shell终端</h2><p>实现这一步的方法有许多种，比如</p>
<h3 id="5-1-手动运行-usr-sbin-nginx-c-etc-nginx-nginx-conf"><a href="#5-1-手动运行-usr-sbin-nginx-c-etc-nginx-nginx-conf" class="headerlink" title="5.1 手动运行/usr/sbin/nginx -c /etc/nginx/nginx.conf"></a>5.1 手动运行<code>/usr/sbin/nginx -c /etc/nginx/nginx.conf</code></h3><p>也就是用第4步的方法先启动到<code>/bin/bash</code>，再手动运行<code>/usr/sbin/nginx -c /etc/nginx/nginx.conf</code>或<code>service nginx start</code>，很容易想到，但太麻烦。</p>
<h3 id="5-2-通过Dockerfile来build"><a href="#5-2-通过Dockerfile来build" class="headerlink" title="5.2 通过Dockerfile来build"></a>5.2 通过<code>Dockerfile</code>来<code>build</code></h3><p>将装好vim的容器提交成新的image，然后通过<code>Dockerfile</code>来自定义要启动哪些服务。关于<code>Dockerfile</code>后面我也会写文章来单独介绍其语法。<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">在主机下运行</div><div class="line"><span class="comment"># docker commit -m "nginx 14.10 with bash,vim" nginx_bash_vim seanlook/nginx:bash_vim</span></div><div class="line">a06ab41a6565f0dbd5d35d44cb441d1a166beaae3bc49bffcb09d334a1e77a5c</div><div class="line"></div><div class="line">使用Dockerfile来建立一个新的镜像，加入启动到容器是运行的命令</div><div class="line"><span class="comment"># vi Dockerfile</span></div><div class="line">FROM seanlook/nginx:bash_vim</div><div class="line">ENTRYPOINT /usr/sbin/nginx -c /etc/nginx/nginx.conf &amp;&amp; /bin/bash</div><div class="line"></div><div class="line">build新image，tag为bash_vim_Df</div><div class="line"><span class="comment"># docker build -t seanlook/nginx:bash_vim_Df .</span></div><div class="line">Sending build context <span class="keyword">to</span> Docker daemon <span class="number">73.45</span> MB</div><div class="line">Sending build context <span class="keyword">to</span> Docker daemon </div><div class="line">Step <span class="number">0</span> : FROM seanlook/nginx:bash_vim</div><div class="line"> -<span class="function">--&gt;</span> aa8516fa0bb7</div><div class="line">Step <span class="number">1</span> : EXPOSE <span class="number">80</span></div><div class="line"> -<span class="function">--&gt;</span> Using cache</div><div class="line"> -<span class="function">--&gt;</span> fece07e2b515</div><div class="line">Step <span class="number">2</span> : ENTRYPOINT /usr/sbin/nginx -c /etc/nginx/nginx.conf &amp;&amp; /bin/bash</div><div class="line"> -<span class="function">--&gt;</span> Running <span class="keyword">in</span> e08963fd5afb</div><div class="line"> -<span class="function">--&gt;</span> d9bbd13f5066</div><div class="line">Removing intermediate container e08963fd5afb</div><div class="line">Successfully built d9bbd13f5066<span class="function">    --&gt;</span> 新image id</div><div class="line"></div><div class="line"><span class="comment"># docker images |grep 'bash_vim'</span></div><div class="line">seanlook/nginx      bash_vim_Df       d9bbd13f5066       About an hour ago   <span class="number">125.9</span> MB</div><div class="line">seanlook/nginx      bash_vim          aa8516fa0bb7       About an hour ago   <span class="number">125.9</span> MB</div><div class="line"></div><div class="line">运行由Dockerfile创建的image</div><div class="line"><span class="comment"># docker run --name nginx_bash_vim_Df -v /tmp/docker:/usr/share/nginx/html:ro \</span></div><div class="line">&gt; -i -t -p <span class="number">8080</span>:<span class="number">80</span> <span class="string">\</span></div><div class="line">&gt; d9bbd13f5066<span class="function">   --&gt;</span> 或seanlook/nginx:bash_vim_Df</div></pre></td></tr></table></figure></p>
<p>最后一条<code>docker run</code>之后就会自动进入<code>bash</code>终端，同时发现<code>nginx</code>服务也启动了，可以通过<code>vim</code>来编辑配置文件。</p>
<h3 id="5-3-修改容器的-etc-bash-bashrc"><a href="#5-3-修改容器的-etc-bash-bashrc" class="headerlink" title="5.3 修改容器的/etc/bash.bashrc"></a>5.3 修改容器的/etc/bash.bashrc</h3><p>这是投机取巧但不失为最简单的一种办法，见<a href="http://stackoverflow.com/questions/17252356/run-a-service-automatically-in-a-docker-container/19872810#19872810" target="_blank" rel="external">Run a service automatically in a docker container</a>。</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">启动刚安装完vim的那个容器（不必用<span class="built_in">run</span>）</div><div class="line"><span class="meta"># docker start nginx_bash_vim</span></div><div class="line"></div><div class="line">连接到终端上</div><div class="line"><span class="meta"># docker attach nginx_bash_vim</span></div><div class="line">root<span class="symbol">@3911d1104c3f</span>:/<span class="meta"># vi /etc/bash.bashrc </span></div><div class="line"><span class="meta"># added by mis_zx for auto-service nginx  --&gt; 在最后加入</span></div><div class="line">/usr/sbin/nginx -c /etc/nginx/nginx.conf</div></pre></td></tr></table></figure>
<p>保存后直接Ctrl+D退出，在<code>start</code>就可以访问了，如果要进入终端就<code>attach</code>，如果需要可以<code>commit</code>成一个镜像。</p>
<h3 id="5-4-听说有一种通过supervisor来管理docker容器的多个任务，有时间会研究一下"><a href="#5-4-听说有一种通过supervisor来管理docker容器的多个任务，有时间会研究一下" class="headerlink" title="5.4 听说有一种通过supervisor来管理docker容器的多个任务，有时间会研究一下"></a>5.4 听说有一种通过<code>supervisor</code>来管理docker容器的多个任务，有时间会研究一下</h3><p>从上面的操作中可以看出，<code>start</code>是可以保留<code>run</code>启动时的参数如<code>-v</code>、<code>-p</code>，而<code>commit</code>之后如果没在<code>Dockerfile</code>中指定，下次启动依然需要带上目录、端口的映射参数。<br>另外提一点， <code>docker run -i -t seanlook/nginx:bash_vim</code>启动便会同时进入一个shell界面（但没有启动nginx），因为它的“前身”容器是在shell交互界面下<code>run</code>来的，但也没有保留<code>-v</code>、<code>-p</code>指定的映射关系。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[记一次错误卸载软件包导致Linux系统崩溃的修复解决过程]]></title>
      <url>http://seanlook.com/2014/11/03/one-troubleshooting-for-centos-corrupt/</url>
      <content type="html"><![CDATA[<p>首先问题产生的缘由很简单，是我一同事在安装oracle一套软件时，按照要求需要binutils软件包的32位版本，然而在Oracle Linux已经装有64位，按理说是可以安装i686的，我猜应该是32位的版本低于这个已有的64位所以导致冲突而安装失败，因此同事就用<code>yum remove binutils</code>，这个命令也奇葩，由于是root权限导致依赖于它的200多个软件包也被卸载，最终导致网络断开，系统崩溃，在vSphere虚拟机上重新启动发现再也起不来。下面看问题：</p>
<h2 id="1-Kernel-panic-not-syncing-Attempted-to-kill-init"><a href="#1-Kernel-panic-not-syncing-Attempted-to-kill-init" class="headerlink" title="1. Kernel panic - not syncing: Attempted to kill init!"></a>1. Kernel panic - not syncing: Attempted to kill init!</h2><p><img src="http://sean-images.qiniudn.com/kernel-panic.png" alt="kernel_panic"></p>
<a id="more"></a>
<p>这个错误时在重新启动Oracle Linux一开始就出现，查阅的<a href="http://blog.51osos.com/linux/linux-kernel-panic/" target="_blank" rel="external">相关资料</a>得知<code>Kernel panic</code>问题一般是由驱动模块终端处理终端问题导致的（不懂。。。），一开始我以为是驱动程序依赖于binutils导致被卸载，因此第一反应是想办法把缺失的软件装回去。实际上，是由于安全访问控制模块selinux的问题，参考<a href="http://stackoverflow.com/questions/12867591/how-to-solve-kernel-panic-not-syncing-attempted-to-kill-init-without-er" target="_blank" rel="external">类似问题</a>。于是检查<code>vi /etc/selinux/config</code>时发现<code>SELINUX=disables</code>，拼写错误，应为<code>disabled</code>。<br>当再次启动没再出现该错误时，我高兴的认为原来这么简单就帮同事解决了，事实这根本还没到200多个软件包缺失而导致系统崩溃那一步。</p>
<h2 id="2-系统启动加载条完成后，一直hang住不动"><a href="#2-系统启动加载条完成后，一直hang住不动" class="headerlink" title="2. 系统启动加载条完成后，一直hang住不动"></a>2. 系统启动加载条完成后，一直hang住不动</h2><p><img src="http://sean-images.qiniudn.com/boot_up_fail.png" alt="boot_hang"></p>
<p>这无疑要使用LiveCD修复系统了，参考<a href="http://www.slashroot.in/ultimate-method-install-package-linux-rescue-mode" target="_blank" rel="external">Ultimate method to install package from linux rescue mode</a>或<a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Installation_Guide/rescuemode_drivers.html" target="_blank" rel="external">Using Rescue Mode to Fix..Problems</a>。因为知道出问题前做过什么操作，下面直接上解决问题的过程。</p>
<h3 id="2-1-将系统DVD安装镜像加载到光驱"><a href="#2-1-将系统DVD安装镜像加载到光驱" class="headerlink" title="2.1 将系统DVD安装镜像加载到光驱"></a>2.1 将系统DVD安装镜像加载到光驱</h3><p>再次重启就自动进入安装界面，我们当然选择<code>rescue mode</code>：<br><img src="http://sean-images.qiniudn.com/rescue_mode.png" alt="rescue_mode"></p>
<p>一路按照提示确定（可以不配置network，这里就不贴图了，很简单），最终会提供给用户一个shell终端，对应的是从DVD光驱加载进来的系统，执行<code>chroot /mnt/sysimage</code>才会进入到原损坏的Linux系统，还好<code>yum</code>和<code>rpm</code>命令还可以使用，悲剧的是我并不知道<code>yum remove</code>命令卸载了哪些软件包。</p>
<p><img src="http://sean-images.qiniudn.com/chroot_sysimage.png" alt="chroot_sysimage"></p>
<p><img src="http://sean-images.qiniudn.com/start_shell_mount.png" alt="start_shell_mount"></p>
<h3 id="2-2-安装缺失的软件包"><a href="#2-2-安装缺失的软件包" class="headerlink" title="2.2 安装缺失的软件包"></a>2.2 安装缺失的软件包</h3><p>这里得谢天谢地<code>yum</code>命令的安装卸载日志<code>/var/log/yum.log</code>，这个日志里清楚的记录了<code>installed</code>和<code>erased</code>的所有软件包，用rpm是不可能了，因为270多个包的依赖关系难以解决，只能通过yum方式，而由于rescue模式没有配置网络，因此只能使用本地镜像源。<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">在rescue系统下挂载光驱到待修复系统中的/media目录</div><div class="line">bash-4.1<span class="comment"># mount /dev/cdrom /mnt/sysimage/media</span></div><div class="line"></div><div class="line">chroot进入待修复系统</div><div class="line">bash-4.1<span class="comment"># chroot /mnt/sysimage</span></div><div class="line"></div><div class="line">手动编辑一个仓库源（真实待修复的系统）</div><div class="line">sh-4.1<span class="comment"># cd /etc/yum.repos.d/ &amp;&amp; vi Oracle-Media.repo</span></div><div class="line">[DVD-media]</div><div class="line">name=oracle-$releasever - Media</div><div class="line">baseurl=file:///media</div><div class="line">gpgcheck=0</div><div class="line">enabled=1</div></pre></td></tr></table></figure></p>
<p>建议只留Oracle-Media.repo文件，其他的.repo文件都<code>mv</code>成.bak，以防连接不了这些源而报错，虽然报错关系不大。<br>获取被依赖erased掉的软件列表<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">你可以将yum.<span class="keyword">log</span>中多余的部分去掉，筛选出应该重新安装的packages：</div><div class="line"><span class="keyword">sh</span>-4.1# cp /<span class="keyword">var</span>/<span class="keyword">log</span>/yum.<span class="keyword">log</span>&#123;,.bak&#125;</div><div class="line"><span class="keyword">sh</span>-4.1# less /<span class="keyword">var</span>/<span class="keyword">log</span>/yum.<span class="keyword">log</span>.bak</div><div class="line">Oct 29 20:17:34 Erased: gcc-c++</div><div class="line">Oct 29 20:18:44 Erased: gcc</div><div class="line">Oct 29 20:22:59 Erased: xorg-x11-drivers</div><div class="line">...</div><div class="line">Oct 29 20:24:46 Erased: iputils</div><div class="line">Oct 29 20:24:46 Erased: udev</div><div class="line">Oct 29 20:24:46 Erased: initscripts</div><div class="line">Oct 29 20:24:46 Erased: hwdata</div><div class="line">Oct 29 20:24:46 Erased: module-init-tools</div><div class="line">Oct 29 20:24:48 Erased: binutils</div><div class="line"></div><div class="line">下面一条命令应该要彻底解决问题了</div><div class="line"><span class="keyword">sh</span>-4.1# awk '&#123;<span class="keyword">print</span> <span class="string">"yum install -y "</span>,<span class="variable">$5&#125;</span>' /<span class="keyword">var</span>/<span class="keyword">log</span>/yum.<span class="keyword">log</span>.bak |<span class="keyword">sh</span> &gt; /root/yum_install.<span class="built_in">log</span></div></pre></td></tr></table></figure></p>
<p>保险起见，可以查看一下产生的日志文件。此时重启（记得拿出光盘）应该是修复问题了。但我遇见的问题还没完。</p>
<h2 id="3-An-error-occurred-during-the-file-system-check"><a href="#3-An-error-occurred-during-the-file-system-check" class="headerlink" title="3. An error occurred during the file system check"></a>3. An error occurred during the file system check</h2><p><img src="http://sean-images.qiniudn.com/file_system_check.png" alt="filesystem_check_error"><br>显然，文件系统损坏。根据提示输入root密码后可以进入到shell中，网上有办法说执行<code>fsck</code>命令来修复分区，又说且不能是mounted状态，但无论我怎么去<code>fsck.ext4 /dev/mapper/vg_fusion_lv_u1</code>，提示：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">WARNING!!!  The filesystem <span class="keyword">is</span> mounted.   <span class="keyword">if</span> you <span class="keyword">continue</span> you ***WILL*** </div><div class="line">cause ***SEVERE*** filesystem damage`</div><div class="line"></div><div class="line">Do you really want <span class="keyword">to</span> <span class="keyword">continue</span> (y/n)? yes</div><div class="line"></div><div class="line">fsck.ext4: No such <span class="built_in">file</span> <span class="keyword">or</span> directory <span class="keyword">while</span> trying <span class="keyword">to</span> open /dev/mapper/vg_fusion_lv_u1</div><div class="line"></div><div class="line">The superblock could <span class="keyword">not</span> be <span class="built_in">read</span> <span class="keyword">or</span> <span class="keyword">does</span> <span class="keyword">not</span> describe a correct ext2 </div><div class="line">filesystem.  If <span class="keyword">the</span> device <span class="keyword">is</span> valid <span class="keyword">and</span> <span class="keyword">it</span> really <span class="keyword">contains</span> an ext2 </div><div class="line">filesystem (<span class="keyword">and</span> <span class="keyword">not</span> swap <span class="keyword">or</span> ufs <span class="keyword">or</span> something <span class="keyword">else</span>), <span class="keyword">then</span> <span class="keyword">the</span> superblock </div><div class="line"><span class="keyword">is</span> corrupt, <span class="keyword">and</span> you might <span class="keyword">try</span> <span class="built_in">running</span> e2fsck <span class="keyword">with</span> an alternate superblock:</div><div class="line">    e2fsck -b <span class="number">8193</span> &lt;device&gt;</div></pre></td></tr></table></figure></p>
<p>听起来好像还挺严重的，我之前猜想的是不是反复的开关电源来重启导致lvm文件系统corrupt，但事实我发现<code>/dev/mapper/vg_fusion_lv_u1</code>不存在，但<code>lv_fusion_lv_root</code>却完好，执行<code>lvdisplay</code>发现这个命令根本不存在，这才发现原来lvm2软件没有安装（难道是第2部分安装少许出错？）。<br>这下容易多了，反正现在系统不借助<code>rescue mode</code>就可以起来，重新安装软件包，但是此时的整个文件系统是<code>read only</code>，有两个办法可以解决：</p>
<ol>
<li><code>mount -o remount,rw /</code><br>重新挂载根分区为读写，<code>vi /etc/fstab</code>注释掉挂载<code>/u1</code>的那条记录，此时会正常启动，只是有一个文件系统没有挂载，但可以正常安装缺失的lvm2软件，不妨多执行几遍2.2的安装命令。然后手动挂载<code>mount /dev/mapper/vg_fusion_lv_u1 /u1</code>应该就没问题了。记得改回/etc/fstab。</li>
<li>与<code>2.2</code>步骤类似，进入<code>rescue mode</code>→<code>chroot</code>，重新执行<code>awk &#39;{print &quot;yum install -y &quot;,$5}&#39; /var/log/yum.log.bak |sh &gt; /root/yum_install.log</code>，确保没有报错且已安装lvm。</li>
</ol>
<p>这下问题总是解决了，避免了删除系统的灾难（测试环境）。</p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>回头去看这三个问题，其他它们是各自独立的</p>
<ul>
<li>第1个问题，是由于设置selinux有人拼写错误，哪怕没做后续的任何操作，重启系统就会启动不了，是早已存在到目前才发现。也有人说遇见过同样的<code>Kernel panic</code>错误但尝试各种办法都难以解决的，这就看具体问题具体分析了。</li>
<li>第2个问题，是真真切切错误卸载重要软件包，导致系统崩溃，修复系统的方法自然也就是利用原镜像在<code>rescue mode</code>下把该装的都装回去，前提是yum.log日志存在，万幸没有执行过<code>yum clean all</code>。</li>
<li>第3个问，题实际文件系统并没有损坏，还是lvm2缺失，但是此处必须小心，免得<code>SEVERE filesystem damage</code>，那么修复过程就没意义了。</li>
</ul>
<p>以后处理其他系统故障时也可使用类似的方法修复，Redhat、CentOS、OracleLinux、Ubuntu等都适用。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker常用管理命令（上）]]></title>
      <url>http://seanlook.com/2014/10/31/docker-command-best-use-1/</url>
      <content type="html"><![CDATA[<p>本文只记录docker命令在大部分情境下的使用，如果想了解每一个选项的细节，请参考官方文档，这里只作为自己以后的备忘记录下来。</p>
<p>根据自己的理解，总的来说分为以下几种：<br>容器生命周期管理 — <code>docker [run|start|stop|restart|kill|rm|pause|unpause]</code><br>容器操作运维 — <code>docker [ps|inspect|top|attach|events|logs|wait|export|port]</code><br>容器rootfs命令 — <code>docker [commit|cp|diff]</code><br>镜像仓库 — <code>docker [login|pull|push|search]</code><br>本地镜像管理 — <code>docker [images|rmi|tag|build|history|save|import]</code><br>其他命令 — <code>docker [info|version]</code></p>
<p>看一个变迁图<br><img src="http://sean-images.qiniudn.com/docker_cli_stage.png" alt="docker_cli_stage"></p>
<h3 id="1-列出机器上的镜像（images）"><a href="#1-列出机器上的镜像（images）" class="headerlink" title="1. 列出机器上的镜像（images）"></a>1. 列出机器上的镜像（images）</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker images </span></div><div class="line">REPOSITORY               <span class="keyword">TAG</span>             <span class="title">IMAGE</span> ID        CREATED         VIRTUAL SIZE</div><div class="line">ubuntu                   <span class="number">14.10</span>           <span class="number">2185</span>fd50e2ca    <span class="number">13</span> days ago     <span class="number">236.9</span> MB</div><div class="line">…</div></pre></td></tr></table></figure>
<p>其中我们可以根据REPOSITORY来判断这个镜像是来自哪个服务器，如果没有 / 则表示官方镜像，类似于<code>username/repos_name</code>表示Github的个人公共库，类似于<code>regsistory.example.com:5000/repos_name</code>则表示的是私服。<br>IMAGE ID列其实是缩写，要显示完整则带上<code>--no-trunc</code>选项</p>
<h3 id="2-在docker-index中搜索image（search）"><a href="#2-在docker-index中搜索image（search）" class="headerlink" title="2. 在docker index中搜索image（search）"></a>2. 在docker index中搜索image（search）</h3><p><code>Usage: docker search TERM</code><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker search seanlo</span></div><div class="line"><span class="attribute">NAME</span>                DESCRIPTION           STARS     OFFICIAL   AUTOMATED</div><div class="line">seanloook/centos6   sean<span class="string">'s docker repos         0</span></div></pre></td></tr></table></figure></p>
<p>搜索的范围是官方镜像和所有个人公共镜像。NAME列的 / 后面是仓库的名字。</p>
<a id="more"></a>
<h3 id="3-从docker-registry-server-中下拉image或repository（pull）"><a href="#3-从docker-registry-server-中下拉image或repository（pull）" class="headerlink" title="3. 从docker registry server 中下拉image或repository（pull）"></a>3. 从docker registry server 中下拉image或repository（pull）</h3><p><code>Usage: docker pull [OPTIONS] NAME[:TAG]</code><br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># docker pull centos</span></div></pre></td></tr></table></figure></p>
<p>上面的命令需要注意，在docker v1.2版本以前，会下载官方镜像的centos仓库里的所有镜像，而从v.13开始官方文档里的说明变了：will pull the centos:latest image, its intermediate layers and any aliases  of the same id，也就是只会下载tag为latest的镜像（以及同一images id的其他tag）。<br>也可以明确指定具体的镜像：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># docker pull centos:centos6</span></div></pre></td></tr></table></figure></p>
<p>当然也可以从某个人的公共仓库（包括自己是私人仓库）拉取，形如<code>docker pull username/repository&lt;:tag_name&gt;</code> ：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># docker pull seanlook/centos:centos6</span></div></pre></td></tr></table></figure></p>
<p>如果你没有网络，或者从其他私服获取镜像，形如<code>docker pull registry.domain.com:5000/repos:&lt;tag_name&gt;</code><br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># <span class="selector-tag">docker</span> <span class="selector-tag">pull</span> <span class="selector-tag">dl</span><span class="selector-class">.dockerpool</span><span class="selector-class">.com</span><span class="selector-pseudo">:5000</span>/<span class="selector-tag">mongo</span><span class="selector-pseudo">:latest</span></div></pre></td></tr></table></figure></p>
<h3 id="4-推送一个image或repository到registry（push）"><a href="#4-推送一个image或repository到registry（push）" class="headerlink" title="4. 推送一个image或repository到registry（push）"></a>4. 推送一个image或repository到registry（push）</h3><p>与上面的pull对应，可以推送到Docker Hub的Public、Private以及私服，但不能推送到Top Level Repository。<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># docker push seanlook/mongo</span></div><div class="line"><span class="meta"># docker push registry.tp-link.net:5000/mongo:2014-10-27</span></div></pre></td></tr></table></figure></p>
<p>registry.tp-link.net也可以写成IP，172.29.88.222。<br>在repository不存在的情况下，命令行下push上去的会为我们创建为私有库，然而通过浏览器创建的默认为公共库。</p>
<h3 id="5-从image启动一个container（run）"><a href="#5-从image启动一个container（run）" class="headerlink" title="5. 从image启动一个container（run）"></a>5. 从image启动一个container（run）</h3><p><code>docker run</code>命令首先会从特定的image创之上create一层可写的container，然后通过start命令来启动它。停止的container可以重新启动并保留原来的修改。run命令启动参数有很多，以下是一些常规使用说明，更多部分请参考<a href="http://www.cnphp6.com/archives/24899" target="_blank" rel="external">http://www.cnphp6.com/archives/24899</a><br>当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：</p>
<ul>
<li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li>
<li>利用镜像创建并启动一个容器</li>
<li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li>
<li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li>
<li>从地址池配置一个 ip 地址给容器</li>
<li>执行用户指定的应用程序</li>
<li>执行完毕后容器被终止</li>
</ul>
<p><code>Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></p>
<h4 id="5-1-使用image创建container并执行相应命令，然后停止"><a href="#5-1-使用image创建container并执行相应命令，然后停止" class="headerlink" title="5.1 使用image创建container并执行相应命令，然后停止"></a>5.1 使用image创建container并执行相应命令，然后停止</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># docker run ubuntu echo <span class="meta-string">"hello world"</span></span></div><div class="line">hello <span class="keyword">word</span></div></pre></td></tr></table></figure>
<p>这是最简单的方式，跟在本地直接执行<code>echo &#39;hello world&#39;</code> 几乎感觉不出任何区别，而实际上它会从本地ubuntu:latest镜像启动到一个容器，并执行打印命令后退出（<code>docker ps -l</code>可查看）。需要注意的是，默认有一个<code>--rm=true</code>参数，即完成操作后停止容器并从文件系统移除。因为Docker的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。<br>容器启动后会自动随机生成一个<code>CONTAINER ID</code>，这个ID在后面commit命令后可以变为<code>IMAGE ID</code></p>
<h4 id="使用image创建container并进入交互模式-login-shell是-bin-bash"><a href="#使用image创建container并进入交互模式-login-shell是-bin-bash" class="headerlink" title="使用image创建container并进入交互模式, login shell是/bin/bash"></a>使用image创建container并进入交互模式, login shell是/bin/bash</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># docker run -i -t --name mytest centos:centos6 /bin/bash</span></div><div class="line">bash-<span class="number">4.1</span><span class="meta">#</span></div></pre></td></tr></table></figure>
<p>上面的<code>--name</code>参数可以指定启动后的容器名字，如果不指定则docker会帮我们取一个名字。镜像<code>centos:centos6</code>也可以用<code>IMAGE ID</code> (68edf809afe7) 代替），并且会启动一个伪终端，但通过ps或top命令我们却只能看到一两个进程，因为容器的核心是所执行的应用程序，所需要的资源都是应用程序运行所必需的，除此之外，并没有其它的资源，可见Docker对资源的利用率极高。此时使用exit或Ctrl+D退出后，这个容器也就消失了（消失后的容器并没有完全删除？）<br>（那么多个TAG不同而IMAGE ID相同的的镜像究竟会运行以哪一个TAG启动呢</p>
<h4 id="5-2-运行出一个container放到后台运行"><a href="#5-2-运行出一个container放到后台运行" class="headerlink" title="5.2 运行出一个container放到后台运行"></a>5.2 运行出一个container放到后台运行</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># docker <span class="keyword">run</span> -<span class="keyword">d</span> ubuntu /bin/<span class="keyword">sh</span> -c <span class="string">"while true; do echo hello world; sleep 2; done"</span></div><div class="line">ae60c4b642058fefcc61ada85a610914bed9f5df0e2aa147100eab85cea785dc</div></pre></td></tr></table></figure>
<p>它将直接把启动的container挂起放在后台运行（这才叫saas），并且会输出一个<code>CONTAINER ID</code>，通过<code>docker ps</code>可以看到这个容器的信息，可在container外面查看它的输出<code>docker logs ae60c4b64205</code>，也可以通过<code>docker attach ae60c4b64205</code>连接到这个正在运行的终端，此时在<code>Ctrl+C</code>退出container就消失了，按ctrl-p ctrl-q可以退出到宿主机，而保持container仍然在运行<br>另外，如果-d启动但后面的命令执行完就结束了，如<code>/bin/bash</code>、<code>echo test</code>，则container做完该做的时候依然会终止。而且-d不能与–rm同时使用<br>可以通过这种方式来运行memcached、apache等。</p>
<h4 id="5-3-映射host到container的端口和目录"><a href="#5-3-映射host到container的端口和目录" class="headerlink" title="5.3 映射host到container的端口和目录"></a>5.3 映射host到container的端口和目录</h4><p>映射主机到容器的端口是很有用的，比如在container中运行memcached，端口为11211，运行容器的host可以连接container的 internel_ip:11211 访问，如果有从其他主机访问memcached需求那就可以通过-p选项，形如<code>-p &lt;host_port:contain_port&gt;</code>，存在以下几种写法：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-p</span> 11211<span class="selector-pseudo">:11211</span> 这个即是默认情况下，绑定主机所有网卡（0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span>）的11211端口到容器的11211端口上</div><div class="line"><span class="selector-tag">-p</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:11211</span><span class="selector-pseudo">:11211</span> 只绑定<span class="selector-tag">localhost</span>这个接口的11211端口</div><div class="line"><span class="selector-tag">-p</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">::5000</span></div><div class="line"><span class="selector-tag">-p</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:80</span><span class="selector-pseudo">:8080</span></div></pre></td></tr></table></figure></p>
<p>目录映射其实是“绑定挂载”host的路径到container的目录，这对于内外传送文件比较方便，在搭建私服那一节，为了避免私服container停止以后保存的images不被删除，就要把提交的images保存到挂载的主机目录下。使用比较简单，<code>-v &lt;host_path:container_path&gt;</code>，绑定多个目录时再加<code>-v</code>。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-v <span class="regexp">/tmp/</span><span class="string">docker:</span><span class="regexp">/tmp/</span>docker</div></pre></td></tr></table></figure></p>
<p>另外在两个container之间建立联系可用<code>--link</code>，详见高级部分或<a href="http://docs.docker.com/v1.1/reference/commandline/cli/#run" target="_blank" rel="external">官方文档</a>。<br>下面是一个例子：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker run --name nginx_test \</span></div><div class="line">&gt; -v <span class="regexp">/tmp/</span>docker:<span class="regexp">/usr/</span>share<span class="regexp">/nginx/</span>html:ro \</div><div class="line">&gt; -p <span class="number">80</span>:<span class="number">80</span> -d \</div><div class="line">&gt; nginx:<span class="number">1.7</span>.<span class="number">6</span></div></pre></td></tr></table></figure></p>
<p>在主机的/tmp/docker下建立index.html，就可以通过<code>http://localhost:80/</code>或<code>http://host-ip:80</code>访问了。</p>
<h3 id="6-将一个container固化为一个新的image（commit）"><a href="#6-将一个container固化为一个新的image（commit）" class="headerlink" title="6. 将一个container固化为一个新的image（commit）"></a>6. 将一个container固化为一个新的image（commit）</h3><p>当我们在制作自己的镜像的时候，会在container中安装一些工具、修改配置，如果不做commit保存起来，那么container停止以后再启动，这些更改就消失了。<br><code>docker commit &lt;container&gt; [repo:tag]</code><br>后面的repo:tag可选<br>只能提交正在运行的container，即通过<code>docker ps</code>可以看见的容器，<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">查看刚运行过的容器</div><div class="line"><span class="meta"># docker ps -l</span></div><div class="line">CONTAINER ID   IMAGE     COMMAND      CREATED       STATUS        PORTS   NAMES</div><div class="line">c9fdf26326c9   nginx:<span class="number">1</span>   nginx -g..   <span class="number">3</span> hours ago   Exited (<span class="number">0</span>)..     nginx_test</div><div class="line"></div><div class="line">启动一个已存在的容器（<span class="built_in">run</span>是从image新建容器后再启动），以下也可以使用docker start nginx_test代替  </div><div class="line">[root<span class="symbol">@hostname</span> docker]<span class="meta"># docker start c9fdf26326c9</span></div><div class="line">c9fdf26326c9</div><div class="line"></div><div class="line"></div><div class="line">docker <span class="built_in">run</span> -i -t --sig-proxy=<span class="literal">false</span> <span class="number">21</span>ffe545748baf /bin/bash</div><div class="line">nginx服务没有启动</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta"># docker commit -m <span class="string">"some tools installed"</span> fcbd0a5348ca seanlook/ubuntu:14.10_tutorial</span></div><div class="line">fe022762070b09866eaab47bc943ccb796e53f3f416abf3f2327481b446a9503</div></pre></td></tr></table></figure></p>
<p>-a “seanlook7@gmail.com”<br>请注意，当你反复去commit一个容器的时候，每次都会得到一个新的<code>IMAGE ID</code>，假如后面的<code>repository:tag</code>没有变，通过<code>docker images</code>可以看到，之前提交的那份镜像的<code>repository:tag</code>就会变成<code>&lt;none&gt;:&lt;none&gt;</code>，所以尽量避免反复提交。<br>另外，观察以下几点</p>
<ul>
<li>commit container只会pause住容器，这是为了保证容器文件系统的一致性，但不会stop。如果你要对这个容器继续做其他修改：<ul>
<li>你可以重新提交得到新image2，删除次新的image1</li>
<li>也可以关闭容器用新image1启动，继续修改，提交image2后删除image1</li>
<li>当然这样会很痛苦，所以一般是采用<code>Dockerfile</code>来<code>build</code>得到最终image，参考[]</li>
</ul>
</li>
<li>虽然产生了一个新的image，并且你可以看到大小有100MB，但从commit过程很快就可以知道实际上它并没有独立占用100MB的硬盘空间，而只是在旧镜像的基础上修改，它们共享大部分公共的“片”。</li>
</ul>
<p>下文继续：</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://docs.docker.com/v1.1/reference/commandline/cli/" target="_blank" rel="external">Official Command Line Reference</a></li>
<li><a href="http://www.widuu.com/docker/" target="_blank" rel="external">docker中文指南cli-widuu翻译</a></li>
<li><a href="http://www.dockerpool.com/static/books/docker_practice/" target="_blank" rel="external">Docker —— 从入门到实践</a></li>
<li><p><a href="http://17173ops.com/2014/10/13/docker%E5%9F%BA%E7%A1%80%E4%B8%8E%E9%AB%98%E7%BA%A7.shtml" target="_blank" rel="external">Docker基础与高级</a></p>
<p>  <a href="http://sean-images.qiniudn.com/docker_cli_stage.png" target="_blank" rel="external">1</a>本文只记录docker命令在大部分情境下的使用，如果想了解每一个选项的细节，请参考官方文档，这里只作为自己以后的备忘记录下来。</p>
</li>
</ul>
<p>根据自己的理解，总的来说分为以下几种：</p>
<ul>
<li>容器生命周期管理 — <code>docker [run|start|stop|restart|kill|rm|pause|unpause]</code></li>
<li>容器操作运维 — <code>docker [ps|inspect|top|attach|events|logs|wait|export|port]</code></li>
<li>容器rootfs命令 — <code>docker [commit|cp|diff]</code></li>
<li>镜像仓库 — <code>docker [login|pull|push|search]</code></li>
<li>本地镜像管理 — <code>docker [images|rmi|tag|build|history|save|import]</code></li>
<li>其他命令 — <code>docker [info|version]</code></li>
</ul>
<p>看一个变迁图<br><img src="http://sean-images.qiniudn.com/docker_cli_stage.png" alt="docker_cli_stage"></p>
<h3 id="1-列出机器上的镜像（images）-1"><a href="#1-列出机器上的镜像（images）-1" class="headerlink" title="1. 列出机器上的镜像（images）"></a>1. 列出机器上的镜像（images）</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker images </span></div><div class="line">REPOSITORY               <span class="keyword">TAG</span>             <span class="title">IMAGE</span> ID        CREATED         VIRTUAL SIZE</div><div class="line">ubuntu                   <span class="number">14.10</span>           <span class="number">2185</span>fd50e2ca    <span class="number">13</span> days ago     <span class="number">236.9</span> MB</div><div class="line">…</div></pre></td></tr></table></figure>
<p>其中我们可以根据REPOSITORY来判断这个镜像是来自哪个服务器，如果没有 / 则表示官方镜像，类似于<code>username/repos_name</code>表示Github的个人公共库，类似于<code>regsistory.example.com:5000/repos_name</code>则表示的是私服。<br>IMAGE ID列其实是缩写，要显示完整则带上<code>--no-trunc</code>选项</p>
<h3 id="2-在docker-index中搜索image（search）-1"><a href="#2-在docker-index中搜索image（search）-1" class="headerlink" title="2. 在docker index中搜索image（search）"></a>2. 在docker index中搜索image（search）</h3><p><code>Usage: docker search TERM</code><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker search seanlo</span></div><div class="line"><span class="attribute">NAME</span>                DESCRIPTION           STARS     OFFICIAL   AUTOMATED</div><div class="line">seanloook/centos6   sean<span class="string">'s docker repos         0</span></div></pre></td></tr></table></figure></p>
<p>搜索的范围是官方镜像和所有个人公共镜像。NAME列的 / 后面是仓库的名字。</p>
<h3 id="3-从docker-registry-server-中下拉image或repository（pull）-1"><a href="#3-从docker-registry-server-中下拉image或repository（pull）-1" class="headerlink" title="3. 从docker registry server 中下拉image或repository（pull）"></a>3. 从docker registry server 中下拉image或repository（pull）</h3><p><code>Usage: docker pull [OPTIONS] NAME[:TAG]</code><br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># docker pull centos</span></div></pre></td></tr></table></figure></p>
<p>上面的命令需要注意，在docker v1.2版本以前，会下载官方镜像的centos仓库里的所有镜像，而从v.13开始官方文档里的说明变了：will pull the centos:latest image, its intermediate layers and any aliases  of the same id，也就是只会下载tag为latest的镜像（以及同一images id的其他tag）。<br>也可以明确指定具体的镜像：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># docker pull centos:centos6</span></div></pre></td></tr></table></figure></p>
<p>当然也可以从某个人的公共仓库（包括自己是私人仓库）拉取，形如<code>docker pull username/repository&lt;:tag_name&gt;</code> ：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># docker pull seanlook/centos:centos6</span></div></pre></td></tr></table></figure></p>
<p>如果你没有网络，或者从其他私服获取镜像，形如<code>docker pull registry.domain.com:5000/repos:&lt;tag_name&gt;</code><br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># <span class="selector-tag">docker</span> <span class="selector-tag">pull</span> <span class="selector-tag">dl</span><span class="selector-class">.dockerpool</span><span class="selector-class">.com</span><span class="selector-pseudo">:5000</span>/<span class="selector-tag">mongo</span><span class="selector-pseudo">:latest</span></div></pre></td></tr></table></figure></p>
<h3 id="4-推送一个image或repository到registry（push）-1"><a href="#4-推送一个image或repository到registry（push）-1" class="headerlink" title="4. 推送一个image或repository到registry（push）"></a>4. 推送一个image或repository到registry（push）</h3><p>与上面的pull对应，可以推送到Docker Hub的Public、Private以及私服，但不能推送到Top Level Repository。<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># docker push seanlook/mongo</span></div><div class="line"><span class="meta"># docker push registry.tp-link.net:5000/mongo:2014-10-27</span></div></pre></td></tr></table></figure></p>
<p>registry.tp-link.net也可以写成IP，172.29.88.222。<br>在repository不存在的情况下，命令行下push上去的会为我们创建为私有库，然而通过浏览器创建的默认为公共库。</p>
<h3 id="5-从image启动一个container（run）-1"><a href="#5-从image启动一个container（run）-1" class="headerlink" title="5. 从image启动一个container（run）"></a>5. 从image启动一个container（run）</h3><p><code>docker run</code>命令首先会从特定的image创之上create一层可写的container，然后通过start命令来启动它。停止的container可以重新启动并保留原来的修改。run命令启动参数有很多，以下是一些常规使用说明，更多部分请参考<a href="http://www.cnphp6.com/archives/24899" target="_blank" rel="external">http://www.cnphp6.com/archives/24899</a><br>当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：</p>
<ul>
<li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li>
<li>利用镜像创建并启动一个容器</li>
<li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li>
<li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li>
<li>从地址池配置一个 ip 地址给容器</li>
<li>执行用户指定的应用程序</li>
<li>执行完毕后容器被终止</li>
</ul>
<p><code>Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></p>
<h4 id="5-1-使用image创建container并执行相应命令，然后停止-1"><a href="#5-1-使用image创建container并执行相应命令，然后停止-1" class="headerlink" title="5.1 使用image创建container并执行相应命令，然后停止"></a>5.1 使用image创建container并执行相应命令，然后停止</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># docker run ubuntu echo <span class="meta-string">"hello world"</span></span></div><div class="line">hello <span class="keyword">word</span></div></pre></td></tr></table></figure>
<p>这是最简单的方式，跟在本地直接执行<code>echo &#39;hello world&#39;</code> 几乎感觉不出任何区别，而实际上它会从本地ubuntu:latest镜像启动到一个容器，并执行打印命令后退出（<code>docker ps -l</code>可查看）。需要注意的是，默认有一个<code>--rm=true</code>参数，即完成操作后停止容器并从文件系统移除。因为Docker的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。<br>容器启动后会自动随机生成一个<code>CONTAINER ID</code>，这个ID在后面commit命令后可以变为<code>IMAGE ID</code></p>
<h4 id="使用image创建container并进入交互模式-login-shell是-bin-bash-1"><a href="#使用image创建container并进入交互模式-login-shell是-bin-bash-1" class="headerlink" title="使用image创建container并进入交互模式, login shell是/bin/bash"></a>使用image创建container并进入交互模式, login shell是/bin/bash</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># docker run -i -t --name mytest centos:centos6 /bin/bash</span></div><div class="line">bash-<span class="number">4.1</span><span class="meta">#</span></div></pre></td></tr></table></figure>
<p>上面的<code>--name</code>参数可以指定启动后的容器名字，如果不指定则docker会帮我们取一个名字。镜像<code>centos:centos6</code>也可以用<code>IMAGE ID</code> (68edf809afe7) 代替），并且会启动一个伪终端，但通过ps或top命令我们却只能看到一两个进程，因为容器的核心是所执行的应用程序，所需要的资源都是应用程序运行所必需的，除此之外，并没有其它的资源，可见Docker对资源的利用率极高。此时使用exit或Ctrl+D退出后，这个容器也就消失了（消失后的容器并没有完全删除？）<br>（那么多个TAG不同而IMAGE ID相同的的镜像究竟会运行以哪一个TAG启动呢</p>
<h4 id="5-2-运行出一个container放到后台运行-1"><a href="#5-2-运行出一个container放到后台运行-1" class="headerlink" title="5.2 运行出一个container放到后台运行"></a>5.2 运行出一个container放到后台运行</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># docker <span class="keyword">run</span> -<span class="keyword">d</span> ubuntu /bin/<span class="keyword">sh</span> -c <span class="string">"while true; do echo hello world; sleep 2; done"</span></div><div class="line">ae60c4b642058fefcc61ada85a610914bed9f5df0e2aa147100eab85cea785dc</div></pre></td></tr></table></figure>
<p>它将直接把启动的container挂起放在后台运行（这才叫saas），并且会输出一个<code>CONTAINER ID</code>，通过<code>docker ps</code>可以看到这个容器的信息，可在container外面查看它的输出<code>docker logs ae60c4b64205</code>，也可以通过<code>docker attach ae60c4b64205</code>连接到这个正在运行的终端，此时在<code>Ctrl+C</code>退出container就消失了，按ctrl-p ctrl-q可以退出到宿主机，而保持container仍然在运行<br>另外，如果-d启动但后面的命令执行完就结束了，如<code>/bin/bash</code>、<code>echo test</code>，则container做完该做的时候依然会终止。而且-d不能与–rm同时使用<br>可以通过这种方式来运行memcached、apache等。</p>
<h4 id="5-3-映射host到container的端口和目录-1"><a href="#5-3-映射host到container的端口和目录-1" class="headerlink" title="5.3 映射host到container的端口和目录"></a>5.3 映射host到container的端口和目录</h4><p>映射主机到容器的端口是很有用的，比如在container中运行memcached，端口为11211，运行容器的host可以连接container的 internel_ip:11211 访问，如果有从其他主机访问memcached需求那就可以通过-p选项，形如<code>-p &lt;host_port:contain_port&gt;</code>，存在以下几种写法：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-p</span> 11211<span class="selector-pseudo">:11211</span> 这个即是默认情况下，绑定主机所有网卡（0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span>）的11211端口到容器的11211端口上</div><div class="line"><span class="selector-tag">-p</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:11211</span><span class="selector-pseudo">:11211</span> 只绑定<span class="selector-tag">localhost</span>这个接口的11211端口</div><div class="line"><span class="selector-tag">-p</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">::5000</span></div><div class="line"><span class="selector-tag">-p</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:80</span><span class="selector-pseudo">:8080</span></div></pre></td></tr></table></figure></p>
<p>目录映射其实是“绑定挂载”host的路径到container的目录，这对于内外传送文件比较方便，在搭建私服那一节，为了避免私服container停止以后保存的images不被删除，就要把提交的images保存到挂载的主机目录下。使用比较简单，<code>-v &lt;host_path:container_path&gt;</code>，绑定多个目录时再加<code>-v</code>。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-v <span class="regexp">/tmp/</span><span class="string">docker:</span><span class="regexp">/tmp/</span>docker</div></pre></td></tr></table></figure></p>
<p>另外在两个container之间建立联系可用<code>--link</code>，详见高级部分或<a href="http://docs.docker.com/v1.1/reference/commandline/cli/#run" target="_blank" rel="external">官方文档</a>。<br>下面是一个例子：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker run --name nginx_test \</span></div><div class="line">&gt; -v <span class="regexp">/tmp/</span>docker:<span class="regexp">/usr/</span>share<span class="regexp">/nginx/</span>html:ro \</div><div class="line">&gt; -p <span class="number">80</span>:<span class="number">80</span> -d \</div><div class="line">&gt; nginx:<span class="number">1.7</span>.<span class="number">6</span></div></pre></td></tr></table></figure></p>
<p>在主机的/tmp/docker下建立index.html，就可以通过<code>http://localhost:80/</code>或<code>http://host-ip:80</code>访问了。</p>
<h3 id="6-将一个container固化为一个新的image（commit）-1"><a href="#6-将一个container固化为一个新的image（commit）-1" class="headerlink" title="6. 将一个container固化为一个新的image（commit）"></a>6. 将一个container固化为一个新的image（commit）</h3><p>当我们在制作自己的镜像的时候，会在container中安装一些工具、修改配置，如果不做commit保存起来，那么container停止以后再启动，这些更改就消失了。<br><code>docker commit &lt;container&gt; [repo:tag]</code><br>后面的repo:tag可选<br>只能提交正在运行的container，即通过<code>docker ps</code>可以看见的容器，<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">查看刚运行过的容器</div><div class="line"><span class="meta"># docker ps -l</span></div><div class="line">CONTAINER ID   IMAGE     COMMAND      CREATED       STATUS        PORTS   NAMES</div><div class="line">c9fdf26326c9   nginx:<span class="number">1</span>   nginx -g..   <span class="number">3</span> hours ago   Exited (<span class="number">0</span>)..     nginx_test</div><div class="line"></div><div class="line">启动一个已存在的容器（<span class="built_in">run</span>是从image新建容器后再启动），以下也可以使用docker start nginx_test代替  </div><div class="line">[root<span class="symbol">@hostname</span> docker]<span class="meta"># docker start c9fdf26326c9</span></div><div class="line">c9fdf26326c9</div><div class="line"></div><div class="line"></div><div class="line">docker <span class="built_in">run</span> -i -t --sig-proxy=<span class="literal">false</span> <span class="number">21</span>ffe545748baf /bin/bash</div><div class="line">nginx服务没有启动</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta"># docker commit -m <span class="string">"some tools installed"</span> fcbd0a5348ca seanlook/ubuntu:14.10_tutorial</span></div><div class="line">fe022762070b09866eaab47bc943ccb796e53f3f416abf3f2327481b446a9503</div></pre></td></tr></table></figure></p>
<p>-a “seanlook7@gmail.com”<br>请注意，当你反复去commit一个容器的时候，每次都会得到一个新的<code>IMAGE ID</code>，假如后面的<code>repository:tag</code>没有变，通过<code>docker images</code>可以看到，之前提交的那份镜像的<code>repository:tag</code>就会变成<code>&lt;none&gt;:&lt;none&gt;</code>，所以尽量避免反复提交。<br>另外，观察以下几点:</p>
<ul>
<li>commit container只会pause住容器，这是为了保证容器文件系统的一致性，但不会stop。如果你要对这个容器继续做其他修改：<ul>
<li>你可以重新提交得到新image2，删除次新的image1</li>
<li>也可以关闭容器用新image1启动，继续修改，提交image2后删除image1</li>
<li>当然这样会很痛苦，所以一般是采用<code>Dockerfile</code>来<code>build</code>得到最终image，参考[]</li>
</ul>
</li>
<li>虽然产生了一个新的image，并且你可以看到大小有100MB，但从commit过程很快就可以知道实际上它并没有独立占用100MB的硬盘空间，而只是在旧镜像的基础上修改，它们共享大部分公共的“片”。</li>
</ul>
<p>下文继续：</p>
<h1 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://docs.docker.com/v1.1/reference/commandline/cli/" target="_blank" rel="external">Official Command Line Reference</a></li>
<li><a href="http://www.widuu.com/docker/" target="_blank" rel="external">docker中文指南cli-widuu翻译</a></li>
<li><a href="http://www.dockerpool.com/static/books/docker_practice/" target="_blank" rel="external">Docker —— 从入门到实践</a></li>
<li><a href="http://17173ops.com/2014/10/13/docker%E5%9F%BA%E7%A1%80%E4%B8%8E%E9%AB%98%E7%BA%A7.shtml" target="_blank" rel="external">Docker基础与高级</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[管理多tomcat服务shell脚本（CentOS）]]></title>
      <url>http://seanlook.com/2014/10/29/multiple-tomcats-service-script/</url>
      <content type="html"><![CDATA[<p>该脚本改自csdn上的一个shell，忘记出处了，只记得它能够简单的通过<code>service tomcat [stop|start|restart]</code>来方便的管理Linux服务器上的tomcat，这可以满足大部分人的需求，然而并不适合我所管理的CentOS上的tomcat应用：通过端口区分的3台tomcat集群。如果每一次管理tomcat或查看日志，都<code>cd /apps/test/tomcat0/log/</code>然后切换到另外一个<code>cd ../../</code>或<code>cd /apps/test/tomcat1/log/</code>，麻烦至极。因此“懒人”创造了这个脚本<code>tomcat</code>：</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash  </span></div><div class="line"><span class="comment"># author: Sean Chow (seanlook7@gmail.com)</span></div><div class="line"><span class="comment"># </span></div><div class="line"><span class="comment">#  </span></div><div class="line"><span class="comment"># chkconfig: 345 80 15  </span></div><div class="line"><span class="comment"># description: Multiple tomcats service management script.  </span></div><div class="line">  </div><div class="line"><span class="comment"># Source function library.  </span></div><div class="line">. /etc/rc.d/init.d/<span class="built_in">functions</span>  </div><div class="line"></div><div class="line"><span class="comment"># 第几个tomcat</span></div><div class="line">tcNo=<span class="variable">$1</span></div><div class="line">tcName=tomcat<span class="variable">$1</span></div><div class="line">basedir=/apps/<span class="built_in">test</span>/<span class="variable">$tcName</span></div><div class="line">tclog=<span class="variable">$&#123;basedir&#125;</span>/logs/catalina.$(date +%Y-%m-%d).out</div><div class="line"></div><div class="line">RETVAL=0  </div><div class="line">  </div><div class="line"><span class="function"><span class="title">start</span></span>()&#123;</div><div class="line">        checkrun  </div><div class="line">        <span class="keyword">if</span> [ <span class="variable">$RETVAL</span> <span class="_">-eq</span> 0 ]; <span class="keyword">then</span>  </div><div class="line">                <span class="built_in">echo</span> <span class="string">"-- Starting tomcat..."</span>  </div><div class="line">                <span class="variable">$basedir</span>/bin/startup.sh  </div><div class="line">                touch /var/lock/subsys/<span class="variable">$&#123;tcNo&#125;</span></div><div class="line">                checklog </div><div class="line">                status</div><div class="line">        <span class="keyword">else</span>  </div><div class="line">                <span class="built_in">echo</span> <span class="string">"-- tomcat already running"</span>  </div><div class="line">        <span class="keyword">fi</span>  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="comment"># 停止某一台tomcat，如果是重启则带re参数，表示不查看日志，等待启动时再提示查看  </span></div><div class="line"><span class="function"><span class="title">stop</span></span>()&#123;</div><div class="line">        checkrun  </div><div class="line">        <span class="keyword">if</span> [ <span class="variable">$RETVAL</span> <span class="_">-eq</span> 1 ]; <span class="keyword">then</span>  </div><div class="line">                <span class="built_in">echo</span> <span class="string">"-- Shutting down tomcat..."</span>  </div><div class="line">                <span class="variable">$basedir</span>/bin/shutdown.sh  </div><div class="line">                <span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> != <span class="string">"re"</span> ]; <span class="keyword">then</span></div><div class="line">                  checklog</div><div class="line">                <span class="keyword">else</span></div><div class="line">                  sleep 5</div><div class="line">                <span class="keyword">fi</span></div><div class="line">                rm <span class="_">-f</span> /var/lock/subsys/<span class="variable">$&#123;tcNo&#125;</span> </div><div class="line">                status</div><div class="line">        <span class="keyword">else</span>  </div><div class="line">                <span class="built_in">echo</span> <span class="string">"-- tomcat not running"</span>  </div><div class="line">        <span class="keyword">fi</span>  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="title">status</span></span>()&#123;</div><div class="line">        checkrun</div><div class="line">        <span class="keyword">if</span> [ <span class="variable">$RETVAL</span> <span class="_">-eq</span> 1 ]; <span class="keyword">then</span></div><div class="line">                <span class="built_in">echo</span> -n <span class="string">"-- Tomcat ( pid "</span>  </div><div class="line">                ps ax --width=1000 |grep <span class="variable">$&#123;tcName&#125;</span>|grep <span class="string">"org.apache.catalina.startup.Bootstrap start"</span> | awk <span class="string">'&#123;printf $1 " "&#125;'</span></div><div class="line">                <span class="built_in">echo</span> -n <span class="string">") is running..."</span>  </div><div class="line">                <span class="built_in">echo</span>  </div><div class="line">        <span class="keyword">else</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"-- Tomcat is stopped"</span>  </div><div class="line">        <span class="keyword">fi</span></div><div class="line">        <span class="comment">#echo "---------------------------------------------"  </span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># 查看tomcat日志，带vl参数</span></div><div class="line"><span class="function"><span class="title">log</span></span>()&#123;</div><div class="line">        status</div><div class="line">        checklog yes</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># 如果tomcat正在运行，强行杀死tomcat进程，关闭tomcat</span></div><div class="line"><span class="function"><span class="title">kill</span></span>()&#123;</div><div class="line">        checkrun</div><div class="line">        <span class="keyword">if</span> [ <span class="variable">$RETVAL</span> <span class="_">-eq</span> 1 ]; <span class="keyword">then</span></div><div class="line">            <span class="built_in">read</span> -p <span class="string">"-- Do you really want to kill <span class="variable">$&#123;tcName&#125;</span> progress?[no])"</span> answer</div><div class="line">            <span class="keyword">case</span> <span class="variable">$answer</span> <span class="keyword">in</span></div><div class="line">                Y|y|YES|yes|Yes)</div><div class="line">                    ps ax --width=1000 |grep <span class="variable">$&#123;tcName&#125;</span>|grep <span class="string">"org.apache.catalina.startup.Bootstrap start"</span> | awk <span class="string">'&#123;printf $1 " "&#125;'</span>|xargs <span class="built_in">kill</span> -9  </div><div class="line">                    status</div><div class="line">                ;;</div><div class="line">                *);;</div><div class="line">            <span class="keyword">esac</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">echo</span> <span class="string">"-- exit with <span class="variable">$tcName</span> still running..."</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="title">checkrun</span></span>()&#123;  </div><div class="line">        ps ax --width=1000 |grep <span class="variable">$&#123;tcName&#125;</span>| grep <span class="string">"[o]rg.apache.catalina.startup.Bootstrap start"</span> | awk <span class="string">'&#123;printf $1 " "&#125;'</span> | wc | awk <span class="string">'&#123;print $2&#125;'</span> &gt;/tmp/tomcat_process_count.txt  </div><div class="line">        <span class="built_in">read</span> line &lt; /tmp/tomcat_process_count.txt  </div><div class="line">        <span class="keyword">if</span> [ <span class="variable">$line</span> <span class="_">-gt</span> 0 ]; <span class="keyword">then</span>  </div><div class="line">                RETVAL=1  </div><div class="line">                <span class="built_in">return</span> <span class="variable">$RETVAL</span>  </div><div class="line">        <span class="keyword">else</span>  </div><div class="line">                RETVAL=0  </div><div class="line">                <span class="built_in">return</span> <span class="variable">$RETVAL</span>  </div><div class="line">        <span class="keyword">fi</span>  </div><div class="line">&#125;  </div><div class="line"><span class="comment"># 如果是直接查看日志viewlog，则不提示输入[yes]，否则就是被stop和start调用，需提示是否查看日志</span></div><div class="line"><span class="function"><span class="title">checklog</span></span>()&#123;</div><div class="line">        answer=<span class="variable">$1</span></div><div class="line">        <span class="keyword">if</span> [ <span class="string">"<span class="variable">$answer</span>"</span> != <span class="string">"yes"</span> ]; <span class="keyword">then</span></div><div class="line">            <span class="built_in">read</span> -p <span class="string">"-- See Catalina.out log to check <span class="variable">$2</span> status?[yes])"</span> answer</div><div class="line">        <span class="keyword">fi</span></div><div class="line">        <span class="keyword">case</span> <span class="variable">$answer</span> <span class="keyword">in</span></div><div class="line">            Y|y|YES|yes|Yes|<span class="string">""</span>)</div><div class="line">                tail <span class="_">-f</span> <span class="variable">$&#123;tclog&#125;</span></div><div class="line">            ;;</div><div class="line">            *)</div><div class="line">            <span class="comment">#    status</span></div><div class="line">            <span class="comment">#    exit 0</span></div><div class="line">            ;;</div><div class="line">        <span class="keyword">esac</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">checkexist</span></span>()&#123;</div><div class="line">        <span class="keyword">if</span> [ ! <span class="_">-d</span> <span class="variable">$basedir</span> ]; <span class="keyword">then</span></div><div class="line">            <span class="built_in">echo</span> <span class="string">"-- tomcat <span class="variable">$basedir</span> does not exist."</span></div><div class="line">            <span class="built_in">exit</span> 0</div><div class="line">        <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line">  </div><div class="line">  </div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$2</span>"</span> <span class="keyword">in</span>  </div><div class="line">start)  </div><div class="line">        checkexist</div><div class="line">        start  </div><div class="line">        <span class="built_in">exit</span> 0</div><div class="line">        ;;  </div><div class="line">stop)  </div><div class="line">        checkexist</div><div class="line">        stop  </div><div class="line">        <span class="built_in">exit</span> 0</div><div class="line">        ;;  </div><div class="line">restart)  </div><div class="line">        checkexist</div><div class="line">        stop re </div><div class="line">        start </div><div class="line">        <span class="built_in">exit</span> 0</div><div class="line">        ;;  </div><div class="line">status)  </div><div class="line">        checkexist</div><div class="line">        status  </div><div class="line">        <span class="comment">#$basedir/bin/catalina.sh version  </span></div><div class="line">        <span class="built_in">exit</span> 0</div><div class="line">        ;;  </div><div class="line"><span class="built_in">log</span>)</div><div class="line">        checkexist</div><div class="line">        <span class="built_in">log</span></div><div class="line">        <span class="built_in">exit</span> 0</div><div class="line">        ;;</div><div class="line"><span class="built_in">kill</span>)</div><div class="line">        checkexist</div><div class="line">        status</div><div class="line">        <span class="built_in">kill</span></div><div class="line">        <span class="built_in">exit</span> 0</div><div class="line">        ;;</div><div class="line">*)  </div><div class="line">        <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|restart|status|log|kill&#125;"</span>  </div><div class="line">        <span class="built_in">echo</span> <span class="string">"       service tomcat &#123;0|1|..&#125; &#123;start|stop|restart|status|log|kill&#125;"</span>  </div><div class="line">        <span class="keyword">esac</span>  </div><div class="line">  </div><div class="line"><span class="built_in">exit</span> 0</div></pre></td></tr></table></figure>
<p>使用说明：</p>
<ol>
<li>使用前设定好<code>baseDir</code>（多tomcat所在路径），各tomcat命名如<code>tomcat0</code>、<code>tomcat1</code>…</li>
<li>脚本名字为<code>tomcat</code>，放到<code>/etc/init.d/</code>下，并基于可执行权限<code>chmod +x /etc/init.d/tomcat</code></li>
<li>执行用户不允许用<code>root</code>，特别是在线上环境</li>
<li>已处理其他错误参数输入，可用于正式环境</li>
<li>你也可以修改<code>tcName</code>来适应管理一个tomcat服务的情形</li>
<li>使用，以下针对<code>tomcat0</code>（<code>/apps/test/tomcat0</code>）<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">service tomcat 0 start   启动，默认回车会查看启动日志；已启动则仅输出进程号</div><div class="line">service tomcat 0 stop    停止，默认回车会查看日志；已停止则无动作；无法停止，则提示是否`<span class="built_in">kill</span>`（默认No）</div><div class="line">service tomcat 0 restart 重启tomcat，有日志输出</div><div class="line">service tomcat 0 status  查看tomcat是否启动</div><div class="line">service tomcat 0 <span class="built_in">log</span>     使用`tail <span class="_">-f</span>`命令实时查看日志</div><div class="line">service tomcat 0 <span class="built_in">kill</span>    直接`<span class="built_in">kill</span>`tomcat进程；尽量少用</div></pre></td></tr></table></figure>
</li>
</ol>
<p>TO-DO<br>加入<code>service tomcat 0 clean</code>命令来清除<code>work</code>和<code>tmp</code>目录，正在运行的不允许清除。</p>
<p>这个脚本最近（2014/11/13）在使用过程中发现一个新的问题，因为服务器上tomcat一直开启着监控端口7091，所以在<code>service tomcat 1 start</code>失败以后，7091端口就被占用了，但使用<code>service tomcat 1 status</code>状态时<code>stopped</code>，其实还是有这个失败的tomcat进程，但用<code>service tomcat 1 kill</code>会失败。脚本里在考虑这个功能的话就有点臃肿了，还是老实结合手动管理吧。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[apache+3tomcat+jk+memcached集群环境搭建]]></title>
      <url>http://seanlook.com/2014/10/29/apache-3tomcat-cluster-jk-memcached/</url>
      <content type="html"><![CDATA[<p>注意本文不讨论原理，只讲述具体的搭建过程，而且步骤都经过了整理，否则过程可能会出现其他异常，请自行google。apache与tomcat整合的方式除了jk之外，使用apache自带的mod_ajp_proxy模块也可以很方便的完成。<br>先来看一下架构图：<br><img src="http://sean-images.qiniudn.com/apache_tomcat_cluster_msm.png" alt="apache_tomcat_cluster_msm"><br>属于正式环境中原session复制方案的改进。</p>
<h1 id="1-所需软件包"><a href="#1-所需软件包" class="headerlink" title="1. 所需软件包"></a>1. 所需软件包</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">jrrt-3</span><span class="selector-class">.1</span><span class="selector-class">.2-1</span><span class="selector-class">.6</span><span class="selector-class">.0-linux-x64</span><span class="selector-class">.bin</span>（或<span class="selector-tag">jdk1</span><span class="selector-class">.6</span><span class="selector-class">.0_33</span>）   <span class="selector-tag">jvm</span></div><div class="line"><span class="selector-tag">httpd-2</span><span class="selector-class">.2</span><span class="selector-class">.26</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span>                              <span class="selector-tag">web</span>服务器，处理静态资源</div><div class="line"><span class="selector-tag">apache-tomcat-6</span><span class="selector-class">.0</span><span class="selector-class">.32</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span>                      应用服务器，<span class="selector-tag">Servlet</span>容器处理动态请求</div><div class="line"><span class="selector-tag">tomcat-connectors-1</span><span class="selector-class">.2</span><span class="selector-class">.30-src</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span>              <span class="selector-tag">apache</span>与<span class="selector-tag">tomcat</span>整合插件<span class="selector-tag">mod_jk</span><span class="selector-class">.so</span></div><div class="line"><span class="selector-tag">tomcat-native</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span>                             <span class="selector-tag">APR</span>加速<span class="selector-tag">tomcat</span>，提高线程并发能力。使用<span class="selector-tag">tomcat</span>自带版本。</div><div class="line"><span class="selector-tag">memcached-session-manager</span>                        使用<span class="selector-tag">msm</span>解决多<span class="selector-tag">tomcat</span>集群时<span class="selector-tag">session</span>同步问题所需<span class="selector-tag">jar</span>包</div><div class="line">    <span class="selector-tag">asm-3</span><span class="selector-class">.2</span><span class="selector-class">.jar</span>, <span class="selector-tag">couchbase-client-1</span><span class="selector-class">.2</span><span class="selector-class">.2</span><span class="selector-class">.jar</span>, </div><div class="line">    <span class="selector-tag">kryo-1</span><span class="selector-class">.04</span><span class="selector-class">.jar</span>, <span class="selector-tag">kryo-serializers-0</span><span class="selector-class">.11</span><span class="selector-class">.jar</span></div><div class="line">    <span class="selector-tag">msm-kryo-serializer-1</span><span class="selector-class">.6</span><span class="selector-class">.5</span><span class="selector-class">.jar</span></div><div class="line">    <span class="selector-tag">memcached-session-manager-1</span><span class="selector-class">.6</span><span class="selector-class">.5</span><span class="selector-class">.jar</span></div><div class="line">    <span class="selector-tag">memcached-session-manager-tc6-1</span><span class="selector-class">.6</span><span class="selector-class">.5</span><span class="selector-class">.jar</span></div><div class="line">    <span class="selector-tag">minlog-1</span><span class="selector-class">.2</span><span class="selector-class">.jar</span>, <span class="selector-tag">reflectasm-1</span><span class="selector-class">.01</span><span class="selector-class">.jar</span></div><div class="line">    <span class="selector-tag">spymemcached-2</span><span class="selector-class">.10</span><span class="selector-class">.2</span><span class="selector-class">.jar</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="2-安装过程"><a href="#2-安装过程" class="headerlink" title="2. 安装过程"></a>2. 安装过程</h1><h2 id="2-1-JDK"><a href="#2-1-JDK" class="headerlink" title="2.1 JDK"></a>2.1 JDK</h2><p>下载将JRockit二进制安装文件，赋予可执行权限<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># pwd</span></div><div class="line">/apps/test/java</div><div class="line"><span class="meta"># chmod o+x jrrt*.bin</span></div><div class="line"><span class="meta"># ./jrrt-3.1.2-1.6.0-linux-x64.bin</span></div></pre></td></tr></table></figure></p>
<p>可不必为整个linux环境设置<code>JAVA_HOME=&quot;/apps/test/java/jrrt-3.1.2-1.6.0&quot;</code>，在tomcat中指定即可。</p>
<h2 id="2-2-编译安装apache"><a href="#2-2-编译安装apache" class="headerlink" title="2.2 编译安装apache"></a>2.2 编译安装apache</h2><p>因为<code>tomcat-native</code>依赖于apr，所以这里先直接从 httpd-2.2.26/srclib 目录下安装apache自带的<code>apr</code>和<code>apr-util</code>。<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@cachets</span> httpd<span class="number">-2.2</span><span class="number">.26</span>]<span class="meta"># pwd</span></div><div class="line">/apps/test/soft_src/httpd<span class="number">-2.2</span><span class="number">.26</span></div><div class="line">[root<span class="symbol">@test</span> httpd<span class="number">-2.2</span><span class="number">.26</span>]<span class="meta"># cd srclib/apr</span></div><div class="line">[root<span class="symbol">@test</span> apr]<span class="meta"># ./configure --prefix=/usr/local/apr</span></div><div class="line">[root<span class="symbol">@test</span> apr]<span class="meta"># make &amp;&amp; make install</span></div><div class="line">[root<span class="symbol">@test</span> apr]<span class="meta"># cd ../apr-util/</span></div><div class="line">[root<span class="symbol">@test</span> apr-util]<span class="meta"># ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr</span></div><div class="line">[root<span class="symbol">@test</span> apr-util]<span class="meta"># make &amp;&amp; make install</span></div></pre></td></tr></table></figure></p>
<p>建议将srclib下的<code>pcre</code>也装上，主要是考虑后面转发请求时可能要使用地址rewrite，需要正则语法的支持。默认CentOS6.x已经安装了这个库。</p>
<p>安装apache：<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">[</span><span class="comment">root@test</span> <span class="comment">httpd</span><span class="literal">-</span><span class="comment">2</span><span class="string">.</span><span class="comment">2</span><span class="string">.</span><span class="comment">26</span><span class="title">]</span><span class="comment">#</span> <span class="string">.</span><span class="comment">/configure</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">prefix=/apps/test/apache2</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">mods</span><span class="literal">-</span><span class="comment">shared=all</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">modules=so</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">rewrite</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">deflate</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">mpm=worker</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">apr=/usr/local/apr</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">apr</span><span class="literal">-</span><span class="comment">util=/usr/local/apr</span><span class="literal">-</span><span class="comment">util</span></div><div class="line"><span class="title">[</span><span class="comment">root@test</span> <span class="comment">httpd</span><span class="literal">-</span><span class="comment">2</span><span class="string">.</span><span class="comment">2</span><span class="string">.</span><span class="comment">26</span><span class="title">]</span><span class="comment">#</span> <span class="comment">make</span> <span class="comment">&amp;&amp;</span> <span class="comment">make</span> <span class="comment">install</span></div></pre></td></tr></table></figure></p>
<h2 id="2-3-安装tomcat"><a href="#2-3-安装tomcat" class="headerlink" title="2.3 安装tomcat"></a>2.3 安装tomcat</h2><p>解压apache-tomcat-6.0.32.tar.gz拷贝至/app/test/tomcat0，不建议使用root用户管理tomcat.<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[test@cachets soft_src]$ tar -zxvf apache-tomcat<span class="number">-6.0</span><span class="number">.32</span>.tar.gz</div><div class="line">[test@cachets soft_src]$ cp -a apache-tomcat<span class="number">-6.0</span><span class="number">.32</span> /app/crm/tomcat0</div><div class="line"></div><div class="line"><span class="comment">// 安装tomcat-native（不用单独下载，在tomcat的bin目录中自带）</span></div><div class="line"># yum install -y openssl-devel apr-devel</div><div class="line">[root@cachets ~]# cd /app/test/soft_src/apache-tomcat<span class="number">-6.0</span><span class="number">.32</span>/bin</div><div class="line">[root@cachets bin]# tar -zxvf tomcat-native.tar.gz</div><div class="line">[root@cachets bin]# cd tomcat-native<span class="number">-1.1</span><span class="number">.20</span>-src/jni/native/</div><div class="line">[root@cachets native]# ./configure --with-apr=/usr/local/apr/bin/apr<span class="number">-1</span>-config --with-ssl --with-java-home=/apps/test/java/jrrt<span class="number">-3.1</span><span class="number">.2</span><span class="number">-1.6</span><span class="number">.0</span></div><div class="line">[root@cachets native]# make &amp;&amp; make install</div></pre></td></tr></table></figure></p>
<p>配置tomcat：</p>
<p>tomcat默认参数是为开发环境制定，而非适合生产环境，尤其是内存和线程的配置，默认都很低，容易成为性能瓶颈。下面是一些配置示例，需要根据实际需要更改。<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[crm@cachets tomcat0]$ vi bin/setenv.sh</div><div class="line"><span class="attr">JAVA_OPTS="-XX:PermSize=128M</span> -XX:<span class="attr">MaxPermSize=256M</span> -Xms1536M -Xmx2048M -verbosegc <span class="string">"</span></div><div class="line">CATALINA_OPTS="-Dcom.sun.management.jmxremote.<span class="attr">port=7091</span> -Dcom.sun.management.jmxremote.<span class="attr">ssl=false</span> -Dcom.sun.management.jmxremote.<span class="attr">authenticate=false</span> -Djava.rmi.server.<span class="attr">hostname=192.168.10.100"</span></div><div class="line"><span class="attr">JAVA_HOME="/apps/test/java/jrrt-3.1.2-1.6.0"</span></div><div class="line"><span class="attr">CATALINA_OPTS="$CATALINA_OPTS</span> -Djava.library.<span class="attr">path=/usr/local/apr/lib"</span></div><div class="line">[crm@cachets tomcat0]$ chmod <span class="number">755</span> bin/setenv.sh</div></pre></td></tr></table></figure></p>
<p>bin目录下新建的可执行文件<code>setenv.sh</code>会由tomcat自动调用。上面的<code>jmxremote.authenticate</code>在正式环境中请务必设为true并设置用户名/密码，减少安全隐患，或者注释掉<code>CATALINA_OPTS</code>。（有时候出于性能调优的目的，才需要设置JMX）。对于具体的连接协议有不同的优化属性，参考如下：<br>对HTTP：</p>
<pre><code>&lt;Connector port=&quot;8080&quot; 
           protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;
           URIEncoding=&quot;UTF-8&quot;
           enableLookups=&quot;false&quot;

           maxThreads=&quot;400&quot;
           minSpareTheads=&quot;50&quot;   
           acceptCount=&quot;400&quot;
           acceptorThreadCount=&quot;2&quot;              
           connectionTimeout=&quot;30000&quot; 
           disableUploadTimeout=&quot;true&quot;

           compression=&quot;on&quot;
           compressionMinSize=&quot;2048&quot;
           maxHttpHeaderSize=&quot;16384&quot;
           redirectPort=&quot;8443&quot;
 /&gt;
</code></pre><p>对AJP：</p>
<pre><code>&lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; 
           maxThreads=&quot;300&quot; minSpareThreads=&quot;50&quot;
           connectionTimeout=&quot;30000&quot;
           keepAliveTimeout=&quot;30000&quot;
           acceptCount=&quot;200&quot;
           URIEncoding=&quot;UTF-8&quot;
           enableLookups=&quot;false&quot;
           redirectPort=&quot;8443&quot; /&gt;
</code></pre><h2 id="2-4-安装jk"><a href="#2-4-安装jk" class="headerlink" title="2.4 安装jk"></a>2.4 安装jk</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[crm@test soft_src]$ tar -zxvf tomcat-connectors-<span class="number">1.2</span>.<span class="number">30</span>-src.tar.gz</div><div class="line">[crm@test soft_src]$ cd tomcat-connectors-<span class="number">1.2</span>.<span class="number">30</span>-src/<span class="keyword">native</span></div><div class="line">[root@test <span class="keyword">native</span>]<span class="comment"># ./configure --with-apxs=/apps/test/apache2/bin/apxs</span></div><div class="line">[root@test <span class="keyword">native</span>]<span class="comment"># make &amp;&amp; make install</span></div></pre></td></tr></table></figure>
<p>此时可以看到在<code>/apps/test/apache2/modules</code>下有<code>mod_jk.so</code>文件，用于连接apache与tomcat。</p>
<h2 id="2-5-配置（集群）负载均衡选项"><a href="#2-5-配置（集群）负载均衡选项" class="headerlink" title="2.5 配置（集群）负载均衡选项"></a>2.5 配置（集群）负载均衡选项</h2><h3 id="2-5-1-apache"><a href="#2-5-1-apache" class="headerlink" title="2.5.1 apache"></a>2.5.1 apache</h3><p>建立配置文件<code>httpd-jk.conf</code>：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">[root@cachets ~]# <span class="keyword">cd</span> /app/test/</div><div class="line">[root@cachets crm]# <span class="keyword">vi</span> apache2/<span class="keyword">conf</span>/extra/httpd-jk.<span class="keyword">conf</span></div><div class="line"># Load mod_jk module</div><div class="line">LoadModule jk_module modules/mod_jk.<span class="keyword">so</span></div><div class="line"># 指定保存了worker相关工作属性定义的配置文件</div><div class="line">JkWorkersFile <span class="keyword">conf</span>/extra/workers.properties</div><div class="line"># Specify jk <span class="built_in">log</span> <span class="keyword">file</span></div><div class="line">JkLogFile /app/test/apache2/logs/mod_jk.<span class="built_in">log</span></div><div class="line"># Specify jk <span class="built_in">log</span> level [<span class="keyword">debug</span>/error/info]</div><div class="line">JkLogLevel info</div><div class="line">#指定哪些请求交给tomcat处理,<span class="string">"controller"</span>为在workers.properties里指定的负载分配控制器名</div><div class="line"></div><div class="line">JkMount /servlet/* controller</div><div class="line">JkMount /*.jsp controller</div><div class="line">JkMount /*.<span class="keyword">do</span> controller</div><div class="line"></div><div class="line">// 在<span class="keyword">conf</span>/httpd.<span class="keyword">conf</span>最后加上</div><div class="line">Include <span class="keyword">conf</span>/extra/httpd-vhosts.<span class="keyword">conf</span></div><div class="line">Include <span class="keyword">conf</span>/extra/httpd-jk.<span class="keyword">conf</span></div></pre></td></tr></table></figure></p>
<p>建立工作文件<code>workers.properties</code>：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[root@cachets crm]<span class="comment"># vi apache2/conf/extra/workers.properties</span></div><div class="line"><span class="comment"># servers</span></div><div class="line">worker.<span class="attr">list=controller</span></div><div class="line"><span class="comment"># ====== tomcat0 =======</span></div><div class="line">worker.tomcat0.<span class="attr">port=8009</span></div><div class="line">worker.tomcat0.<span class="attr">host=192.168.10.100</span></div><div class="line">worker.tomcat0.<span class="attr">type=ajp13</span></div><div class="line">worker.tomcat0.<span class="attr">lbfactor=1</span></div><div class="line"><span class="comment"># ====== tomcat1 =======</span></div><div class="line">worker.tomcat1.<span class="attr">port=8109</span></div><div class="line">worker.tomcat1.<span class="attr">host=192.168.10.100</span></div><div class="line">worker.tomcat1.<span class="attr">type=ajp13</span></div><div class="line">worker.tomcat1.<span class="attr">lbfactor=1</span></div><div class="line"><span class="comment"># ====== tomcat2 =======</span></div><div class="line">worker.tomcat2.<span class="attr">port=8209</span></div><div class="line">worker.tomcat2.<span class="attr">host=192.168.10.100</span></div><div class="line">worker.tomcat2.<span class="attr">type=ajp13</span></div><div class="line">worker.tomcat2.<span class="attr">lbfactor=1</span></div><div class="line"><span class="comment"># ====== controller ====</span></div><div class="line">worker.controller.<span class="attr">type=lb</span></div><div class="line">worker.controller.<span class="attr">balance_workers=tomcat0,tomcat1,tomcat2</span></div><div class="line">worker.controller.<span class="attr">sticky_session</span> = <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>以上是3个tomcat的做负载均衡的情况，负载因子<code>lbfactor</code>都为1，session为sticky模式，apache与tomcat连接的协议采用AJP/1.3，同一台服务器上通过端口来区分tomcat0/tomcat1/tomcat2。</p>
<h3 id="2-5-2-tomcat"><a href="#2-5-2-tomcat" class="headerlink" title="2.5.2 tomcat"></a>2.5.2 tomcat</h3><p>在<code>tomcat0/conf/server.xml</code>中加入<code>jvmRoute</code>属性，这个属性与上面的<code>workers.properties</code>的worker相同：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Engine <span class="built_in">name</span>=<span class="string">"Catalina"</span> defaultHost=<span class="string">"localhost"</span> jvmRoute=<span class="string">"tomcat0"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>设置测试应用的访问路径，在<code>tomcat0/conf/server.xml</code>的<code>&lt;Host&gt;</code>节点下添加如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">""</span> <span class="attr">docBase</span>=<span class="string">"/apps/test/testapp/TEST"</span> <span class="attr">reloadable</span>=<span class="string">"true"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="2-5-3-app-TEST"><a href="#2-5-3-app-TEST" class="headerlink" title="2.5.3 app-TEST"></a>2.5.3 app-TEST</h3><p>为了看到负载均衡的效果，在<code>/apps/test/testapp/TEST</code>目录下建立测试页面test.jsp：<br><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span><span class="vbscript">&lt;%@ page contentType=<span class="string">"text/html; charset=UTF-8"</span> %&gt;</span><span class="xml"></span></div><div class="line"><span class="vbscript">&lt;%@ page import=<span class="string">"java.util.*"</span> %&gt;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Cluster App Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">Server Info:</div><div class="line"><span class="vbscript">&lt;%</span></div><div class="line">out.println(<span class="built_in">request</span>.getLocalAddr() + <span class="string">" : "</span> + <span class="built_in">request</span>.getLocalPort()+<span class="string">"&lt;br&gt;"</span>);%&gt;<span class="xml"></span></div><div class="line"><span class="vbscript">&lt;%</span></div><div class="line">  out.println(<span class="string">"&lt;br&gt; ID "</span> + session.getId()+<span class="string">"&lt;br&gt;"</span>);</div><div class="line">  // 如果有新的 Session 属性设置</div><div class="line">  <span class="built_in">String</span> dataName = <span class="built_in">request</span>.getParameter(<span class="string">"dataName"</span>);</div><div class="line">  <span class="keyword">if</span> (dataName != <span class="literal">null</span> &amp;&amp; dataName.length() &gt; <span class="number">0</span>) &#123;</div><div class="line">     <span class="built_in">String</span> dataValue = <span class="built_in">request</span>.getParameter(<span class="string">"dataValue"</span>);</div><div class="line">     session.setAttribute(dataName, dataValue);</div><div class="line">  &#125;</div><div class="line">  out.println(<span class="string">"&lt;b&gt;Session 列表&lt;/b&gt;&lt;br&gt;"</span>);</div><div class="line">  System.out.println(<span class="string">"============================"</span>);</div><div class="line">  Enumeration e = session.getAttributeNames();</div><div class="line">  <span class="keyword">while</span> (e.hasMoreElements()) &#123;</div><div class="line">     <span class="built_in">String</span> name = (<span class="built_in">String</span>)e.nextElement();</div><div class="line">     <span class="built_in">String</span> value = session.getAttribute(name).toString();</div><div class="line">     out.println( name + <span class="string">" = "</span> + value+<span class="string">"&lt;br&gt;"</span>);</div><div class="line">         System.out.println( name + <span class="string">" = "</span> + value);</div><div class="line">   &#125;</div><div class="line">%&gt;<span class="xml"></span></div><div class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"test.jsp"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></div><div class="line">    CRM <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    名称:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">size</span>=<span class="string">20</span> <span class="attr">name</span>=<span class="string">"dataName"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    值:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">size</span>=<span class="string">20</span> <span class="attr">name</span>=<span class="string">"dataValue"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>到这里还差一步就可以看到集群的效果，那就是3个tomcat之间session同步的问题。可以通过打开<code>&lt;Engine&gt;</code>节点下的<code>&lt;Cluster&gt;</code>标签的注释来简单的实现session复制：</p>
<pre><code>&lt;Cluster className=&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;/&gt;
</code></pre><p>然后在<code>tomcat0/conf/web.xml</code>的<code>&lt;webapp&gt;</code>根节点下加入<code>&lt;distributable /&gt;</code></p>
<p>复制tomcat0到tomcat1、tomcat2，修改<server> <connector>的端口避免冲突，修改对应的jvmRoute</connector></server></p>
<p>启动apache和3个tomcat，就可以看到效果。但这里我们使用<code>memcached-session-manager</code>来同步session，所以不必打开<code>&lt;Cluster&gt;</code>这一步。</p>
<h2 id="2-6-memcached-session-manager配置"><a href="#2-6-memcached-session-manager配置" class="headerlink" title="2.6 memcached-session-manager配置"></a>2.6 memcached-session-manager配置</h2><h3 id="2-6-1-安装memcached服务器"><a href="#2-6-1-安装memcached服务器" class="headerlink" title="2.6.1 安装memcached服务器"></a>2.6.1 安装memcached服务器</h3><p>这里memcached搭建在另外一台服务器上（192.168.10.20），也可以安装在本地。<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@cachets</span> msm]<span class="meta"># yum install libevent libevent-devel</span></div><div class="line">[root<span class="symbol">@cachets</span> msm]<span class="meta"># tar -zxvf memcached-1.4.19.tar.gz</span></div><div class="line">[root<span class="symbol">@cachets</span> msm]<span class="meta"># cd memcached-1.4.19 &amp;&amp; ./configure &amp;&amp; make &amp;&amp; make install</span></div><div class="line"></div><div class="line">// 启动两个memcached节点，端口分别为<span class="number">11211</span>、<span class="number">11212</span></div><div class="line">[root<span class="symbol">@cachets</span> ~]<span class="meta">#memcached -d -m 64 -p 11211 -u daemon -P /var/run/memcached.pid </span></div><div class="line">[root<span class="symbol">@cachets</span> ~]<span class="meta">#memcached -d -m 64 -p 11212 -u daemon -P /var/run/memcached2.pid</span></div></pre></td></tr></table></figure></p>
<p>如果开启了防火墙，需要加入11211、11212端口的允许规则。</p>
<h3 id="2-6-2-再次配置tomcat"><a href="#2-6-2-再次配置tomcat" class="headerlink" title="2.6.2 再次配置tomcat"></a>2.6.2 再次配置tomcat</h3><p>加入jar包</p>
<p>将<code>asm-3.2.jar</code>, <code>couchbase-client-1.2.2.jar</code>, <code>kryo-1.04.jar</code>, <code>kryo-serializers-0.11.jar</code>, <code>msm-kryo-serializer-1.6.5.jar</code>, <code>memcached-session-manager-1.6.5.jar</code>, <code>memcached-session-manager-tc6-1.6.5.jar</code>, <code>minlog-1.2.jar</code>, <code>reflectasm-1.01.jar</code>, <code>spymemcached-2.10.2.jar</code>这些jar包加入tomcat0/lib/下。可以看到这里选用的session序列化策略采用的是kryo。另外要注意版本之间的兼容性，这里只针对tomcat6.x。<br>修改<code>conf/server.xml</code>：</p>
<p>将<context>节点修改成：</context></p>
<pre><code>&lt;Context path=&quot;&quot; docBase=&quot;/apps/test/testapp/TEST&quot; reloadable=&quot;true&quot; &gt;
   &lt;Manager className=&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;
      memcachedNodes=&quot;n1:192.168.10.20:11211,n2:192.168.10.20:11212&quot;
      failoverNodes=&quot;n1&quot;
      sticky=&quot;true&quot;
      requestUriIgnorePattern=&quot;.*\.(png|gif|jpg|css|js)$&quot;
      sessionBackupAsync=&quot;false&quot;
      sessionBackupTimeout=&quot;100&quot;
      transcoderFactoryClass=&quot;de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory&quot;
      copyCollectionsForSerialization=&quot;false&quot; /&gt;
&lt;/Context&gt;
</code></pre><p>接着将tomcat0完整的复制2份（tomcat1，tomcat2），也可以放到另外一台服务器上。<br>修改为<code>workers.properties</code>中定义的AJP等端口：</p>
<table>
<thead>
<tr>
<th>node tomcat</th>
<th>Server port</th>
<th>Connector port http</th>
<th>Connector port ajp</th>
<th>Engine jvmRoute</th>
<th>memcached failoverNodes</th>
</tr>
</thead>
<tbody>
<tr>
<td>tomcat0</td>
<td>8005</td>
<td>8080</td>
<td>8009</td>
<td>tomcat0</td>
<td>n1</td>
</tr>
<tr>
<td>tomcat1</td>
<td>8105</td>
<td>8081</td>
<td>8109</td>
<td>tomcat1</td>
<td>n1</td>
</tr>
<tr>
<td>tomcat2</td>
<td>8205</td>
<td>8082</td>
<td>8209</td>
<td>tomcat2</td>
<td>n2</td>
</tr>
</tbody>
</table>
<h1 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h1><p>分别启动tomcat0、tomcat1、tomcat2和apache，注意观察tomcat的启动日志和memcached服务器的日志。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">test</span>@cachets ~]$ /apps/<span class="keyword">test</span>/tomcat0/bin/startup.<span class="keyword">sh</span></div><div class="line">[<span class="keyword">test</span>@cachets ~]$ /apps/<span class="keyword">test</span>/tomcat1/bin/startup.<span class="keyword">sh</span></div><div class="line">[<span class="keyword">test</span>@cachets ~]$ /apps/<span class="keyword">test</span>/tomcat2/bin/startup.<span class="keyword">sh</span></div><div class="line">[root@cachets ~]# /apps/<span class="keyword">test</span>/apache2/bin/apachectl start</div></pre></td></tr></table></figure></p>
<p>在浏览器访问<code>http://192.168.10.100/test.jsp</code>。主要测试负载均衡与session共享。</p>
<p><strong>参考</strong></p>
<ul>
<li><a href="https://people.apache.org/~mturk/docs/article/ftwai.html" target="_blank" rel="external">https://people.apache.org/~mturk/docs/article/ftwai.html</a></li>
</ul>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2015/04/23/pfsense-usage/">http://seanlook.com/2015/04/23/pfsense-usage/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[误删vSphere虚拟机.vmdk文件的恢复]]></title>
      <url>http://seanlook.com/2014/10/28/vsphere-recover-from-missing-vmdk/</url>
      <content type="html"><![CDATA[<h2 id="1-错误描述"><a href="#1-错误描述" class="headerlink" title="1. 错误描述"></a>1. 错误描述</h2><p>在vSphere上，一次重启虚拟服务器时出现启动不了，提示找不到vmdk虚拟磁盘文件：<br><img src="http://sean-images.qiniudn.com/vmdk_not_found.png" alt="vmdk_not_found"></p>
<h2 id="2-原因分析"><a href="#2-原因分析" class="headerlink" title="2. 原因分析"></a>2. 原因分析</h2><p>查看这台虚拟服务器的摘要信息，对比datastore上其他可用的虚拟机，发现损坏的服务器上确实缺少一个vmdk磁盘文件，但是可以看见一个50G的<code>xxx-flat.vmdk</code>文件；而正常的服务器只有<code>xxx.vmdk</code>，没有<code>xxx-flat.vmdk</code>，关机之后两个文件都存在，而且真实的磁盘容量从vmdk转移到了<code>xxx-flat.vmdk</code>。<br>虚拟主机在运行的时候，实际在使用的是<code>xxx-flat.vmdk</code>，然而<code>xxx.vmdk</code>是可以同时被删除的，才导致了问题。</p>
<a id="more"></a>
<p>这里需要说明，虚拟机的每个磁盘驱动器都包含了一对<code>.vmdk</code>文件。一个是文本文件，包含了关于虚拟硬盘的描述数据；另外一个是磁盘的实际内容。例如，一个名为<code>examplevm</code>的虚拟机连接有一个硬盘。这个磁盘由如下两个文件构成：一个小于 1KB 的<code>examplevm.vmdk</code>描述文件和一个10GB大小的<code>examplevm- flat.vmdk</code>平面（数据）文件，该文件包含虚拟机的实际数据，而这些数据又是以二进制的形式存放在物理磁盘上，<code>examplevm.vmdk</code>描述文件就是描述这种映射关系的。<br>另外：</p>
<blockquote>
<p>A note for ESX-users:<br>Do not use Datastorebrowser to identify vmdks or download them for editiing.<br>The Datastorebrowser does not display vmdks correctly.<br>It usually hides <em>-flat.vmdks and </em>-delta.vmdks.</p>
</blockquote>
<p>TO-DO:<br>后续为 VMware ESXi 5 的磁盘专门记录一篇文章，说明“置备空间”以及vmfstools工具的使用。</p>
<h2 id="3-解决办法"><a href="#3-解决办法" class="headerlink" title="3. 解决办法"></a>3. 解决办法</h2><p><strong>(1) 用ssh登录vsphere主机，查找xxx-flat.vmdk文件所在的位置以及目录，并记录文件的大小</strong><br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">~ <span class="meta"># find / -name <span class="string">"新建虚拟机-flat.vmdk"</span></span></div><div class="line"><span class="meta-keyword">/vmfs/</span>volumes/<span class="number">50</span>a98441-ab02c8b7-e60a<span class="number">-001517712</span>dce/新建虚拟机/新建虚拟机-flat.vmdk</div><div class="line">~ <span class="meta"># ls -l /vmfs/volumes/50a98441-ab02c8b7-e60a-001517712dce/新建虚拟机/新建虚拟机-flat.vmdk</span></div><div class="line">-rw-------    <span class="number">1</span> root     root     <span class="number">53687091200</span> Apr <span class="number">16</span> <span class="number">09</span>:<span class="number">13</span> <span class="meta-keyword">/vmfs/</span>volumes/<span class="number">50</span>a98441-ab02c8b7-e60a<span class="number">-001517712</span>dce/新建虚拟机/新建虚拟机-flat.vmdk</div></pre></td></tr></table></figure></p>
<p>注意，ESXi5默认没有开启ssh，需要通过vsphere client登录服务器，【配置】【安全配置文件】【服务-属性】手动开启。</p>
<p><strong>(2) 重命名xxx-flat.vmdk文件</strong><br><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">~ <span class="comment"># cd  /vmfs/volumes/50a98441-ab02c8b7-e60a-001517712dce/新建虚拟机/</span></div><div class="line">/vmfs/volumes/50a98441-ab02c8b7-e60a-001517712dce/新建虚拟机_1 <span class="comment"># mv 新建虚拟机-flat.vmdk tmp_新建虚拟机-flat.vmdk</span></div><div class="line">/vmfs/volumes/50a98441-ab02c8b7-e60a-001517712dce/新建虚拟机 <span class="comment"># ls -la</span></div><div class="line">drwxr-xr-x   <span class="number"> 1 </span>root     root         <span class="number"> 1680 </span>Apr<span class="number"> 21 </span>05:47 .</div><div class="line">drwxr-xr-t   <span class="number"> 1 </span>root     root         <span class="number"> 2660 </span>Apr<span class="number"> 18 </span>03:16 ..</div><div class="line">-rw-r--r--   <span class="number"> 1 </span>root     root       <span class="number"> 102076 </span>Apr<span class="number"> 18 </span>10:05 vmware.log</div><div class="line">-rw-------   <span class="number"> 1 </span>root     root     <span class="number"> 96468992 </span>Apr<span class="number"> 18 </span>05:43 vmx-新建虚拟机-578288005-1.vswp</div><div class="line">-rw-------   <span class="number"> 1 </span>root     root    <span class="number"> 2147483648 </span>Apr<span class="number"> 18 </span>05:43 新建虚拟机-2277f985.vswp</div><div class="line">-rw-------   <span class="number"> 1 </span>root     root    <span class="number"> 53687091200 </span>Apr<span class="number"> 21 </span>05:47 新建虚拟机-flat.vmdk</div><div class="line">-rw-------   <span class="number"> 1 </span>root     root         <span class="number"> 8684 </span>Apr<span class="number"> 21 </span>05:47 新建虚拟机.nvram</div><div class="line">-rw-------   <span class="number"> 1 </span>root     root          <span class="number"> 503 </span>Apr<span class="number"> 18 </span>05:44 新建虚拟机.vmdk</div><div class="line">-rw-r--r--   <span class="number"> 1 </span>root     root            <span class="number"> 0 </span>Apr<span class="number"> 16 </span>09:13 新建虚拟机.vmsd</div><div class="line">-rwxr-xr--   <span class="number"> 1 </span>root     root         <span class="number"> 3690 </span>Apr<span class="number"> 18 </span>05:43 新建虚拟机.vmx</div><div class="line">-rw-------   <span class="number"> 1 </span>root     root            <span class="number"> 0 </span>Apr<span class="number"> 18 </span>05:43 新建虚拟机.vmx.lck</div><div class="line">-rwxr-xr--   <span class="number"> 1 </span>root     root         <span class="number"> 3690 </span>Apr<span class="number"> 18 </span>05:43 新建虚拟机.vmx~</div></pre></td></tr></table></figure></p>
<p><strong>(3) 在虚拟机目录下创建xxx.vmdk文件，大小要和xxx-flat.vmdk一样大</strong><br><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/vmfs/volumes/50a98441-ab02c8b7-e60a-001517712dce/新建虚拟机 <span class="comment"># vmkfstools -c 53687091200 -a lsilogic 新建虚拟机.vmdk</span></div><div class="line">Create: 100% done.</div><div class="line">/vmfs/volumes/50a98441-ab02c8b7-e60a-001517712dce/新建虚拟机 <span class="comment"># ls -la *vmdk</span></div><div class="line">-rw-------   <span class="number"> 1 </span>root     root    <span class="number"> 53687091200 </span>Apr<span class="number"> 21 </span>05:49 新建虚拟机-flat.vmdk</div><div class="line">-rw-------   <span class="number"> 1 </span>root     root          <span class="number"> 503 </span>Apr<span class="number"> 18 </span>05:44 新建虚拟机.vmdk</div></pre></td></tr></table></figure></p>
<p><strong>(4) 将原来的(tmp_)xxx-flat.vmdk覆盖掉刚创建的同样大小的xxx-flat.vmdk</strong><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/vmfs/</span>volumes<span class="regexp">/50a98441-ab02c8b7-e60a-001517712dce/</span>新建虚拟机 <span class="comment"># mv tmp_新建虚拟机-flat.vmdk 新建虚拟机-flat.vmdk</span></div></pre></td></tr></table></figure></p>
<p>重命名操作很快完成，启动虚拟机既可以恢复。</p>
<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><ul>
<li>相比重新创建一个同名虚拟机，然后mv原来的xxx-flat.vmdk硬盘文件到新的虚拟机，更节省时间；此外也无需再次配置网卡地址。</li>
<li>xxx.vmdk本身是一个不到1k的文本文件，通过vi编辑查看可知真正存放数据的是xxx-flat.vmdk磁盘文件，所以只要这个文件还存在，就可以恢复。</li>
</ul>
<h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h1><ul>
<li><a href="http://kb.vmware.com/selfservice/search.do?cmd=displayKC&amp;docType=kc&amp;docTypeID=DT_KB_1_1&amp;externalId=2030127" target="_blank" rel="external">重建丢失的虚拟机磁盘(VMDK)描述文件(2030127)</a> （<a href="http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=1002511" target="_blank" rel="external">英文</a>）</li>
<li><a href="http://buildvirtual.net/recreating-a-missing-vmdk-descriptor-file/" target="_blank" rel="external">Recreating A Missing VMDK Descriptor File</a></li>
<li><a href="https://anthbro.wordpress.com/2012/01/16/virtual_machine_files_explained/" target="_blank" rel="external">Virtual Machine files and settings explained </a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在 CentOS 6.x上安装 docker.io成功]]></title>
      <url>http://seanlook.com/2014/10/26/docker-installed-centos6-successfully/</url>
      <content type="html"><![CDATA[<p>docker是什么就不多说了，见<a href="http://seanlook.com/2014/12/18/docker-introduction/">docker基础原理介绍</a>。<br>docker容器最早受到RHEL完善的支持是从最近的CentOS 7.0开始的，官方说明是只能运行于64位架构平台，内核版本为2.6.32-431及以上（即&gt;=CentOS 6.5，运行docker时实际提示3.8.0及以上），升级内核请参考<a href="http://seanlook.com/2014/10/24/upgrade-centos6_kernel-to-3.10.x/">CentOS 6.x 内核升级（2.6.32 -&gt; 3.10.58）过程记录</a><br>需要注意的是CentOS 6.5与7.0的安装是有一点点不同的，CentOS-6上docker的安装包叫docker-io，并且来源于Fedora epel库，这个仓库维护了大量的没有包含在发行版中的软件，所以先要安装EPEL，而CentOS-7的docker直接包含在官方镜像源的Extras仓库（CentOS-Base.repo下的[extras]节enable=1启用）。前提是都需要联网，具体安装过程如下。</p>
<p>###1. 禁用selinux###<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># getenforce</span></div><div class="line">enforcing</div><div class="line"><span class="comment"># setenforce 0</span></div><div class="line">permissive</div><div class="line"><span class="comment"># vi /etc/selinux/config</span></div><div class="line">SELINUX=disabled</div><div class="line">...</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>###2. 安装 Fedora EPEL###<br>epel-release-6-8.noarch.rpm包在发行版的介质里面已经自带了，可以从rpm安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># yum install epel-release-6-8.noarch.rpm</span></div><div class="line">//或</div><div class="line">yum -y install http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</div></pre></td></tr></table></figure></p>
<p>如果出现<code>GPG key retrieval failed: [Errno 14] Could not open/read file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6</code>问题，请在线安装epel，下载RPM-GPG-KEY-EPEL-6文件。<br>这一步执行之后，会在/etc/yum.repos.d/下生成epel.repo、epel-testing.repo两个文件，用于从Fedora官网下载rpm包。</p>
<p>###3. 检查内核版本###<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># uname -r</span></div><div class="line">2.6.32-431.el6.x86_64</div><div class="line"><span class="comment"># cat /etc/redhat-release </span></div><div class="line">CentOS release 6.5 (Final)</div></pre></td></tr></table></figure></p>
<p>看到这个最低的内核版本，事实运行起来是没太大问题的，你也可以升级到3.10.x版本。<br>另外你也可以运行脚本<a href="https://raw.githubusercontent.com/dotcloud/docker/master/contrib/check-config.sh" target="_blank" rel="external">check-config.sh</a>，来检查内核模块符不符合（下面有些missing的，我的docker还是可以正常启动）：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">[root@sean ~]# ./check-config </div><div class="line">warning: /proc/config.gz does not exist, searching other paths for kernel config...</div><div class="line">info: reading kernel config from /boot/config-2.6.32-431.el6.x86_64 ...</div><div class="line"></div><div class="line">Generally Necessary:</div><div class="line">-<span class="ruby"> cgroup <span class="symbol">hierarchy:</span> properly mounted [<span class="regexp">/cgroup]</span></span></div><div class="line">-<span class="ruby"><span class="regexp"> CONFIG_NAMESPACES: enabled</span></span></div><div class="line">-<span class="ruby"><span class="regexp"> CONFIG_NET_NS: enabled</span></span></div><div class="line">-<span class="ruby"><span class="regexp"> CONFIG_PID_NS: enabled</span></span></div><div class="line">-<span class="ruby"><span class="regexp"> CONFIG_IPC_NS: enabled</span></span></div><div class="line">-<span class="ruby"><span class="regexp"> CONFIG_UTS_NS: enabled</span></span></div><div class="line">-<span class="ruby"><span class="regexp"> CONFIG_DEVPTS_MULTIPLE_INSTANCES: enabled</span></span></div><div class="line">-<span class="ruby"><span class="regexp"> CONFIG_CGROUPS: enabled</span></span></div><div class="line">-<span class="ruby"><span class="regexp"> CONFIG_CGROUP_CPUACCT: enabled</span></span></div><div class="line">-<span class="ruby"><span class="regexp"> CONFIG_CGROUP_DEVICE: enabled</span></span></div><div class="line">-<span class="ruby"><span class="regexp"> CONFIG_CGROUP_FREEZER: enabled</span></span></div><div class="line">-<span class="ruby"><span class="regexp"> CONFIG_CGROUP_SCHED: enabled</span></span></div><div class="line">-<span class="ruby"><span class="regexp"> CONFIG_MACVLAN: enabled</span></span></div><div class="line">-<span class="ruby"><span class="regexp"> CONFIG_VETH: enabled</span></span></div><div class="line">-<span class="ruby"><span class="regexp"> CONFIG_BRIDGE: enabled</span></span></div><div class="line">-<span class="ruby"><span class="regexp"> CONFIG_NF_NAT_IPV4: missing</span></span></div><div class="line">-<span class="ruby"><span class="regexp"> CONFIG_IP_NF_TARGET_MASQUERADE: enabled</span></span></div><div class="line">-<span class="ruby"><span class="regexp"> CONFIG_NETFILTER_XT_MATCH_ADDRTYPE: missing</span></span></div><div class="line">-<span class="ruby"><span class="regexp"> CONFIG_NETFILTER_XT_MATCH_CONNTRACK: enabled</span></span></div><div class="line">-<span class="ruby"><span class="regexp"> CONFIG_NF_NAT: enabled</span></span></div><div class="line">-<span class="ruby"><span class="regexp"> CONFIG_NF_NAT_NEEDED: enabled</span></span></div><div class="line"></div><div class="line">Optional Features:</div><div class="line">-<span class="ruby"><span class="regexp"> CONFIG_MEMCG_SWAP: missing</span></span></div><div class="line">-<span class="ruby"><span class="regexp"> CONFIG_RESOURCE_COUNTERS: enabled</span></span></div><div class="line">-<span class="ruby"><span class="regexp"> CONFIG_CGROUP_PERF: enabled</span></span></div><div class="line">-<span class="ruby"><span class="regexp"> Storage Drivers:</span></span></div><div class="line">  -<span class="ruby"><span class="regexp"> "aufs":</span></span></div><div class="line">    -<span class="ruby"><span class="regexp"> CONFIG_AUFS_FS: missing</span></span></div><div class="line">    -<span class="ruby"><span class="regexp"> CONFIG_EXT4_FS_POSIX_ACL: enabled</span></span></div><div class="line">    -<span class="ruby"><span class="regexp"> CONFIG_EXT4_FS_SECURITY: enabled</span></span></div><div class="line">  -<span class="ruby"><span class="regexp"> "btrfs":</span></span></div><div class="line">    -<span class="ruby"><span class="regexp"> CONFIG_BTRFS_FS: enabled</span></span></div><div class="line">  -<span class="ruby"><span class="regexp"> "devicemapper":</span></span></div><div class="line">    -<span class="ruby"><span class="regexp"> CONFIG_BLK_DEV_DM: enabled</span></span></div><div class="line">    -<span class="ruby"><span class="regexp"> CONFIG_DM_THIN_PROVISIONING: enabled</span></span></div><div class="line">    -<span class="ruby"><span class="regexp"> CONFIG_EXT4_FS: enabled</span></span></div><div class="line">    -<span class="ruby"><span class="regexp"> CONFIG_EXT4_FS_POSIX_ACL: enabled</span></span></div><div class="line">    -<span class="ruby"><span class="regexp"> CONFIG_EXT4_FS_SECURITY: enabled</span></span></div></pre></td></tr></table></figure></p>
<p>假如你是自己编译内核，请特别留意几个绝对不能缺少的：DM_THIN_PROVISIONING、IP_NF_TARGET_MASQUERADE、NF_NAT。（AUFS_FS没有对应选项，还不清楚怎么回事，但不是必须）</p>
<p>###4. 安装 docker-io###<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># yum install docker-io</div><div class="line">Dependencies Resolved</div><div class="line"></div><div class="line">===========================================================================================</div><div class="line"> Package                        Arch               Version          Repository     Size</div><div class="line">===========================================================================================</div><div class="line">Installing:</div><div class="line"><span class="code"> docker-io                      x86_64         1.1.2-1.el6          epel          4.5 M</span></div><div class="line">Installing for dependencies:</div><div class="line"><span class="code"> lua-alt-getopt                 noarch         0.7.0-1.el6          epel          6.9 k</span></div><div class="line"><span class="code"> lua-filesystem                 x86_64         1.4.2-1.el6          epel           24 k</span></div><div class="line"><span class="code"> lua-lxc                        x86_64         1.0.6-1.el6          epel           15 k</span></div><div class="line"><span class="code"> lxc                            x86_64         1.0.6-1.el6          epel          120 k</span></div><div class="line"><span class="code"> lxc-libs                       x86_64         1.0.6-1.el6          epel          248 k</span></div><div class="line"></div><div class="line"><span class="section">Transaction Summary</span></div><div class="line">===========================================================================================</div><div class="line">Install       6 Package(s)</div></pre></td></tr></table></figure></p>
<p>许多文档介绍到这里，下一步为挂载/cgroup文件系统，我的docker版本为1.1.2，没有修改/etc/fstab的步骤。</p>
<p>###5. 启动试运行###<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># service docker start</span></div><div class="line">//或</div><div class="line"><span class="comment"># docker -d</span></div></pre></td></tr></table></figure></p>
<p>##6. 异常##<br>在我的一次安装过程中，很不幸遇到下面的问题：<br><code>docker -d</code>启动，或<code>tail -f /var/log/docker</code>查看日志<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[<span class="name">f32e7d9f</span>] +job initserver()</div><div class="line">[<span class="name">f32e7d9f.initserver</span>()] Creating server</div><div class="line">[<span class="name">f32e7d9f</span>] +job serveapi(<span class="name">unix:///var/run/docker.sock</span>)</div><div class="line"><span class="number">2014/10</span>/22 <span class="number">13</span>:02:45 Listening for HTTP on unix (<span class="name">/var/run/docker.sock</span>)</div><div class="line">Error running DeviceCreate (<span class="name">createPool</span>) dm_task_run failed</div><div class="line">[<span class="name">f32e7d9f</span>] -job initserver() = ERR (<span class="name">1</span>)</div><div class="line"><span class="number">2014/10</span>/22 <span class="number">13</span>:02:45 Error running DeviceCreate (<span class="name">createPool</span>) dm_task_run failed</div><div class="line">\nWed Oct <span class="number">22</span> <span class="number">14</span>:35:54 CST <span class="number">2014</span>\n</div></pre></td></tr></table></figure></p>
<p>再或者是<code>service docker restart</code><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Stopping <span class="string">docker:</span>                                             [  OK  ]</div><div class="line">Starting cgconfig <span class="string">service:</span> <span class="string">Error:</span> cannot mount cpuset to <span class="regexp">/cgroup/</span><span class="string">cpuset:</span> Device or resource busy</div><div class="line"><span class="regexp">/sbin/</span>cgconfigparser; error loading <span class="regexp">/etc/</span>cgconfig.<span class="string">conf:</span> Cgroup mounting failed</div><div class="line">Failed to parse <span class="regexp">/etc/</span>cgconfig.conf                           [FAILED]</div><div class="line"></div><div class="line">Starting <span class="string">docker:</span>                                              [  OK  ]</div></pre></td></tr></table></figure></p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Unable to enable network bridge NAT: iptables failed: iptables -I POSTROUTING -t nat -s <span class="number">172.17</span><span class="meta">.42</span><span class="meta">.1</span>/<span class="number">16</span> ! -d <span class="number">172.17</span><span class="meta">.42</span><span class="meta">.1</span>/<span class="number">16</span> -j MASQUERADE: iptables v1<span class="meta">.4</span><span class="meta">.7</span>: can<span class="string">'t initialize iptables table `nat'</span>: Table does <span class="keyword">not</span> exist (<span class="built_in">do</span> you need to insmod?)</div><div class="line">Perhaps iptables <span class="keyword">or</span> your kernel needs to be upgraded.</div></pre></td></tr></table></figure>
<p>上面的三个异常都是由于内核模块的缺失导致的，这也是自己编译内核来升级带来的风险，于是就有了<a href="https://github.com/sciurus/docker-rhel-rpm/tree/master/kernel-ml-aufs" target="_blank" rel="external">sciurus</a>的kernel-ml-aufs的rpm包（见参考的第一个链接）。</p>
<p>##7. 参考##</p>
<ul>
<li><a href="http://nareshv.blogspot.hk/2013/08/installing-dockerio-on-centos-64-64-bit.html" target="_blank" rel="external">Installing docker.io on centos 6.4 (64-bit)</a>，<a href="http://www.oschina.net/translate/nstalling-dockerio-on-centos-64-64-bit" target="_blank" rel="external">在 CentOS 6.4(64位) 安装 docker.io</a> [中文]</li>
<li><a href="http://cn.soulmachine.me/blog/20131025/" target="_blank" rel="external">在 CentOS 6.4 上安装 docker</a></li>
<li><a href="https://docs.docker.com/installation/centos/" target="_blank" rel="external">Official Installing Docker Docs CentOS-6</a></li>
<li>Troubleshooting:<br><a href="http://stackoverflow.com/questions/25183063/docker-on-rhel-6-cgroup-mounting-failing" target="_blank" rel="external">Error: cannot mount cpuset to /cgroup/cpuset: Device or resource busy</a><br><a href="https://github.com/docker/docker/issues/6325" target="_blank" rel="external">Error running DeviceCreate (createPool) dm_task_run failed</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[markdown语法备忘笔记]]></title>
      <url>http://seanlook.com/2014/10/25/markdown-tips/</url>
      <content type="html"><![CDATA[<p>##1. 什么是markdown##</p>
<p>##2. 我选择的markdown编辑器##<br>首先选择适合自己的markdown编辑器需要考虑几个方面：<br>平台：Mac OS X, Windows, Online, 插件形式<br>预览：实时预览、html预览<br>语法：选定某一款后，适应自己的习惯，不必太复杂<br>其它：如主题，快捷键，同步等</p>
<p>###首先来说一下以下几款为什么我没选用：（纯属个人喜好）###</p>
<ul>
<li>Sublime Text的插件markdown preview，编辑和预览是分离的，在浏览器里预览。</li>
<li>CuteMarkEd，独立编辑器，支持多平台，不知道为什么我的编辑和预览窗口字体都那么丑。</li>
<li>MarkdownPad，独立编辑器，windows下口碑比较好的，但我把曾经写好的md文章放进去，格式不太对，应该是语法上略有差别，其它都还好。它多标签页的形式可以加分。<br>社区活跃，新功能反馈及时，例如 toc replace</li>
<li>vim或emacs的markdown插件，windows平台下我还是正常一点吧。<br>###习惯采用的编辑器###</li>
<li>Haroopad，不得不说韩国人开发的软件体验上超赞，与segmentfault的文章写作一样，左右实时预览，多种主题可选。如果能实现多标签页就更好了。各平台上都可以使用，还有vim编辑模式。<br><img src="http://git.oschina.net/uploads/images/2016/0304/111256_dcf5a8a6_416534.png" alt="markdown_haroopad"></li>
<li>马克飞象，google浏览器插件，专为印象笔记开发的浏览器markdown扩展，用起来特别舒服，自动保存在本地缓存，没有导出html格式或浏览器在线预览的功能，但比MaDe好用多了。（现在有离线客户端版）<br><img src="http://git.oschina.net/uploads/images/2016/0304/111321_cd78274a_416534.png" alt="markdown_makefeixiang"></li>
<li>在线markdown编辑器（首先你得有网络）<br>[github]：不用多说<br><a href="http://mahua.jser.me/" target="_blank" rel="external">MaHua</a>：与Mac OS X上相传甚广的Mou风格类似<br><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">cmd markdown</a>：大牛开发的<br>##3. 常用markdown语法##<h3 id="标题-粗斜体"><a href="#标题-粗斜体" class="headerlink" title="标题/粗斜体"></a>标题/粗斜体</h3></li>
</ul>
<a id="more"></a>
<p>文章内容较多时，可以用标题分段：</p>
<p># 一级标题 #<br>## 大标题 ##<br>### 小标题 ###<br>sf只有三级标题</p>
<h3 id="粗体-斜体"><a href="#粗体-斜体" class="headerlink" title="粗体/斜体"></a>粗体/斜体</h3><p>*斜体文本*　　　　　或　　_斜体文本_　　　　显示成　 <em>斜体文本</em><br>*<em>粗体文本\</em>*　　 　　或　　__粗体文本__　　　显示成　　 <strong>粗体文本</strong><br>***粗斜体文本***　 　 或　　___粗斜体文本___　显示成　<strong><em>粗斜体文本</em></strong></p>
<h3 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h3><p>行内代码：`code here`　显示成　<code>code here</code><br>代码段落：<br>（可为某种语言指定高亮效果如 ` ` `python，支持bash、javascript、java、sql、xml、html等，有的markdown不支持指定语言）<br>` ` `<br>$(document).ready(function () {<br>    alert(‘hello world’);<br>});<br>` ` `<br>显示成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">'hello world'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>我觉得sf的markdown代码段前后间距太大了有木有。</p>
<h3 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a>链接和图片</h3><p><strong>文字链接</strong><br><code>[seanlook](http://segmentfault.com/blog/seanlook/1190000000738685)</code>　显示成　<a href="http://segmentfault.com/blog/seanlook/1190000000738685" target="_blank" rel="external">seanlook</a><br>如果一个网址要被多个地方引用，可用变量替代<br>这个链接用 1 作为网址变量 [Google][1]<br>这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo]<br>然后在文档的结尾为变量赋值（网址）<br>  <code>[1]: http://www.google.com/</code><br>  <code>[yahoo]: http://www.yahoo.com/</code></p>
<p>最终显示成<br><a href="http://git.oschina.net/uploads/images/2016/0304/111256_dcf5a8a6_416534.png" target="_blank" rel="external">Google</a><br><a href="http://www.yahoo.com/" target="_blank" rel="external">Yahoo!</a></p>
<p>页内跳转实现<br><strong>图片链接</strong><br>markdown不能设置图片的尺寸，图片居中<br>多个空格会合并成一个，多个（广义的，包括空格和tab）空行显示成一个空行，以空行区分段落</p>
<h3 id="多个空格显示"><a href="#多个空格显示" class="headerlink" title="多个空格显示"></a>多个空格显示</h3><p>两个全角空格　　或 &nbsp; &nbsp; &nbsp; &nbsp;八个&lt;space&gt;&amp;nbsp;　　或&emsp;&emsp;&amp;emsp;&amp;emsp;&amp;emsp;</p>
<p><pre><code>加上&lt;pre&gt;&lt;code&gt;   文字1    任意空格  &lt;pre&gt;&lt;code&gt;</code></pre></p>
<pre><code>行首四个空格    自动转换成代码段  独立段落  任意空格
</code></pre><p>##4. 参考##</p>
<ul>
<li><a href="http://appinn.me/d/83" target="_blank" rel="external">Markdown 系列应用收集</a></li>
</ul>
<hr>
<p>本文链接地址： <a href="http://seanlook.com/2014/10/25/markdown-tips/">http://seanlook.com/2014/10/25/markdown-tips/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS 6.x 内核升级（2.6.32 -> 3.10.58）过程记录]]></title>
      <url>http://seanlook.com/2014/10/24/upgrade-centos6_kernel-to-3.10.x/</url>
      <content type="html"><![CDATA[<p>本人升级的目的是想在CentOS6.2上运行docker，官方建议内核版本在3.8.0及以上，于是就自己从Linux内核官方网站上下载源码，自己编译。</p>
<p>##1. 准备工作##</p>
<p>###1.1 确认内核及版本信息###<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@hostname ~]<span class="comment"># uname -r</span></div><div class="line"><span class="number">2.6</span><span class="number">.32</span><span class="number">-220.</span>el6.x86_64</div><div class="line">[root@hostname ~]<span class="comment"># cat /etc/centos-release </span></div><div class="line">CentOS release <span class="number">6.2</span> (Final)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>###1.2 安装软件###</p>
<p>编译安装新内核，依赖于开发环境和开发库<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># yum grouplist  //查看已经安装的和未安装的软件包组，来判断我们是否安装了相应的开发环境和开发库；</span></div><div class="line"><span class="comment"># yum groupinstall "Development Tools"  //一般是安装这两个软件包组，这样做会确定你拥有编译时所需的一切工具</span></div><div class="line"><span class="comment"># yum install ncurses-devel //你必须这样才能让 make *config 这个指令正确地执行</span></div><div class="line"><span class="comment"># yum install qt-devel //如果你没有 X 环境，这一条可以不用</span></div><div class="line"><span class="comment"># yum install hmaccalc zlib-devel binutils-devel elfutils-libelf-devel //创建 CentOS-6 内核时需要它们</span></div></pre></td></tr></table></figure></p>
<p>如果当初安装系统是选择了Software workstation，上面的安装包几乎都已包含。</p>
<p>##2. 编译内核##</p>
<p>###2.1 获取并解压内核源码，配置编译项###<br>去 <a href="http://www.kernel.org" target="_blank" rel="external">http://www.kernel.org</a> 首页，可以看到有stable, longterm等版本，longterm是比stable更稳定的版本，会长时间更新，因此我选择 3.10.58。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@sean ~]<span class="comment"># tar -xf linux-3.10.58.tar.xz -C /usr/src/</span></div><div class="line">[root@sean ~]<span class="comment"># cd /usr/src/linux-3.10.58/</span></div><div class="line">[root@sean linux<span class="number">-3.10</span><span class="number">.58</span>]<span class="comment"># cp /boot/config-2.6.32-220.el6.x86_64 .config</span></div></pre></td></tr></table></figure></p>
<p>我们在系统原有的内核配置文件的基础上建立新的编译选项，所以复制一份到当前目录下，命名为.config。接下来继续配置：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">[root@sean linux-3.10.58]# sh -c 'yes "" | make oldconfig'</div><div class="line">  HOSTCC  scripts/basic/fixdep</div><div class="line">  HOSTCC  scripts/kconfig/conf.o</div><div class="line">  SHIPPED scripts/kconfig/zconf.tab.c</div><div class="line">  SHIPPED scripts/kconfig/zconf.lex.c</div><div class="line">  SHIPPED scripts/kconfig/zconf.hash.c</div><div class="line">  HOSTCC  scripts/kconfig/zconf.tab.o</div><div class="line">  HOSTLD  scripts/kconfig/conf</div><div class="line">scripts/kconfig/conf --oldconfig Kconfig</div><div class="line">.config:555:warning: symbol value 'm' invalid for PCCARD_NONSTATIC</div><div class="line">.config:2567:warning: symbol value 'm' invalid for MFD_WM8400</div><div class="line">.config:2568:warning: symbol value 'm' invalid for MFD_WM831X</div><div class="line">.config:2569:warning: symbol value 'm' invalid for MFD_WM8350</div><div class="line">.config:2582:warning: symbol value 'm' invalid for MFD_WM8350_I2C</div><div class="line">.config:2584:warning: symbol value 'm' invalid for AB3100_CORE</div><div class="line">.config:3502:warning: symbol value 'm' invalid for MMC_RICOH_MMC</div><div class="line">*</div><div class="line">* Restart config...</div><div class="line">*</div><div class="line">*</div><div class="line">* General setup</div><div class="line">*</div><div class="line"></div><div class="line">... ...</div><div class="line">XZ decompressor tester (XZ_DEC_TEST) [N/m/y/?] (NEW) </div><div class="line">Averaging functions (AVERAGE) [Y/?] (NEW) y</div><div class="line">CORDIC algorithm (CORDIC) [N/m/y/?] (NEW) </div><div class="line">JEDEC DDR data (DDR) [N/y/?] (NEW) </div><div class="line">#</div><div class="line"># configuration written to .config</div><div class="line">#</div></pre></td></tr></table></figure></p>
<p>make oldconfig会读取当前目录下的.config文件，在.config文件里没有找到的选项则提示用户填写。有的文档里介绍使用make memuconfig，它便是根据需要定制模块，类似界面如下：（我们不需要）<br><img src="http://sean-images.qiniudn.com/config-kernel-module.png" alt="make menuconfig"><br>make oldconfig会在生成新的.config之前备份为.config.old，并生成新的.config文件</p>
<p>###2.2 开始编译###<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@sean linux<span class="number">-3.10</span><span class="number">.58</span>]<span class="comment"># make -j4 bzImage  //生成内核文件</span></div><div class="line">[root@sean linux<span class="number">-3.10</span><span class="number">.58</span>]<span class="comment"># make -j4 modules  //编译模块</span></div><div class="line">[root@sean linux<span class="number">-3.10</span><span class="number">.58</span>]<span class="comment"># make -j4 modules_install  //编译安装模块</span></div></pre></td></tr></table></figure></p>
<p>-j后面的数字是线程数，用于加快编译速度，一般的经验是，逻辑CPU，就填写那个数字，例如有8核，则为-j8。（modules部分耗时30多分钟）</p>
<p>###2.3 安装###<br>[root@sean linux-3.10.58]# make install<br>实际运行到这一步时，出现<figure class="highlight plain"><figcaption><span>modinfo: could not find module vmware_balloon```，但是不影响内核安装，是由于vsphere需要的模块没有编译，要避免这个问题，需要在make之前时修改.config文件，加入</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">HYPERVISOR_GUEST=y</div><div class="line">CONFIG_VMWARE_BALLOON=m </div><div class="line">（这一部分比较容易出问题，参考下文异常部分）</div><div class="line">###2.4 修改grub引导，重启###</div><div class="line">安装完成后，需要修改Grub引导顺序，让新安装的内核作为默认内核。</div><div class="line">编辑 grub.conf文件，</div><div class="line">```python</div><div class="line">vi /etc/grub.conf</div><div class="line">#boot=/dev/sda</div><div class="line">default=0</div><div class="line">timeout=5</div><div class="line">splashimage=(hd0,0)/grub/splash.xpm.gz</div><div class="line">hiddenmenu</div><div class="line">title CentOS (3.10.58)</div><div class="line">    root (hd0,0)</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>数一下刚刚新安装的内核在哪个位置，从0开始，然后设置default为那个数字，一般新安装的内核在第一个位置，所以设置default=0。<br>重启<code>reboot</code>：<br><img src="http://sean-images.qiniudn.com/boot-with-new-kernel.png" alt="boot-with-new-kernel"></p>
<p>###2.5 确认当内核版本###<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@sean ~]<span class="comment"># uname -r</span></div><div class="line"><span class="number">3.10</span><span class="number">.58</span></div></pre></td></tr></table></figure></p>
<p>升级内核成功!</p>
<p>##3. 异常##</p>
<p>###3.1 编译失败（如缺少依赖包）###<br>可以先清除，再重新编译：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># make mrproper         #完成或者安装过程出错，可以清理上次编译的现场</span></div><div class="line"><span class="comment"># make clean</span></div></pre></td></tr></table></figure></p>
<p>###3.2 在vmware虚拟机上编译，出现类似下面的错误###<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@sean linux<span class="number">-3.10</span><span class="number">.58</span>]<span class="comment"># make install </span></div><div class="line">sh /usr/src/linux<span class="number">-3.10</span><span class="number">.58</span>/arch/x86/boot/install.sh <span class="number">3.10</span><span class="number">.58</span> arch/x86/boot/bzImage \</div><div class="line">44System.map <span class="string">"/boot"</span></div><div class="line">ERROR: modinfo: could <span class="keyword">not</span> find module vmware_balloon</div></pre></td></tr></table></figure></p>
<p>可以忽略，如果你有强迫症的话，尝试以下办法：<br>要在vmware上需要安装VMWARE_BALLOON，可直接修改.config文件，但如果vi直接加入<code>CONFIG_VMWARE_BALLOON=m</code>依然是没有效果的，因为它依赖于<code>HYPERVISOR_GUEST=y</code>。如果你不知道这层依赖关系，通过<code>make menuconfig</code>后，Device Drivers -&gt; MISC devices 下是找不到VMware Balloon Driver的。（手动vi .config修改HYPERVISOR_GUEST后，便可以找到这一项），另外，无论是通过make menuconfig或直接vi .config，最后都要运行<code>sh -c &#39;yes &quot;&quot; | make oldconfig&#39;</code>一次得到最终的编译配置选项。<br>然后，考虑到vmware_balloon可能在这个版本里已更名为vmw_balloon，通过下面的方法保险起见：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># cd /lib/modules/3.10.58/kernel/drivers/misc/</span></div><div class="line"><span class="meta"># ln -s vmw_balloon.ko vmware_balloon.ko #建立软连接</span></div></pre></td></tr></table></figure></p>
<p>其实，针对安装docker的内核编译环境，最明智的选择是使用<a href="https://raw.githubusercontent.com/sciurus/docker-rhel-rpm/master/kernel-ml-aufs/config-3.10.11-x86_64" target="_blank" rel="external">sciurus</a>帮我们配置好的.config文件。<br>也建议在<code>make bzImage</code>之前，运行脚本<a href="https://raw.githubusercontent.com/dotcloud/docker/master/contrib/check-config.sh" target="_blank" rel="external">check-config.sh</a>检查当前内核运行docker所缺失的模块。<br>当提示缺少其他module时如NF_NAT_IPV4时，也可以通过上面的方法解决，然后重新编译。</p>
<p>##4. TO-DO##</p>
<ul>
<li>如何清除原内核</li>
<li>现有软件是否需要yum update升级</li>
</ul>
<p>##5. 参考资料##</p>
<ul>
<li><a href="http://cn.soulmachine.me/blog/20140123/" target="_blank" rel="external">CentOS 6.5 升级内核到 3.10.28</a></li>
<li><a href="http://smilejay.com/2011/05/linux-kernel-configuration/" target="_blank" rel="external">Linux Kernel内核配置方式详解</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux进阶培训-tplink]]></title>
      <url>http://seanlook.com/2014/10/06/linux-level2/</url>
      <content type="html"><![CDATA[<p>本文没啥实际内容，是给新人做linux培训的第二课进阶篇，主要着眼于体系，把一些工具混个眼熟。</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/linux-level2-01.PNG" alt=""><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/linux-level2-02.PNG" alt=""><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/linux-level2-03.PNG" alt=""><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/linux-level2-04.PNG" alt=""><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/linux-level2-05.PNG" alt=""><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/linux-level2-06.PNG" alt=""><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/linux-level2-07.PNG" alt=""><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/linux-level2-08.PNG" alt=""><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/linux-level2-09.PNG" alt=""><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/linux-level2-10.PNG" alt=""><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/linux-level2-11.PNG" alt=""><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/linux-level2-12.PNG" alt=""><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/linux-level2-13.PNG" alt=""><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/linux-level2-14.PNG" alt=""><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/linux-level2-15.PNG" alt=""><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/linux-level2-16.PNG" alt=""><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/linux-level2-17.PNG" alt=""></p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li>Linux磁盘管理(进阶)</li>
<li>Linux内存管理</li>
<li>Linux进程管理(进阶)</li>
<li>Linux网络管理(进阶)</li>
<li>Linux系统状态监控与调优</li>
<li>常见服务</li>
<li>Linux安全策略</li>
<li>其他</li>
</ul>
<h2 id="Linux磁盘管理（进阶）"><a href="#Linux磁盘管理（进阶）" class="headerlink" title="Linux磁盘管理（进阶）"></a>Linux磁盘管理（进阶）</h2><ul>
<li>ext4文件系统格式<ul>
<li>Inode、block、superblock、MBR</li>
<li>VFS</li>
</ul>
</li>
<li>LVM<ul>
<li>pv、lv、vg</li>
<li>lvdisplay、lvextend、vgdisplay、pvcreate…</li>
</ul>
</li>
<li>RAID<ul>
<li>raid0、raid1、raid5、raid10</li>
<li>r/w速度、磁盘利用率、安全性的权衡</li>
</ul>
</li>
<li>磁盘IO性能<ul>
<li>dd、iostat、iotop</li>
<li>I/O等待</li>
</ul>
</li>
</ul>
<h2 id="Linux内存管里（基础）"><a href="#Linux内存管里（基础）" class="headerlink" title="Linux内存管里（基础）"></a>Linux内存管里（基础）</h2><ul>
<li>物理内存与虚拟内存<ul>
<li>Swap space，分页存取</li>
</ul>
</li>
<li>buffer与cache区分</li>
<li>内存监控命令<ul>
<li>free、vmstat</li>
</ul>
</li>
<li>/proc文件系统</li>
</ul>
<a id="more"></a>
<h2 id="Linux进程管理（进阶）"><a href="#Linux进程管理（进阶）" class="headerlink" title="Linux进程管理（进阶）"></a>Linux进程管理（进阶）</h2><ul>
<li>进程与线程<ul>
<li>进程优先级</li>
</ul>
</li>
<li>进程监控命令<ul>
<li>pidstat、lsof</li>
<li>strace（系统调用跟踪）</li>
</ul>
</li>
<li>后台进程<ul>
<li>Ctrl+z、jobs、bg、fg、&amp;、nohup</li>
<li>screen</li>
</ul>
</li>
</ul>
<h2 id="Linux的网络管理"><a href="#Linux的网络管理" class="headerlink" title="Linux的网络管理"></a>Linux的网络管理</h2><ul>
<li><p>一些概念</p>
<ul>
<li>防火墙</li>
<li>路由/网关</li>
<li>子网掩码</li>
<li>网络接口（参数）</li>
<li>MAC</li>
</ul>
</li>
<li><p>TCP/IP协议</p>
</li>
<li>应用层协议</li>
</ul>
<p>Linux网络管理<br>iptables</p>
<h2 id="Linux网络管理"><a href="#Linux网络管理" class="headerlink" title="Linux网络管理"></a>Linux网络管理</h2><ul>
<li>主机网络流量监控<ul>
<li>iftop、iptraf、sar</li>
</ul>
</li>
<li>tcpdump抓包<ul>
<li>wireshark数据包分析工具</li>
</ul>
</li>
</ul>
<p>##Linux网络管理</p>
<ul>
<li>iproute2<ul>
<li>ip、ss</li>
</ul>
</li>
</ul>
<h2 id="Linux系统状态监控与调优"><a href="#Linux系统状态监控与调优" class="headerlink" title="Linux系统状态监控与调优"></a>Linux系统状态监控与调优</h2><ul>
<li>一些工具<ul>
<li>sar、sysstat</li>
<li>perf、logwatch</li>
</ul>
</li>
<li>一些配置文件<ul>
<li>sysctl.conf</li>
<li>limits.conf</li>
</ul>
</li>
</ul>
<h2 id="Linux安全策略"><a href="#Linux安全策略" class="headerlink" title="Linux安全策略"></a>Linux安全策略</h2><ul>
<li>禁止root直接登录</li>
<li>锁定不使用的账号</li>
<li>关闭ipv6</li>
<li>启用防火墙</li>
<li>定期检查日志</li>
<li>…</li>
</ul>
<h2 id="Linux常见服务"><a href="#Linux常见服务" class="headerlink" title="Linux常见服务"></a>Linux常见服务</h2><ul>
<li>tcp_wrappers</li>
<li>SSH</li>
<li>postfix</li>
<li>FTP</li>
<li>NFS/Samba</li>
<li>DNS</li>
<li>Apache/nginx</li>
<li>…</li>
</ul>
<h2 id="Linux其他"><a href="#Linux其他" class="headerlink" title="Linux其他"></a>Linux其他</h2><ul>
<li>Linux开机过程分析</li>
<li>pam模块解读lsmod</li>
<li>编译make、ldd、ldconfig、gcc、gdb</li>
<li>ACL</li>
<li>Linux集群</li>
<li>内核模块</li>
<li>linux编程</li>
<li>…</li>
</ul>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2014/10/06/linux-level2/">http://seanlook.com/2014/10/06/linux-level2/</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS 6 服务器安全配置指南（通用）]]></title>
      <url>http://seanlook.com/2014/09/07/linux-security-general-settings/</url>
      <content type="html"><![CDATA[<p>Linux是一个开放式系统，可以在网络上找到许多现成的程序和工具，这既方便了用户，也方便了黑客，因为他们也能很容易地找到程序和工具来潜入Linux系统，或者盗取Linux系统上的重要信息。不过，只要我们仔细地设定Linux的各种系统功能，并且加上必要的安全措施，就能让黑客们无机可乘。一般来说，对Linux系统的安全设定包括取消不必要的服务、限制远程存取、隐藏重要资料、修补安全漏洞、采用安全工具以及经常性的安全检查等。</p>
<p>本文是可参考的实际操作，不涉及如IP欺骗这样的原理，而且安全问题也不算几行命令就能预防的，这里只是linux系统上基本的安全加固方法，后续有新的内容再添加进来。</p>
<p>注：所有文件在修改之前都要进行备份如 <code>cp /etc/passwd{,.dist}</code></p>
<h2 id="1-禁用不使用的用户"><a href="#1-禁用不使用的用户" class="headerlink" title="1. 禁用不使用的用户"></a>1. 禁用不使用的用户</h2><p>注意：不建议直接删除，当你需要某个用户时，自己重新添加会很麻烦。也可以<code>usermod -L</code>或<code>passwd -l user</code>锁定。</p>
<p><code>cp /etc/passwd{,.bak}</code>  修改之前先备份<br><code>vi /etc/passwd</code> 编辑用户，在前面加上#注释掉此行</p>
<a id="more"></a>
<p>注释的用户名：</p>
<pre><code># cat /etc/passwd|grep ^#
#adm:x:3:4:adm:/var/adm:/sbin/nologin
#lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
#shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
#halt:x:7:0:halt:/sbin:/sbin/halt
#uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin
#operator:x:11:0:operator:/root:/sbin/nologin
#games:x:12:100:games:/usr/games:/sbin/nologin
#gopher:x:13:30:gopher:/var/gopher:/sbin/nologin
#ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin
#nfsnobody:x:65534:65534:Anonymous NFS User:/var/lib/nfs:/sbin/nologin
#postfix:x:89:89::/var/spool/postfix:/sbin/nologin
</code></pre><p>注释的组：</p>
<pre><code># cat /etc/group|grep ^#
#adm:x:4:adm,daemon
#lp:x:7:daemon
#uucp:x:14:
#games:x:20:
#gopher:x:30:
#video:x:39:
#dip:x:40:
#ftp:x:50:
#audio:x:63:
#floppy:x:19:
#postfix:x:89:
</code></pre><h2 id="2-关闭不使用的服务"><a href="#2-关闭不使用的服务" class="headerlink" title="2. 关闭不使用的服务"></a>2. 关闭不使用的服务</h2><pre><code># chkconfig --list |grep &apos;3:on&apos;
</code></pre><p>邮件服务，使用公司邮件服务器：</p>
<pre><code>service postfix stop
chkconfig postfix --level 2345 off
</code></pre><p>通用unix打印服务，对服务器无用：</p>
<pre><code>service cups stop
chkconfig cups --level 2345 off
</code></pre><p>调节cpu速度用来省电，常用在Laptop上：</p>
<pre><code>service cpuspeed stop
chkconfig cpuspeed --level 2345 off
</code></pre><p>蓝牙无线通讯，对服务器无用：</p>
<pre><code>service bluetooth stop
chkconfig bluetooth --level 2345 off
</code></pre><p>系统安装后初始设定，第一次启动系统后就没用了：</p>
<pre><code>service firstboot stop
chkconfig firstboot --level 2345 off
</code></pre><p>关闭nfs服务及客户端：</p>
<pre><code>service netfs stop
chkconfig netfs --level 2345 off
service nfslock stop
chkconfig nfslock --level 2345 off
</code></pre><p>如果要恢复某一个服务，可以执行下面操作：<br><code>service acpid start &amp;&amp; chkconfig acpid on</code><br>也可以使用<code>setup</code>工具来设置</p>
<h2 id="3-禁用IPV6"><a href="#3-禁用IPV6" class="headerlink" title="3. 禁用IPV6"></a>3. 禁用IPV6</h2><p>IPv6是为了解决IPv4地址耗尽的问题，但我们的服务器一般用不到它，反而禁用IPv6不仅仅会加快网络，还会有助于减少管理开销和提高安全级别。以下几步在CentOS上完全禁用ipv6。</p>
<p>禁止加载IPv6模块：<br>让系统不加载ipv6相关模块，这需要修改modprobe相关设定文件，为了管理方便，我们新建设定文件<code>/etc/modprobe.d/ipv6off.conf</code>，内容如下</p>
<pre><code>alias net-pf-10 off
options ipv6 disable=1
</code></pre><p>禁用基于IPv6网络，使之不会被触发启动：</p>
<pre><code># vi /etc/sysconfig/network
NETWORKING_IPV6=no
</code></pre><p>禁用网卡IPv6设置，使之仅在IPv4模式下运行：</p>
<pre><code># vi /etc/sysconfig/network-scripts/ifcfg-eth0
IPV6INIT=no
IPV6_AUTOCONF=no
</code></pre><p>关闭ip6tables：</p>
<pre><code># chkconfig ip6tables off
</code></pre><p>重启系统，验证是否生效：</p>
<pre><code># lsmod | grep ipv6
# ifconfig | grep -i inet6
</code></pre><p>如果没有任何输出就说明IPv6模块已被禁用，否则被启用。</p>
<h2 id="4-iptables规则"><a href="#4-iptables规则" class="headerlink" title="4. iptables规则"></a>4. iptables规则</h2><p>启用linux防火墙来禁止非法程序访问。使用iptable的规则来过滤入站、出站和转发的包。我们可以针对来源和目的地址进行特定udp/tcp端口的准许和拒绝访问。</p>
<p>关于防火墙的设置规则请参考博客文章 <a href="http://seanlook.com/2014/02/26/iptables-example/">iptables设置实例</a>。</p>
<h2 id="5-SSH安全"><a href="#5-SSH安全" class="headerlink" title="5. SSH安全"></a>5. SSH安全</h2><p>如果有可能，第一件事就是修改ssh的默认端口22，改成如20002这样的较大端口会大幅提高安全系数，降低ssh破解登录的可能性。</p>
<p>创建具备辨识度的应用用户如crm以及系统管理用户sysmgr</p>
<pre><code># useradd crm -d /apps/crm
# passwd crm

# useradd sysmgr
# passwd sysmgr
</code></pre><h3 id="5-1-只允许wheel用户组的用户su切换"><a href="#5-1-只允许wheel用户组的用户su切换" class="headerlink" title="5.1 只允许wheel用户组的用户su切换"></a>5.1 只允许wheel用户组的用户su切换</h3><pre><code># usermod -G wheel sysmgr

# vi /etc/pam.d/su
# Uncomment the following line to require a user to be in the &quot;wheel&quot; group.
auth            required        pam_wheel.so use_uid
</code></pre><p>其他用户切换root，即使输对密码也会提示 su: incorrect password</p>
<h3 id="5-2-登录超时"><a href="#5-2-登录超时" class="headerlink" title="5.2 登录超时"></a>5.2 登录超时</h3><p>用户在线5分钟无操作则超时断开连接，在<code>/etc/profile</code>中添加：</p>
<pre><code>export TMOUT=300
readonly TMOUT
</code></pre><h3 id="5-3-禁止root直接远程登录"><a href="#5-3-禁止root直接远程登录" class="headerlink" title="5.3 禁止root直接远程登录"></a>5.3 禁止root直接远程登录</h3><pre><code># vi /etc/ssh/sshd_config
PermitRootLogin no
</code></pre><h3 id="5-4-限制登录失败次数并锁定"><a href="#5-4-限制登录失败次数并锁定" class="headerlink" title="5.4 限制登录失败次数并锁定"></a>5.4 限制登录失败次数并锁定</h3><p>在<code>/etc/pam.d/login</code>后添加</p>
<pre><code>auth required pam_tally2.so deny=6 unlock_time=180 even_deny_root root_unlock_time=180
</code></pre><p>登录失败5次锁定180秒，根据需要设置是否包括root。</p>
<h3 id="5-5-登录IP限制"><a href="#5-5-登录IP限制" class="headerlink" title="5.5 登录IP限制"></a>5.5 登录IP限制</h3><p>（由于要与某一固定IP或IP段绑定，暂未设置）<br>更严格的限制是在sshd_config中定死允许ssh的用户和来源ip：</p>
<pre><code>## allowed ssh users sysmgr
AllowUsers sysmgr@172.29.73.*
</code></pre><p>或者使用tcpwrapper:</p>
<pre><code>vi /etc/hosts.deny
sshd:all
vi /etc/hosts.allow
sshd:172.29.73.23
sshd:172.29.73.
</code></pre><h2 id="6-配置只能使用密钥文件登录"><a href="#6-配置只能使用密钥文件登录" class="headerlink" title="6. 配置只能使用密钥文件登录"></a>6. 配置只能使用密钥文件登录</h2><p>使用密钥文件代替普通的简单密码认证也会极大的提高安全性：</p>
<pre><code>[dir@username ~]$ ssh-keygen -t rsa -b 2048
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa):   //默认路径，回车
Enter passphrase (empty for no passphrase):     //输入你的密钥短语，登录时使用
Enter same passphrase again: 
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
3e:fd:fc:e5:d3:22:86:8e:2c:4b:a7:3d:92:18:9f:64 root@ibpak.tp-link.net
The key&apos;s randomart image is:
+--[ RSA 2048]----+
|                 |
…
|      o++o..oo..o|
+-----------------+
</code></pre><p>将公钥重命名为<code>authorized_key</code>：</p>
<pre><code>$ mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys
$ chmod 600 ~/.ssh/authorized_keys
</code></pre><p>下载私钥文件 id_rsa 到本地（为了更加容易识别，可重命名为<code>hostname_username_id_rsa</code>），保存到安全的地方。以后 username 用户登录这台主机就必须使用这个私钥，配合密码短语来登录（不再使用 username 用户自身的密码）</p>
<p>另外还要修改<code>/etc/ssh/sshd_config</code>文件<br>打开注释</p>
<pre><code>RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile      .ssh/authorized_keys
</code></pre><p>我们要求 username 用户（可以切换到其他用户，特别是root）必须使用ssh密钥文件登录，而其他普通用户可以直接密码登录。因此还需在sshd_config文件最后加入：</p>
<pre><code>Match User itsection
        PasswordAuthentication no
</code></pre><p>重启sshd服务</p>
<pre><code># service sshd restart
</code></pre><p>另外提醒一句，这对公钥和私钥一定要单独保存在另外的机器上，服务器上丢失公钥或连接端丢失私钥（或密钥短语），可能导致再也无法登陆服务器获得root权限！</p>
<h2 id="7-减少history命令记录"><a href="#7-减少history命令记录" class="headerlink" title="7. 减少history命令记录"></a>7. 减少history命令记录</h2><p>执行过的历史命令记录越多，从一定程度上讲会给维护带来简便，但同样会伴随安全问题</p>
<pre><code>vi /etc/profile
</code></pre><p>找到 <code>HISTSIZE=1000</code> 改为 <code>HISTSIZE=50</code>。</p>
<p>或每次退出时清理history，<code>history -c</code>  </p>
<h2 id="8-增强特殊文件权限"><a href="#8-增强特殊文件权限" class="headerlink" title="8. 增强特殊文件权限"></a>8. 增强特殊文件权限</h2><p>给下面的文件加上不可更改属性，从而防止非授权用户获得权限</p>
<pre><code>chattr +i /etc/passwd
chattr +i /etc/shadow
chattr +i /etc/group
chattr +i /etc/gshadow
chattr +i /etc/services #给系统服务端口列表文件加锁，防止未经许可的删除或添加服务
chattr +i /etc/pam.d/su
chattr +i /etc/ssh/sshd_config
</code></pre><p>显示文件的属性</p>
<pre><code>lsattr /etc/passwd /etc/shadow /etc/services /etc/ssh/sshd_config
</code></pre><p>注意：执行以上 chattr 权限修改之后，就无法添加删除用户了。</p>
<p>如果再要添加删除用户，需要先取消上面的设置，等用户添加删除完成之后，再执行上面的操作，例如取消只读权限<code>chattr -i /etc/passwd</code>。（记得重新设置只读）</p>
<h2 id="9-防止一般网络攻击"><a href="#9-防止一般网络攻击" class="headerlink" title="9. 防止一般网络攻击"></a>9. 防止一般网络攻击</h2><p>网络攻击不是几行设置就能避免的，以下都只是些简单的将可能性降到最低，增大攻击的难度但并不能完全阻止。</p>
<h3 id="9-1-禁ping"><a href="#9-1-禁ping" class="headerlink" title="9.1 禁ping"></a>9.1 禁ping</h3><p>阻止ping如果没人能ping通您的系统，安全性自然增加了，可以有效的防止ping洪水。为此，可以在<code>/etc/rc.d/rc.local</code>文件中增加如下一行：</p>
<pre><code># echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all
</code></pre><p>或使用iptable禁ping：</p>
<pre><code>iptables -A INPUT -p icmp --icmp-type 0 -s 0/0 -j DROP

不允许ping其他主机：
iptables -A OUTPUT -p icmp --icmp-type 8 -j DROP
</code></pre><h3 id="9-2-防止IP欺骗"><a href="#9-2-防止IP欺骗" class="headerlink" title="9.2. 防止IP欺骗"></a>9.2. 防止IP欺骗</h3><p>编辑/etc/host.conf文件并增加如下几行来防止IP欺骗攻击。</p>
<pre><code>order hosts,bind    #名称解释顺序
multi on           #允许主机拥有多个IP地址
nospoof on         #禁止IP地址欺骗
</code></pre><h3 id="9-3-防止DoS攻击"><a href="#9-3-防止DoS攻击" class="headerlink" title="9.3 防止DoS攻击"></a>9.3 防止DoS攻击</h3><p>对系统所有的用户设置资源限制可以防止DoS类型攻击，如最大进程数和内存使用数量等。<br>可以在<code>/etc/security/limits.conf</code>中添加如下几行：</p>
<pre><code>*    soft    core    0
*    soft    nproc   2048
*    hard    nproc   16384
*    soft    nofile 1024
*    hard    nofile  65536
</code></pre><p>core 0 表示禁止创建core文件；nproc 128 把最多的进程数限制到20；nofile 64 表示把一个用户同时打开的最大文件数限制为64；* 表示登录到系统的所有用户，不包括root</p>
<p>然后必须编辑<code>/etc/pam.d/login</code>文件检查下面一行是否存在。</p>
<pre><code>session    required     pam_limits.so
</code></pre><p><code>limits.conf</code>参数的值需要根据具体情况调整。</p>
<h2 id="10-修复已知安全漏洞"><a href="#10-修复已知安全漏洞" class="headerlink" title="10. 修复已知安全漏洞"></a>10. 修复已知安全漏洞</h2><p>在linux上偶尔会爆出毁灭级的漏洞，如<a href="http://www.ha97.com/1002.html" target="_blank" rel="external">udev</a>、<a href="https://access.redhat.com/solutions/781793" target="_blank" rel="external">heartbleed</a>、<a href="http://linux.cn/article-3902-1.html" target="_blank" rel="external">shellshock</a>、<a href="http://www.36kr.com/p/219344.html" target="_blank" rel="external">ghost</a>等，如果服务器暴露在外网，一定及时修复。</p>
<h2 id="11-定期做日志安全检查"><a href="#11-定期做日志安全检查" class="headerlink" title="11. 定期做日志安全检查"></a>11. 定期做日志安全检查</h2><p>将日志移动到专用的日志服务器里，这可避免入侵者轻易的改动本地日志。下面是常见linux的默认日志文件及其用处：</p>
<ul>
<li><code>/var/log/message</code> – 记录系统日志或当前活动日志。</li>
<li><code>/var/log/auth.log</code> – 身份认证日志。</li>
<li><code>/var/log/cron</code>   – Crond 日志 (cron 任务).</li>
<li><code>/var/log/maillog</code> – 邮件服务器日志。</li>
<li><code>/var/log/secure</code> – 认证日志。</li>
<li><code>/var/log/wtmp</code>    历史登录、注销、启动、停机日志和，lastb命令可以查看登录失败的用户</li>
<li><code>/var/run/utmp</code>    当前登录的用户信息日志，w、who命令的信息便来源与此</li>
<li><code>/var/log/yum.log</code> Yum 日志。</li>
</ul>
<p>参考 <a href="http://linux.it.net.cn/CentOS/safe/2014/0429/985.html" target="_blank" rel="external">深度解析CentOS通过日志反查入侵</a>。</p>
<h3 id="11-1-安装logwatch"><a href="#11-1-安装logwatch" class="headerlink" title="11.1 安装logwatch"></a>11.1 安装logwatch</h3><p>Logwatch是使用 Perl 开发的一个日志分析工具。能够对Linux 的日志文件进行分析，并自动发送mail给相关处理人员，可定制需求。</p>
<p>Logwatch的mail功能是借助宿主系统自带的 mail server 发邮件的，所以系统需安装mail server , 如sendmail,postfix,Qmail等</p>
<p>安装和配置方法见博文 <a href="http://seanlook.com/2014/08/23/linux-logwatch-usage/">linux日志监控logwatch</a>。</p>
<h2 id="12-web服务器安全"><a href="#12-web服务器安全" class="headerlink" title="12. web服务器安全"></a>12. web服务器安全</h2><p>像apache或tomcat这样的服务端程序在配置时，如果有安全问题存在可以查阅文档进行安全加固。日后有时间再补充到新的文章。</p>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://www.cyberciti.biz/tips/linux-unix-bsd-openssh-server-best-practices.html" target="_blank" rel="external">Top 20 OpenSSH Server Best Security Practices</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在Linux上使用logwatch分析监控日志文件]]></title>
      <url>http://seanlook.com/2014/08/23/linux-logwatch-usage/</url>
      <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>在维护Linux服务器时，经常需要查看系统中各种服务的日志，以检查服务器的运行状态。 如登陆历史、邮件、软件安装等日志。系统管理员一个个去检查会十分不方便；且大多时候，这会是一种被动的检查，即只有在发现系统运行异常时才会想到去查看日志以获取异常的信息。那么如何主动、集中的分析这些日志，并产生报告，定时发送给管理员就会显得十分重要。</p>
<p>logwatch 是一款用 Perl 语言编写的开源日志解析分析器。它能对原始的日志文件进行解析并转换成结构化格式的文档，也能根据您的使用情况和需求来定制报告。logwatch 的主要目的是生成更易于使用的日志摘要，并不是用来对日志进行实时的处理和监控的。正因为如此，logwatch 通常被设定好时间和频率的自动定时任务来调度运行或者是有需要日志处理的时候从命令行里手动运行。一旦日志报告生成，logwatch 可以通过电子邮件把这报告发送给您，您可以把它保存成文件或者直接显示在屏幕上。</p>
<p>Logwatch 报告的详细程度和报告覆盖范围是完全可定制化的。Logwatch 的日志处理引擎也是可扩展的，从某种意义上来说，如果您想在一个新的应用程序中使用 logwatch 功能的话，只需要为这个应用程序的日志文件编写一个日志处理脚本（使用 Perl 语言），然后挂接到 logwatch 上就行。</p>
<p>logwatch 有一点不好的就是，在它生成的报告中没有详细的时间戳信息，而原来的日志文件中是存在的。您只能知道被记录下来的一段时间之内的特定事件，如果想要知道精确的时间点的信息，就不得不去查看原日志文件了。</p>
<h1 id="2-安装与配置说明"><a href="#2-安装与配置说明" class="headerlink" title="2. 安装与配置说明"></a>2. 安装与配置说明</h1><h2 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h2><p>无论在Debian系还是Redhat系上，安装logwatch都非常简单：</p>
<pre><code># apt-get install logwatch     //Debian、Ubuntu.etc
# yum install logwatch -y       //Redhat、Centos.etc
</code></pre><a id="more"></a>
<p>以下内容基于 CentOS 6.x，其余系统相差不大。</p>
<h2 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h2><h3 id="2-2-1-配置文件说明"><a href="#2-2-1-配置文件说明" class="headerlink" title="2.2.1 配置文件说明"></a>2.2.1 配置文件说明</h3><p>安装后的目录文件说明：<br><img src="http://sean-images.qiniudn.com/logwatch-dir-structure.jpg" alt="logwatch-dir-structure"></p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/usr/share/logwatch</div><div class="line">    default.conf/     <span class="comment"># 配置目录</span></div><div class="line">        logwatch.conf   <span class="comment"># 主配置文件，收件人，级别等</span></div><div class="line">        logfiles/       <span class="comment"># 定义待分析服务的日志文件组路径，相对于/var/log(*.conf)</span></div><div class="line">        services/       <span class="comment"># 自定义需分析日志的Service目录(*.conf)</span></div><div class="line">    scripts/          <span class="comment"># 可执行脚本</span></div><div class="line">        logwatch.pl     <span class="comment"># 启动分析的perl脚本，/usr/sbin/logwatch的源链接</span></div><div class="line">        logfiles/       <span class="comment"># 可包含多个logwatch日志文件组的子目录，对应的日志服务运行的时候，子目录下的脚本会自动被调用</span></div><div class="line">        services/       <span class="comment"># logwatch日志服务的过滤脚本，一一对应</span></div><div class="line">        shared/         <span class="comment"># 可被多个logwatch日志服务引用的脚本</span></div><div class="line">    dist.conf/</div><div class="line">        logfiles/</div><div class="line">        services/</div><div class="line">    <span class="class"><span class="keyword">lib</span>/</span></div></pre></td></tr></table></figure>
<p>默认情况下使用的是<code>/usr/share/logwatch/default.conf/logwatch.conf</code>作为主配置文件，但在<code>/etc/logwatch/conf/logwatch.conf</code>中的存在配置选项会覆盖前一个（<code>/usr/share/logwatch</code>下的<code>logwatch.conf</code>还是会起作用，比如在<code>/etc/logwatch</code>的<code>logwatch.conf</code>中没有的选项）。但优先级最高的是在执行命令行中指定的选项。</p>
<p>在<code>/etc/logwatch</code>下也存在一个与<code>/usr/share/logwatch</code>类似的目录结构，可以在这里添加自定义的监控日志信息。</p>
<p>从上面的目录结构划分大概可以了解到 logwatch 的原理：logwatch 首先要知道针对哪一个服务, 从这个服务中得到需要处理的 log 文件信息, 然后这个文件送给过滤脚本处理，之后把处理后格式化的信息展现出。内部细节请看第3篇参考。</p>
<h3 id="2-2-2-编辑配置"><a href="#2-2-2-编辑配置" class="headerlink" title="2.2.2 编辑配置"></a>2.2.2 编辑配置</h3><p>在<code>/usr/share/doc/logwatch-7.3.6/HOWTO-Customize-LogWatch</code>文件中有这里的详细的配置说明。</p>
<p>个人还是习惯在<code>/etc/logwatch/</code>下管理配置文件，但又不太希望同时两个配置文件生效，所以对<code>/usr/share/logwatch/default.conf/logwatch.conf</code>备份，然后软链接<code>/etc/logwatch/conf/logwatch.conf</code>：</p>
<pre><code>ln -s /usr/share/logwatch/default.conf/logwatch.conf /etc/logwatch/conf/logwatch.conf
</code></pre><p>试着执行<code>logwatch --service sshd --print</code>感受一下处理的结果。接下来修改<code>/etc/logwatch/conf/logwatch.conf</code>文件的默认配置来做些个性化设置。</p>
<p><strong>修改日志分析级别</strong></p>
<pre><code>Detail = &lt;Low, Med, High, or a number&gt;
</code></pre><p>“Detail” 配置指令控制着 logwatch 报告的详细程度。它可以是个正整数，也可以是分别代表着10、5和0数字的 High、Med、Low 几个选项。这里设置成<code>High</code>。（配置文件中是不区分大小写的）</p>
<p><strong>指定报告收件人</strong></p>
<pre><code>MailTo = youremailaddress@yourdomain.com

MailFrom = youremailaddress@yourdomain.com
</code></pre><p><code>MailTo</code>指定logwatch日志报告接收人，要把一份报告发送给多个用户，只需要把他们的邮件地址用空格或逗号隔开，但是logwatch认为你已经配置好本地邮件服务器（sendmail或postfix），并能正确传递给用户邮箱。</p>
<p><code>MailFrom</code>，顾名思义，指定发件人。邮件地址可以说完整的收件人地址，也可以是服务器上的本地用户如root（有的邮件服务器不支持显示发件人别名）。</p>
<p><strong>指定发送邮件的客户端</strong></p>
<pre><code>mailer = &quot;sendmail -t&quot;
</code></pre><p>默认采用的是sendmail（不是sendmail服务器），而且一般没什么问题。在我的环境下有点特殊，邮件服务器必须通过smtp认证才能发送邮件，不支持匿名和其他本地MTA投递的邮件，而sendmail我一直没有找到设置smtp用户和密码认证的地方（知道的烦请告知），所以就改用了<code>mailer = &quot;mailx -t&quot;</code>，然后在<code>/etc/mail.rc</code>中设置<code>from</code>、<code>smtp</code>、<code>smtp-auth-user</code>、<code>smtp-auth-password</code>、<code>smtp-auth</code>参数，但使用mailx带来的问题是后面设置邮件报告格式为html时，无法设置header信息从而foxmail不能解析html正文。尝试了 <a href="http://blog.csdn.net/leshami/article/details/8314570" target="_blank" rel="external">sendEmail</a> 也没很好的解决。</p>
<p>大部分人情况可能没这么复杂，其实就是一个发件客户端的功能，网上得知有 mutt 结合 <a href="http://sourceforge.net/projects/msmtp/files/msmtp/1.4.16/msmtp-1.4.16.tar.bz2/download" target="_blank" rel="external">msmtp</a> 可以解决该问题：</p>
<pre><code># yum install -y mutt       //mutt其实可以不安装
# tar jxvf msmtp-1.4.16.tar.bz2 &amp;&amp; cd msmtp-1.4.16
# ./configure &amp;&amp; make &amp;&amp; make install

# vi ~/.msmtprc 
  account default
  host your.smtp-server.com
  from username@smtp-server.com
  auth login
  user username
  password your_auth_pwd
  logfile ~/msmtp.log

# 如果使用mutt发送，还需要设置~/.muttrc
</code></pre><p>将 mailer 改成<code>mailer = &quot;msmtp -t&quot;</code>。</p>
<p><strong>输出格式</strong></p>
<pre><code>Output = &lt;mail, html or unformatted&gt;
</code></pre><p>默认不指定输出格式（plain text）,系统管理员通过邮件客户端（如foxmail）看到的邮件内容是文本形式，比较简单、节省带宽；可以指定为<code>html</code>，此时看到的是可点击链接的友好的页面。</p>
<p>当同时设定了<code>Save = /tmp/logwatch</code>时，便不会发送邮件报告了，将会根据<code>Output</code>指定的格式保存到一个<code>Save</code>文件中。</p>
<p><img src="http://sean-images.qiniudn.com/logwatch-html-mail.png" alt="logwatch_mail_html"></p>
<p>另外在有的文章里指定<code>Format</code>选项，经过本人试验在7.3.6版本中无效。</p>
<p><strong>收集日志的范围</strong></p>
<pre><code>Range = &lt;Yesterday|Today|All&gt;
</code></pre><p><code>Range</code>配置指令定义了生成 logwatch 报告的时间段信息。这个指令通常可选的值是 Yesterday、Today、All。当作用了<code>Rang = All</code>时，<code>Archive = yes</code> 这个指令项也必须配置上，那么所有的已存档的日志文件 (比如，/var/log/maillog、/var/log/maillog-20150111)都会被处理到。</p>
<p>如果我们是通过 crontab 每天收集的话，可以只报告昨天或今天的日志情况。</p>
<p><strong>收集哪些服务的日志</strong></p>
<pre><code>Service = &lt;service-name-1&gt;
Service = &lt;service-name-2&gt;
. . .
</code></pre><p><code>Service</code>选项指定想要监控的一个或多个服务。在<code>/usr/share/logwatch/scripts/services</code>目录下列出的服务都能被监控，它们已经涵盖了重要的系统服务（例如：pam,secure,iptables,syslogd 等），也涵盖了一些像 sudo、sshd、http、fail2ban、samba等主流的应用服务。如果您想添加新的服务到列表中，得编写一个相应的日志处理 Perl 脚本，并把它放在这个目录中。<br><img src="http://sean-images.qiniudn.com/logwatch-script-service.png" alt="logwatch-script-service"></p>
<p>对于一个综合日志分析工具，logwatch推荐大多数人使用<code>Service = &quot;All&quot;</code>，然后通过继续添加<code>Service = &quot;-service_name&quot;</code>等来去掉那些不监控的日志。当然在服务器上，并不是所有script下的服务都有启动，有些并没有日志。</p>
<p><strong>命令行指定logwatch选项</strong></p>
<p>如果您不想个性化 <code>/etc/logwatch/conf/logwatch.conf</code>，您可以不修改此文件让其默认，然后在命令行里运行如下所示的命令：</p>
<pre><code># logwatch --detail 10 --mailto youremailaddress@yourdomain.com --range today \
&gt;  --service sshd --service postfix --service zz-disk_space --service -zz-network \
&gt; --output mail 
</code></pre><p><strong><code>logwatch.conf</code>完整示例</strong><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="attr">LogDir</span> = /var/log</div><div class="line"><span class="attr">TmpDir</span> = /var/cache/logwatch</div><div class="line"><span class="attr">Print</span> = <span class="literal">No</span></div><div class="line"></div><div class="line"><span class="attr">Range</span> = <span class="literal">yes</span>terday</div><div class="line"><span class="attr">Detail</span> = High</div><div class="line"></div><div class="line"><span class="attr">MailTo</span> = zhouxiao@example.com.net</div><div class="line"><span class="attr">MailFrom</span> = itsection@example.com.net</div><div class="line"><span class="attr">mailer</span> = <span class="string">"msmtp -t"</span></div><div class="line"><span class="attr">Output</span> = html</div><div class="line"></div><div class="line"><span class="attr">Service</span> = All</div><div class="line"><span class="attr">Service</span> = <span class="string">"-zz-network"</span> </div><div class="line"><span class="attr">Service</span> = <span class="string">"-zz-sys"</span></div><div class="line"><span class="attr">Service</span> = <span class="string">"-eximstats"</span></div></pre></td></tr></table></figure></p>
<h1 id="3-扩展"><a href="#3-扩展" class="headerlink" title="3. 扩展"></a>3. 扩展</h1><h2 id="3-1-cron-daily"><a href="#3-1-cron-daily" class="headerlink" title="3.1 cron daily"></a>3.1 cron daily</h2><p>我们可以看到在 crontab 定时任务设定目录下存在<code>/etc/cron.daily/0logwatch</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">DailyReport=`grep <span class="_">-e</span> <span class="string">"^[[:space:]]*DailyReport[[:space:]]*=[[:space:]]*"</span> /usr/share/logwatch/default.conf/logwatch.conf | head -n1 | sed <span class="_">-e</span> <span class="string">"s|^\s*DailyReport\s*=\s*||"</span>`</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$DailyReport</span>"</span> != <span class="string">"No"</span> ] &amp;&amp; [ <span class="string">"<span class="variable">$DailyReport</span>"</span> != <span class="string">"no"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">    logwatch</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure></p>
<p>如果在<code>logwatch.conf</code>中显式设置了选项<code>DailyReport = No</code>，则会取消logwatch每日执行任务。如果你要修改<code>cron.daily</code>的执行时间，可以删掉这个<code>0logwatch</code>然后添加到<code>/etc/crontab</code>里，或者修改<a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Deployment_Guide/ch-Automating_System_Tasks.html#s2-configuring-anacron-jobs" target="_blank" rel="external"><code>/etc/anacrontab</code></a>的<code>START_HOURS_RANGE</code>。</p>
<p>所以 logwatch 的工作不是监控日志异常后及时报警的工具，因为默认它是每天一封整合的邮件，并不具有及时性（安装perl的<code>CPAN</code>模块后可以更精确的控制logwatch时间，详见第一份参考）。</p>
<h2 id="3-2-定制自己要监控的日志"><a href="#3-2-定制自己要监控的日志" class="headerlink" title="3.2 定制自己要监控的日志"></a>3.2 定制自己要监控的日志</h2><p>用一个简单的例子介绍自定义logwatch的配置方法。</p>
<p><strong>首先创建logwatch日志文件组</strong><br><code>/etc/logwatch/conf/logfiles/test.conf</code>：</p>
<pre><code>LogFile = /path/to/your/logfile
LogFile = /path/to/your/second/logfile
</code></pre><p><strong>然后创建logwatch服务配置文件</strong><br><code>/etc/logwatch/conf/services/test.conf</code>：</p>
<pre><code>Title = test title     # 日志文件里的标题
LogFile = test   # logwatch日志文件组的名字，通常是对应的配置文件的文件名部分
</code></pre><p><strong>创建logwatch服务过滤器脚本</strong><br><code>/etc/logwatch/scripts/services/test</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">grep -i ERROR</div></pre></td></tr></table></figure></p>
<p>上面的脚本会从日志文件里过滤出包含ERROR的行。最后，为新建的脚本添加执行权限:</p>
<pre><code>chmod +x /etc/logwatch/scripts/services/test
</code></pre><p><strong>参考</strong></p>
<ul>
<li><a href="http://linux.cn/article-4490-1.html" target="_blank" rel="external">Linux 系统中使用 logwatch 监控日志文件</a> （<a href="http://xmodulo.com/monitor-log-file-linux-logwatch.html" target="_blank" rel="external">英文</a>）</li>
<li><a href="http://dylanninin.com/blog/2013/06/21/logwatch.html" target="_blank" rel="external">LogWatch Introduction</a></li>
<li><a href="http://tuxradar.com/content/managing-your-log-files" target="_blank" rel="external">Managing your log files</a></li>
<li><a href="http://blog.atime.me/note/logwatch.html" target="_blank" rel="external">Logwatch简单配置教程</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim编辑器技巧备忘（初级-中级）]]></title>
      <url>http://seanlook.com/2014/08/07/vim-tips/</url>
      <content type="html"><![CDATA[<p>“学习vim并且其会成为你最后一个使用的文本编辑器”<br>学习建议：</p>
<ul>
<li>丢弃鼠标和小键盘</li>
<li>具有搭配使用各种按键的意识</li>
</ul>
<p>首先来一张 <a href="http://jrmiii.com/2009/03/06/learning-vim-the-pragmatic-way.html" target="_blank" rel="external">mindmap</a> :</p>
<p><img src="http://sean-images.qiniudn.com/Vim-mindmap.png" alt="vim-learn-card"></p>
<a id="more"></a>
<h1 id="1-初级"><a href="#1-初级" class="headerlink" title="1. 初级"></a>1. 初级</h1><h2 id="1-1-编辑模式（Insert-Mode）"><a href="#1-1-编辑模式（Insert-Mode）" class="headerlink" title="1.1 编辑模式（Insert Mode）"></a>1.1 编辑模式（Insert Mode）</h2><p>编辑模式包括以下动作：</p>
<ul>
<li>insert：<code>i</code>在光标所在字符前插入，<code>I</code>在当前行首第一个非空格字符前插入</li>
<li>append：<code>a</code>在光标所在字符后插入，<code>A</code>在行末尾开始插入</li>
<li>open：<code>o</code>在下一行插入新行，<code>O</code>在光标所在行的上一行插入新行</li>
<li>replace：<code>r</code>将光标处字符替换成r紧接的字符；<code>R</code>一直替换字符串，知道<code>ESC</code>键退出，同windows下的Insert键</li>
<li><code>Ctrl+p</code>：自动提示</li>
<li><code>[ESC]</code>：回到普通模式</li>
</ul>
<p><img src="http://sean-images.qiniudn.com/vim-mode.png" alt="vim-mode"></p>
<h2 id="1-2-普通模式（Normal-Mode）"><a href="#1-2-普通模式（Normal-Mode）" class="headerlink" title="1.2 普通模式（Normal Mode）"></a>1.2 普通模式（Normal Mode）</h2><ul>
<li><code>h, j, k, l</code>，分别对应 左←  下↓  上↑  右→ </li>
<li><p><code>:q, :q!, :wq</code>  退出 不保存强行退出 保存退出</p>
</li>
<li><p>移动光标到当前行首/非空格，同^，:0</p>
</li>
<li><code>$</code>  移动光标到当前行尾，同:$</li>
<li><code>G</code>  移动光标到文档最后一行首</li>
<li><code>30G</code>  转到第30行，同 :30</li>
<li><code>9-</code>  光标向上移动9行，同9k</li>
<li><p><code>9+</code>  光饼向下移动9行，同9[space]，9j</p>
</li>
<li><p><code>gg</code>  转到文档第一行(1G)</p>
</li>
<li><code>H</code>  移动到屏幕的第一列</li>
<li><code>M</code>  移动到屏幕的中间列</li>
<li><p><code>L</code>  移动到屏幕的最后列</p>
</li>
<li><p><code>w</code>  移动到下一个单词的首字母，（标点符号认为是一个单词，W表示单词以空格分隔）</p>
</li>
<li><p><code>e</code>  移动到下一个单词的末尾，（E认为单词以空格分隔）</p>
</li>
<li><p><code>b</code>  移动到上一个单词的首字母，（B认为单词以空格分隔）</p>
</li>
<li><code>fx</code>  移动到下一个字母是x的位置。Fx向上移动。</li>
<li><p><code>%</code>  匹配括号移动，包括 (, {, [ ，你需要把光标先移到括号上</p>
</li>
<li><p><code>CTRL+b</code> 向上（前）翻页</p>
</li>
<li><p><code>CTRL+f</code> 向后翻页</p>
</li>
<li><p><code>d</code>  删除开始。其实是放到寄存器中，p或P命令调用。c即change，删完进入编辑模式</p>
</li>
<li><code>d$</code>  删除光标到行尾的所有文字，同D。C指令进入编辑模式</li>
<li><code>dw</code>    删除当前字符到单词尾的所有字符。cw删除光标后的单词并进入插入模式，等同替换</li>
<li><code>dd</code>  删除当前一行</li>
<li><code>2dd</code>  删除当前两行</li>
<li><p><code>x</code>  剪切光标处字符，可以p粘贴出来</p>
</li>
<li><p><code>y</code>  复制开始。yank起来，p或P命令调用</p>
</li>
<li><code>yy p</code>  复制当前行并粘贴到下一行</li>
<li><code>5yy p</code> 复制当前行以下5行，在合适的地方粘贴</li>
<li><code>yw p</code>  复制一个单词并粘贴。</li>
<li><p><code>yi{</code>  复制光标所在{}中的内容。很容易知道ci{ 和 di “ 的意思。</p>
</li>
<li><p><code>u</code>      撤销</p>
</li>
<li><code>CTRL+r</code> 重做</li>
<li><code>.</code>   点号重复做上一个命令</li>
<li><p><code>`.</code>  移动光标到上一次的修改点</p>
</li>
<li><p><code>Ctrl+g</code> 查看我当前位置</p>
</li>
</ul>
<h2 id="1-3-命令模式"><a href="#1-3-命令模式" class="headerlink" title="1.3 命令模式"></a>1.3 命令模式</h2><ul>
<li><code>/word</code> 向下查找word，n定位到下一个。?word 向上开始查找，同 /word 配合N。* 直接查找光标所在处单词</li>
<li><code>:%s/word1/word2/g</code>  替换所有 word1 为 word2 (^$ [])</li>
<li><p><code>:set noic</code>    区分大小写 (即set no igorecase，set ic不区分大小写)</p>
</li>
<li><p><code>:set nu</code>  显示行号。:set nonu相反，不显示行号</p>
</li>
<li><code>:set paste</code>  设置为粘贴模式，解决Ctrl+Insert粘贴时缩进错乱问题。:set nopaste设置回默认</li>
<li><p><code>:se ff=unix</code> 设置文本文件的格式为unix，去掉windows系统文件中的^M。</p>
</li>
<li><p><code>:!ls</code>  执行bash下的命令ls，回车后继续回到vi。一般在一个不存在的目录中创建文件时用到</p>
</li>
<li><code>:set all</code> 查看vim说有设置属性值</li>
<li><code>:map</code> 查看绑定的快捷键</li>
<li><code>:marks</code> 查看可用标记</li>
</ul>
<p>熟练上面的命令，已经可以满足日常工作要求，要提高效率可以学习vim的高级用法，如分屏显示、分页、标签功能、代码折叠、键盘映射。</p>
<h2 id="1-4-可视化模式"><a href="#1-4-可视化模式" class="headerlink" title="1.4 可视化模式"></a>1.4 可视化模式</h2><p>visual mode多用于用键盘灵活选择文本。<code>v</code>或<code>V</code>键进入，可以实现同时编辑多行（如注释）</p>
<h1 id="2-中级"><a href="#2-中级" class="headerlink" title="2. 中级"></a>2. 中级</h1><h2 id="2-1-高级组合命令"><a href="#2-1-高级组合命令" class="headerlink" title="2.1 高级组合命令"></a>2.1 高级组合命令</h2><ul>
<li><code>:sh</code>   暂时离开vi，进入shell命令行</li>
<li><code>:!ls</code>  !表示要执行一个shell命令</li>
<li><code>q:</code>  调出历史命令窗口</li>
<li><code>cc</code>  替换一行，清空一行</li>
<li><code>cw</code>  替换一个单词，进入插入模式</li>
<li><p><code>ea</code>  在当前单词最后插入</p>
</li>
<li><p><code>vw</code>  visual模式选择一个单词</p>
</li>
<li><code>VU</code>  全选一行，转换成大写</li>
<li><p><code>:5,12 co 13</code> 将5至12行复制到第13行下</p>
</li>
<li><p><code>gg=G</code> 自动缩排文件<br><code>%</code> : 匹配括号移动，包括 (, {, [. ，你需要把光标先移到括号上<br><code>*</code> 和 <code>#</code>:匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个）</p>
</li>
</ul>
<p>当光标在<code>( )</code>, <code>[ ]</code>,<code>&lt; &gt;</code>, <code>{ }</code>, <code>&quot; &quot;</code>, <code>&#39;&#39;</code> 内时，可以用<code>ci</code>, <code>di</code>, 或<code>yi</code>，加上<code>(</code>, <code>[</code>, <code>&lt;</code>,<code>{</code>, <code>&quot;</code>, <code>&#39;</code>。这样可以改写/删除/复制<code>( )</code>内，<code>[ ]</code>内，<code>&lt; &gt;</code>内，<code>{ }</code>内，<code>&quot; &quot;</code>内，<code>&#39; &#39;</code>内的内容</p>
<p><strong>多行注释（块操作）</strong></p>
<ol>
<li>首先按<code>esc</code>进入命令行模式下，按下<code>Ctrl + v</code>，进入列（也叫区块）模式;</li>
<li>在行首使用上下键<code>kj</code>选择需要注释的多行;</li>
<li>按下键盘（大写）<code>I</code>键，进入插入模式；</li>
<li>然后输入注释符（“//”、“#”等）;</li>
<li>最后按下<code>esc</code>键</li>
</ol>
<p>删除多行开头的一个字符与此类似，删除多个字符也只要左右键，然后使用d。</p>
<p>另外一种多行注释的方式就是替换：</p>
<ul>
<li><code>:5,9s/^/#/g</code>    添加注释#</li>
<li><code>:5,9s/^#//g</code>    删除注释#</li>
<li><code>:5,9s#^#//#g</code>    添加注释//，同:5,9s/^/\/\/#/g</li>
<li><code>:5,9s#^//##g</code>    删除注释//</li>
</ul>
<p>多行缩进<br><code>[ESC]</code>,  <code>Ctrl+v</code>  选择行 &lt;或&gt;左右缩进，=自动缩进（gg=G的局部功能）</p>
<p>多行行末尾加上 &gt;&gt; ${log}：Ctrl+v  /^echo<br><code>&gt;&gt;</code>相当于tab键，一个缩进</p>
<p><strong>多行删除</strong></p>
<ol>
<li>首先在命令模式下，输入<code>set nu</code>显示行号；</li>
<li>通过行号确定你要删除的行；</li>
<li>命令输入<code>:32,65d</code>,回车键，32-65行就被删除了</li>
</ol>
<p><strong>自动补全</strong><br>在Insert模式下，你可以输入一个词的开头，然后按 <code>&lt;C-p&gt;</code>或是<code>&lt;C-n&gt;</code>，自动补齐功能就出现了</p>
<h2 id="2-2-分屏-split"><a href="#2-2-分屏-split" class="headerlink" title="2.2 分屏(split)"></a>2.2 分屏(split)</h2><p>分割窗口（同时编辑多个文件）</p>
<ul>
<li><code>vi -o file1 file2</code> 水平分屏，也可以在先打开file1后，使用<code>:sp file2</code></li>
<li><code>vi -O file1 file2</code>    垂直分屏，也可以在先打开file1后，使用<code>:vsp file2</code></li>
<li><code>Ctrl+w w</code>  光标切换到另一个屏</li>
<li><code>k</code>    关闭当前窗口，如果有改动则提示要先保存。<code>:wqa!</code>保存退出所有文件</li>
<li><code>Ctrl+w v</code>  左右分割当前打开的文件。<code>Ctrl+w s</code>上下分割显示</li>
<li><code>Ctrl+w H</code>  左移该屏（大写，<code>L</code>右移，<code>K</code>上移—改变vertical为horizontal）</li>
<li><code>:set scb</code>  分屏同步滚动</li>
</ul>
<p>另外一种不分屏，同时编辑多个文件的方法</p>
<p><code>vi file1 file2</code></p>
<ul>
<li><code>:ls</code>              展示全部打开的文档。其中 <code>%</code> 代表正在打开的文件（buffer），<code>#</code> 代表上一个编辑过的文件，<code>a</code> 代表当前激活的buffer空间，<code>+</code> 代表有修改过的内容但还未保存</li>
<li><code>:buffer 2</code>   转到打开的第二个文件。或简写为 <code>:b2</code></li>
<li><code>:bn</code>             转到下一个文件。没有保存不能离开这个文件。<code>:bp</code> 上一个文件</li>
<li><code>:b#</code>             转到上一个编辑过的文件，同 <code>:e #</code>。类似于多屏中<code>Ctrl+w w</code></li>
<li><code>:e file3</code>      编辑一个新的文件 </li>
<li><code>Ctrl+g</code>       显示当前文件名和行号，同 <code>:f</code></li>
</ul>
<h2 id="2-3-折叠-fold"><a href="#2-3-折叠-fold" class="headerlink" title="2.3 折叠(fold)"></a>2.3 折叠(fold)</h2><p>主要应用在复杂脚本的场合，特别是函数比较多，逻辑结构比较复杂的代码。（<code>:help folding</code>）<br>有6种方式来折叠代码</p>
<ol>
<li>manual //手工定义折叠</li>
<li>indent //用缩进表示折叠</li>
<li>expr　 //用表达式来定义折叠</li>
<li>syntax //用语法高亮来定义折叠</li>
<li>diff   //对没有更改的文本进行折叠</li>
<li>marker //用标志折叠</li>
</ol>
<p><strong>indent</strong><br><code>:set foldmethod=indent</code>    设置缩进折叠，fdm为简写。只对当前会话有效，要使每次打开vim时折叠都生效，则在.vimrc文件中添加设置，如添加：<code>set fdm=indent</code></p>
<ul>
<li><code>zc</code>    折叠与当前缩进相同的行</li>
<li><code>zo</code>    打开折叠</li>
<li><code>zj</code>    移到下一个折叠处</li>
<li><code>zk</code>    移到上一个折叠处</li>
<li><code>zm</code>    折叠所有可折叠标记</li>
<li><code>zr</code>      展开所有折叠</li>
<li><code>[z</code>    到当前打开折叠的开始</li>
<li><code>]z</code>    到当前打开折叠的结束</li>
</ul>
<p><strong>marker</strong><br>注意与后文的mark不是同一东西，<code>:set fdm=marker</code> </p>
<ul>
<li><code>zf</code>    创建marker，默认 <code># { { {</code>, <code># } } }</code></li>
<li><code>Ctrl+v zf</code> 进入可视化模式，选择需要折叠的行，zc执行折叠。会自动加入 <code># { { {</code>  code block <code># } } }</code></li>
<li><code>zf9j</code>  创建从当前行起至以下9行的折叠标记，<code>zc</code>进行折叠。同<code>9zf</code>。类似有<code>zf30G</code>，从当前行折叠刀第30行</li>
<li><code>zf%</code>   创建匹配的 <code>{}</code>, <code>[]</code>, <code>()</code>, <code>&lt;&gt;</code> 的fold。不用执行<code>zc</code></li>
<li><code>zd</code>    删除当前行上存在的折叠标记。仅当 ‘foldmethod’ 设为 “manual” 或 “marker” 时有效</li>
</ul>
<h2 id="2-4-标记"><a href="#2-4-标记" class="headerlink" title="2.4 标记"></a>2.4 标记</h2><p>标记(mark)是vim提供的精确定位技术，只要你知道标记的名字，就可以使用命令直接跳转到该标记所在的位置。vim中的标记都有一个名字，这个名字用单一的字符表示。大写和小写字母(A-Za-z)都可以做为标记的名字，这些标志的位置可以由用户来设置；而数字标记0-9，以及一些标点符号标记，用户不能进行设置，由vim来自动设置。（:help mark-motions查看更多帮助）</p>
<ul>
<li><code>ms</code>    定义一个标记s</li>
<li><code>`s</code>    跳转到标记s的地方</li>
<li><code>&#39;s</code>    跳转到调剂s所在行首</li>
<li><code>`.</code>    jump to position where last change occurred in current buffer</li>
<li>``    jump back (to position in current buffer where jumped from)</li>
<li><code>:delmarks aA</code> 使用 :delmarks! 删除所有小写（a-z）的标记</li>
<li><code>:marks</code>    查看所有标记</li>
</ul>
<h1 id="3-插件"><a href="#3-插件" class="headerlink" title="3. 插件"></a>3. 插件</h1><p>待续</p>
<h1 id="4-vimrc"><a href="#4-vimrc" class="headerlink" title="4. vimrc"></a>4. vimrc</h1><p><a href="http://sean-images.qiniudn.com/vimrc" target="_blank" rel="external">.vimrc</a> 是目前自己用的比较习惯的vim风格。</p>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://coolshell.cn/articles/5426.html" target="_blank" rel="external">简明 Vim 练级攻略</a></li>
<li><a href="http://michael.peopleofhonoronly.com/vim/" target="_blank" rel="external">Vim Cheat Sheet for Programmers</a></li>
<li><a href="http://segmentfault.com/blog/nightire/1190000000445598" target="_blank" rel="external">VIM哲学</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[高效Linux bash快捷键及alias总结]]></title>
      <url>http://seanlook.com/2014/03/09/linux-bash/</url>
      <content type="html"><![CDATA[<h2 id="bash快捷键"><a href="#bash快捷键" class="headerlink" title="bash快捷键"></a>bash快捷键</h2><p>习惯使用编辑的快捷键可以大大提高效率，记忆学习过程要有意识的忽略功能键、方向键和数字小键盘。以下快捷键适用在bash处于默认的Emacs模式下，是由一个名为Readline的库实现的，用户可以通过命令bind添加新快捷键，或者修改系统中已经存在的快捷键。（如果你有<code>set -o vi</code>，就处于 vi 模式就不适用了）</p>
<p>另外下面的内容并不包含所有快捷键，只是我个人适用频率最高的几种，但相信已经可以大大提高工作效率了。以下所有 Alt 键可以以 Esc 键代替。</p>
<ul>
<li><code>Ctrl + l</code> ：清除屏幕，同clear</li>
<li><code>Ctrl + a</code> ：将光标定位到命令的开头</li>
<li><code>Ctrl + e</code> ：与上一个快捷键相反，将光标定位到命令的结尾</li>
<li><code>Ctrl + u</code> ：剪切光标之前的内容，在输错命令或密码</li>
<li><code>Ctrl + k</code> ：与上一个快捷键相反，剪切光标之后的内容</li>
<li><code>Ctrl + y</code> ：粘贴以上两个快捷键所剪切的内容。Alt+y粘贴更早的内容</li>
<li><code>Ctrl + w</code> ：删除光标左边的参数（选项）或内容（实际是以空格为单位向前剪切一个word）</li>
<li><p><code>Ctrl + /</code> ：撤销，同<code>Ctrl+x</code> + <code>Ctrl+u</code></p>
</li>
<li><p><code>Ctrl + f</code> ：按字符前移（右向），同→</p>
</li>
<li><code>Ctrl + b</code> ：按字符后移（左向），同←</li>
<li><code>Alt + f</code> ：按单词前移，标点等特殊字符与空格一样分隔单词（右向），同Ctrl+→</li>
<li><code>Alt + b</code> ：按单词后移（左向），同Ctrl+←</li>
<li><code>Alt + d</code> ：从光标处删除至字尾。可以Ctrl+y粘贴回来</li>
<li><code>Alt + \</code> ：删除当前光标前面所有的空白字符</li>
<li><code>Ctrl + d</code> ：删除光标处的字符，同Del键。没有命令是表示注销用户</li>
<li><p><code>Ctrl + h</code> ：删除光标前的字符</p>
</li>
<li><p><code>Ctrl + r</code> ：逆向搜索命令历史，比history好用</p>
</li>
<li><code>Ctrl + g</code> ：从历史搜索模式退出，同ESC</li>
<li><code>Ctrl + p</code> ：历史中的上一条命令，同↑</li>
<li><code>Ctrl + n</code> ：历史中的下一条命令，同↓</li>
<li><code>Alt + .</code>：同!$，输出上一个命令的最后一个参数（选项or单词）。<br>还有如Alt+0 Alt+. Alt+.，表示输出上上一条命令的的第一个单词（即命令）。<br>另外有一种写法 <code>!:n</code>，表示上一命令的第n个参数，如你刚备份一个配置文件，马上编辑它：<code>cp nginx.conf nginx.conf</code>，<code>vi !:1</code>，同<code>vi !^</code>。<code>!^</code>表示命令的第一个参数，<code>!$</code>最后一个参数（一般是使用<code>Alt + .</code>代替）。</li>
</ul>
<a id="more"></a>
<p>这里提一下按字符或字符串，向左向后搜索字符串的命令：</p>
<ul>
<li><code>Ctrl + ]</code>　c ：从当前光标处向<em>右</em>定位到<code>字符</code> c 处</li>
<li><code>Esc</code>　<code>Ctrl + ]</code>　c ：从当前光标向<em>左</em>定位到<code>字符</code> c 处。（ bind -P 可以看到绑定信息）</li>
<li><code>Ctrl + r</code>　str ：可以搜索历史，也可以当前光标处向<em>左</em>定位到<code>字符串</code> str，<code>Esc</code>后可定位继续编辑</li>
<li><code>Ctrl -s</code>　str ：从当前光标处向<em>右</em>定位到<code>字符串</code> str 处，Esc 退出。注意，<code>Ctrl + S</code>默认被用户控制 <a href="http://superuser.com/questions/124845/can-you-disable-the-ctrl-s-xoff-keystroke-in-putty" target="_blank" rel="external">XON/XOFF</a> ，需要在终端里执行<code>stty -ixon</code>或加入profile。</li>
</ul>
<p>注意上述所有涉及Alt键的实际是Meta键，在xshell中默认是没有勾选“Use Alt key as Meta key”，要充分体验这些键带来的快捷，请在对应的terminal设置。</p>
<p><strong>参考</strong>：<a href="http://ahei.info/bash.htm" target="_blank" rel="external">高效操作Bash</a> ，<a href="http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29#Keyboard_shortcuts" target="_blank" rel="external">Bash (Unix shell) Keyboard shortcuts</a> ，<a href="http://www.cnblogs.com/nufangrensheng/archive/2013/11/20/3434474.html" target="_blank" rel="external">bash中的命令基本操作</a>。</p>
<h2 id="常用alias"><a href="#常用alias" class="headerlink" title="常用alias"></a>常用alias</h2><p>以下bash中别名设置我还并没有完全使用，也是个人觉得非常有用的（多了记起来也麻烦），所以收集在一起，习惯就好。<br><code>/etc/profile.d/alias.sh</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">alias</span> wl=<span class="string">'ll | wc -l'</span></div><div class="line"><span class="built_in">alias</span> l=<span class="string">'ls -l'</span></div><div class="line"><span class="built_in">alias</span> lh=<span class="string">'ls -lh'</span></div><div class="line"><span class="built_in">alias</span> grep=<span class="string">'grep -i --color'</span> <span class="comment">#用颜色标识，更醒目；忽略大小写</span></div><div class="line"><span class="built_in">alias</span> vi=vim</div><div class="line"><span class="built_in">alias</span> c=<span class="string">'clear'</span>  <span class="comment"># 快速清屏</span></div><div class="line"><span class="built_in">alias</span> p=<span class="string">'pwd'</span></div><div class="line"></div><div class="line"><span class="comment"># 进入目录并列出文件，如 cdl ../conf.d/</span></div><div class="line"><span class="function"><span class="title">cdl</span></span>() &#123; <span class="built_in">cd</span> <span class="string">"<span class="variable">$@</span>"</span> &amp;&amp; <span class="built_in">pwd</span> ; ls -alF; &#125;</div><div class="line"></div><div class="line"><span class="built_in">alias</span> ..=<span class="string">"cdl .."</span></div><div class="line"><span class="built_in">alias</span> ...=<span class="string">"cd ../.."</span>   <span class="comment"># 快速进入上上层目录</span></div><div class="line"><span class="built_in">alias</span> .3=<span class="string">"cd ../../.."</span> </div><div class="line"><span class="built_in">alias</span> cd..=<span class="string">'cdl ..'</span></div><div class="line"></div><div class="line"><span class="comment"># alias cp="cp -iv"      # interactive, verbose</span></div><div class="line"><span class="built_in">alias</span> rm=<span class="string">"rm -i"</span>      <span class="comment"># interactive</span></div><div class="line"><span class="comment"># alias mv="mv -iv"       # interactive, verbose</span></div><div class="line"></div><div class="line"><span class="built_in">alias</span> psg=<span class="string">'\ps aux | grep -v grep | grep --color'</span> <span class="comment"># 查看进程信息</span></div><div class="line"></div><div class="line"><span class="built_in">alias</span> hg=<span class="string">'history|grep'</span></div><div class="line"></div><div class="line"><span class="built_in">alias</span> netp=<span class="string">'netstat -tulanp'</span>  <span class="comment"># 查看服务器端口连接信息</span></div><div class="line"></div><div class="line"><span class="built_in">alias</span> lvim=<span class="string">"vim -c \"normal '0\""</span>  <span class="comment"># 编辑vim最近打开的文件</span></div><div class="line"></div><div class="line"><span class="built_in">alias</span> tf=<span class="string">'tail -f '</span>  <span class="comment"># 快速查看文件末尾输出</span></div><div class="line"></div><div class="line"><span class="comment"># 自动在文件末尾加上 .bak-日期 来备份文件，如 bu nginx.conf</span></div><div class="line"><span class="function"><span class="title">bak</span></span>() &#123; cp <span class="string">"<span class="variable">$@</span>"</span> <span class="string">"<span class="variable">$@</span>.bak"</span>-`date +%y%m%d`; <span class="built_in">echo</span> <span class="string">"`date +%Y-%m-%d` backed up <span class="variable">$PWD</span>/<span class="variable">$@</span>"</span>; &#125;</div><div class="line"></div><div class="line"><span class="comment"># 级联创建目录并进入，如 mcd a/b/c</span></div><div class="line"><span class="function"><span class="title">mcd</span></span>() &#123; mkdir -p <span class="variable">$1</span> &amp;&amp; <span class="built_in">cd</span> <span class="variable">$1</span> &amp;&amp; <span class="built_in">pwd</span> ; &#125;</div><div class="line"></div><div class="line"><span class="comment"># 查看去掉#注释和空行的配置文件，如 nocomm /etc/squid/squid.conf</span></div><div class="line"><span class="built_in">alias</span> nocomm=<span class="string">'grep -Ev '</span>\<span class="string">''</span>^(<span class="comment">#|$)'\'''</span></div><div class="line"></div><div class="line"><span class="comment"># 快速根据进程号pid杀死进程，如 psid tomcat， 然后 kill9 两个tab键提示要kill的进程号</span></div><div class="line"><span class="built_in">alias</span> <span class="built_in">kill</span>9=<span class="string">'kill -9'</span>;</div><div class="line"><span class="function"><span class="title">psid</span></span>() &#123;</div><div class="line">  [[ ! -n <span class="variable">$&#123;1&#125;</span> ]] &amp;&amp; <span class="built_in">return</span>;   <span class="comment"># bail if no argument</span></div><div class="line">  pro=<span class="string">"[<span class="variable">$&#123;1:0:1&#125;</span>]<span class="variable">$&#123;1:1&#125;</span>"</span>;      <span class="comment"># process-name –&gt; [p]rocess-name (makes grep better)</span></div><div class="line">  ps axo pid,user,<span class="built_in">command</span> | grep -v grep |grep -i --color <span class="variable">$&#123;pro&#125;</span>;   <span class="comment"># show matching processes</span></div><div class="line">  pids=<span class="string">"<span class="variable">$(ps axo pid,user,command | grep -v grep | grep -i $&#123;pro&#125; | awk '&#123;print $1&#125;')</span>"</span>;   <span class="comment"># get pids</span></div><div class="line">  complete -W <span class="string">"<span class="variable">$&#123;pids&#125;</span>"</span> <span class="built_in">kill</span>9     <span class="comment"># make a completion list for kk</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># 解压所有归档文件工具</span></div><div class="line"><span class="keyword">function</span> extract &#123;</div><div class="line"> <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></div><div class="line">    <span class="comment"># display usage if no parameters given</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"Usage: extract &lt;path/file_name&gt;.&lt;zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz&gt;"</span></div><div class="line"> <span class="keyword">else</span></div><div class="line">    <span class="keyword">if</span> [ <span class="_">-f</span> <span class="variable">$1</span> ] ; <span class="keyword">then</span></div><div class="line">        <span class="comment"># NAME=$&#123;1%.*&#125;</span></div><div class="line">        <span class="comment"># mkdir $NAME &amp;&amp; cd $NAME</span></div><div class="line">        <span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></div><div class="line">          *.tar.bz2)   tar xvjf <span class="variable">$1</span>    ;;</div><div class="line">          *.tar.gz)    tar xvzf <span class="variable">$1</span>    ;;</div><div class="line">          *.tar.xz)    tar xvJf <span class="variable">$1</span>    ;;</div><div class="line">          *.lzma)      unlzma <span class="variable">$1</span>      ;;</div><div class="line">          *.bz2)       bunzip2 <span class="variable">$1</span>     ;;</div><div class="line">          *.rar)       unrar x -ad <span class="variable">$1</span> ;;</div><div class="line">          *.gz)        gunzip <span class="variable">$1</span>      ;;</div><div class="line">          *.tar)       tar xvf <span class="variable">$1</span>     ;;</div><div class="line">          *.tbz2)      tar xvjf <span class="variable">$1</span>    ;;</div><div class="line">          *.tgz)       tar xvzf <span class="variable">$1</span>    ;;</div><div class="line">          *.zip)       unzip <span class="variable">$1</span>       ;;</div><div class="line">          *.Z)         uncompress <span class="variable">$1</span>  ;;</div><div class="line">          *.7z)        7z x <span class="variable">$1</span>        ;;</div><div class="line">          *.xz)        unxz <span class="variable">$1</span>        ;;</div><div class="line">          *.exe)       cabextract <span class="variable">$1</span>  ;;</div><div class="line">          *)           <span class="built_in">echo</span> <span class="string">"extract: '<span class="variable">$1</span>' - unknown archive method"</span> ;;</div><div class="line">        <span class="keyword">esac</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$1</span> - file does not exist"</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line"><span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># 其它你自己的命令</span></div><div class="line"><span class="built_in">alias</span> nginxreload=<span class="string">'sudo /usr/local/nginx/sbin/nginx -s reload'</span></div></pre></td></tr></table></figure></p>
<p>要去掉别名，请用<code>unalias aliasname</code>，或者<em>临时</em>执行不用别名，执行原始命令<code>\alias</code> 。</p>
<p>欢迎补充评论补充~</p>
<p><strong>参考</strong>： <a href="http://www.cyberciti.biz/tips/bash-aliases-mac-centos-linux-unix.html" target="_blank" rel="external">30 Handy Bash Shell Aliases For Linux</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iptables常用实例备查（更新中）]]></title>
      <url>http://seanlook.com/2014/02/26/iptables-example/</url>
      <content type="html"><![CDATA[<h2 id="1-普通规则"><a href="#1-普通规则" class="headerlink" title="1. 普通规则"></a>1. 普通规则</h2><h3 id="1-1-操作规则"><a href="#1-1-操作规则" class="headerlink" title="1.1 操作规则"></a>1.1 操作规则</h3><ul>
<li><code>iptables -nL</code><br>查看本机关于iptables的设置情况，默认查看的是<code>-t filter</code>，可以指定<code>-t nat</code></li>
<li><p><code>iptables-save &gt; iptables.rule</code><br>会保存当前的防火墙规则设置，命令行下通过iptables配置的规则在下次重启后会失效，当然这也是为了防止错误的配置防火墙。默认读取和保存的配置文件地址为<code>/etc/sysconfig/iptables</code>。</p>
</li>
<li><p>设置chain默认策略</p>
<figure class="highlight tp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">iptables -<span class="keyword">P</span> INPUT DROP</div><div class="line">iptables -<span class="keyword">P</span> FORWARD <span class="keyword">ACC</span>EPT</div><div class="line">iptables -<span class="keyword">P</span> OUTPUT <span class="keyword">ACC</span>EPT</div></pre></td></tr></table></figure>
</li>
</ul>
<p>将 INPUT 链默认处理策略设置为DROP，前提是已经存在一条可以访问22端口的规则。这里要说明的是，在添加这类拒绝访问的规则之前，一定要想好执行完，会不会把自己关在防火墙外面，不然就傻眼了。像下面这句。</p>
<h3 id="1-2-限制访问规则"><a href="#1-2-限制访问规则" class="headerlink" title="1.2 限制访问规则"></a>1.2 限制访问规则</h3><ul>
<li><p><code>iptables -I INPUT 1 -m state --state RELATED,ESTABLISHED -j ACCEPT</code><br>把这条语句插在input链的最前面（第一条），对状态为ESTABLISHED,RELATED的连接放行。<br>这条规则在某种情况下甚至比下面开放ssh服务都重要：① 如果INPUT连默认为DROP，② INPUT链默认为INPUT，但存在这条规则<code>-A INPUT -j REJECT --reject-with icmp-host-prohibited</code>，上面两种情况下都必须添加<code>--state RELATED,ESTABLISHED</code>为第一条，否则22端口无法通行，把自己锁在防火墙外面了。<br>有了这条规则，可保证只要当前ssh没有关闭，哪怕防火墙忘记开启22端口，也可以继续连接。</p>
</li>
<li><p><code>iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT</code><br>允许所有，不安全，默认。</p>
</li>
<li><p><code>iptables -A INPUT -s 172.29.73.0/24 -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</code><br>限制指定IP范围能SSH，可取</p>
</li>
<li><p><code>iptables -A INPUT -s 10.30.0.0/16 -p tcp -m tcp -m multiport --dports 80,443 -j ACCEPT</code><br>允许一个IP段访问多个端口</p>
</li>
<li><p><code>iptables -A INPUT -s 10.30.26.0/24 -p tcp -m tcp --dport 80 -j DROP</code><br>禁止某IP段访问80端口，将<code>-j DROP</code>改成 <code>-j REJECT --reject-with icmp-host-prohibited</code>作用相同。</p>
</li>
</ul>
<p><code>iptables -A INPUT -s 172.29.73.23 -j ACCEPT</code><br>完全信任某一主机，尽量不使用</p>
<p><code>iptables -I INPUT 2 -i lo -j ACCEPT</code><br>允许loopback。回环接口是一个主机内部发送和接收数据的虚拟设备接口，应该放行所有数据包。指定插入位置为 2 则之前该编号为 2 规则依次后移。</p>
<ul>
<li><code>-A INPUT -p icmp -j ACCEPT</code><br>接受icmp数据包，可以ping。也可以设置只允许某个特定的IP，见后文。</li>
</ul>
<p><code>iptables -A INPUT -j REJECT --reject-with icmp-host-prohibited</code><br>这条规则用在INPUT链默没有DROP的情况，作用与<code>-P DROP</code>相同，当前面所有的规则都没匹配时，自然落到这个 REJECT 上。<br>类似的FORWARD链也可以这么用：<code>iptables -A FORWARD -j REJECT --reject-with icmp-host-prohibited</code>。</p>
<p>当然，更强的规则是将<code>OUPUT</code>链也设置成DROP，这样一来情况就会复杂很多，如就是发送名解析请求，也要添加规则<code>iptables -A OUTPUT -p udp --dport 53 -j ACCEPT</code>。<br>正是因为这样的太过麻烦，所以一般OUTPUT策略默认为ACCEPT。（安全性比较高的系统除外）</p>
<h3 id="1-3-删除规则"><a href="#1-3-删除规则" class="headerlink" title="1.3 删除规则"></a>1.3 删除规则</h3><ul>
<li><p><code>iptables -nL --line-number</code><br>显示每条规则链的编号</p>
</li>
<li><p><code>iptables -D FORWARD 2</code><br>删除FORWARD链的第2条规则，编号由上一条得知。如果删除的是nat表中的链，记得带上<code>-t nat</code></p>
</li>
<li><p><code>iptables -D INPUT -j REJECT --reject-with icmp-host-prohibited</code><br>删除规则的第二种方法，所有选项要与要删除的规则都相同才能删除，否则提示<code>iptables: No chain/target/match by that name.</code></p>
</li>
<li><p>丢弃非法连接</p>
<p>  iptables -A INPUT   -m state –state INVALID -j DROP<br>  iptables -A OUTPUT -m state –state INVALID -j DROP<br>  iptables-A FORWARD -m state –state INVALID -j DROP</p>
</li>
</ul>
<h2 id="2-几种情形"><a href="#2-几种情形" class="headerlink" title="2. 几种情形"></a>2. 几种情形</h2><h3 id="2-1-端口转发"><a href="#2-1-端口转发" class="headerlink" title="2.1 端口转发"></a>2.1 端口转发</h3><p>首先要开启端口转发器必须先修改内核运行参数ip_forward,打开转发:<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># echo 1 &gt; /proc/sys/net/ipv4/ip_forward   //此方法临时生效</span></div><div class="line">或</div><div class="line"><span class="meta"># vi /ect/sysctl.conf                      //此方法永久生效</span></div><div class="line"><span class="meta"># sysctl -p</span></div></pre></td></tr></table></figure></p>
<p><strong>本机端口转发</strong></p>
<pre><code># iptables -t nat -A PREROUTING -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 8080
</code></pre><p>根据 <a href="http://seanlook.com/2014/02/23/iptables-understand/">iptables防火墙原理详解</a> 可知，实际上在数据包进入INPUT链之前，修改了目标地址（端口），于是不难理解在开放端口时需要设置的是放行8080端口，无需考虑80：</p>
<pre><code># iptables -A INPUT -s 172.29.88.0/24 -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT
</code></pre><p>此时外部访问http的80端口便可自动转到8080（浏览器地址栏不会变），而且又具有很高的性能，但如果你通过服务器<strong>本地</strong>主机的curl或firfox浏览器访问<code>http://localhost:80</code>或<code>http://doman.com:80</code>都是不行（假如你有这样的奇葩需求），这是因为本地数据包产生的目标地址不对，你需要额外添加这条 OUTPUT 规则：</p>
<pre><code>iptables -t nat -A OUTPUT -p tcp --dport 80 -j REDIRECT --to-ports 8080
</code></pre><p>下面的规则可以达到同样的效果：</p>
<pre><code>iptables -t nat -A PREROUTING -p tcp -i eth0 -d $YOUR_HOST_IP --dport 80 -j DNAT --to $YOUR_HOST_IP:8080
iptables -t nat -A OUTPUT -p tcp -d $YOUR_HOST_IP --dport 80 -j DNAT --to 127.0.0.1:8080
iptables -t nat -A OUTPUT -p tcp -d 127.0.0.1      --dport 80 -j DNAT --to 127.0.0.1:8080
</code></pre><p><strong>异机端口转发</strong><br>有些情况下企业内部网络隔离比较严格，但有一个跨网段访问的情况，此时只要转发用的中转服务器能够与另外的两个IP(服务器或PC)通讯就可以使用iptables实现转发。（端口转发的还有其他方法，<a href="http://" target="_blank" rel="external">请参考 linux服务器下各种端口转发技巧</a> ）</p>
<p>要实现的是所有访问 192.168.10.100:8000 的请求，转发到 172.29.88.56:80 上，在 192.168.10.100 是哪个添加规则:</p>
<pre><code>iptables -t nat -A PREROUTING -i eth0 -p tcp -d 192.168.10.100 --dport 8000 -j DNAT --to-destination 172.29.88.56:80
iptables -t nat -A POSTROUTING -o eth0 -j SNAT --to-source 192.168.10.100
或者
iptables -t nat -A PREROUTING -d 192.168.10.100 -p tcp --dport 8000 -j DNAT --to 172.29.88.56:80
iptables -t nat -A POSTROUTING -d 172.29.88.56 -p tcp --dport 80 -j SNAT --to-source 192.168.10.100
</code></pre><p>需要注意的是，如果你的FORWARD链默认为DROP，上面所有端口转发都必须建立在FORWARD链允许通行的情况下：</p>
<pre><code>iptables -A FORWARD -d 172.29.88.56 -p tcp --dport 80 -j ACCEPT
iptables -A FORWARD -s 172.29.88.56 -p tcp -j ACCEPT
</code></pre><h3 id="2-2-记录日志"><a href="#2-2-记录日志" class="headerlink" title="2.2 记录日志"></a>2.2 记录日志</h3><p>为22端口的INPUT包增加日志功能，插在input的第1个规则前面，为避免日志信息塞满<code>/var/log/message</code>，用<code>--limit</code>限制：</p>
<pre><code>iptables -R INPUT 1 -p tcp --dport 22 -m limit --limit 3/minute --limit-burst 8 -j LOG
</code></pre><p><code>vi /etc/rsyslog.conf</code> 编辑日志配置文件，添加<code>kern.=notice   /var/log/iptables.log</code>，可以将日志记录到自定义的文件中。</p>
<p><code>service rsyslog restart</code> #重启日志服务</p>
<h3 id="2-3-防止DoS攻击"><a href="#2-3-防止DoS攻击" class="headerlink" title="2.3 防止DoS攻击"></a>2.3 防止DoS攻击</h3><p>SYN洪水是攻击者发送海量的SYN请求到目标服务器上的一种DoS攻击方法，下面的脚本用于预防轻量级的DoS攻击：<br><code>ipt-tcp.sh</code>：<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">iptables -N syn-flood   (如果您的防火墙默认配置有“ :syn-flood - [<span class="number">0</span>:<span class="number">0</span>] ”则不许要该项，因为重复了)</div><div class="line">iptables -A <span class="keyword">INPUT</span> -p tcp --syn -j syn-flood   </div><div class="line">iptables -I syn-flood -p tcp -m <span class="keyword">limit</span> --<span class="keyword">limit</span> <span class="number">2</span>/s --<span class="keyword">limit</span>-burst <span class="number">5</span> -j <span class="keyword">RETURN</span>   </div><div class="line">iptables -A syn-flood -j REJECT   </div><div class="line"><span class="meta"># 防止DOS太多连接进来,可以允许外网网卡每个IP最多<span class="number">15</span>个初始连接,超过的丢弃</span></div><div class="line"><span class="meta"># 需要iptables v1<span class="number">.4</span><span class="number">.19</span>以上版本：iptables -V </span></div><div class="line">iptables -A <span class="keyword">INPUT</span> -p tcp --syn -i eth0 --dport <span class="number">80</span> -m connlimit --connlimit-above <span class="number">20</span> --connlimit-mask <span class="number">24</span> -j DROP   </div><div class="line"></div><div class="line"><span class="meta">#用Iptables抵御DDOS (参数与上相同)   </span></div><div class="line">iptables -A <span class="keyword">INPUT</span> -p tcp --syn -m <span class="keyword">limit</span> --<span class="keyword">limit</span> <span class="number">5</span>/s --<span class="keyword">limit</span>-burst <span class="number">10</span> -j ACCEPT  </div><div class="line">iptables -A FORWARD -p tcp --syn -m <span class="keyword">limit</span> --<span class="keyword">limit</span> <span class="number">1</span>/s -j ACCEPT </div><div class="line"></div><div class="line">iptables -A FORWARD -p icmp -m <span class="keyword">limit</span> --<span class="keyword">limit</span> <span class="number">2</span>/s --<span class="keyword">limit</span>-burst <span class="number">10</span> -j ACCEPT</div><div class="line">iptables -A <span class="keyword">INPUT</span> -p icmp --icmp-type <span class="number">0</span> -s ! <span class="number">172.29</span><span class="number">.73</span><span class="number">.0</span>/<span class="number">24</span> -j DROP</div></pre></td></tr></table></figure></p>
<p>请参考：<a href="http://www.cyberciti.biz/tips/linux-iptables-examples.html" target="_blank" rel="external">Linux: 20 Iptables Examples For New SysAdmins</a>、<a href="http://www.cyberciti.biz/faq/iptables-connection-limits-howto/" target="_blank" rel="external">Iptables Limits Connections Per IP</a>、<a href="http://blog.csdn.net/zqtsx/article/details/9405515" target="_blank" rel="external">iptables预防DDOS和CC攻击配置</a></p>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://wiki.centos.org/zh/HowTos/Network/IPTables" target="_blank" rel="external">IPTables wiki</a></li>
<li><a href="http://www.ha97.com/4095.html" target="_blank" rel="external">iptables/netfilter详解中文手册</a></li>
<li><a href="http://www.ha97.com/3928.html" target="_blank" rel="external">Linux的iptables常用配置范例</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iptables防火墙原理详解]]></title>
      <url>http://seanlook.com/2014/02/23/iptables-understand/</url>
      <content type="html"><![CDATA[<h1 id="1-netfilter与iptables"><a href="#1-netfilter与iptables" class="headerlink" title="1. netfilter与iptables"></a>1. netfilter与iptables</h1><p>Netfilter是由Rusty Russell提出的Linux 2.4内核防火墙框架，该框架既简洁又灵活，可实现安全策略应用中的许多功能，如数据包过滤、数据包处理、地址伪装、透明代理、动态网络地址转换(Network Address Translation，NAT)，以及基于用户及媒体访问控制(Media Access Control，MAC)地址的过滤和基于状态的过滤、包速率限制等。Iptables/Netfilter的这些规则可以通过灵活组合，形成非常多的功能、涵盖各个方面，这一切都得益于它的优秀设计思想。</p>
<p>Netfilter是Linux操作系统核心层内部的一个数据包处理模块，它具有如下功能：</p>
<ul>
<li>网络地址转换(Network Address Translate)</li>
<li>数据包内容修改</li>
<li>以及数据包过滤的防火墙功能</li>
</ul>
<p>Netfilter 平台中制定了数据包的五个挂载点（Hook Point，我们可以理解为回调函数点，数据包到达这些位置的时候会主动调用我们的函数，使我们有机会能在数据包路由的时候改变它们的方向、内容），这5个挂载点分别是<code>PRE_ROUTING</code>、<code>INPUT</code>、<code>OUTPUT</code>、<code>FORWARD</code>、<code>POST_ROUTING</code>。</p>
<p>Netfilter 所设置的规则是存放在内核内存中的，而 iptables 是一个应用层的应用程序，它通过 Netfilter 放出的接口来对存放在内核内存中的 XXtables（Netfilter的配置表）进行修改。这个XXtables由表<code>tables</code>、链<code>chains</code>、规则<code>rules</code>组成，iptables在应用层负责修改这个规则文件。类似的应用程序还有 firewalld 。</p>
<p><img src="http://sean-images.qiniudn.com/iptables-netfilter.png" alt="iptables-netfilter"></p>
<a id="more"></a>
<h2 id="1-1-filter、nat、mangle等规则表"><a href="#1-1-filter、nat、mangle等规则表" class="headerlink" title="1.1 filter、nat、mangle等规则表"></a>1.1 filter、nat、mangle等规则表</h2><p><strong>filter表</strong></p>
<p>主要用于对数据包进行过滤，根据具体的规则决定是否放行该数据包（如DROP、ACCEPT、REJECT、LOG）。filter 表对应的内核模块为iptable_filter，包含三个规则链：</p>
<ul>
<li><code>INPUT</code>链：INPUT针对那些目的地是本地的包</li>
<li><code>FORWARD</code>链：FORWARD过滤所有不是本地产生的并且目的地不是本地(即本机只是负责转发)的包</li>
<li><code>OUTPUT</code>链：OUTPUT是用来过滤所有本地生成的包</li>
</ul>
<p><strong>nat表</strong></p>
<p>主要用于修改数据包的IP地址、端口号等信息（网络地址转换，如SNAT、DNAT、MASQUERADE、REDIRECT）。属于一个流的包(因为包<br>的大小限制导致数据可能会被分成多个数据包)只会经过这个表一次。如果第一个包被允许做NAT或Masqueraded，那么余下的包都会自动地被做相同的操作，也就是说，余下的包不会再通过这个表。表对应的内核模块为 iptable_nat，包含三个链：</p>
<ul>
<li><code>PREROUTING</code>链：作用是在包刚刚到达防火墙时改变它的目的地址</li>
<li><code>OUTPUT</code>链：改变本地产生的包的目的地址</li>
<li><code>POSTROUTING</code>链：在包就要离开防火墙之前改变其源地址</li>
</ul>
<p><strong>mangle表</strong></p>
<p>主要用于修改数据包的TOS（Type Of Service，服务类型）、TTL（Time To Live，生存周期）指以及为数据包设置Mark标记，以实现Qos(Quality Of Service，服务质量)调整以及策略路由等应用，由于需要相应的路由设备支持，因此应用并不广泛。包含五个规则链——PREROUTING，POSTROUTING，INPUT，OUTPUT，FORWARD。</p>
<p><strong>raw表</strong></p>
<p>是自1.2.9以后版本的iptables新增的表，主要用于决定数据包是否被状态跟踪机制处理。在匹配数据包时，raw表的规则要优先于其他表。包含两条规则链——OUTPUT、PREROUTING</p>
<p>iptables中数据包和4种被跟踪连接的4种不同状态：</p>
<ul>
<li><code>NEW</code>：该包想要开始一个连接（重新连接或将连接重定向）</li>
<li><code>RELATED</code>：该包是属于某个已经建立的连接所建立的新连接。例如：FTP的数据传输连接就是控制连接所 RELATED出来的连接。<code>--icmp-type  0</code> ( ping 应答) 就是<code>--icmp-type 8</code> (ping 请求)所RELATED出来的。</li>
<li><code>ESTABLISHED</code> ：只要发送并接到应答，一个数据连接从NEW变为ESTABLISHED,而且该状态会继续匹配这个连接的后续数据包。</li>
<li><code>INVALID</code>：数据包不能被识别属于哪个连接或没有任何状态比如内存溢出，收到不知属于哪个连接的ICMP错误信息，一般应该DROP这个状态的任何数据。</li>
</ul>
<h2 id="1-2-INPUT、FORWARD等规则链和规则"><a href="#1-2-INPUT、FORWARD等规则链和规则" class="headerlink" title="1.2 INPUT、FORWARD等规则链和规则"></a>1.2 INPUT、FORWARD等规则链和规则</h2><p>在处理各种数据包时，根据防火墙规则的不同介入时机，iptables供涉及5种默认规则链，从应用时间点的角度理解这些链：</p>
<ul>
<li><code>INPUT</code>链：当接收到防火墙本机地址的数据包（入站）时，应用此链中的规则。</li>
<li><code>OUTPUT</code>链：当防火墙本机向外发送数据包（出站）时，应用此链中的规则。</li>
<li><code>FORWARD</code>链：当接收到需要通过防火墙发送给其他地址的数据包（转发）时，应用此链中的规则。</li>
<li><code>PREROUTING</code>链：在对数据包作路由选择之前，应用此链中的规则，如DNAT。</li>
<li><code>POSTROUTING</code>链：在对数据包作路由选择之后，应用此链中的规则，如SNAT。</li>
</ul>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">--&gt;PREROUTING--&gt;[ROUTE]--&gt;FORWARD--&gt;POSTROUTING--&gt;</div><div class="line">     mangle        |       <span class="type">mangle</span>        ^ mangle</div><div class="line">      nat          |       <span class="type">filter</span>        |  <span class="type">nat</span></div><div class="line">                   |                     <span class="type">|</span></div><div class="line">                   |                     |</div><div class="line">                   v                     |</div><div class="line">                 <span class="type">INPUT</span>                 OUTPUT</div><div class="line">                   | <span class="type">mangle</span>              ^ mangle</div><div class="line">                   | <span class="type">filter</span>              |  <span class="type">nat</span></div><div class="line">                   v ------&gt;local-------&gt;| <span class="type">filter</span></div></pre></td></tr></table></figure>
<p>其中中INPUT、OUTPUT链更多的应用在“主机防火墙”中，即主要针对服务器本机进出数据的安全控制；而FORWARD、PREROUTING、POSTROUTING链更多的应用在“网络防火墙”中，特别是防火墙服务器作为网关使用时的情况。</p>
<p><strong>防火墙处理数据包的方式（规则）：</strong></p>
<ul>
<li><code>ACCEPT</code>：允许数据包通过</li>
<li><code>DROP</code>：直接丢弃数据包，不给任何回应信息</li>
<li><p><code>REJECT</code>：拒绝数据包通过，必要时会给数据发送端一个响应的信息。</p>
</li>
<li><p><code>SNAT</code>：源地址转换。在进入路由层面的route之后，出本地的网络栈之前，改写源地址，目标地址不变，并在本机建立NAT表项，当数据返回时，根据NAT表将目的地址数据改写为数据发送出去时候的源地址，并发送给主机。解决内网用户用同一个公网地址上网的问题。<br><code>MASQUERADE</code>，是SNAT的一种特殊形式，适用于像adsl这种临时会变的ip上</p>
</li>
<li><p><code>DNAT</code>:目标地址转换。和SNAT相反，IP包经过route之前，重新修改目标地址，源地址不变，在本机建立NAT表项，当数据返回时，根据NAT表将源地址修改为数据发送过来时的目标地址，并发给远程主机。可以隐藏后端服务器的真实地址。（感谢网友提出之前这个地方与SNAT写反了）<br><code>REDIRECT</code>：是DNAT的一种特殊形式，将网络包转发到本地host上（不管IP头部指定的目标地址是啥），方便在本机做端口转发。</p>
</li>
<li><p><code>LOG</code>：在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则</p>
</li>
</ul>
<p>除去最后一个<code>LOG</code>，前3条规则匹配数据包后，该数据包不会再往下继续匹配了，所以编写的规则顺序极其关键。</p>
<h1 id="2-Linux数据包路由原理"><a href="#2-Linux数据包路由原理" class="headerlink" title="2.  Linux数据包路由原理"></a>2.  Linux数据包路由原理</h1><p>我们已经知道了Netfilter和Iptables的架构和作用，并且学习了控制Netfilter行为的Xtables表的结构，那么这个Xtables表是怎么在内核协议栈的数据包路由中起作用的呢？</p>
<p>网口数据包由底层的网卡NIC接收，通过数据链路层的解包之后(去除数据链路帧头)，就进入了TCP/IP协议栈(本质就是一个处理网络数据包的内核驱动)和Netfilter混合的数据包处理流程中了。数据包的接收、处理、转发流程构成一个有限状态向量机，经过一些列的内核处理函数、以及Netfilter Hook点，最后被转发、或者本次上层的应用程序消化掉。是时候看这张图了：<br><img src="http://sean-images.qiniudn.com/iptables-routing.jpg" alt="iptables-routing"></p>
<p>从上图中，我们可以总结出以下规律：</p>
<ul>
<li>当一个数据包进入网卡时，数据包首先进入PREROUTING链，在PREROUTING链中我们有机会修改数据包的DestIP(目的IP)，然后内核的”路由模块”根据”数据包目的IP”以及”内核中的路由表”判断是否需要转送出去(注意，这个时候数据包的DestIP有可能已经被我们修改过了)</li>
<li>如果数据包就是进入本机的(即数据包的目的IP是本机的网口IP)，数据包就会沿着图向下移动，到达INPUT链。数据包到达INPUT链后，任何进程都会-收到它</li>
<li>本机上运行的程序也可以发送数据包，这些数据包经过OUTPUT链，然后到达POSTROTING链输出(注意，这个时候数据包的SrcIP有可能已经被我们修改过了)</li>
<li>如果数据包是要转发出去的(即目的IP地址不再当前子网中)，且内核允许转发，数据包就会向右移动，经过FORWARD链，然后到达POSTROUTING链输出(选择对应子网的网口发送出去)</li>
</ul>
<p>我们在写Iptables规则的时候，要时刻牢记这张路由次序图，根据所在Hook点的不同，灵活配置规则。</p>
<h1 id="3-iptables编写规则"><a href="#3-iptables编写规则" class="headerlink" title="3. iptables编写规则"></a>3. iptables编写规则</h1><p>命令格式：<br><img src="http://sean-images.qiniudn.com/iptables-cli.png" alt="iptables-cli"></p>
<ul>
<li><code>[-t 表名]</code>：该规则所操作的哪个表，可以使用filter、nat等，如果没有指定则默认为filter</li>
<li><code>-A</code>：新增一条规则，到该规则链列表的最后一行</li>
<li><code>-I</code>：插入一条规则，原本该位置上的规则会往后顺序移动，没有指定编号则为1</li>
<li><code>-D</code>：从规则链中删除一条规则，要么输入完整的规则，或者指定规则编号加以删除</li>
<li><code>-R</code>：替换某条规则，规则替换不会改变顺序，而且必须指定编号。</li>
<li><code>-P</code>：设置某条规则链的默认动作</li>
<li><code>-nL</code>：<code>-L</code>、<code>-n</code>，查看当前运行的防火墙规则列表</li>
<li><code>chain名</code>：指定规则表的哪个链，如INPUT、OUPUT、FORWARD、PREROUTING等</li>
<li><code>[规则编号]</code>：插入、删除、替换规则时用，<code>--line-numbers</code>显示号码</li>
<li><code>[-i|o 网卡名称]</code>：i是指定数据包从哪块网卡进入，o是指定数据包从哪块网卡输出</li>
<li><code>[-p 协议类型]</code>：可以指定规则应用的协议，包含tcp、udp和icmp等</li>
<li><code>[-s 源IP地址]</code>：源主机的IP地址或子网地址</li>
<li><code>[--sport 源端口号]</code>：数据包的IP的源端口号</li>
<li><code>[-d目标IP地址]</code>：目标主机的IP地址或子网地址</li>
<li><code>[--dport目标端口号]</code>：数据包的IP的目标端口号</li>
<li><code>-m</code>：extend matches，这个选项用于提供更多的匹配参数，如：<ul>
<li>-m state –state ESTABLISHED,RELATED</li>
<li>-m tcp –dport 22</li>
<li>-m multiport –dports 80,8080</li>
<li>-m icmp –icmp-type 8</li>
</ul>
</li>
<li><code>&lt;-j 动作&gt;</code>：处理数据包的动作，包括ACCEPT、DROP、REJECT等</li>
</ul>
<p>具体实例请参考 <a href="http://seanlook.com/2014/02/26/iptables-example/">iptables常用实例备查</a>。</p>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://zh.wikipedia.org/wiki/Iptables" target="_blank" rel="external">wikipedia iptables</a> (里面有张原理图片值得收藏)</li>
<li>2小时玩转iptables企业版.ppt  (网上可下)</li>
<li><a href="http://www.netfilter.org/documentation/index.html" target="_blank" rel="external">netfilter/iptables documentation</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux进程后台运行的几种方式]]></title>
      <url>http://seanlook.com/2014/02/20/linux-process-running-background-screen/</url>
      <content type="html"><![CDATA[<h2 id="Ctrl-z-bg-nohup-setsid-amp"><a href="#Ctrl-z-bg-nohup-setsid-amp" class="headerlink" title="Ctrl+z/bg/nohup/setsid/&amp;"></a>Ctrl+z/bg/nohup/setsid/&amp;</h2><p>在Linux中，如果要让进程在后台运行，一般情况下，我们在命令后面加上&amp;即可，实际上，这样是将命令放入到一个作业队列中了：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># ./rsync.sh &amp;</span></div><div class="line"><span class="meta"># jobs</span></div></pre></td></tr></table></figure></p>
<p>对于已经在前台执行的命令，也可以重新放到后台执行，首先按ctrl+z暂停已经运行的进程，然后使用bg命令将停止的作业放到后台运行：<code>bg %1</code>，放回前台运行：<code>%1</code>。</p>
<p>但是如上方到后台执行的进程，其父进程还是当前终端shell的进程，而一旦父进程退出，则会发送hangup信号给所有子进程，子进程收到hangup以后也会退出。如果我们要在退出shell的时候继续运行进程，则需要使用<code>nohup</code>忽略hangup信号，或者<code>setsid</code>将将父进程设为init进程(进程号为1)：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># nohup ./rsync.sh &amp;</span></div><div class="line"></div><div class="line"><span class="meta"># setsid ./rsync.sh &amp;</span></div><div class="line">或</div><div class="line"><span class="meta"># (./rsync.sh &amp;)        ////在一个subshell中执行</span></div><div class="line"><span class="meta"># ps -ef|grep rsync</span></div></pre></td></tr></table></figure></p>
<p>nohup 的用途就是让提交的命令忽略 hangup 信号，标准输出和标准错误缺省会被重定向到 nohup.out 文件中。。一般我们可在结尾加上”&amp;”来将命令同时放入后台运行，也可用” &gt; log.out 2&gt;&amp;1”来更改缺省的重定向文件名。</p>
<p>上面的试验演示了使用nohup/setsid加上&amp;使进程在后台运行，同时不受当前shell退出的影响。那么对于已经在后台运行的进程，该怎么办呢？可以使用<code>disown</code>命令：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># jobs</span></div><div class="line"><span class="meta"># disown -h %1</span></div><div class="line"><span class="meta"># ps -ef|grep rsync</span></div></pre></td></tr></table></figure></p>
<p>效果与setid相同，但是disown后无法通过<code>jobs</code>命令查看了。</p>
<h2 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h2><p>还有一种更加强大的方式是使用screen，首先创建一个断开模式的虚拟终端，然后用<code>-r</code>选项重新连接这个虚拟终端，在其中执行的任何命令，都能达到nohup的效果，这在有多个命令需要在后台连续执行的时候比较方便。</p>
<a id="more"></a>
<p>GNU Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换，可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># yum install screen -y</span></div></pre></td></tr></table></figure></p>
<p>常用screen参数：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># screen -S docker-d    新建一个名叫docker-d的session，并马上进入</span></div><div class="line"><span class="meta"># screen -dmS docker-d  新建一个名叫docker-d的session，但暂不进入，可用于系统启动脚本里</span></div><div class="line"><span class="meta"># screen -ls            列出当前所有session</span></div><div class="line"><span class="meta"># screen -r docker-d    恢复到zhouxiao这个session，前提是已经是断开状态（-d可以远程断开会话）</span></div><div class="line"><span class="meta"># screen -x docker-d    连接到离线模式的会话（多窗口同步演示）</span></div><div class="line"></div><div class="line"><span class="meta"># screen ./rsync.sh     screen创建一个执行脚本的单窗口会话，可以attach进程ID</span></div><div class="line"><span class="meta"># screen -wipe          检查目前所有的screen作业，并删除已经无法使用的screen作业</span></div></pre></td></tr></table></figure></p>
<p>正常情况下，当你退出一个窗口中最后一个程序（通常是bash）后，这个窗口就关闭了。另一个关闭窗口的方法是使用C-a k，这个快捷键杀死当前的窗口，同时也将杀死这个窗口中正在运行的进程。</p>
<p>在每个screen session 下，所有命令都以 ctrl+a(C-a) 开始。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">C-<span class="selector-tag">a</span> w    显示所有窗口列表</div><div class="line">C-<span class="selector-tag">a</span> k    这个快捷键杀死当前的窗口，同时也将杀死这个窗口中正在运行的进程。 </div><div class="line">C-<span class="selector-tag">a</span> d    detach，暂时离开当前session</div></pre></td></tr></table></figure></p>
<p>需要了解的是，一个用户创建的screen，其他用户（甚至root）通过<code>screen -ls</code>是看不见的。另外，<code>Ctrl+a</code>在bash下是用来回到行开头，不幸与上面的组合快捷键冲突。</p>
<p>上面只是基本也是最常用的用法，更多请参考<code>man screen</code>或<a href="http://www.cnblogs.com/mchina/archive/2013/01/30/2880680.html" target="_blank" rel="external">linux screen 命令详解</a>。</p>
]]></content>
    </entry>
    
  
  
</search>
